; ModuleID = 'fused_nn_conv2d_19'
source_filename = "fused_nn_conv2d_19"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { i8*, %1, i32, %2, i64*, i64*, i64 }
%1 = type { i32, i32 }
%2 = type { i8, i8, i16 }

@__tvm_main__ = weak local_unnamed_addr constant [19 x i8] c"fused_nn_conv2d_19\00", align 1

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_19(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_19_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_19_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [65536 x <32 x float>], align 16
  %5 = alloca [173056 x float], align 16
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  br label %for_begin4.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %entry
  %indvar33 = phi i64 [ 0, %entry ], [ %indvar.next34, %for_begin4.preheader ]
  %6 = mul nuw nsw i64 %indvar33, 13
  %scevgep = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %6
  %scevgep35 = bitcast float* %scevgep to i8*
  %7 = mul nuw nsw i64 %indvar33, 784
  %scevgep36 = getelementptr i8, i8* %0, i64 %7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35, i8* align 4 %scevgep36, i64 52, i1 false)
  %indvar.next34 = add nuw nsw i64 %indvar33, 1
  %exitcond37 = icmp eq i64 %indvar.next34, 1024
  br i1 %exitcond37, label %for_begin4.preheader.1, label %for_begin4.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_end3.12
  %indvars.iv27 = phi i64 [ 0, %for_end3.12 ], [ %indvars.iv.next28, %for_end12 ]
  %8 = shl nsw i64 %indvars.iv27, 15
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %9 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %10 = bitcast float* %9 to <32 x float>*
  %11 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %12 = bitcast float* %11 to <32 x float>*
  %13 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %14 = bitcast float* %13 to <32 x float>*
  %15 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %16 = bitcast float* %15 to <32 x float>*
  %17 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %18 = bitcast float* %17 to <32 x float>*
  %19 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %20 = bitcast float* %19 to <32 x float>*
  %21 = bitcast i8* %2 to float*
  %22 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body14

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv24 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next25, %for_body11 ]
  %23 = shl i64 %indvars.iv24, 5
  %24 = add nuw nsw i64 %23, %8
  %25 = add nuw nsw i64 %indvars.iv24, %8
  %26 = add nuw nsw i64 %25, 1024
  %27 = add nuw nsw i64 %25, 2048
  %28 = add nuw nsw i64 %25, 3072
  %29 = add nuw nsw i64 %25, 4096
  %30 = add nuw nsw i64 %25, 5120
  %31 = add nuw nsw i64 %25, 6144
  %32 = add nuw nsw i64 %25, 7168
  %33 = add nuw nsw i64 %25, 8192
  %34 = add nuw nsw i64 %25, 9216
  %35 = add nuw nsw i64 %25, 10240
  %36 = add nuw nsw i64 %25, 11264
  %37 = add nuw nsw i64 %25, 12288
  %38 = add nuw nsw i64 %25, 13312
  %39 = add nuw nsw i64 %25, 14336
  %40 = add nuw nsw i64 %25, 15360
  %41 = add nuw nsw i64 %25, 16384
  %42 = add nuw nsw i64 %25, 17408
  %43 = add nuw nsw i64 %25, 18432
  %44 = add nuw nsw i64 %25, 19456
  %45 = add nuw nsw i64 %25, 20480
  %46 = add nuw nsw i64 %25, 21504
  %47 = add nuw nsw i64 %25, 22528
  %48 = add nuw nsw i64 %25, 23552
  %49 = add nuw nsw i64 %25, 24576
  %50 = add nuw nsw i64 %25, 25600
  %51 = add nuw nsw i64 %25, 26624
  %52 = add nuw nsw i64 %25, 27648
  %53 = add nuw nsw i64 %25, 28672
  %54 = add nuw nsw i64 %25, 29696
  %55 = add nuw nsw i64 %25, 30720
  %56 = add nuw nsw i64 %25, 31744
  %57 = getelementptr inbounds float, float* %370, i64 %25
  %58 = load float, float* %57, align 4, !tbaa !6
  %59 = insertelement <32 x float> undef, float %58, i32 0
  %60 = getelementptr inbounds float, float* %370, i64 %26
  %61 = load float, float* %60, align 4, !tbaa !6
  %62 = insertelement <32 x float> %59, float %61, i32 1
  %63 = getelementptr inbounds float, float* %370, i64 %27
  %64 = load float, float* %63, align 4, !tbaa !6
  %65 = insertelement <32 x float> %62, float %64, i32 2
  %66 = getelementptr inbounds float, float* %370, i64 %28
  %67 = load float, float* %66, align 4, !tbaa !6
  %68 = insertelement <32 x float> %65, float %67, i32 3
  %69 = getelementptr inbounds float, float* %370, i64 %29
  %70 = load float, float* %69, align 4, !tbaa !6
  %71 = insertelement <32 x float> %68, float %70, i32 4
  %72 = getelementptr inbounds float, float* %370, i64 %30
  %73 = load float, float* %72, align 4, !tbaa !6
  %74 = insertelement <32 x float> %71, float %73, i32 5
  %75 = getelementptr inbounds float, float* %370, i64 %31
  %76 = load float, float* %75, align 4, !tbaa !6
  %77 = insertelement <32 x float> %74, float %76, i32 6
  %78 = getelementptr inbounds float, float* %370, i64 %32
  %79 = load float, float* %78, align 4, !tbaa !6
  %80 = insertelement <32 x float> %77, float %79, i32 7
  %81 = getelementptr inbounds float, float* %370, i64 %33
  %82 = load float, float* %81, align 4, !tbaa !6
  %83 = insertelement <32 x float> %80, float %82, i32 8
  %84 = getelementptr inbounds float, float* %370, i64 %34
  %85 = load float, float* %84, align 4, !tbaa !6
  %86 = insertelement <32 x float> %83, float %85, i32 9
  %87 = getelementptr inbounds float, float* %370, i64 %35
  %88 = load float, float* %87, align 4, !tbaa !6
  %89 = insertelement <32 x float> %86, float %88, i32 10
  %90 = getelementptr inbounds float, float* %370, i64 %36
  %91 = load float, float* %90, align 4, !tbaa !6
  %92 = insertelement <32 x float> %89, float %91, i32 11
  %93 = getelementptr inbounds float, float* %370, i64 %37
  %94 = load float, float* %93, align 4, !tbaa !6
  %95 = insertelement <32 x float> %92, float %94, i32 12
  %96 = getelementptr inbounds float, float* %370, i64 %38
  %97 = load float, float* %96, align 4, !tbaa !6
  %98 = insertelement <32 x float> %95, float %97, i32 13
  %99 = getelementptr inbounds float, float* %370, i64 %39
  %100 = load float, float* %99, align 4, !tbaa !6
  %101 = insertelement <32 x float> %98, float %100, i32 14
  %102 = getelementptr inbounds float, float* %370, i64 %40
  %103 = load float, float* %102, align 4, !tbaa !6
  %104 = insertelement <32 x float> %101, float %103, i32 15
  %105 = getelementptr inbounds float, float* %370, i64 %41
  %106 = load float, float* %105, align 4, !tbaa !6
  %107 = insertelement <32 x float> %104, float %106, i32 16
  %108 = getelementptr inbounds float, float* %370, i64 %42
  %109 = load float, float* %108, align 4, !tbaa !6
  %110 = insertelement <32 x float> %107, float %109, i32 17
  %111 = getelementptr inbounds float, float* %370, i64 %43
  %112 = load float, float* %111, align 4, !tbaa !6
  %113 = insertelement <32 x float> %110, float %112, i32 18
  %114 = getelementptr inbounds float, float* %370, i64 %44
  %115 = load float, float* %114, align 4, !tbaa !6
  %116 = insertelement <32 x float> %113, float %115, i32 19
  %117 = getelementptr inbounds float, float* %370, i64 %45
  %118 = load float, float* %117, align 4, !tbaa !6
  %119 = insertelement <32 x float> %116, float %118, i32 20
  %120 = getelementptr inbounds float, float* %370, i64 %46
  %121 = load float, float* %120, align 4, !tbaa !6
  %122 = insertelement <32 x float> %119, float %121, i32 21
  %123 = getelementptr inbounds float, float* %370, i64 %47
  %124 = load float, float* %123, align 4, !tbaa !6
  %125 = insertelement <32 x float> %122, float %124, i32 22
  %126 = getelementptr inbounds float, float* %370, i64 %48
  %127 = load float, float* %126, align 4, !tbaa !6
  %128 = insertelement <32 x float> %125, float %127, i32 23
  %129 = getelementptr inbounds float, float* %370, i64 %49
  %130 = load float, float* %129, align 4, !tbaa !6
  %131 = insertelement <32 x float> %128, float %130, i32 24
  %132 = getelementptr inbounds float, float* %370, i64 %50
  %133 = load float, float* %132, align 4, !tbaa !6
  %134 = insertelement <32 x float> %131, float %133, i32 25
  %135 = getelementptr inbounds float, float* %370, i64 %51
  %136 = load float, float* %135, align 4, !tbaa !6
  %137 = insertelement <32 x float> %134, float %136, i32 26
  %138 = getelementptr inbounds float, float* %370, i64 %52
  %139 = load float, float* %138, align 4, !tbaa !6
  %140 = insertelement <32 x float> %137, float %139, i32 27
  %141 = getelementptr inbounds float, float* %370, i64 %53
  %142 = load float, float* %141, align 4, !tbaa !6
  %143 = insertelement <32 x float> %140, float %142, i32 28
  %144 = getelementptr inbounds float, float* %370, i64 %54
  %145 = load float, float* %144, align 4, !tbaa !6
  %146 = insertelement <32 x float> %143, float %145, i32 29
  %147 = getelementptr inbounds float, float* %370, i64 %55
  %148 = load float, float* %147, align 4, !tbaa !6
  %149 = insertelement <32 x float> %146, float %148, i32 30
  %150 = getelementptr inbounds float, float* %370, i64 %56
  %151 = load float, float* %150, align 4, !tbaa !6
  %152 = insertelement <32 x float> %149, float %151, i32 31
  %153 = getelementptr inbounds [65536 x <32 x float>], [65536 x <32 x float>]* %4, i64 0, i64 0, i64 %24
  %154 = bitcast float* %153 to <32 x float>*
  store <32 x float> %152, <32 x float>* %154, align 16, !tbaa !10
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond26 = icmp eq i64 %indvars.iv.next25, 1024
  br i1 %exitcond26, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 64
  br i1 %exitcond29, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_end21, %for_begin13.preheader
  %155 = phi i32 [ 0, %for_begin13.preheader ], [ %321, %for_end21 ]
  %156 = urem i32 %155, 7
  %157 = mul nuw nsw i32 %156, 26624
  %158 = udiv i32 %155, 7
  %159 = shl i32 %158, 15
  %160 = zext i32 %157 to i64
  %161 = sext i32 %159 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %22, i8 0, i64 896, i1 false)
  br label %for_body17

for_end15:                                        ; preds = %for_end21
  ret void

for_begin19.preheader:                            ; preds = %for_body17
  store <32 x float> %184, <32 x float>* %.sub, align 128, !tbaa !13
  store <32 x float> %190, <32 x float>* %10, align 128, !tbaa !13
  store <32 x float> %196, <32 x float>* %12, align 128, !tbaa !13
  store <32 x float> %202, <32 x float>* %14, align 128, !tbaa !13
  store <32 x float> %208, <32 x float>* %16, align 128, !tbaa !13
  store <32 x float> %214, <32 x float>* %18, align 128, !tbaa !13
  store <32 x float> %220, <32 x float>* %20, align 128, !tbaa !13
  %162 = mul nuw nsw i32 %156, 7
  %163 = mul nsw i32 %158, 1568
  %164 = add nuw nsw i32 %163, %162
  %165 = zext i32 %164 to i64
  br label %for_body20

for_body17:                                       ; preds = %for_body17, %for_body14
  %indvars.iv = phi i64 [ 0, %for_body14 ], [ %indvars.iv.next, %for_body17 ]
  %166 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %220, %for_body17 ]
  %167 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %214, %for_body17 ]
  %168 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %208, %for_body17 ]
  %169 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %202, %for_body17 ]
  %170 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %196, %for_body17 ]
  %171 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %190, %for_body17 ]
  %172 = phi <32 x float> [ zeroinitializer, %for_body14 ], [ %184, %for_body17 ]
  %173 = mul nuw nsw i64 %indvars.iv, 13
  %174 = add nuw nsw i64 %173, %160
  %175 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !22
  %177 = insertelement <32 x float> undef, float %176, i32 0
  %178 = shufflevector <32 x float> %177, <32 x float> undef, <32 x i32> zeroinitializer
  %179 = shl i64 %indvars.iv, 5
  %180 = add nuw nsw i64 %179, %161
  %181 = getelementptr inbounds [65536 x <32 x float>], [65536 x <32 x float>]* %4, i64 0, i64 0, i64 %180
  %182 = bitcast float* %181 to <32 x float>*
  %183 = load <32 x float>, <32 x float>* %182, align 16, !tbaa !10
  %184 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %178, <32 x float> %183, <32 x float> %172)
  %185 = add nuw nsw i64 %174, 2
  %186 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !22
  %188 = insertelement <32 x float> undef, float %187, i32 0
  %189 = shufflevector <32 x float> %188, <32 x float> undef, <32 x i32> zeroinitializer
  %190 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %189, <32 x float> %183, <32 x float> %171)
  %191 = add nuw nsw i64 %174, 4
  %192 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %191
  %193 = load float, float* %192, align 4, !tbaa !22
  %194 = insertelement <32 x float> undef, float %193, i32 0
  %195 = shufflevector <32 x float> %194, <32 x float> undef, <32 x i32> zeroinitializer
  %196 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %195, <32 x float> %183, <32 x float> %170)
  %197 = add nuw nsw i64 %174, 6
  %198 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %197
  %199 = load float, float* %198, align 4, !tbaa !22
  %200 = insertelement <32 x float> undef, float %199, i32 0
  %201 = shufflevector <32 x float> %200, <32 x float> undef, <32 x i32> zeroinitializer
  %202 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %201, <32 x float> %183, <32 x float> %169)
  %203 = add nuw nsw i64 %174, 8
  %204 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %203
  %205 = load float, float* %204, align 4, !tbaa !22
  %206 = insertelement <32 x float> undef, float %205, i32 0
  %207 = shufflevector <32 x float> %206, <32 x float> undef, <32 x i32> zeroinitializer
  %208 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %207, <32 x float> %183, <32 x float> %168)
  %209 = add nuw nsw i64 %174, 10
  %210 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %209
  %211 = load float, float* %210, align 4, !tbaa !22
  %212 = insertelement <32 x float> undef, float %211, i32 0
  %213 = shufflevector <32 x float> %212, <32 x float> undef, <32 x i32> zeroinitializer
  %214 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %213, <32 x float> %183, <32 x float> %167)
  %215 = add nuw nsw i64 %174, 12
  %216 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !22
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = shufflevector <32 x float> %218, <32 x float> undef, <32 x i32> zeroinitializer
  %220 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %219, <32 x float> %183, <32 x float> %166)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for_begin19.preheader, label %for_body17, !prof !5

for_body20:                                       ; preds = %for_body20, %for_begin19.preheader
  %indvars.iv20 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next21, %for_body20 ]
  %221 = add nuw nsw i64 %indvars.iv20, %165
  %222 = add nuw nsw i64 %221, 49
  %223 = add nuw nsw i64 %221, 98
  %224 = add nuw nsw i64 %221, 147
  %225 = add nuw nsw i64 %221, 196
  %226 = add nuw nsw i64 %221, 245
  %227 = add nuw nsw i64 %221, 294
  %228 = add nuw nsw i64 %221, 343
  %229 = add nuw nsw i64 %221, 392
  %230 = add nuw nsw i64 %221, 441
  %231 = add nuw nsw i64 %221, 490
  %232 = add nuw nsw i64 %221, 539
  %233 = add nuw nsw i64 %221, 588
  %234 = add nuw nsw i64 %221, 637
  %235 = add nuw nsw i64 %221, 686
  %236 = add nuw nsw i64 %221, 735
  %237 = add nuw nsw i64 %221, 784
  %238 = add nuw nsw i64 %221, 833
  %239 = add nuw nsw i64 %221, 882
  %240 = add nuw nsw i64 %221, 931
  %241 = add nuw nsw i64 %221, 980
  %242 = add nuw nsw i64 %221, 1029
  %243 = add nuw nsw i64 %221, 1078
  %244 = add nuw nsw i64 %221, 1127
  %245 = add nuw nsw i64 %221, 1176
  %246 = add nuw nsw i64 %221, 1225
  %247 = add nuw nsw i64 %221, 1274
  %248 = add nuw nsw i64 %221, 1323
  %249 = add nuw nsw i64 %221, 1372
  %250 = add nuw nsw i64 %221, 1421
  %251 = add nuw nsw i64 %221, 1470
  %252 = add nuw nsw i64 %221, 1519
  %253 = shl nsw i64 %indvars.iv20, 5
  %254 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 %253
  %255 = bitcast float* %254 to <32 x float>*
  %256 = load <32 x float>, <32 x float>* %255, align 128, !tbaa !25
  %257 = getelementptr inbounds float, float* %21, i64 %221
  %258 = extractelement <32 x float> %256, i64 0
  store float %258, float* %257, align 4, !tbaa !26
  %259 = getelementptr inbounds float, float* %21, i64 %222
  %260 = extractelement <32 x float> %256, i64 1
  store float %260, float* %259, align 4, !tbaa !26
  %261 = getelementptr inbounds float, float* %21, i64 %223
  %262 = extractelement <32 x float> %256, i64 2
  store float %262, float* %261, align 4, !tbaa !26
  %263 = getelementptr inbounds float, float* %21, i64 %224
  %264 = extractelement <32 x float> %256, i64 3
  store float %264, float* %263, align 4, !tbaa !26
  %265 = getelementptr inbounds float, float* %21, i64 %225
  %266 = extractelement <32 x float> %256, i64 4
  store float %266, float* %265, align 4, !tbaa !26
  %267 = getelementptr inbounds float, float* %21, i64 %226
  %268 = extractelement <32 x float> %256, i64 5
  store float %268, float* %267, align 4, !tbaa !26
  %269 = getelementptr inbounds float, float* %21, i64 %227
  %270 = extractelement <32 x float> %256, i64 6
  store float %270, float* %269, align 4, !tbaa !26
  %271 = getelementptr inbounds float, float* %21, i64 %228
  %272 = extractelement <32 x float> %256, i64 7
  store float %272, float* %271, align 4, !tbaa !26
  %273 = getelementptr inbounds float, float* %21, i64 %229
  %274 = extractelement <32 x float> %256, i64 8
  store float %274, float* %273, align 4, !tbaa !26
  %275 = getelementptr inbounds float, float* %21, i64 %230
  %276 = extractelement <32 x float> %256, i64 9
  store float %276, float* %275, align 4, !tbaa !26
  %277 = getelementptr inbounds float, float* %21, i64 %231
  %278 = extractelement <32 x float> %256, i64 10
  store float %278, float* %277, align 4, !tbaa !26
  %279 = getelementptr inbounds float, float* %21, i64 %232
  %280 = extractelement <32 x float> %256, i64 11
  store float %280, float* %279, align 4, !tbaa !26
  %281 = getelementptr inbounds float, float* %21, i64 %233
  %282 = extractelement <32 x float> %256, i64 12
  store float %282, float* %281, align 4, !tbaa !26
  %283 = getelementptr inbounds float, float* %21, i64 %234
  %284 = extractelement <32 x float> %256, i64 13
  store float %284, float* %283, align 4, !tbaa !26
  %285 = getelementptr inbounds float, float* %21, i64 %235
  %286 = extractelement <32 x float> %256, i64 14
  store float %286, float* %285, align 4, !tbaa !26
  %287 = getelementptr inbounds float, float* %21, i64 %236
  %288 = extractelement <32 x float> %256, i64 15
  store float %288, float* %287, align 4, !tbaa !26
  %289 = getelementptr inbounds float, float* %21, i64 %237
  %290 = extractelement <32 x float> %256, i64 16
  store float %290, float* %289, align 4, !tbaa !26
  %291 = getelementptr inbounds float, float* %21, i64 %238
  %292 = extractelement <32 x float> %256, i64 17
  store float %292, float* %291, align 4, !tbaa !26
  %293 = getelementptr inbounds float, float* %21, i64 %239
  %294 = extractelement <32 x float> %256, i64 18
  store float %294, float* %293, align 4, !tbaa !26
  %295 = getelementptr inbounds float, float* %21, i64 %240
  %296 = extractelement <32 x float> %256, i64 19
  store float %296, float* %295, align 4, !tbaa !26
  %297 = getelementptr inbounds float, float* %21, i64 %241
  %298 = extractelement <32 x float> %256, i64 20
  store float %298, float* %297, align 4, !tbaa !26
  %299 = getelementptr inbounds float, float* %21, i64 %242
  %300 = extractelement <32 x float> %256, i64 21
  store float %300, float* %299, align 4, !tbaa !26
  %301 = getelementptr inbounds float, float* %21, i64 %243
  %302 = extractelement <32 x float> %256, i64 22
  store float %302, float* %301, align 4, !tbaa !26
  %303 = getelementptr inbounds float, float* %21, i64 %244
  %304 = extractelement <32 x float> %256, i64 23
  store float %304, float* %303, align 4, !tbaa !26
  %305 = getelementptr inbounds float, float* %21, i64 %245
  %306 = extractelement <32 x float> %256, i64 24
  store float %306, float* %305, align 4, !tbaa !26
  %307 = getelementptr inbounds float, float* %21, i64 %246
  %308 = extractelement <32 x float> %256, i64 25
  store float %308, float* %307, align 4, !tbaa !26
  %309 = getelementptr inbounds float, float* %21, i64 %247
  %310 = extractelement <32 x float> %256, i64 26
  store float %310, float* %309, align 4, !tbaa !26
  %311 = getelementptr inbounds float, float* %21, i64 %248
  %312 = extractelement <32 x float> %256, i64 27
  store float %312, float* %311, align 4, !tbaa !26
  %313 = getelementptr inbounds float, float* %21, i64 %249
  %314 = extractelement <32 x float> %256, i64 28
  store float %314, float* %313, align 4, !tbaa !26
  %315 = getelementptr inbounds float, float* %21, i64 %250
  %316 = extractelement <32 x float> %256, i64 29
  store float %316, float* %315, align 4, !tbaa !26
  %317 = getelementptr inbounds float, float* %21, i64 %251
  %318 = extractelement <32 x float> %256, i64 30
  store float %318, float* %317, align 4, !tbaa !26
  %319 = getelementptr inbounds float, float* %21, i64 %252
  %320 = extractelement <32 x float> %256, i64 31
  store float %320, float* %319, align 4, !tbaa !26
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %exitcond22 = icmp eq i64 %indvars.iv.next21, 7
  br i1 %exitcond22, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  %321 = add nuw nsw i32 %155, 1
  %exitcond23 = icmp eq i32 %321, 448
  br i1 %exitcond23, label %for_end15, label %for_body14, !prof !5

for_begin4.preheader.1:                           ; preds = %for_begin4.preheader, %for_begin4.preheader.1
  %indvar33.1 = phi i64 [ %indvar.next34.1, %for_begin4.preheader.1 ], [ 0, %for_begin4.preheader ]
  %322 = mul nuw nsw i64 %indvar33.1, 13
  %323 = add nuw nsw i64 %322, 13312
  %scevgep.1 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %323
  %scevgep35.1 = bitcast float* %scevgep.1 to i8*
  %324 = mul nuw nsw i64 %indvar33.1, 784
  %325 = add nuw nsw i64 %324, 56
  %scevgep36.1 = getelementptr i8, i8* %0, i64 %325
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.1, i8* align 4 %scevgep36.1, i64 52, i1 false)
  %indvar.next34.1 = add nuw nsw i64 %indvar33.1, 1
  %exitcond37.1 = icmp eq i64 %indvar.next34.1, 1024
  br i1 %exitcond37.1, label %for_begin4.preheader.2, label %for_begin4.preheader.1, !prof !5

for_begin4.preheader.2:                           ; preds = %for_begin4.preheader.1, %for_begin4.preheader.2
  %indvar33.2 = phi i64 [ %indvar.next34.2, %for_begin4.preheader.2 ], [ 0, %for_begin4.preheader.1 ]
  %326 = mul nuw nsw i64 %indvar33.2, 13
  %327 = add nuw nsw i64 %326, 26624
  %scevgep.2 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %327
  %scevgep35.2 = bitcast float* %scevgep.2 to i8*
  %328 = mul nuw nsw i64 %indvar33.2, 784
  %329 = add nuw nsw i64 %328, 112
  %scevgep36.2 = getelementptr i8, i8* %0, i64 %329
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.2, i8* align 4 %scevgep36.2, i64 52, i1 false)
  %indvar.next34.2 = add nuw nsw i64 %indvar33.2, 1
  %exitcond37.2 = icmp eq i64 %indvar.next34.2, 1024
  br i1 %exitcond37.2, label %for_begin4.preheader.3, label %for_begin4.preheader.2, !prof !5

for_begin4.preheader.3:                           ; preds = %for_begin4.preheader.2, %for_begin4.preheader.3
  %indvar33.3 = phi i64 [ %indvar.next34.3, %for_begin4.preheader.3 ], [ 0, %for_begin4.preheader.2 ]
  %330 = mul nuw nsw i64 %indvar33.3, 13
  %331 = add nuw nsw i64 %330, 39936
  %scevgep.3 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %331
  %scevgep35.3 = bitcast float* %scevgep.3 to i8*
  %332 = mul nuw nsw i64 %indvar33.3, 784
  %333 = add nuw nsw i64 %332, 168
  %scevgep36.3 = getelementptr i8, i8* %0, i64 %333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.3, i8* align 4 %scevgep36.3, i64 52, i1 false)
  %indvar.next34.3 = add nuw nsw i64 %indvar33.3, 1
  %exitcond37.3 = icmp eq i64 %indvar.next34.3, 1024
  br i1 %exitcond37.3, label %for_begin4.preheader.4, label %for_begin4.preheader.3, !prof !5

for_begin4.preheader.4:                           ; preds = %for_begin4.preheader.3, %for_begin4.preheader.4
  %indvar33.4 = phi i64 [ %indvar.next34.4, %for_begin4.preheader.4 ], [ 0, %for_begin4.preheader.3 ]
  %334 = mul nuw nsw i64 %indvar33.4, 13
  %335 = add nuw nsw i64 %334, 53248
  %scevgep.4 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %335
  %scevgep35.4 = bitcast float* %scevgep.4 to i8*
  %336 = mul nuw nsw i64 %indvar33.4, 784
  %337 = add nuw nsw i64 %336, 224
  %scevgep36.4 = getelementptr i8, i8* %0, i64 %337
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.4, i8* align 4 %scevgep36.4, i64 52, i1 false)
  %indvar.next34.4 = add nuw nsw i64 %indvar33.4, 1
  %exitcond37.4 = icmp eq i64 %indvar.next34.4, 1024
  br i1 %exitcond37.4, label %for_begin4.preheader.5, label %for_begin4.preheader.4, !prof !5

for_begin4.preheader.5:                           ; preds = %for_begin4.preheader.4, %for_begin4.preheader.5
  %indvar33.5 = phi i64 [ %indvar.next34.5, %for_begin4.preheader.5 ], [ 0, %for_begin4.preheader.4 ]
  %338 = mul nuw nsw i64 %indvar33.5, 13
  %339 = add nuw nsw i64 %338, 66560
  %scevgep.5 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %339
  %scevgep35.5 = bitcast float* %scevgep.5 to i8*
  %340 = mul nuw nsw i64 %indvar33.5, 784
  %341 = add nuw nsw i64 %340, 280
  %scevgep36.5 = getelementptr i8, i8* %0, i64 %341
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.5, i8* align 4 %scevgep36.5, i64 52, i1 false)
  %indvar.next34.5 = add nuw nsw i64 %indvar33.5, 1
  %exitcond37.5 = icmp eq i64 %indvar.next34.5, 1024
  br i1 %exitcond37.5, label %for_begin4.preheader.6, label %for_begin4.preheader.5, !prof !5

for_begin4.preheader.6:                           ; preds = %for_begin4.preheader.5, %for_begin4.preheader.6
  %indvar33.6 = phi i64 [ %indvar.next34.6, %for_begin4.preheader.6 ], [ 0, %for_begin4.preheader.5 ]
  %342 = mul nuw nsw i64 %indvar33.6, 13
  %343 = add nuw nsw i64 %342, 79872
  %scevgep.6 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %343
  %scevgep35.6 = bitcast float* %scevgep.6 to i8*
  %344 = mul nuw nsw i64 %indvar33.6, 784
  %345 = add nuw nsw i64 %344, 336
  %scevgep36.6 = getelementptr i8, i8* %0, i64 %345
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.6, i8* align 4 %scevgep36.6, i64 52, i1 false)
  %indvar.next34.6 = add nuw nsw i64 %indvar33.6, 1
  %exitcond37.6 = icmp eq i64 %indvar.next34.6, 1024
  br i1 %exitcond37.6, label %for_begin4.preheader.7, label %for_begin4.preheader.6, !prof !5

for_begin4.preheader.7:                           ; preds = %for_begin4.preheader.6, %for_begin4.preheader.7
  %indvar33.7 = phi i64 [ %indvar.next34.7, %for_begin4.preheader.7 ], [ 0, %for_begin4.preheader.6 ]
  %346 = mul nuw nsw i64 %indvar33.7, 13
  %347 = add nuw nsw i64 %346, 93184
  %scevgep.7 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %347
  %scevgep35.7 = bitcast float* %scevgep.7 to i8*
  %348 = mul nuw nsw i64 %indvar33.7, 784
  %349 = add nuw nsw i64 %348, 392
  %scevgep36.7 = getelementptr i8, i8* %0, i64 %349
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.7, i8* align 4 %scevgep36.7, i64 52, i1 false)
  %indvar.next34.7 = add nuw nsw i64 %indvar33.7, 1
  %exitcond37.7 = icmp eq i64 %indvar.next34.7, 1024
  br i1 %exitcond37.7, label %for_begin4.preheader.8, label %for_begin4.preheader.7, !prof !5

for_begin4.preheader.8:                           ; preds = %for_begin4.preheader.7, %for_begin4.preheader.8
  %indvar33.8 = phi i64 [ %indvar.next34.8, %for_begin4.preheader.8 ], [ 0, %for_begin4.preheader.7 ]
  %350 = mul nuw nsw i64 %indvar33.8, 13
  %351 = add nuw nsw i64 %350, 106496
  %scevgep.8 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %351
  %scevgep35.8 = bitcast float* %scevgep.8 to i8*
  %352 = mul nuw nsw i64 %indvar33.8, 784
  %353 = add nuw nsw i64 %352, 448
  %scevgep36.8 = getelementptr i8, i8* %0, i64 %353
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.8, i8* align 4 %scevgep36.8, i64 52, i1 false)
  %indvar.next34.8 = add nuw nsw i64 %indvar33.8, 1
  %exitcond37.8 = icmp eq i64 %indvar.next34.8, 1024
  br i1 %exitcond37.8, label %for_begin4.preheader.9, label %for_begin4.preheader.8, !prof !5

for_begin4.preheader.9:                           ; preds = %for_begin4.preheader.8, %for_begin4.preheader.9
  %indvar33.9 = phi i64 [ %indvar.next34.9, %for_begin4.preheader.9 ], [ 0, %for_begin4.preheader.8 ]
  %354 = mul nuw nsw i64 %indvar33.9, 13
  %355 = add nuw nsw i64 %354, 119808
  %scevgep.9 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %355
  %scevgep35.9 = bitcast float* %scevgep.9 to i8*
  %356 = mul nuw nsw i64 %indvar33.9, 784
  %357 = add nuw nsw i64 %356, 504
  %scevgep36.9 = getelementptr i8, i8* %0, i64 %357
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.9, i8* align 4 %scevgep36.9, i64 52, i1 false)
  %indvar.next34.9 = add nuw nsw i64 %indvar33.9, 1
  %exitcond37.9 = icmp eq i64 %indvar.next34.9, 1024
  br i1 %exitcond37.9, label %for_begin4.preheader.10, label %for_begin4.preheader.9, !prof !5

for_begin4.preheader.10:                          ; preds = %for_begin4.preheader.9, %for_begin4.preheader.10
  %indvar33.10 = phi i64 [ %indvar.next34.10, %for_begin4.preheader.10 ], [ 0, %for_begin4.preheader.9 ]
  %358 = mul nuw nsw i64 %indvar33.10, 13
  %359 = add nuw nsw i64 %358, 133120
  %scevgep.10 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %359
  %scevgep35.10 = bitcast float* %scevgep.10 to i8*
  %360 = mul nuw nsw i64 %indvar33.10, 784
  %361 = add nuw nsw i64 %360, 560
  %scevgep36.10 = getelementptr i8, i8* %0, i64 %361
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.10, i8* align 4 %scevgep36.10, i64 52, i1 false)
  %indvar.next34.10 = add nuw nsw i64 %indvar33.10, 1
  %exitcond37.10 = icmp eq i64 %indvar.next34.10, 1024
  br i1 %exitcond37.10, label %for_begin4.preheader.11, label %for_begin4.preheader.10, !prof !5

for_begin4.preheader.11:                          ; preds = %for_begin4.preheader.10, %for_begin4.preheader.11
  %indvar33.11 = phi i64 [ %indvar.next34.11, %for_begin4.preheader.11 ], [ 0, %for_begin4.preheader.10 ]
  %362 = mul nuw nsw i64 %indvar33.11, 13
  %363 = add nuw nsw i64 %362, 146432
  %scevgep.11 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %363
  %scevgep35.11 = bitcast float* %scevgep.11 to i8*
  %364 = mul nuw nsw i64 %indvar33.11, 784
  %365 = add nuw nsw i64 %364, 616
  %scevgep36.11 = getelementptr i8, i8* %0, i64 %365
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.11, i8* align 4 %scevgep36.11, i64 52, i1 false)
  %indvar.next34.11 = add nuw nsw i64 %indvar33.11, 1
  %exitcond37.11 = icmp eq i64 %indvar.next34.11, 1024
  br i1 %exitcond37.11, label %for_begin4.preheader.12, label %for_begin4.preheader.11, !prof !5

for_begin4.preheader.12:                          ; preds = %for_begin4.preheader.11, %for_begin4.preheader.12
  %indvar33.12 = phi i64 [ %indvar.next34.12, %for_begin4.preheader.12 ], [ 0, %for_begin4.preheader.11 ]
  %366 = mul nuw nsw i64 %indvar33.12, 13
  %367 = add nuw nsw i64 %366, 159744
  %scevgep.12 = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %367
  %scevgep35.12 = bitcast float* %scevgep.12 to i8*
  %368 = mul nuw nsw i64 %indvar33.12, 784
  %369 = add nuw nsw i64 %368, 672
  %scevgep36.12 = getelementptr i8, i8* %0, i64 %369
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep35.12, i8* align 4 %scevgep36.12, i64 52, i1 false)
  %indvar.next34.12 = add nuw nsw i64 %indvar33.12, 1
  %exitcond37.12 = icmp eq i64 %indvar.next34.12, 1024
  br i1 %exitcond37.12, label %for_end3.12, label %for_begin4.preheader.12, !prof !5

for_end3.12:                                      ; preds = %for_begin4.preheader.12
  %370 = bitcast i8* %1 to float*
  br label %for_begin10.preheader
}

; Function Attrs: nounwind readnone speculatable
declare <32 x float> @llvm.fmuladd.v32f32(<32 x float>, <32 x float>, <32 x float>) #2

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_5_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !29
  %6 = getelementptr inbounds float, float* %4, i64 4
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !29
  %8 = fsub <4 x float> zeroinitializer, %wide.load
  %9 = fsub <4 x float> zeroinitializer, %wide.load2
  %10 = getelementptr inbounds float, float* %3, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %8, <4 x float>* %11, align 4, !tbaa !32
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  store <4 x float> %9, <4 x float>* %13, align 4, !tbaa !32
  %index.next = add i64 %index, 8
  %14 = icmp eq i64 %index.next, 2048
  br i1 %14, label %for_end, label %vector.body, !llvm.loop !35

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_5_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %0 to float*
  %5 = bitcast i8* %1 to float*
  %6 = load float, float* %5, align 64, !tbaa !37
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %6, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !51
  %9 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !54
  %index.next = add i64 %index, 4
  %12 = icmp eq i64 %index.next, 2048
  br i1 %12, label %for_end, label %vector.body, !llvm.loop !57

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_24(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_24_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_24_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !58
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !58
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !61
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !61
  %14 = fadd <4 x float> %wide.load, %wide.load3
  %15 = fadd <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !64
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !64
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 2048
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !67

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_15(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_15_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_15_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !68
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !68
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !71
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !71
  %14 = fmul <4 x float> %wide.load, %wide.load3
  %15 = fmul <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !74
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !74
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 2048
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !77

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_5_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 8192, i1 false)
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_18(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_18_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_18_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [8192 x <64 x float>], align 16
  %5 = alloca [373248 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = mul nuw nsw i64 %indvar, 13824
  %7 = mul nuw nsw i64 %indvar, 112
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %8 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar35 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next36, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvar35, 27
  %10 = add nuw nsw i64 %6, %9
  %scevgep = getelementptr [373248 x float], [373248 x float]* %5, i64 0, i64 %10
  %scevgep37 = bitcast float* %scevgep to i8*
  %11 = mul nuw nsw i64 %indvar35, 3136
  %12 = add nuw nsw i64 %7, %11
  %scevgep38 = getelementptr i8, i8* %0, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep37, i8* align 4 %scevgep38, i64 108, i1 false)
  %indvar.next36 = add nuw nsw i64 %indvar35, 1
  %exitcond39 = icmp eq i64 %indvar.next36, 512
  br i1 %exitcond39, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond40 = icmp eq i64 %indvar.next, 27
  br i1 %exitcond40, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv29 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next30, %for_end12 ]
  %13 = shl nsw i64 %indvars.iv29, 15
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %14 = bitcast i8* %2 to float*
  br label %for_begin16.preheader

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv26 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next27, %for_body11 ]
  %15 = shl i64 %indvars.iv26, 6
  %16 = add nuw nsw i64 %15, %13
  %17 = add nuw nsw i64 %indvars.iv26, %13
  %18 = add nuw nsw i64 %17, 512
  %19 = add nuw nsw i64 %17, 1024
  %20 = add nuw nsw i64 %17, 1536
  %21 = add nuw nsw i64 %17, 2048
  %22 = add nuw nsw i64 %17, 2560
  %23 = add nuw nsw i64 %17, 3072
  %24 = add nuw nsw i64 %17, 3584
  %25 = add nuw nsw i64 %17, 4096
  %26 = add nuw nsw i64 %17, 4608
  %27 = add nuw nsw i64 %17, 5120
  %28 = add nuw nsw i64 %17, 5632
  %29 = add nuw nsw i64 %17, 6144
  %30 = add nuw nsw i64 %17, 6656
  %31 = add nuw nsw i64 %17, 7168
  %32 = add nuw nsw i64 %17, 7680
  %33 = add nuw nsw i64 %17, 8192
  %34 = add nuw nsw i64 %17, 8704
  %35 = add nuw nsw i64 %17, 9216
  %36 = add nuw nsw i64 %17, 9728
  %37 = add nuw nsw i64 %17, 10240
  %38 = add nuw nsw i64 %17, 10752
  %39 = add nuw nsw i64 %17, 11264
  %40 = add nuw nsw i64 %17, 11776
  %41 = add nuw nsw i64 %17, 12288
  %42 = add nuw nsw i64 %17, 12800
  %43 = add nuw nsw i64 %17, 13312
  %44 = add nuw nsw i64 %17, 13824
  %45 = add nuw nsw i64 %17, 14336
  %46 = add nuw nsw i64 %17, 14848
  %47 = add nuw nsw i64 %17, 15360
  %48 = add nuw nsw i64 %17, 15872
  %49 = add nuw nsw i64 %17, 16384
  %50 = add nuw nsw i64 %17, 16896
  %51 = add nuw nsw i64 %17, 17408
  %52 = add nuw nsw i64 %17, 17920
  %53 = add nuw nsw i64 %17, 18432
  %54 = add nuw nsw i64 %17, 18944
  %55 = add nuw nsw i64 %17, 19456
  %56 = add nuw nsw i64 %17, 19968
  %57 = add nuw nsw i64 %17, 20480
  %58 = add nuw nsw i64 %17, 20992
  %59 = add nuw nsw i64 %17, 21504
  %60 = add nuw nsw i64 %17, 22016
  %61 = add nuw nsw i64 %17, 22528
  %62 = add nuw nsw i64 %17, 23040
  %63 = add nuw nsw i64 %17, 23552
  %64 = add nuw nsw i64 %17, 24064
  %65 = add nuw nsw i64 %17, 24576
  %66 = add nuw nsw i64 %17, 25088
  %67 = add nuw nsw i64 %17, 25600
  %68 = add nuw nsw i64 %17, 26112
  %69 = add nuw nsw i64 %17, 26624
  %70 = add nuw nsw i64 %17, 27136
  %71 = add nuw nsw i64 %17, 27648
  %72 = add nuw nsw i64 %17, 28160
  %73 = add nuw nsw i64 %17, 28672
  %74 = add nuw nsw i64 %17, 29184
  %75 = add nuw nsw i64 %17, 29696
  %76 = add nuw nsw i64 %17, 30208
  %77 = add nuw nsw i64 %17, 30720
  %78 = add nuw nsw i64 %17, 31232
  %79 = add nuw nsw i64 %17, 31744
  %80 = add nuw nsw i64 %17, 32256
  %81 = getelementptr inbounds float, float* %8, i64 %17
  %82 = load float, float* %81, align 4, !tbaa !78
  %83 = insertelement <64 x float> undef, float %82, i32 0
  %84 = getelementptr inbounds float, float* %8, i64 %18
  %85 = load float, float* %84, align 4, !tbaa !78
  %86 = insertelement <64 x float> %83, float %85, i32 1
  %87 = getelementptr inbounds float, float* %8, i64 %19
  %88 = load float, float* %87, align 4, !tbaa !78
  %89 = insertelement <64 x float> %86, float %88, i32 2
  %90 = getelementptr inbounds float, float* %8, i64 %20
  %91 = load float, float* %90, align 4, !tbaa !78
  %92 = insertelement <64 x float> %89, float %91, i32 3
  %93 = getelementptr inbounds float, float* %8, i64 %21
  %94 = load float, float* %93, align 4, !tbaa !78
  %95 = insertelement <64 x float> %92, float %94, i32 4
  %96 = getelementptr inbounds float, float* %8, i64 %22
  %97 = load float, float* %96, align 4, !tbaa !78
  %98 = insertelement <64 x float> %95, float %97, i32 5
  %99 = getelementptr inbounds float, float* %8, i64 %23
  %100 = load float, float* %99, align 4, !tbaa !78
  %101 = insertelement <64 x float> %98, float %100, i32 6
  %102 = getelementptr inbounds float, float* %8, i64 %24
  %103 = load float, float* %102, align 4, !tbaa !78
  %104 = insertelement <64 x float> %101, float %103, i32 7
  %105 = getelementptr inbounds float, float* %8, i64 %25
  %106 = load float, float* %105, align 4, !tbaa !78
  %107 = insertelement <64 x float> %104, float %106, i32 8
  %108 = getelementptr inbounds float, float* %8, i64 %26
  %109 = load float, float* %108, align 4, !tbaa !78
  %110 = insertelement <64 x float> %107, float %109, i32 9
  %111 = getelementptr inbounds float, float* %8, i64 %27
  %112 = load float, float* %111, align 4, !tbaa !78
  %113 = insertelement <64 x float> %110, float %112, i32 10
  %114 = getelementptr inbounds float, float* %8, i64 %28
  %115 = load float, float* %114, align 4, !tbaa !78
  %116 = insertelement <64 x float> %113, float %115, i32 11
  %117 = getelementptr inbounds float, float* %8, i64 %29
  %118 = load float, float* %117, align 4, !tbaa !78
  %119 = insertelement <64 x float> %116, float %118, i32 12
  %120 = getelementptr inbounds float, float* %8, i64 %30
  %121 = load float, float* %120, align 4, !tbaa !78
  %122 = insertelement <64 x float> %119, float %121, i32 13
  %123 = getelementptr inbounds float, float* %8, i64 %31
  %124 = load float, float* %123, align 4, !tbaa !78
  %125 = insertelement <64 x float> %122, float %124, i32 14
  %126 = getelementptr inbounds float, float* %8, i64 %32
  %127 = load float, float* %126, align 4, !tbaa !78
  %128 = insertelement <64 x float> %125, float %127, i32 15
  %129 = getelementptr inbounds float, float* %8, i64 %33
  %130 = load float, float* %129, align 4, !tbaa !78
  %131 = insertelement <64 x float> %128, float %130, i32 16
  %132 = getelementptr inbounds float, float* %8, i64 %34
  %133 = load float, float* %132, align 4, !tbaa !78
  %134 = insertelement <64 x float> %131, float %133, i32 17
  %135 = getelementptr inbounds float, float* %8, i64 %35
  %136 = load float, float* %135, align 4, !tbaa !78
  %137 = insertelement <64 x float> %134, float %136, i32 18
  %138 = getelementptr inbounds float, float* %8, i64 %36
  %139 = load float, float* %138, align 4, !tbaa !78
  %140 = insertelement <64 x float> %137, float %139, i32 19
  %141 = getelementptr inbounds float, float* %8, i64 %37
  %142 = load float, float* %141, align 4, !tbaa !78
  %143 = insertelement <64 x float> %140, float %142, i32 20
  %144 = getelementptr inbounds float, float* %8, i64 %38
  %145 = load float, float* %144, align 4, !tbaa !78
  %146 = insertelement <64 x float> %143, float %145, i32 21
  %147 = getelementptr inbounds float, float* %8, i64 %39
  %148 = load float, float* %147, align 4, !tbaa !78
  %149 = insertelement <64 x float> %146, float %148, i32 22
  %150 = getelementptr inbounds float, float* %8, i64 %40
  %151 = load float, float* %150, align 4, !tbaa !78
  %152 = insertelement <64 x float> %149, float %151, i32 23
  %153 = getelementptr inbounds float, float* %8, i64 %41
  %154 = load float, float* %153, align 4, !tbaa !78
  %155 = insertelement <64 x float> %152, float %154, i32 24
  %156 = getelementptr inbounds float, float* %8, i64 %42
  %157 = load float, float* %156, align 4, !tbaa !78
  %158 = insertelement <64 x float> %155, float %157, i32 25
  %159 = getelementptr inbounds float, float* %8, i64 %43
  %160 = load float, float* %159, align 4, !tbaa !78
  %161 = insertelement <64 x float> %158, float %160, i32 26
  %162 = getelementptr inbounds float, float* %8, i64 %44
  %163 = load float, float* %162, align 4, !tbaa !78
  %164 = insertelement <64 x float> %161, float %163, i32 27
  %165 = getelementptr inbounds float, float* %8, i64 %45
  %166 = load float, float* %165, align 4, !tbaa !78
  %167 = insertelement <64 x float> %164, float %166, i32 28
  %168 = getelementptr inbounds float, float* %8, i64 %46
  %169 = load float, float* %168, align 4, !tbaa !78
  %170 = insertelement <64 x float> %167, float %169, i32 29
  %171 = getelementptr inbounds float, float* %8, i64 %47
  %172 = load float, float* %171, align 4, !tbaa !78
  %173 = insertelement <64 x float> %170, float %172, i32 30
  %174 = getelementptr inbounds float, float* %8, i64 %48
  %175 = load float, float* %174, align 4, !tbaa !78
  %176 = insertelement <64 x float> %173, float %175, i32 31
  %177 = getelementptr inbounds float, float* %8, i64 %49
  %178 = load float, float* %177, align 4, !tbaa !78
  %179 = insertelement <64 x float> %176, float %178, i32 32
  %180 = getelementptr inbounds float, float* %8, i64 %50
  %181 = load float, float* %180, align 4, !tbaa !78
  %182 = insertelement <64 x float> %179, float %181, i32 33
  %183 = getelementptr inbounds float, float* %8, i64 %51
  %184 = load float, float* %183, align 4, !tbaa !78
  %185 = insertelement <64 x float> %182, float %184, i32 34
  %186 = getelementptr inbounds float, float* %8, i64 %52
  %187 = load float, float* %186, align 4, !tbaa !78
  %188 = insertelement <64 x float> %185, float %187, i32 35
  %189 = getelementptr inbounds float, float* %8, i64 %53
  %190 = load float, float* %189, align 4, !tbaa !78
  %191 = insertelement <64 x float> %188, float %190, i32 36
  %192 = getelementptr inbounds float, float* %8, i64 %54
  %193 = load float, float* %192, align 4, !tbaa !78
  %194 = insertelement <64 x float> %191, float %193, i32 37
  %195 = getelementptr inbounds float, float* %8, i64 %55
  %196 = load float, float* %195, align 4, !tbaa !78
  %197 = insertelement <64 x float> %194, float %196, i32 38
  %198 = getelementptr inbounds float, float* %8, i64 %56
  %199 = load float, float* %198, align 4, !tbaa !78
  %200 = insertelement <64 x float> %197, float %199, i32 39
  %201 = getelementptr inbounds float, float* %8, i64 %57
  %202 = load float, float* %201, align 4, !tbaa !78
  %203 = insertelement <64 x float> %200, float %202, i32 40
  %204 = getelementptr inbounds float, float* %8, i64 %58
  %205 = load float, float* %204, align 4, !tbaa !78
  %206 = insertelement <64 x float> %203, float %205, i32 41
  %207 = getelementptr inbounds float, float* %8, i64 %59
  %208 = load float, float* %207, align 4, !tbaa !78
  %209 = insertelement <64 x float> %206, float %208, i32 42
  %210 = getelementptr inbounds float, float* %8, i64 %60
  %211 = load float, float* %210, align 4, !tbaa !78
  %212 = insertelement <64 x float> %209, float %211, i32 43
  %213 = getelementptr inbounds float, float* %8, i64 %61
  %214 = load float, float* %213, align 4, !tbaa !78
  %215 = insertelement <64 x float> %212, float %214, i32 44
  %216 = getelementptr inbounds float, float* %8, i64 %62
  %217 = load float, float* %216, align 4, !tbaa !78
  %218 = insertelement <64 x float> %215, float %217, i32 45
  %219 = getelementptr inbounds float, float* %8, i64 %63
  %220 = load float, float* %219, align 4, !tbaa !78
  %221 = insertelement <64 x float> %218, float %220, i32 46
  %222 = getelementptr inbounds float, float* %8, i64 %64
  %223 = load float, float* %222, align 4, !tbaa !78
  %224 = insertelement <64 x float> %221, float %223, i32 47
  %225 = getelementptr inbounds float, float* %8, i64 %65
  %226 = load float, float* %225, align 4, !tbaa !78
  %227 = insertelement <64 x float> %224, float %226, i32 48
  %228 = getelementptr inbounds float, float* %8, i64 %66
  %229 = load float, float* %228, align 4, !tbaa !78
  %230 = insertelement <64 x float> %227, float %229, i32 49
  %231 = getelementptr inbounds float, float* %8, i64 %67
  %232 = load float, float* %231, align 4, !tbaa !78
  %233 = insertelement <64 x float> %230, float %232, i32 50
  %234 = getelementptr inbounds float, float* %8, i64 %68
  %235 = load float, float* %234, align 4, !tbaa !78
  %236 = insertelement <64 x float> %233, float %235, i32 51
  %237 = getelementptr inbounds float, float* %8, i64 %69
  %238 = load float, float* %237, align 4, !tbaa !78
  %239 = insertelement <64 x float> %236, float %238, i32 52
  %240 = getelementptr inbounds float, float* %8, i64 %70
  %241 = load float, float* %240, align 4, !tbaa !78
  %242 = insertelement <64 x float> %239, float %241, i32 53
  %243 = getelementptr inbounds float, float* %8, i64 %71
  %244 = load float, float* %243, align 4, !tbaa !78
  %245 = insertelement <64 x float> %242, float %244, i32 54
  %246 = getelementptr inbounds float, float* %8, i64 %72
  %247 = load float, float* %246, align 4, !tbaa !78
  %248 = insertelement <64 x float> %245, float %247, i32 55
  %249 = getelementptr inbounds float, float* %8, i64 %73
  %250 = load float, float* %249, align 4, !tbaa !78
  %251 = insertelement <64 x float> %248, float %250, i32 56
  %252 = getelementptr inbounds float, float* %8, i64 %74
  %253 = load float, float* %252, align 4, !tbaa !78
  %254 = insertelement <64 x float> %251, float %253, i32 57
  %255 = getelementptr inbounds float, float* %8, i64 %75
  %256 = load float, float* %255, align 4, !tbaa !78
  %257 = insertelement <64 x float> %254, float %256, i32 58
  %258 = getelementptr inbounds float, float* %8, i64 %76
  %259 = load float, float* %258, align 4, !tbaa !78
  %260 = insertelement <64 x float> %257, float %259, i32 59
  %261 = getelementptr inbounds float, float* %8, i64 %77
  %262 = load float, float* %261, align 4, !tbaa !78
  %263 = insertelement <64 x float> %260, float %262, i32 60
  %264 = getelementptr inbounds float, float* %8, i64 %78
  %265 = load float, float* %264, align 4, !tbaa !78
  %266 = insertelement <64 x float> %263, float %265, i32 61
  %267 = getelementptr inbounds float, float* %8, i64 %79
  %268 = load float, float* %267, align 4, !tbaa !78
  %269 = insertelement <64 x float> %266, float %268, i32 62
  %270 = getelementptr inbounds float, float* %8, i64 %80
  %271 = load float, float* %270, align 4, !tbaa !78
  %272 = insertelement <64 x float> %269, float %271, i32 63
  %273 = getelementptr inbounds [8192 x <64 x float>], [8192 x <64 x float>]* %4, i64 0, i64 0, i64 %16
  %274 = bitcast float* %273 to <64 x float>*
  store <64 x float> %272, <64 x float>* %274, align 16, !tbaa !81
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %exitcond28 = icmp eq i64 %indvars.iv.next27, 512
  br i1 %exitcond28, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp eq i64 %indvars.iv.next30, 16
  br i1 %exitcond31, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_begin13.preheader
  %275 = phi i32 [ 0, %for_begin13.preheader ], [ %341, %for_end24 ]
  %276 = urem i32 %275, 7
  %277 = mul nuw nsw i32 %276, 55296
  %278 = udiv i32 %275, 7
  %279 = shl i32 %278, 15
  %280 = sext i32 %279 to i64
  %281 = zext i32 %277 to i64
  br label %for_body17

for_end15:                                        ; preds = %for_end24
  ret void

for_begin22.preheader:                            ; preds = %for_end21
  %282 = mul nuw nsw i32 %276, 28
  %283 = mul nsw i32 %278, 12544
  %284 = or i32 %283, %282
  %285 = zext i32 %284 to i64
  br label %for_begin25.preheader

for_body17:                                       ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv12 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next13, %for_end21 ]
  %286 = shl nsw i64 %indvars.iv12, 7
  %287 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %286
  %288 = bitcast float* %287 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %288, align 16, !tbaa !84
  %289 = or i64 %286, 64
  %290 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %289
  %291 = bitcast float* %290 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %291, align 16, !tbaa !84
  %292 = add nuw nsw i64 %286, 896
  %293 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %292
  %294 = bitcast float* %293 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %294, align 16, !tbaa !84
  %295 = add nuw nsw i64 %286, 960
  %296 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %295
  %297 = bitcast float* %296 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %297, align 16, !tbaa !84
  %298 = shl nsw i64 %indvars.iv12, 2
  %299 = add nuw nsw i64 %298, %281
  br label %for_body20

for_body20:                                       ; preds = %for_body20, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body20 ]
  %300 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %337, %for_body20 ]
  %301 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %330, %for_body20 ]
  %302 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %323, %for_body20 ]
  %303 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %316, %for_body20 ]
  %304 = mul nuw nsw i64 %indvars.iv, 27
  %305 = add nuw nsw i64 %299, %304
  %306 = and i64 %305, 4294967295
  %307 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %306
  %308 = load float, float* %307, align 4, !tbaa !87
  %309 = insertelement <64 x float> undef, float %308, i32 0
  %310 = shufflevector <64 x float> %309, <64 x float> undef, <64 x i32> zeroinitializer
  %311 = shl i64 %indvars.iv, 6
  %312 = add nuw nsw i64 %311, %280
  %313 = getelementptr inbounds [8192 x <64 x float>], [8192 x <64 x float>]* %4, i64 0, i64 0, i64 %312
  %314 = bitcast float* %313 to <64 x float>*
  %315 = load <64 x float>, <64 x float>* %314, align 16, !tbaa !81
  %316 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %310, <64 x float> %315, <64 x float> %303)
  %317 = add nuw i64 %305, 2
  %318 = and i64 %317, 4294967295
  %319 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %318
  %320 = load float, float* %319, align 4, !tbaa !87
  %321 = insertelement <64 x float> undef, float %320, i32 0
  %322 = shufflevector <64 x float> %321, <64 x float> undef, <64 x i32> zeroinitializer
  %323 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %322, <64 x float> %315, <64 x float> %302)
  %324 = add nuw i64 %305, 27648
  %325 = and i64 %324, 4294967295
  %326 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !87
  %328 = insertelement <64 x float> undef, float %327, i32 0
  %329 = shufflevector <64 x float> %328, <64 x float> undef, <64 x i32> zeroinitializer
  %330 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %329, <64 x float> %315, <64 x float> %301)
  %331 = add nuw i64 %305, 27650
  %332 = and i64 %331, 4294967295
  %333 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %332
  %334 = load float, float* %333, align 4, !tbaa !87
  %335 = insertelement <64 x float> undef, float %334, i32 0
  %336 = shufflevector <64 x float> %335, <64 x float> undef, <64 x i32> zeroinitializer
  %337 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %336, <64 x float> %315, <64 x float> %300)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <64 x float> %316, <64 x float>* %288, align 16, !tbaa !84
  store <64 x float> %323, <64 x float>* %291, align 16, !tbaa !84
  store <64 x float> %330, <64 x float>* %294, align 16, !tbaa !84
  store <64 x float> %337, <64 x float>* %297, align 16, !tbaa !84
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp eq i64 %indvars.iv.next13, 7
  br i1 %exitcond14, label %for_begin22.preheader, label %for_body17, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_begin22.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin22.preheader ], [ %indvars.iv.next23, %for_end27 ]
  %338 = shl nuw nsw i64 %indvars.iv22, 1
  %339 = add nuw nsw i64 %338, %285
  %340 = shl i64 %indvars.iv22, 7
  br label %for_begin28.preheader

for_end24:                                        ; preds = %for_end27
  %341 = add nuw nsw i32 %275, 1
  %exitcond25 = icmp eq i32 %341, 112
  br i1 %exitcond25, label %for_end15, label %for_begin16.preheader, !prof !5

for_begin28.preheader:                            ; preds = %for_end30, %for_begin25.preheader
  %indvars.iv19 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next20, %for_end30 ]
  %342 = mul nuw nsw i64 %indvars.iv19, 14
  %343 = add nuw nsw i64 %339, %342
  %344 = mul nuw nsw i64 %indvars.iv19, 896
  %345 = add nuw nsw i64 %344, %340
  br label %for_body29

for_end27:                                        ; preds = %for_end30
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 7
  br i1 %exitcond24, label %for_end24, label %for_begin25.preheader, !prof !5

for_body29:                                       ; preds = %for_body29, %for_begin28.preheader
  %indvars.iv16 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next17, %for_body29 ]
  %346 = add nuw nsw i64 %343, %indvars.iv16
  %347 = shl i64 %indvars.iv16, 6
  %348 = add nuw nsw i64 %345, %347
  %349 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %348
  %350 = bitcast float* %349 to <64 x float>*
  %351 = load <64 x float>, <64 x float>* %350, align 16, !tbaa !84
  %352 = getelementptr inbounds float, float* %14, i64 %346
  %353 = extractelement <64 x float> %351, i64 0
  store float %353, float* %352, align 4, !tbaa !90
  %354 = shl i64 %346, 32
  %sext = add i64 %354, 841813590016
  %355 = ashr exact i64 %sext, 32
  %356 = getelementptr inbounds float, float* %14, i64 %355
  %357 = extractelement <64 x float> %351, i64 1
  store float %357, float* %356, align 4, !tbaa !90
  %358 = shl i64 %346, 32
  %sext41 = add i64 %358, 1683627180032
  %359 = ashr exact i64 %sext41, 32
  %360 = getelementptr inbounds float, float* %14, i64 %359
  %361 = extractelement <64 x float> %351, i64 2
  store float %361, float* %360, align 4, !tbaa !90
  %362 = shl i64 %346, 32
  %sext42 = add i64 %362, 2525440770048
  %363 = ashr exact i64 %sext42, 32
  %364 = getelementptr inbounds float, float* %14, i64 %363
  %365 = extractelement <64 x float> %351, i64 3
  store float %365, float* %364, align 4, !tbaa !90
  %366 = shl i64 %346, 32
  %sext43 = add i64 %366, 3367254360064
  %367 = ashr exact i64 %sext43, 32
  %368 = getelementptr inbounds float, float* %14, i64 %367
  %369 = extractelement <64 x float> %351, i64 4
  store float %369, float* %368, align 4, !tbaa !90
  %370 = shl i64 %346, 32
  %sext44 = add i64 %370, 4209067950080
  %371 = ashr exact i64 %sext44, 32
  %372 = getelementptr inbounds float, float* %14, i64 %371
  %373 = extractelement <64 x float> %351, i64 5
  store float %373, float* %372, align 4, !tbaa !90
  %374 = shl i64 %346, 32
  %sext45 = add i64 %374, 5050881540096
  %375 = ashr exact i64 %sext45, 32
  %376 = getelementptr inbounds float, float* %14, i64 %375
  %377 = extractelement <64 x float> %351, i64 6
  store float %377, float* %376, align 4, !tbaa !90
  %378 = shl i64 %346, 32
  %sext46 = add i64 %378, 5892695130112
  %379 = ashr exact i64 %sext46, 32
  %380 = getelementptr inbounds float, float* %14, i64 %379
  %381 = extractelement <64 x float> %351, i64 7
  store float %381, float* %380, align 4, !tbaa !90
  %382 = shl i64 %346, 32
  %sext47 = add i64 %382, 6734508720128
  %383 = ashr exact i64 %sext47, 32
  %384 = getelementptr inbounds float, float* %14, i64 %383
  %385 = extractelement <64 x float> %351, i64 8
  store float %385, float* %384, align 4, !tbaa !90
  %386 = shl i64 %346, 32
  %sext48 = add i64 %386, 7576322310144
  %387 = ashr exact i64 %sext48, 32
  %388 = getelementptr inbounds float, float* %14, i64 %387
  %389 = extractelement <64 x float> %351, i64 9
  store float %389, float* %388, align 4, !tbaa !90
  %390 = shl i64 %346, 32
  %sext49 = add i64 %390, 8418135900160
  %391 = ashr exact i64 %sext49, 32
  %392 = getelementptr inbounds float, float* %14, i64 %391
  %393 = extractelement <64 x float> %351, i64 10
  store float %393, float* %392, align 4, !tbaa !90
  %394 = shl i64 %346, 32
  %sext50 = add i64 %394, 9259949490176
  %395 = ashr exact i64 %sext50, 32
  %396 = getelementptr inbounds float, float* %14, i64 %395
  %397 = extractelement <64 x float> %351, i64 11
  store float %397, float* %396, align 4, !tbaa !90
  %398 = shl i64 %346, 32
  %sext51 = add i64 %398, 10101763080192
  %399 = ashr exact i64 %sext51, 32
  %400 = getelementptr inbounds float, float* %14, i64 %399
  %401 = extractelement <64 x float> %351, i64 12
  store float %401, float* %400, align 4, !tbaa !90
  %402 = shl i64 %346, 32
  %sext52 = add i64 %402, 10943576670208
  %403 = ashr exact i64 %sext52, 32
  %404 = getelementptr inbounds float, float* %14, i64 %403
  %405 = extractelement <64 x float> %351, i64 13
  store float %405, float* %404, align 4, !tbaa !90
  %406 = shl i64 %346, 32
  %sext53 = add i64 %406, 11785390260224
  %407 = ashr exact i64 %sext53, 32
  %408 = getelementptr inbounds float, float* %14, i64 %407
  %409 = extractelement <64 x float> %351, i64 14
  store float %409, float* %408, align 4, !tbaa !90
  %410 = shl i64 %346, 32
  %sext54 = add i64 %410, 12627203850240
  %411 = ashr exact i64 %sext54, 32
  %412 = getelementptr inbounds float, float* %14, i64 %411
  %413 = extractelement <64 x float> %351, i64 15
  store float %413, float* %412, align 4, !tbaa !90
  %414 = shl i64 %346, 32
  %sext55 = add i64 %414, 13469017440256
  %415 = ashr exact i64 %sext55, 32
  %416 = getelementptr inbounds float, float* %14, i64 %415
  %417 = extractelement <64 x float> %351, i64 16
  store float %417, float* %416, align 4, !tbaa !90
  %418 = shl i64 %346, 32
  %sext56 = add i64 %418, 14310831030272
  %419 = ashr exact i64 %sext56, 32
  %420 = getelementptr inbounds float, float* %14, i64 %419
  %421 = extractelement <64 x float> %351, i64 17
  store float %421, float* %420, align 4, !tbaa !90
  %422 = shl i64 %346, 32
  %sext57 = add i64 %422, 15152644620288
  %423 = ashr exact i64 %sext57, 32
  %424 = getelementptr inbounds float, float* %14, i64 %423
  %425 = extractelement <64 x float> %351, i64 18
  store float %425, float* %424, align 4, !tbaa !90
  %426 = shl i64 %346, 32
  %sext58 = add i64 %426, 15994458210304
  %427 = ashr exact i64 %sext58, 32
  %428 = getelementptr inbounds float, float* %14, i64 %427
  %429 = extractelement <64 x float> %351, i64 19
  store float %429, float* %428, align 4, !tbaa !90
  %430 = shl i64 %346, 32
  %sext59 = add i64 %430, 16836271800320
  %431 = ashr exact i64 %sext59, 32
  %432 = getelementptr inbounds float, float* %14, i64 %431
  %433 = extractelement <64 x float> %351, i64 20
  store float %433, float* %432, align 4, !tbaa !90
  %434 = shl i64 %346, 32
  %sext60 = add i64 %434, 17678085390336
  %435 = ashr exact i64 %sext60, 32
  %436 = getelementptr inbounds float, float* %14, i64 %435
  %437 = extractelement <64 x float> %351, i64 21
  store float %437, float* %436, align 4, !tbaa !90
  %438 = shl i64 %346, 32
  %sext61 = add i64 %438, 18519898980352
  %439 = ashr exact i64 %sext61, 32
  %440 = getelementptr inbounds float, float* %14, i64 %439
  %441 = extractelement <64 x float> %351, i64 22
  store float %441, float* %440, align 4, !tbaa !90
  %442 = shl i64 %346, 32
  %sext62 = add i64 %442, 19361712570368
  %443 = ashr exact i64 %sext62, 32
  %444 = getelementptr inbounds float, float* %14, i64 %443
  %445 = extractelement <64 x float> %351, i64 23
  store float %445, float* %444, align 4, !tbaa !90
  %446 = shl i64 %346, 32
  %sext63 = add i64 %446, 20203526160384
  %447 = ashr exact i64 %sext63, 32
  %448 = getelementptr inbounds float, float* %14, i64 %447
  %449 = extractelement <64 x float> %351, i64 24
  store float %449, float* %448, align 4, !tbaa !90
  %450 = shl i64 %346, 32
  %sext64 = add i64 %450, 21045339750400
  %451 = ashr exact i64 %sext64, 32
  %452 = getelementptr inbounds float, float* %14, i64 %451
  %453 = extractelement <64 x float> %351, i64 25
  store float %453, float* %452, align 4, !tbaa !90
  %454 = shl i64 %346, 32
  %sext65 = add i64 %454, 21887153340416
  %455 = ashr exact i64 %sext65, 32
  %456 = getelementptr inbounds float, float* %14, i64 %455
  %457 = extractelement <64 x float> %351, i64 26
  store float %457, float* %456, align 4, !tbaa !90
  %458 = shl i64 %346, 32
  %sext66 = add i64 %458, 22728966930432
  %459 = ashr exact i64 %sext66, 32
  %460 = getelementptr inbounds float, float* %14, i64 %459
  %461 = extractelement <64 x float> %351, i64 27
  store float %461, float* %460, align 4, !tbaa !90
  %462 = shl i64 %346, 32
  %sext67 = add i64 %462, 23570780520448
  %463 = ashr exact i64 %sext67, 32
  %464 = getelementptr inbounds float, float* %14, i64 %463
  %465 = extractelement <64 x float> %351, i64 28
  store float %465, float* %464, align 4, !tbaa !90
  %466 = shl i64 %346, 32
  %sext68 = add i64 %466, 24412594110464
  %467 = ashr exact i64 %sext68, 32
  %468 = getelementptr inbounds float, float* %14, i64 %467
  %469 = extractelement <64 x float> %351, i64 29
  store float %469, float* %468, align 4, !tbaa !90
  %470 = shl i64 %346, 32
  %sext69 = add i64 %470, 25254407700480
  %471 = ashr exact i64 %sext69, 32
  %472 = getelementptr inbounds float, float* %14, i64 %471
  %473 = extractelement <64 x float> %351, i64 30
  store float %473, float* %472, align 4, !tbaa !90
  %474 = shl i64 %346, 32
  %sext70 = add i64 %474, 26096221290496
  %475 = ashr exact i64 %sext70, 32
  %476 = getelementptr inbounds float, float* %14, i64 %475
  %477 = extractelement <64 x float> %351, i64 31
  store float %477, float* %476, align 4, !tbaa !90
  %478 = shl i64 %346, 32
  %sext71 = add i64 %478, 26938034880512
  %479 = ashr exact i64 %sext71, 32
  %480 = getelementptr inbounds float, float* %14, i64 %479
  %481 = extractelement <64 x float> %351, i64 32
  store float %481, float* %480, align 4, !tbaa !90
  %482 = shl i64 %346, 32
  %sext72 = add i64 %482, 27779848470528
  %483 = ashr exact i64 %sext72, 32
  %484 = getelementptr inbounds float, float* %14, i64 %483
  %485 = extractelement <64 x float> %351, i64 33
  store float %485, float* %484, align 4, !tbaa !90
  %486 = shl i64 %346, 32
  %sext73 = add i64 %486, 28621662060544
  %487 = ashr exact i64 %sext73, 32
  %488 = getelementptr inbounds float, float* %14, i64 %487
  %489 = extractelement <64 x float> %351, i64 34
  store float %489, float* %488, align 4, !tbaa !90
  %490 = shl i64 %346, 32
  %sext74 = add i64 %490, 29463475650560
  %491 = ashr exact i64 %sext74, 32
  %492 = getelementptr inbounds float, float* %14, i64 %491
  %493 = extractelement <64 x float> %351, i64 35
  store float %493, float* %492, align 4, !tbaa !90
  %494 = shl i64 %346, 32
  %sext75 = add i64 %494, 30305289240576
  %495 = ashr exact i64 %sext75, 32
  %496 = getelementptr inbounds float, float* %14, i64 %495
  %497 = extractelement <64 x float> %351, i64 36
  store float %497, float* %496, align 4, !tbaa !90
  %498 = shl i64 %346, 32
  %sext76 = add i64 %498, 31147102830592
  %499 = ashr exact i64 %sext76, 32
  %500 = getelementptr inbounds float, float* %14, i64 %499
  %501 = extractelement <64 x float> %351, i64 37
  store float %501, float* %500, align 4, !tbaa !90
  %502 = shl i64 %346, 32
  %sext77 = add i64 %502, 31988916420608
  %503 = ashr exact i64 %sext77, 32
  %504 = getelementptr inbounds float, float* %14, i64 %503
  %505 = extractelement <64 x float> %351, i64 38
  store float %505, float* %504, align 4, !tbaa !90
  %506 = shl i64 %346, 32
  %sext78 = add i64 %506, 32830730010624
  %507 = ashr exact i64 %sext78, 32
  %508 = getelementptr inbounds float, float* %14, i64 %507
  %509 = extractelement <64 x float> %351, i64 39
  store float %509, float* %508, align 4, !tbaa !90
  %510 = shl i64 %346, 32
  %sext79 = add i64 %510, 33672543600640
  %511 = ashr exact i64 %sext79, 32
  %512 = getelementptr inbounds float, float* %14, i64 %511
  %513 = extractelement <64 x float> %351, i64 40
  store float %513, float* %512, align 4, !tbaa !90
  %514 = shl i64 %346, 32
  %sext80 = add i64 %514, 34514357190656
  %515 = ashr exact i64 %sext80, 32
  %516 = getelementptr inbounds float, float* %14, i64 %515
  %517 = extractelement <64 x float> %351, i64 41
  store float %517, float* %516, align 4, !tbaa !90
  %518 = shl i64 %346, 32
  %sext81 = add i64 %518, 35356170780672
  %519 = ashr exact i64 %sext81, 32
  %520 = getelementptr inbounds float, float* %14, i64 %519
  %521 = extractelement <64 x float> %351, i64 42
  store float %521, float* %520, align 4, !tbaa !90
  %522 = shl i64 %346, 32
  %sext82 = add i64 %522, 36197984370688
  %523 = ashr exact i64 %sext82, 32
  %524 = getelementptr inbounds float, float* %14, i64 %523
  %525 = extractelement <64 x float> %351, i64 43
  store float %525, float* %524, align 4, !tbaa !90
  %526 = shl i64 %346, 32
  %sext83 = add i64 %526, 37039797960704
  %527 = ashr exact i64 %sext83, 32
  %528 = getelementptr inbounds float, float* %14, i64 %527
  %529 = extractelement <64 x float> %351, i64 44
  store float %529, float* %528, align 4, !tbaa !90
  %530 = shl i64 %346, 32
  %sext84 = add i64 %530, 37881611550720
  %531 = ashr exact i64 %sext84, 32
  %532 = getelementptr inbounds float, float* %14, i64 %531
  %533 = extractelement <64 x float> %351, i64 45
  store float %533, float* %532, align 4, !tbaa !90
  %534 = shl i64 %346, 32
  %sext85 = add i64 %534, 38723425140736
  %535 = ashr exact i64 %sext85, 32
  %536 = getelementptr inbounds float, float* %14, i64 %535
  %537 = extractelement <64 x float> %351, i64 46
  store float %537, float* %536, align 4, !tbaa !90
  %538 = shl i64 %346, 32
  %sext86 = add i64 %538, 39565238730752
  %539 = ashr exact i64 %sext86, 32
  %540 = getelementptr inbounds float, float* %14, i64 %539
  %541 = extractelement <64 x float> %351, i64 47
  store float %541, float* %540, align 4, !tbaa !90
  %542 = shl i64 %346, 32
  %sext87 = add i64 %542, 40407052320768
  %543 = ashr exact i64 %sext87, 32
  %544 = getelementptr inbounds float, float* %14, i64 %543
  %545 = extractelement <64 x float> %351, i64 48
  store float %545, float* %544, align 4, !tbaa !90
  %546 = shl i64 %346, 32
  %sext88 = add i64 %546, 41248865910784
  %547 = ashr exact i64 %sext88, 32
  %548 = getelementptr inbounds float, float* %14, i64 %547
  %549 = extractelement <64 x float> %351, i64 49
  store float %549, float* %548, align 4, !tbaa !90
  %550 = shl i64 %346, 32
  %sext89 = add i64 %550, 42090679500800
  %551 = ashr exact i64 %sext89, 32
  %552 = getelementptr inbounds float, float* %14, i64 %551
  %553 = extractelement <64 x float> %351, i64 50
  store float %553, float* %552, align 4, !tbaa !90
  %554 = shl i64 %346, 32
  %sext90 = add i64 %554, 42932493090816
  %555 = ashr exact i64 %sext90, 32
  %556 = getelementptr inbounds float, float* %14, i64 %555
  %557 = extractelement <64 x float> %351, i64 51
  store float %557, float* %556, align 4, !tbaa !90
  %558 = shl i64 %346, 32
  %sext91 = add i64 %558, 43774306680832
  %559 = ashr exact i64 %sext91, 32
  %560 = getelementptr inbounds float, float* %14, i64 %559
  %561 = extractelement <64 x float> %351, i64 52
  store float %561, float* %560, align 4, !tbaa !90
  %562 = shl i64 %346, 32
  %sext92 = add i64 %562, 44616120270848
  %563 = ashr exact i64 %sext92, 32
  %564 = getelementptr inbounds float, float* %14, i64 %563
  %565 = extractelement <64 x float> %351, i64 53
  store float %565, float* %564, align 4, !tbaa !90
  %566 = shl i64 %346, 32
  %sext93 = add i64 %566, 45457933860864
  %567 = ashr exact i64 %sext93, 32
  %568 = getelementptr inbounds float, float* %14, i64 %567
  %569 = extractelement <64 x float> %351, i64 54
  store float %569, float* %568, align 4, !tbaa !90
  %570 = shl i64 %346, 32
  %sext94 = add i64 %570, 46299747450880
  %571 = ashr exact i64 %sext94, 32
  %572 = getelementptr inbounds float, float* %14, i64 %571
  %573 = extractelement <64 x float> %351, i64 55
  store float %573, float* %572, align 4, !tbaa !90
  %574 = shl i64 %346, 32
  %sext95 = add i64 %574, 47141561040896
  %575 = ashr exact i64 %sext95, 32
  %576 = getelementptr inbounds float, float* %14, i64 %575
  %577 = extractelement <64 x float> %351, i64 56
  store float %577, float* %576, align 4, !tbaa !90
  %578 = shl i64 %346, 32
  %sext96 = add i64 %578, 47983374630912
  %579 = ashr exact i64 %sext96, 32
  %580 = getelementptr inbounds float, float* %14, i64 %579
  %581 = extractelement <64 x float> %351, i64 57
  store float %581, float* %580, align 4, !tbaa !90
  %582 = shl i64 %346, 32
  %sext97 = add i64 %582, 48825188220928
  %583 = ashr exact i64 %sext97, 32
  %584 = getelementptr inbounds float, float* %14, i64 %583
  %585 = extractelement <64 x float> %351, i64 58
  store float %585, float* %584, align 4, !tbaa !90
  %586 = shl i64 %346, 32
  %sext98 = add i64 %586, 49667001810944
  %587 = ashr exact i64 %sext98, 32
  %588 = getelementptr inbounds float, float* %14, i64 %587
  %589 = extractelement <64 x float> %351, i64 59
  store float %589, float* %588, align 4, !tbaa !90
  %590 = shl i64 %346, 32
  %sext99 = add i64 %590, 50508815400960
  %591 = ashr exact i64 %sext99, 32
  %592 = getelementptr inbounds float, float* %14, i64 %591
  %593 = extractelement <64 x float> %351, i64 60
  store float %593, float* %592, align 4, !tbaa !90
  %594 = shl i64 %346, 32
  %sext100 = add i64 %594, 51350628990976
  %595 = ashr exact i64 %sext100, 32
  %596 = getelementptr inbounds float, float* %14, i64 %595
  %597 = extractelement <64 x float> %351, i64 61
  store float %597, float* %596, align 4, !tbaa !90
  %598 = shl i64 %346, 32
  %sext101 = add i64 %598, 52192442580992
  %599 = ashr exact i64 %sext101, 32
  %600 = getelementptr inbounds float, float* %14, i64 %599
  %601 = extractelement <64 x float> %351, i64 62
  store float %601, float* %600, align 4, !tbaa !90
  %602 = shl i64 %346, 32
  %sext102 = add i64 %602, 53034256171008
  %603 = ashr exact i64 %sext102, 32
  %604 = getelementptr inbounds float, float* %14, i64 %603
  %605 = extractelement <64 x float> %351, i64 63
  store float %605, float* %604, align 4, !tbaa !90
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond18 = icmp eq i64 %indvars.iv.next17, 2
  br i1 %exitcond18, label %for_end30, label %for_body29, !prof !5

for_end30:                                        ; preds = %for_body29
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond21 = icmp eq i64 %indvars.iv.next20, 2
  br i1 %exitcond21, label %for_end27, label %for_begin28.preheader, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <64 x float> @llvm.fmuladd.v64f32(<64 x float>, <64 x float>, <64 x float>) #2

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_4_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !93
  %6 = getelementptr inbounds float, float* %4, i64 4
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !93
  %8 = fsub <4 x float> zeroinitializer, %wide.load
  %9 = fsub <4 x float> zeroinitializer, %wide.load2
  %10 = getelementptr inbounds float, float* %3, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %8, <4 x float>* %11, align 4, !tbaa !96
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  store <4 x float> %9, <4 x float>* %13, align 4, !tbaa !96
  %index.next = add i64 %index, 8
  %14 = icmp eq i64 %index.next, 1024
  br i1 %14, label %for_end, label %vector.body, !llvm.loop !99

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_4_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !100
  %6 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  store <4 x float> %6, <4 x float>* %8, align 4, !tbaa !103
  %index.next = add i64 %index, 4
  %9 = icmp eq i64 %index.next, 1024
  br i1 %9, label %for_end, label %vector.body, !llvm.loop !106

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_22(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_22_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_22_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !107
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !107
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !110
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !110
  %14 = fadd <4 x float> %wide.load, %wide.load3
  %15 = fadd <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !113
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !113
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 1024
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !116

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_4_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %0 to float*
  %5 = bitcast i8* %1 to float*
  %6 = load float, float* %5, align 64, !tbaa !117
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %6, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !131
  %9 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !134
  %index.next = add i64 %index, 4
  %12 = icmp eq i64 %index.next, 1024
  br i1 %12, label %for_end, label %vector.body, !llvm.loop !137

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_17(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_17_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_17_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [2048 x <64 x float>], align 16
  %5 = alloca [774400 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = mul nuw nsw i64 %indvar, 14080
  %7 = mul nuw nsw i64 %indvar, 224
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %8 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar31 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next32, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvar31, 55
  %10 = add nuw nsw i64 %6, %9
  %scevgep = getelementptr [774400 x float], [774400 x float]* %5, i64 0, i64 %10
  %scevgep33 = bitcast float* %scevgep to i8*
  %11 = mul nuw nsw i64 %indvar31, 12544
  %12 = add nuw nsw i64 %7, %11
  %scevgep34 = getelementptr i8, i8* %0, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep33, i8* align 4 %scevgep34, i64 220, i1 false)
  %indvar.next32 = add nuw nsw i64 %indvar31, 1
  %exitcond35 = icmp eq i64 %indvar.next32, 256
  br i1 %exitcond35, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond36 = icmp eq i64 %indvar.next, 55
  br i1 %exitcond36, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv25 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next26, %for_end12 ]
  %13 = shl nsw i64 %indvars.iv25, 14
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %14 = bitcast i8* %2 to float*
  br label %for_begin16.preheader

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next23, %for_body11 ]
  %15 = shl i64 %indvars.iv22, 6
  %16 = add nuw nsw i64 %15, %13
  %17 = add nuw nsw i64 %indvars.iv22, %13
  %18 = add nuw nsw i64 %17, 256
  %19 = add nuw nsw i64 %17, 512
  %20 = add nuw nsw i64 %17, 768
  %21 = add nuw nsw i64 %17, 1024
  %22 = add nuw nsw i64 %17, 1280
  %23 = add nuw nsw i64 %17, 1536
  %24 = add nuw nsw i64 %17, 1792
  %25 = add nuw nsw i64 %17, 2048
  %26 = add nuw nsw i64 %17, 2304
  %27 = add nuw nsw i64 %17, 2560
  %28 = add nuw nsw i64 %17, 2816
  %29 = add nuw nsw i64 %17, 3072
  %30 = add nuw nsw i64 %17, 3328
  %31 = add nuw nsw i64 %17, 3584
  %32 = add nuw nsw i64 %17, 3840
  %33 = add nuw nsw i64 %17, 4096
  %34 = add nuw nsw i64 %17, 4352
  %35 = add nuw nsw i64 %17, 4608
  %36 = add nuw nsw i64 %17, 4864
  %37 = add nuw nsw i64 %17, 5120
  %38 = add nuw nsw i64 %17, 5376
  %39 = add nuw nsw i64 %17, 5632
  %40 = add nuw nsw i64 %17, 5888
  %41 = add nuw nsw i64 %17, 6144
  %42 = add nuw nsw i64 %17, 6400
  %43 = add nuw nsw i64 %17, 6656
  %44 = add nuw nsw i64 %17, 6912
  %45 = add nuw nsw i64 %17, 7168
  %46 = add nuw nsw i64 %17, 7424
  %47 = add nuw nsw i64 %17, 7680
  %48 = add nuw nsw i64 %17, 7936
  %49 = add nuw nsw i64 %17, 8192
  %50 = add nuw nsw i64 %17, 8448
  %51 = add nuw nsw i64 %17, 8704
  %52 = add nuw nsw i64 %17, 8960
  %53 = add nuw nsw i64 %17, 9216
  %54 = add nuw nsw i64 %17, 9472
  %55 = add nuw nsw i64 %17, 9728
  %56 = add nuw nsw i64 %17, 9984
  %57 = add nuw nsw i64 %17, 10240
  %58 = add nuw nsw i64 %17, 10496
  %59 = add nuw nsw i64 %17, 10752
  %60 = add nuw nsw i64 %17, 11008
  %61 = add nuw nsw i64 %17, 11264
  %62 = add nuw nsw i64 %17, 11520
  %63 = add nuw nsw i64 %17, 11776
  %64 = add nuw nsw i64 %17, 12032
  %65 = add nuw nsw i64 %17, 12288
  %66 = add nuw nsw i64 %17, 12544
  %67 = add nuw nsw i64 %17, 12800
  %68 = add nuw nsw i64 %17, 13056
  %69 = add nuw nsw i64 %17, 13312
  %70 = add nuw nsw i64 %17, 13568
  %71 = add nuw nsw i64 %17, 13824
  %72 = add nuw nsw i64 %17, 14080
  %73 = add nuw nsw i64 %17, 14336
  %74 = add nuw nsw i64 %17, 14592
  %75 = add nuw nsw i64 %17, 14848
  %76 = add nuw nsw i64 %17, 15104
  %77 = add nuw nsw i64 %17, 15360
  %78 = add nuw nsw i64 %17, 15616
  %79 = add nuw nsw i64 %17, 15872
  %80 = add nuw nsw i64 %17, 16128
  %81 = getelementptr inbounds float, float* %8, i64 %17
  %82 = load float, float* %81, align 4, !tbaa !138
  %83 = insertelement <64 x float> undef, float %82, i32 0
  %84 = getelementptr inbounds float, float* %8, i64 %18
  %85 = load float, float* %84, align 4, !tbaa !138
  %86 = insertelement <64 x float> %83, float %85, i32 1
  %87 = getelementptr inbounds float, float* %8, i64 %19
  %88 = load float, float* %87, align 4, !tbaa !138
  %89 = insertelement <64 x float> %86, float %88, i32 2
  %90 = getelementptr inbounds float, float* %8, i64 %20
  %91 = load float, float* %90, align 4, !tbaa !138
  %92 = insertelement <64 x float> %89, float %91, i32 3
  %93 = getelementptr inbounds float, float* %8, i64 %21
  %94 = load float, float* %93, align 4, !tbaa !138
  %95 = insertelement <64 x float> %92, float %94, i32 4
  %96 = getelementptr inbounds float, float* %8, i64 %22
  %97 = load float, float* %96, align 4, !tbaa !138
  %98 = insertelement <64 x float> %95, float %97, i32 5
  %99 = getelementptr inbounds float, float* %8, i64 %23
  %100 = load float, float* %99, align 4, !tbaa !138
  %101 = insertelement <64 x float> %98, float %100, i32 6
  %102 = getelementptr inbounds float, float* %8, i64 %24
  %103 = load float, float* %102, align 4, !tbaa !138
  %104 = insertelement <64 x float> %101, float %103, i32 7
  %105 = getelementptr inbounds float, float* %8, i64 %25
  %106 = load float, float* %105, align 4, !tbaa !138
  %107 = insertelement <64 x float> %104, float %106, i32 8
  %108 = getelementptr inbounds float, float* %8, i64 %26
  %109 = load float, float* %108, align 4, !tbaa !138
  %110 = insertelement <64 x float> %107, float %109, i32 9
  %111 = getelementptr inbounds float, float* %8, i64 %27
  %112 = load float, float* %111, align 4, !tbaa !138
  %113 = insertelement <64 x float> %110, float %112, i32 10
  %114 = getelementptr inbounds float, float* %8, i64 %28
  %115 = load float, float* %114, align 4, !tbaa !138
  %116 = insertelement <64 x float> %113, float %115, i32 11
  %117 = getelementptr inbounds float, float* %8, i64 %29
  %118 = load float, float* %117, align 4, !tbaa !138
  %119 = insertelement <64 x float> %116, float %118, i32 12
  %120 = getelementptr inbounds float, float* %8, i64 %30
  %121 = load float, float* %120, align 4, !tbaa !138
  %122 = insertelement <64 x float> %119, float %121, i32 13
  %123 = getelementptr inbounds float, float* %8, i64 %31
  %124 = load float, float* %123, align 4, !tbaa !138
  %125 = insertelement <64 x float> %122, float %124, i32 14
  %126 = getelementptr inbounds float, float* %8, i64 %32
  %127 = load float, float* %126, align 4, !tbaa !138
  %128 = insertelement <64 x float> %125, float %127, i32 15
  %129 = getelementptr inbounds float, float* %8, i64 %33
  %130 = load float, float* %129, align 4, !tbaa !138
  %131 = insertelement <64 x float> %128, float %130, i32 16
  %132 = getelementptr inbounds float, float* %8, i64 %34
  %133 = load float, float* %132, align 4, !tbaa !138
  %134 = insertelement <64 x float> %131, float %133, i32 17
  %135 = getelementptr inbounds float, float* %8, i64 %35
  %136 = load float, float* %135, align 4, !tbaa !138
  %137 = insertelement <64 x float> %134, float %136, i32 18
  %138 = getelementptr inbounds float, float* %8, i64 %36
  %139 = load float, float* %138, align 4, !tbaa !138
  %140 = insertelement <64 x float> %137, float %139, i32 19
  %141 = getelementptr inbounds float, float* %8, i64 %37
  %142 = load float, float* %141, align 4, !tbaa !138
  %143 = insertelement <64 x float> %140, float %142, i32 20
  %144 = getelementptr inbounds float, float* %8, i64 %38
  %145 = load float, float* %144, align 4, !tbaa !138
  %146 = insertelement <64 x float> %143, float %145, i32 21
  %147 = getelementptr inbounds float, float* %8, i64 %39
  %148 = load float, float* %147, align 4, !tbaa !138
  %149 = insertelement <64 x float> %146, float %148, i32 22
  %150 = getelementptr inbounds float, float* %8, i64 %40
  %151 = load float, float* %150, align 4, !tbaa !138
  %152 = insertelement <64 x float> %149, float %151, i32 23
  %153 = getelementptr inbounds float, float* %8, i64 %41
  %154 = load float, float* %153, align 4, !tbaa !138
  %155 = insertelement <64 x float> %152, float %154, i32 24
  %156 = getelementptr inbounds float, float* %8, i64 %42
  %157 = load float, float* %156, align 4, !tbaa !138
  %158 = insertelement <64 x float> %155, float %157, i32 25
  %159 = getelementptr inbounds float, float* %8, i64 %43
  %160 = load float, float* %159, align 4, !tbaa !138
  %161 = insertelement <64 x float> %158, float %160, i32 26
  %162 = getelementptr inbounds float, float* %8, i64 %44
  %163 = load float, float* %162, align 4, !tbaa !138
  %164 = insertelement <64 x float> %161, float %163, i32 27
  %165 = getelementptr inbounds float, float* %8, i64 %45
  %166 = load float, float* %165, align 4, !tbaa !138
  %167 = insertelement <64 x float> %164, float %166, i32 28
  %168 = getelementptr inbounds float, float* %8, i64 %46
  %169 = load float, float* %168, align 4, !tbaa !138
  %170 = insertelement <64 x float> %167, float %169, i32 29
  %171 = getelementptr inbounds float, float* %8, i64 %47
  %172 = load float, float* %171, align 4, !tbaa !138
  %173 = insertelement <64 x float> %170, float %172, i32 30
  %174 = getelementptr inbounds float, float* %8, i64 %48
  %175 = load float, float* %174, align 4, !tbaa !138
  %176 = insertelement <64 x float> %173, float %175, i32 31
  %177 = getelementptr inbounds float, float* %8, i64 %49
  %178 = load float, float* %177, align 4, !tbaa !138
  %179 = insertelement <64 x float> %176, float %178, i32 32
  %180 = getelementptr inbounds float, float* %8, i64 %50
  %181 = load float, float* %180, align 4, !tbaa !138
  %182 = insertelement <64 x float> %179, float %181, i32 33
  %183 = getelementptr inbounds float, float* %8, i64 %51
  %184 = load float, float* %183, align 4, !tbaa !138
  %185 = insertelement <64 x float> %182, float %184, i32 34
  %186 = getelementptr inbounds float, float* %8, i64 %52
  %187 = load float, float* %186, align 4, !tbaa !138
  %188 = insertelement <64 x float> %185, float %187, i32 35
  %189 = getelementptr inbounds float, float* %8, i64 %53
  %190 = load float, float* %189, align 4, !tbaa !138
  %191 = insertelement <64 x float> %188, float %190, i32 36
  %192 = getelementptr inbounds float, float* %8, i64 %54
  %193 = load float, float* %192, align 4, !tbaa !138
  %194 = insertelement <64 x float> %191, float %193, i32 37
  %195 = getelementptr inbounds float, float* %8, i64 %55
  %196 = load float, float* %195, align 4, !tbaa !138
  %197 = insertelement <64 x float> %194, float %196, i32 38
  %198 = getelementptr inbounds float, float* %8, i64 %56
  %199 = load float, float* %198, align 4, !tbaa !138
  %200 = insertelement <64 x float> %197, float %199, i32 39
  %201 = getelementptr inbounds float, float* %8, i64 %57
  %202 = load float, float* %201, align 4, !tbaa !138
  %203 = insertelement <64 x float> %200, float %202, i32 40
  %204 = getelementptr inbounds float, float* %8, i64 %58
  %205 = load float, float* %204, align 4, !tbaa !138
  %206 = insertelement <64 x float> %203, float %205, i32 41
  %207 = getelementptr inbounds float, float* %8, i64 %59
  %208 = load float, float* %207, align 4, !tbaa !138
  %209 = insertelement <64 x float> %206, float %208, i32 42
  %210 = getelementptr inbounds float, float* %8, i64 %60
  %211 = load float, float* %210, align 4, !tbaa !138
  %212 = insertelement <64 x float> %209, float %211, i32 43
  %213 = getelementptr inbounds float, float* %8, i64 %61
  %214 = load float, float* %213, align 4, !tbaa !138
  %215 = insertelement <64 x float> %212, float %214, i32 44
  %216 = getelementptr inbounds float, float* %8, i64 %62
  %217 = load float, float* %216, align 4, !tbaa !138
  %218 = insertelement <64 x float> %215, float %217, i32 45
  %219 = getelementptr inbounds float, float* %8, i64 %63
  %220 = load float, float* %219, align 4, !tbaa !138
  %221 = insertelement <64 x float> %218, float %220, i32 46
  %222 = getelementptr inbounds float, float* %8, i64 %64
  %223 = load float, float* %222, align 4, !tbaa !138
  %224 = insertelement <64 x float> %221, float %223, i32 47
  %225 = getelementptr inbounds float, float* %8, i64 %65
  %226 = load float, float* %225, align 4, !tbaa !138
  %227 = insertelement <64 x float> %224, float %226, i32 48
  %228 = getelementptr inbounds float, float* %8, i64 %66
  %229 = load float, float* %228, align 4, !tbaa !138
  %230 = insertelement <64 x float> %227, float %229, i32 49
  %231 = getelementptr inbounds float, float* %8, i64 %67
  %232 = load float, float* %231, align 4, !tbaa !138
  %233 = insertelement <64 x float> %230, float %232, i32 50
  %234 = getelementptr inbounds float, float* %8, i64 %68
  %235 = load float, float* %234, align 4, !tbaa !138
  %236 = insertelement <64 x float> %233, float %235, i32 51
  %237 = getelementptr inbounds float, float* %8, i64 %69
  %238 = load float, float* %237, align 4, !tbaa !138
  %239 = insertelement <64 x float> %236, float %238, i32 52
  %240 = getelementptr inbounds float, float* %8, i64 %70
  %241 = load float, float* %240, align 4, !tbaa !138
  %242 = insertelement <64 x float> %239, float %241, i32 53
  %243 = getelementptr inbounds float, float* %8, i64 %71
  %244 = load float, float* %243, align 4, !tbaa !138
  %245 = insertelement <64 x float> %242, float %244, i32 54
  %246 = getelementptr inbounds float, float* %8, i64 %72
  %247 = load float, float* %246, align 4, !tbaa !138
  %248 = insertelement <64 x float> %245, float %247, i32 55
  %249 = getelementptr inbounds float, float* %8, i64 %73
  %250 = load float, float* %249, align 4, !tbaa !138
  %251 = insertelement <64 x float> %248, float %250, i32 56
  %252 = getelementptr inbounds float, float* %8, i64 %74
  %253 = load float, float* %252, align 4, !tbaa !138
  %254 = insertelement <64 x float> %251, float %253, i32 57
  %255 = getelementptr inbounds float, float* %8, i64 %75
  %256 = load float, float* %255, align 4, !tbaa !138
  %257 = insertelement <64 x float> %254, float %256, i32 58
  %258 = getelementptr inbounds float, float* %8, i64 %76
  %259 = load float, float* %258, align 4, !tbaa !138
  %260 = insertelement <64 x float> %257, float %259, i32 59
  %261 = getelementptr inbounds float, float* %8, i64 %77
  %262 = load float, float* %261, align 4, !tbaa !138
  %263 = insertelement <64 x float> %260, float %262, i32 60
  %264 = getelementptr inbounds float, float* %8, i64 %78
  %265 = load float, float* %264, align 4, !tbaa !138
  %266 = insertelement <64 x float> %263, float %265, i32 61
  %267 = getelementptr inbounds float, float* %8, i64 %79
  %268 = load float, float* %267, align 4, !tbaa !138
  %269 = insertelement <64 x float> %266, float %268, i32 62
  %270 = getelementptr inbounds float, float* %8, i64 %80
  %271 = load float, float* %270, align 4, !tbaa !138
  %272 = insertelement <64 x float> %269, float %271, i32 63
  %273 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %16
  %274 = bitcast float* %273 to <64 x float>*
  store <64 x float> %272, <64 x float>* %274, align 16, !tbaa !141
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 256
  br i1 %exitcond24, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %exitcond27 = icmp eq i64 %indvars.iv.next26, 8
  br i1 %exitcond27, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_begin13.preheader
  %275 = phi i32 [ 0, %for_begin13.preheader ], [ %341, %for_end24 ]
  %276 = urem i32 %275, 28
  %277 = mul nuw nsw i32 %276, 28160
  %278 = udiv i32 %275, 28
  %279 = shl i32 %278, 14
  %280 = sext i32 %279 to i64
  %281 = zext i32 %277 to i64
  br label %for_body17

for_end15:                                        ; preds = %for_end24
  ret void

for_begin22.preheader:                            ; preds = %for_end21
  %282 = mul nuw nsw i32 %276, 28
  %283 = mul nsw i32 %278, 50176
  %284 = or i32 %283, %282
  br label %for_begin25.preheader

for_body17:                                       ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv12 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next13, %for_end21 ]
  %285 = shl nsw i64 %indvars.iv12, 8
  %286 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %285
  %287 = bitcast float* %286 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %287, align 16, !tbaa !144
  %288 = or i64 %285, 64
  %289 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %288
  %290 = bitcast float* %289 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %290, align 16, !tbaa !144
  %291 = or i64 %285, 128
  %292 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %291
  %293 = bitcast float* %292 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %293, align 16, !tbaa !144
  %294 = or i64 %285, 192
  %295 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %294
  %296 = bitcast float* %295 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %296, align 16, !tbaa !144
  %297 = shl nsw i64 %indvars.iv12, 3
  %298 = add nuw nsw i64 %297, %281
  br label %for_body20

for_body20:                                       ; preds = %for_body20, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body20 ]
  %299 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %336, %for_body20 ]
  %300 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %329, %for_body20 ]
  %301 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %322, %for_body20 ]
  %302 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %315, %for_body20 ]
  %303 = mul nuw nsw i64 %indvars.iv, 55
  %304 = add nuw nsw i64 %298, %303
  %305 = and i64 %304, 4294967295
  %306 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %305
  %307 = load float, float* %306, align 4, !tbaa !147
  %308 = insertelement <64 x float> undef, float %307, i32 0
  %309 = shufflevector <64 x float> %308, <64 x float> undef, <64 x i32> zeroinitializer
  %310 = shl i64 %indvars.iv, 6
  %311 = add nuw nsw i64 %310, %280
  %312 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %311
  %313 = bitcast float* %312 to <64 x float>*
  %314 = load <64 x float>, <64 x float>* %313, align 16, !tbaa !141
  %315 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %309, <64 x float> %314, <64 x float> %302)
  %316 = add nuw i64 %304, 2
  %317 = and i64 %316, 4294967295
  %318 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !147
  %320 = insertelement <64 x float> undef, float %319, i32 0
  %321 = shufflevector <64 x float> %320, <64 x float> undef, <64 x i32> zeroinitializer
  %322 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %321, <64 x float> %314, <64 x float> %301)
  %323 = add nuw i64 %304, 4
  %324 = and i64 %323, 4294967295
  %325 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %324
  %326 = load float, float* %325, align 4, !tbaa !147
  %327 = insertelement <64 x float> undef, float %326, i32 0
  %328 = shufflevector <64 x float> %327, <64 x float> undef, <64 x i32> zeroinitializer
  %329 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %328, <64 x float> %314, <64 x float> %300)
  %330 = add nuw i64 %304, 6
  %331 = and i64 %330, 4294967295
  %332 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !147
  %334 = insertelement <64 x float> undef, float %333, i32 0
  %335 = shufflevector <64 x float> %334, <64 x float> undef, <64 x i32> zeroinitializer
  %336 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %335, <64 x float> %314, <64 x float> %299)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <64 x float> %315, <64 x float>* %287, align 16, !tbaa !144
  store <64 x float> %322, <64 x float>* %290, align 16, !tbaa !144
  store <64 x float> %329, <64 x float>* %293, align 16, !tbaa !144
  store <64 x float> %336, <64 x float>* %296, align 16, !tbaa !144
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp eq i64 %indvars.iv.next13, 7
  br i1 %exitcond14, label %for_begin22.preheader, label %for_body17, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_begin22.preheader
  %indvars.iv18 = phi i64 [ 0, %for_begin22.preheader ], [ %indvars.iv.next19, %for_end27 ]
  %337 = shl i64 %indvars.iv18, 8
  %indvars.iv18.tr = trunc i64 %indvars.iv18 to i32
  %338 = shl i32 %indvars.iv18.tr, 2
  %339 = add i32 %284, %338
  %340 = zext i32 %339 to i64
  br label %for_body26

for_end24:                                        ; preds = %for_end27
  %341 = add nuw nsw i32 %275, 1
  %exitcond21 = icmp eq i32 %341, 224
  br i1 %exitcond21, label %for_end15, label %for_begin16.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv15 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next16, %for_body26 ]
  %342 = add nuw nsw i64 %indvars.iv15, %340
  %343 = add nuw nsw i64 %342, 784
  %344 = add nuw nsw i64 %342, 1568
  %345 = add nuw nsw i64 %342, 2352
  %346 = add nuw nsw i64 %342, 3136
  %347 = add nuw nsw i64 %342, 3920
  %348 = add nuw nsw i64 %342, 4704
  %349 = add nuw nsw i64 %342, 5488
  %350 = add nuw nsw i64 %342, 6272
  %351 = add nuw nsw i64 %342, 7056
  %352 = add nuw nsw i64 %342, 7840
  %353 = add nuw nsw i64 %342, 8624
  %354 = add nuw nsw i64 %342, 9408
  %355 = add nuw nsw i64 %342, 10192
  %356 = add nuw nsw i64 %342, 10976
  %357 = add nuw nsw i64 %342, 11760
  %358 = add nuw nsw i64 %342, 12544
  %359 = add nuw nsw i64 %342, 13328
  %360 = add nuw nsw i64 %342, 14112
  %361 = add nuw nsw i64 %342, 14896
  %362 = add nuw nsw i64 %342, 15680
  %363 = add nuw nsw i64 %342, 16464
  %364 = add nuw nsw i64 %342, 17248
  %365 = add nuw nsw i64 %342, 18032
  %366 = add nuw nsw i64 %342, 18816
  %367 = add nuw nsw i64 %342, 19600
  %368 = add nuw nsw i64 %342, 20384
  %369 = add nuw nsw i64 %342, 21168
  %370 = add nuw nsw i64 %342, 21952
  %371 = add nuw nsw i64 %342, 22736
  %372 = add nuw nsw i64 %342, 23520
  %373 = add nuw nsw i64 %342, 24304
  %374 = add nuw nsw i64 %342, 25088
  %375 = add nuw nsw i64 %342, 25872
  %376 = add nuw nsw i64 %342, 26656
  %377 = add nuw nsw i64 %342, 27440
  %378 = add nuw nsw i64 %342, 28224
  %379 = add nuw nsw i64 %342, 29008
  %380 = add nuw nsw i64 %342, 29792
  %381 = add nuw nsw i64 %342, 30576
  %382 = add nuw nsw i64 %342, 31360
  %383 = add nuw nsw i64 %342, 32144
  %384 = add nuw nsw i64 %342, 32928
  %385 = add nuw nsw i64 %342, 33712
  %386 = add nuw nsw i64 %342, 34496
  %387 = add nuw nsw i64 %342, 35280
  %388 = add nuw nsw i64 %342, 36064
  %389 = add nuw nsw i64 %342, 36848
  %390 = add nuw nsw i64 %342, 37632
  %391 = add nuw nsw i64 %342, 38416
  %392 = add nuw nsw i64 %342, 39200
  %393 = add nuw nsw i64 %342, 39984
  %394 = add nuw nsw i64 %342, 40768
  %395 = add nuw nsw i64 %342, 41552
  %396 = add nuw nsw i64 %342, 42336
  %397 = add nuw nsw i64 %342, 43120
  %398 = add nuw nsw i64 %342, 43904
  %399 = add nuw nsw i64 %342, 44688
  %400 = add nuw nsw i64 %342, 45472
  %401 = add nuw nsw i64 %342, 46256
  %402 = add nuw nsw i64 %342, 47040
  %403 = add nuw nsw i64 %342, 47824
  %404 = add nuw nsw i64 %342, 48608
  %405 = add nuw nsw i64 %342, 49392
  %406 = shl i64 %indvars.iv15, 6
  %407 = add nuw nsw i64 %406, %337
  %408 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %407
  %409 = bitcast float* %408 to <64 x float>*
  %410 = load <64 x float>, <64 x float>* %409, align 16, !tbaa !144
  %411 = getelementptr inbounds float, float* %14, i64 %342
  %412 = extractelement <64 x float> %410, i64 0
  store float %412, float* %411, align 4, !tbaa !150
  %413 = getelementptr inbounds float, float* %14, i64 %343
  %414 = extractelement <64 x float> %410, i64 1
  store float %414, float* %413, align 4, !tbaa !150
  %415 = getelementptr inbounds float, float* %14, i64 %344
  %416 = extractelement <64 x float> %410, i64 2
  store float %416, float* %415, align 4, !tbaa !150
  %417 = getelementptr inbounds float, float* %14, i64 %345
  %418 = extractelement <64 x float> %410, i64 3
  store float %418, float* %417, align 4, !tbaa !150
  %419 = getelementptr inbounds float, float* %14, i64 %346
  %420 = extractelement <64 x float> %410, i64 4
  store float %420, float* %419, align 4, !tbaa !150
  %421 = getelementptr inbounds float, float* %14, i64 %347
  %422 = extractelement <64 x float> %410, i64 5
  store float %422, float* %421, align 4, !tbaa !150
  %423 = getelementptr inbounds float, float* %14, i64 %348
  %424 = extractelement <64 x float> %410, i64 6
  store float %424, float* %423, align 4, !tbaa !150
  %425 = getelementptr inbounds float, float* %14, i64 %349
  %426 = extractelement <64 x float> %410, i64 7
  store float %426, float* %425, align 4, !tbaa !150
  %427 = getelementptr inbounds float, float* %14, i64 %350
  %428 = extractelement <64 x float> %410, i64 8
  store float %428, float* %427, align 4, !tbaa !150
  %429 = getelementptr inbounds float, float* %14, i64 %351
  %430 = extractelement <64 x float> %410, i64 9
  store float %430, float* %429, align 4, !tbaa !150
  %431 = getelementptr inbounds float, float* %14, i64 %352
  %432 = extractelement <64 x float> %410, i64 10
  store float %432, float* %431, align 4, !tbaa !150
  %433 = getelementptr inbounds float, float* %14, i64 %353
  %434 = extractelement <64 x float> %410, i64 11
  store float %434, float* %433, align 4, !tbaa !150
  %435 = getelementptr inbounds float, float* %14, i64 %354
  %436 = extractelement <64 x float> %410, i64 12
  store float %436, float* %435, align 4, !tbaa !150
  %437 = getelementptr inbounds float, float* %14, i64 %355
  %438 = extractelement <64 x float> %410, i64 13
  store float %438, float* %437, align 4, !tbaa !150
  %439 = getelementptr inbounds float, float* %14, i64 %356
  %440 = extractelement <64 x float> %410, i64 14
  store float %440, float* %439, align 4, !tbaa !150
  %441 = getelementptr inbounds float, float* %14, i64 %357
  %442 = extractelement <64 x float> %410, i64 15
  store float %442, float* %441, align 4, !tbaa !150
  %443 = getelementptr inbounds float, float* %14, i64 %358
  %444 = extractelement <64 x float> %410, i64 16
  store float %444, float* %443, align 4, !tbaa !150
  %445 = getelementptr inbounds float, float* %14, i64 %359
  %446 = extractelement <64 x float> %410, i64 17
  store float %446, float* %445, align 4, !tbaa !150
  %447 = getelementptr inbounds float, float* %14, i64 %360
  %448 = extractelement <64 x float> %410, i64 18
  store float %448, float* %447, align 4, !tbaa !150
  %449 = getelementptr inbounds float, float* %14, i64 %361
  %450 = extractelement <64 x float> %410, i64 19
  store float %450, float* %449, align 4, !tbaa !150
  %451 = getelementptr inbounds float, float* %14, i64 %362
  %452 = extractelement <64 x float> %410, i64 20
  store float %452, float* %451, align 4, !tbaa !150
  %453 = getelementptr inbounds float, float* %14, i64 %363
  %454 = extractelement <64 x float> %410, i64 21
  store float %454, float* %453, align 4, !tbaa !150
  %455 = getelementptr inbounds float, float* %14, i64 %364
  %456 = extractelement <64 x float> %410, i64 22
  store float %456, float* %455, align 4, !tbaa !150
  %457 = getelementptr inbounds float, float* %14, i64 %365
  %458 = extractelement <64 x float> %410, i64 23
  store float %458, float* %457, align 4, !tbaa !150
  %459 = getelementptr inbounds float, float* %14, i64 %366
  %460 = extractelement <64 x float> %410, i64 24
  store float %460, float* %459, align 4, !tbaa !150
  %461 = getelementptr inbounds float, float* %14, i64 %367
  %462 = extractelement <64 x float> %410, i64 25
  store float %462, float* %461, align 4, !tbaa !150
  %463 = getelementptr inbounds float, float* %14, i64 %368
  %464 = extractelement <64 x float> %410, i64 26
  store float %464, float* %463, align 4, !tbaa !150
  %465 = getelementptr inbounds float, float* %14, i64 %369
  %466 = extractelement <64 x float> %410, i64 27
  store float %466, float* %465, align 4, !tbaa !150
  %467 = getelementptr inbounds float, float* %14, i64 %370
  %468 = extractelement <64 x float> %410, i64 28
  store float %468, float* %467, align 4, !tbaa !150
  %469 = getelementptr inbounds float, float* %14, i64 %371
  %470 = extractelement <64 x float> %410, i64 29
  store float %470, float* %469, align 4, !tbaa !150
  %471 = getelementptr inbounds float, float* %14, i64 %372
  %472 = extractelement <64 x float> %410, i64 30
  store float %472, float* %471, align 4, !tbaa !150
  %473 = getelementptr inbounds float, float* %14, i64 %373
  %474 = extractelement <64 x float> %410, i64 31
  store float %474, float* %473, align 4, !tbaa !150
  %475 = getelementptr inbounds float, float* %14, i64 %374
  %476 = extractelement <64 x float> %410, i64 32
  store float %476, float* %475, align 4, !tbaa !150
  %477 = getelementptr inbounds float, float* %14, i64 %375
  %478 = extractelement <64 x float> %410, i64 33
  store float %478, float* %477, align 4, !tbaa !150
  %479 = getelementptr inbounds float, float* %14, i64 %376
  %480 = extractelement <64 x float> %410, i64 34
  store float %480, float* %479, align 4, !tbaa !150
  %481 = getelementptr inbounds float, float* %14, i64 %377
  %482 = extractelement <64 x float> %410, i64 35
  store float %482, float* %481, align 4, !tbaa !150
  %483 = getelementptr inbounds float, float* %14, i64 %378
  %484 = extractelement <64 x float> %410, i64 36
  store float %484, float* %483, align 4, !tbaa !150
  %485 = getelementptr inbounds float, float* %14, i64 %379
  %486 = extractelement <64 x float> %410, i64 37
  store float %486, float* %485, align 4, !tbaa !150
  %487 = getelementptr inbounds float, float* %14, i64 %380
  %488 = extractelement <64 x float> %410, i64 38
  store float %488, float* %487, align 4, !tbaa !150
  %489 = getelementptr inbounds float, float* %14, i64 %381
  %490 = extractelement <64 x float> %410, i64 39
  store float %490, float* %489, align 4, !tbaa !150
  %491 = getelementptr inbounds float, float* %14, i64 %382
  %492 = extractelement <64 x float> %410, i64 40
  store float %492, float* %491, align 4, !tbaa !150
  %493 = getelementptr inbounds float, float* %14, i64 %383
  %494 = extractelement <64 x float> %410, i64 41
  store float %494, float* %493, align 4, !tbaa !150
  %495 = getelementptr inbounds float, float* %14, i64 %384
  %496 = extractelement <64 x float> %410, i64 42
  store float %496, float* %495, align 4, !tbaa !150
  %497 = getelementptr inbounds float, float* %14, i64 %385
  %498 = extractelement <64 x float> %410, i64 43
  store float %498, float* %497, align 4, !tbaa !150
  %499 = getelementptr inbounds float, float* %14, i64 %386
  %500 = extractelement <64 x float> %410, i64 44
  store float %500, float* %499, align 4, !tbaa !150
  %501 = getelementptr inbounds float, float* %14, i64 %387
  %502 = extractelement <64 x float> %410, i64 45
  store float %502, float* %501, align 4, !tbaa !150
  %503 = getelementptr inbounds float, float* %14, i64 %388
  %504 = extractelement <64 x float> %410, i64 46
  store float %504, float* %503, align 4, !tbaa !150
  %505 = getelementptr inbounds float, float* %14, i64 %389
  %506 = extractelement <64 x float> %410, i64 47
  store float %506, float* %505, align 4, !tbaa !150
  %507 = getelementptr inbounds float, float* %14, i64 %390
  %508 = extractelement <64 x float> %410, i64 48
  store float %508, float* %507, align 4, !tbaa !150
  %509 = getelementptr inbounds float, float* %14, i64 %391
  %510 = extractelement <64 x float> %410, i64 49
  store float %510, float* %509, align 4, !tbaa !150
  %511 = getelementptr inbounds float, float* %14, i64 %392
  %512 = extractelement <64 x float> %410, i64 50
  store float %512, float* %511, align 4, !tbaa !150
  %513 = getelementptr inbounds float, float* %14, i64 %393
  %514 = extractelement <64 x float> %410, i64 51
  store float %514, float* %513, align 4, !tbaa !150
  %515 = getelementptr inbounds float, float* %14, i64 %394
  %516 = extractelement <64 x float> %410, i64 52
  store float %516, float* %515, align 4, !tbaa !150
  %517 = getelementptr inbounds float, float* %14, i64 %395
  %518 = extractelement <64 x float> %410, i64 53
  store float %518, float* %517, align 4, !tbaa !150
  %519 = getelementptr inbounds float, float* %14, i64 %396
  %520 = extractelement <64 x float> %410, i64 54
  store float %520, float* %519, align 4, !tbaa !150
  %521 = getelementptr inbounds float, float* %14, i64 %397
  %522 = extractelement <64 x float> %410, i64 55
  store float %522, float* %521, align 4, !tbaa !150
  %523 = getelementptr inbounds float, float* %14, i64 %398
  %524 = extractelement <64 x float> %410, i64 56
  store float %524, float* %523, align 4, !tbaa !150
  %525 = getelementptr inbounds float, float* %14, i64 %399
  %526 = extractelement <64 x float> %410, i64 57
  store float %526, float* %525, align 4, !tbaa !150
  %527 = getelementptr inbounds float, float* %14, i64 %400
  %528 = extractelement <64 x float> %410, i64 58
  store float %528, float* %527, align 4, !tbaa !150
  %529 = getelementptr inbounds float, float* %14, i64 %401
  %530 = extractelement <64 x float> %410, i64 59
  store float %530, float* %529, align 4, !tbaa !150
  %531 = getelementptr inbounds float, float* %14, i64 %402
  %532 = extractelement <64 x float> %410, i64 60
  store float %532, float* %531, align 4, !tbaa !150
  %533 = getelementptr inbounds float, float* %14, i64 %403
  %534 = extractelement <64 x float> %410, i64 61
  store float %534, float* %533, align 4, !tbaa !150
  %535 = getelementptr inbounds float, float* %14, i64 %404
  %536 = extractelement <64 x float> %410, i64 62
  store float %536, float* %535, align 4, !tbaa !150
  %537 = getelementptr inbounds float, float* %14, i64 %405
  %538 = extractelement <64 x float> %410, i64 63
  store float %538, float* %537, align 4, !tbaa !150
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond17 = icmp eq i64 %indvars.iv.next16, 4
  br i1 %exitcond17, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %exitcond20 = icmp eq i64 %indvars.iv.next19, 7
  br i1 %exitcond20, label %for_end24, label %for_begin25.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_3_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !153
  %6 = getelementptr inbounds float, float* %4, i64 4
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !153
  %8 = fsub <4 x float> zeroinitializer, %wide.load
  %9 = fsub <4 x float> zeroinitializer, %wide.load2
  %10 = getelementptr inbounds float, float* %3, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %8, <4 x float>* %11, align 4, !tbaa !156
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  store <4 x float> %9, <4 x float>* %13, align 4, !tbaa !156
  %index.next = add i64 %index, 8
  %14 = icmp eq i64 %index.next, 512
  br i1 %14, label %for_end, label %vector.body, !llvm.loop !159

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_20(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_20_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_20_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !160
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !160
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !163
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !163
  %14 = fadd <4 x float> %wide.load, %wide.load3
  %15 = fadd <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !166
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !166
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 512
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !169

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_19(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_19_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_19_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !170
  %5 = bitcast i8* %1 to float*
  %6 = bitcast i8* %0 to float*
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %5, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !184
  %9 = getelementptr inbounds float, float* %7, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !184
  %11 = fadd <4 x float> %broadcast.splat4, %wide.load
  %12 = fadd <4 x float> %broadcast.splat6, %wide.load2
  %13 = getelementptr inbounds float, float* %6, i64 %index
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %11, <4 x float>* %14, align 4, !tbaa !187
  %15 = getelementptr inbounds float, float* %13, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> %12, <4 x float>* %16, align 4, !tbaa !187
  %index.next = add i64 %index, 8
  %17 = icmp eq i64 %index.next, 512
  br i1 %17, label %for_end, label %vector.body, !llvm.loop !190

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_23(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_23_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_23_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !191
  %5 = bitcast i8* %1 to float*
  %6 = bitcast i8* %0 to float*
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %5, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !205
  %9 = getelementptr inbounds float, float* %7, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !205
  %11 = fadd <4 x float> %broadcast.splat4, %wide.load
  %12 = fadd <4 x float> %broadcast.splat6, %wide.load2
  %13 = getelementptr inbounds float, float* %6, i64 %index
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %11, <4 x float>* %14, align 4, !tbaa !208
  %15 = getelementptr inbounds float, float* %13, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> %12, <4 x float>* %16, align 4, !tbaa !208
  %index.next = add i64 %index, 8
  %17 = icmp eq i64 %index.next, 2048
  br i1 %17, label %for_end, label %vector.body, !llvm.loop !211

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_3_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !212
  %6 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  store <4 x float> %6, <4 x float>* %8, align 4, !tbaa !215
  %index.next = add i64 %index, 4
  %9 = icmp eq i64 %index.next, 512
  br i1 %9, label %for_end, label %vector.body, !llvm.loop !218

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_16(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_16_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_16_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = load float, float* %4, align 64, !tbaa !219
  %6 = bitcast i8* %0 to float*
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %5, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %5, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !233
  %9 = getelementptr inbounds float, float* %7, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !233
  %11 = fmul <4 x float> %wide.load, %broadcast.splat4
  %12 = fmul <4 x float> %wide.load2, %broadcast.splat6
  %13 = getelementptr inbounds float, float* %6, i64 %index
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %11, <4 x float>* %14, align 4, !tbaa !236
  %15 = getelementptr inbounds float, float* %13, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> %12, <4 x float>* %16, align 4, !tbaa !236
  %index.next = add i64 %index, 8
  %17 = icmp eq i64 %index.next, 1000
  br i1 %17, label %for_end, label %vector.body, !llvm.loop !239

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_13(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_13_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_13_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !240
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !240
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !243
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !243
  %14 = fmul <4 x float> %wide.load, %wide.load3
  %15 = fmul <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !246
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !246
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 512
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !249

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_2_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !250
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %4, align 4, !tbaa !250
  %5 = fsub <4 x float> zeroinitializer, %wide.load
  %6 = fsub <4 x float> zeroinitializer, %wide.load2
  %7 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %5, <4 x float>* %7, align 4, !tbaa !253
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %6, <4 x float>* %9, align 4, !tbaa !253
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !250
  %12 = getelementptr inbounds i8, i8* %1, i64 48
  %13 = bitcast i8* %12 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !250
  %14 = fsub <4 x float> zeroinitializer, %wide.load.1
  %15 = fsub <4 x float> zeroinitializer, %wide.load2.1
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !253
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !253
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !250
  %22 = getelementptr inbounds i8, i8* %1, i64 80
  %23 = bitcast i8* %22 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !250
  %24 = fsub <4 x float> zeroinitializer, %wide.load.2
  %25 = fsub <4 x float> zeroinitializer, %wide.load2.2
  %26 = getelementptr inbounds i8, i8* %0, i64 64
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %24, <4 x float>* %27, align 4, !tbaa !253
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %25, <4 x float>* %29, align 4, !tbaa !253
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !250
  %32 = getelementptr inbounds i8, i8* %1, i64 112
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !250
  %34 = fsub <4 x float> zeroinitializer, %wide.load.3
  %35 = fsub <4 x float> zeroinitializer, %wide.load2.3
  %36 = getelementptr inbounds i8, i8* %0, i64 96
  %37 = bitcast i8* %36 to <4 x float>*
  store <4 x float> %34, <4 x float>* %37, align 4, !tbaa !253
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %35, <4 x float>* %39, align 4, !tbaa !253
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !250
  %42 = getelementptr inbounds i8, i8* %1, i64 144
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !250
  %44 = fsub <4 x float> zeroinitializer, %wide.load.4
  %45 = fsub <4 x float> zeroinitializer, %wide.load2.4
  %46 = getelementptr inbounds i8, i8* %0, i64 128
  %47 = bitcast i8* %46 to <4 x float>*
  store <4 x float> %44, <4 x float>* %47, align 4, !tbaa !253
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %45, <4 x float>* %49, align 4, !tbaa !253
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !250
  %52 = getelementptr inbounds i8, i8* %1, i64 176
  %53 = bitcast i8* %52 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %53, align 4, !tbaa !250
  %54 = fsub <4 x float> zeroinitializer, %wide.load.5
  %55 = fsub <4 x float> zeroinitializer, %wide.load2.5
  %56 = getelementptr inbounds i8, i8* %0, i64 160
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> %54, <4 x float>* %57, align 4, !tbaa !253
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %55, <4 x float>* %59, align 4, !tbaa !253
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !250
  %62 = getelementptr inbounds i8, i8* %1, i64 208
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !250
  %64 = fsub <4 x float> zeroinitializer, %wide.load.6
  %65 = fsub <4 x float> zeroinitializer, %wide.load2.6
  %66 = getelementptr inbounds i8, i8* %0, i64 192
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !253
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !253
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !250
  %72 = getelementptr inbounds i8, i8* %1, i64 240
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !250
  %74 = fsub <4 x float> zeroinitializer, %wide.load.7
  %75 = fsub <4 x float> zeroinitializer, %wide.load2.7
  %76 = getelementptr inbounds i8, i8* %0, i64 224
  %77 = bitcast i8* %76 to <4 x float>*
  store <4 x float> %74, <4 x float>* %77, align 4, !tbaa !253
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %75, <4 x float>* %79, align 4, !tbaa !253
  %80 = getelementptr inbounds i8, i8* %1, i64 256
  %81 = bitcast i8* %80 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %81, align 4, !tbaa !250
  %82 = getelementptr inbounds i8, i8* %1, i64 272
  %83 = bitcast i8* %82 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !250
  %84 = fsub <4 x float> zeroinitializer, %wide.load.8
  %85 = fsub <4 x float> zeroinitializer, %wide.load2.8
  %86 = getelementptr inbounds i8, i8* %0, i64 256
  %87 = bitcast i8* %86 to <4 x float>*
  store <4 x float> %84, <4 x float>* %87, align 4, !tbaa !253
  %88 = getelementptr inbounds i8, i8* %0, i64 272
  %89 = bitcast i8* %88 to <4 x float>*
  store <4 x float> %85, <4 x float>* %89, align 4, !tbaa !253
  %90 = getelementptr inbounds i8, i8* %1, i64 288
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !250
  %92 = getelementptr inbounds i8, i8* %1, i64 304
  %93 = bitcast i8* %92 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %93, align 4, !tbaa !250
  %94 = fsub <4 x float> zeroinitializer, %wide.load.9
  %95 = fsub <4 x float> zeroinitializer, %wide.load2.9
  %96 = getelementptr inbounds i8, i8* %0, i64 288
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %94, <4 x float>* %97, align 4, !tbaa !253
  %98 = getelementptr inbounds i8, i8* %0, i64 304
  %99 = bitcast i8* %98 to <4 x float>*
  store <4 x float> %95, <4 x float>* %99, align 4, !tbaa !253
  %100 = getelementptr inbounds i8, i8* %1, i64 320
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !250
  %102 = getelementptr inbounds i8, i8* %1, i64 336
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !250
  %104 = fsub <4 x float> zeroinitializer, %wide.load.10
  %105 = fsub <4 x float> zeroinitializer, %wide.load2.10
  %106 = getelementptr inbounds i8, i8* %0, i64 320
  %107 = bitcast i8* %106 to <4 x float>*
  store <4 x float> %104, <4 x float>* %107, align 4, !tbaa !253
  %108 = getelementptr inbounds i8, i8* %0, i64 336
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %105, <4 x float>* %109, align 4, !tbaa !253
  %110 = getelementptr inbounds i8, i8* %1, i64 352
  %111 = bitcast i8* %110 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %111, align 4, !tbaa !250
  %112 = getelementptr inbounds i8, i8* %1, i64 368
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !250
  %114 = fsub <4 x float> zeroinitializer, %wide.load.11
  %115 = fsub <4 x float> zeroinitializer, %wide.load2.11
  %116 = getelementptr inbounds i8, i8* %0, i64 352
  %117 = bitcast i8* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4, !tbaa !253
  %118 = getelementptr inbounds i8, i8* %0, i64 368
  %119 = bitcast i8* %118 to <4 x float>*
  store <4 x float> %115, <4 x float>* %119, align 4, !tbaa !253
  %120 = getelementptr inbounds i8, i8* %1, i64 384
  %121 = bitcast i8* %120 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %121, align 4, !tbaa !250
  %122 = getelementptr inbounds i8, i8* %1, i64 400
  %123 = bitcast i8* %122 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %123, align 4, !tbaa !250
  %124 = fsub <4 x float> zeroinitializer, %wide.load.12
  %125 = fsub <4 x float> zeroinitializer, %wide.load2.12
  %126 = getelementptr inbounds i8, i8* %0, i64 384
  %127 = bitcast i8* %126 to <4 x float>*
  store <4 x float> %124, <4 x float>* %127, align 4, !tbaa !253
  %128 = getelementptr inbounds i8, i8* %0, i64 400
  %129 = bitcast i8* %128 to <4 x float>*
  store <4 x float> %125, <4 x float>* %129, align 4, !tbaa !253
  %130 = getelementptr inbounds i8, i8* %1, i64 416
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !250
  %132 = getelementptr inbounds i8, i8* %1, i64 432
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !250
  %134 = fsub <4 x float> zeroinitializer, %wide.load.13
  %135 = fsub <4 x float> zeroinitializer, %wide.load2.13
  %136 = getelementptr inbounds i8, i8* %0, i64 416
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !253
  %138 = getelementptr inbounds i8, i8* %0, i64 432
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !253
  %140 = getelementptr inbounds i8, i8* %1, i64 448
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !250
  %142 = getelementptr inbounds i8, i8* %1, i64 464
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !250
  %144 = fsub <4 x float> zeroinitializer, %wide.load.14
  %145 = fsub <4 x float> zeroinitializer, %wide.load2.14
  %146 = getelementptr inbounds i8, i8* %0, i64 448
  %147 = bitcast i8* %146 to <4 x float>*
  store <4 x float> %144, <4 x float>* %147, align 4, !tbaa !253
  %148 = getelementptr inbounds i8, i8* %0, i64 464
  %149 = bitcast i8* %148 to <4 x float>*
  store <4 x float> %145, <4 x float>* %149, align 4, !tbaa !253
  %150 = getelementptr inbounds i8, i8* %1, i64 480
  %151 = bitcast i8* %150 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %151, align 4, !tbaa !250
  %152 = getelementptr inbounds i8, i8* %1, i64 496
  %153 = bitcast i8* %152 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %153, align 4, !tbaa !250
  %154 = fsub <4 x float> zeroinitializer, %wide.load.15
  %155 = fsub <4 x float> zeroinitializer, %wide.load2.15
  %156 = getelementptr inbounds i8, i8* %0, i64 480
  %157 = bitcast i8* %156 to <4 x float>*
  store <4 x float> %154, <4 x float>* %157, align 4, !tbaa !253
  %158 = getelementptr inbounds i8, i8* %0, i64 496
  %159 = bitcast i8* %158 to <4 x float>*
  store <4 x float> %155, <4 x float>* %159, align 4, !tbaa !253
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_18(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_18_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_18_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !256
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %5, align 4, !tbaa !256
  %6 = bitcast i8* %1 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !259
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !259
  %9 = fadd <4 x float> %wide.load, %wide.load3
  %10 = fadd <4 x float> %wide.load2, %wide.load4
  %11 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !262
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %10, <4 x float>* %13, align 4, !tbaa !262
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !256
  %16 = getelementptr inbounds i8, i8* %2, i64 48
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !256
  %18 = getelementptr inbounds i8, i8* %1, i64 32
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load3.1 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !259
  %20 = getelementptr inbounds i8, i8* %1, i64 48
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load4.1 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !259
  %22 = fadd <4 x float> %wide.load.1, %wide.load3.1
  %23 = fadd <4 x float> %wide.load2.1, %wide.load4.1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <4 x float>*
  store <4 x float> %22, <4 x float>* %25, align 4, !tbaa !262
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %23, <4 x float>* %27, align 4, !tbaa !262
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !256
  %30 = getelementptr inbounds i8, i8* %2, i64 80
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !256
  %32 = getelementptr inbounds i8, i8* %1, i64 64
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load3.2 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !259
  %34 = getelementptr inbounds i8, i8* %1, i64 80
  %35 = bitcast i8* %34 to <4 x float>*
  %wide.load4.2 = load <4 x float>, <4 x float>* %35, align 4, !tbaa !259
  %36 = fadd <4 x float> %wide.load.2, %wide.load3.2
  %37 = fadd <4 x float> %wide.load2.2, %wide.load4.2
  %38 = getelementptr inbounds i8, i8* %0, i64 64
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4, !tbaa !262
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4, !tbaa !262
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !256
  %44 = getelementptr inbounds i8, i8* %2, i64 112
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !256
  %46 = getelementptr inbounds i8, i8* %1, i64 96
  %47 = bitcast i8* %46 to <4 x float>*
  %wide.load3.3 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !259
  %48 = getelementptr inbounds i8, i8* %1, i64 112
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load4.3 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !259
  %50 = fadd <4 x float> %wide.load.3, %wide.load3.3
  %51 = fadd <4 x float> %wide.load2.3, %wide.load4.3
  %52 = getelementptr inbounds i8, i8* %0, i64 96
  %53 = bitcast i8* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !tbaa !262
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !tbaa !262
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !256
  %58 = getelementptr inbounds i8, i8* %2, i64 144
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !256
  %60 = getelementptr inbounds i8, i8* %1, i64 128
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load3.4 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !259
  %62 = getelementptr inbounds i8, i8* %1, i64 144
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load4.4 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !259
  %64 = fadd <4 x float> %wide.load.4, %wide.load3.4
  %65 = fadd <4 x float> %wide.load2.4, %wide.load4.4
  %66 = getelementptr inbounds i8, i8* %0, i64 128
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !262
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !262
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !256
  %72 = getelementptr inbounds i8, i8* %2, i64 176
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !256
  %74 = getelementptr inbounds i8, i8* %1, i64 160
  %75 = bitcast i8* %74 to <4 x float>*
  %wide.load3.5 = load <4 x float>, <4 x float>* %75, align 4, !tbaa !259
  %76 = getelementptr inbounds i8, i8* %1, i64 176
  %77 = bitcast i8* %76 to <4 x float>*
  %wide.load4.5 = load <4 x float>, <4 x float>* %77, align 4, !tbaa !259
  %78 = fadd <4 x float> %wide.load.5, %wide.load3.5
  %79 = fadd <4 x float> %wide.load2.5, %wide.load4.5
  %80 = getelementptr inbounds i8, i8* %0, i64 160
  %81 = bitcast i8* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !tbaa !262
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %79, <4 x float>* %83, align 4, !tbaa !262
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !256
  %86 = getelementptr inbounds i8, i8* %2, i64 208
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !256
  %88 = getelementptr inbounds i8, i8* %1, i64 192
  %89 = bitcast i8* %88 to <4 x float>*
  %wide.load3.6 = load <4 x float>, <4 x float>* %89, align 4, !tbaa !259
  %90 = getelementptr inbounds i8, i8* %1, i64 208
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load4.6 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !259
  %92 = fadd <4 x float> %wide.load.6, %wide.load3.6
  %93 = fadd <4 x float> %wide.load2.6, %wide.load4.6
  %94 = getelementptr inbounds i8, i8* %0, i64 192
  %95 = bitcast i8* %94 to <4 x float>*
  store <4 x float> %92, <4 x float>* %95, align 4, !tbaa !262
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %93, <4 x float>* %97, align 4, !tbaa !262
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !256
  %100 = getelementptr inbounds i8, i8* %2, i64 240
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !256
  %102 = getelementptr inbounds i8, i8* %1, i64 224
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load3.7 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !259
  %104 = getelementptr inbounds i8, i8* %1, i64 240
  %105 = bitcast i8* %104 to <4 x float>*
  %wide.load4.7 = load <4 x float>, <4 x float>* %105, align 4, !tbaa !259
  %106 = fadd <4 x float> %wide.load.7, %wide.load3.7
  %107 = fadd <4 x float> %wide.load2.7, %wide.load4.7
  %108 = getelementptr inbounds i8, i8* %0, i64 224
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %106, <4 x float>* %109, align 4, !tbaa !262
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %107, <4 x float>* %111, align 4, !tbaa !262
  %112 = getelementptr inbounds i8, i8* %2, i64 256
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !256
  %114 = getelementptr inbounds i8, i8* %2, i64 272
  %115 = bitcast i8* %114 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %115, align 4, !tbaa !256
  %116 = getelementptr inbounds i8, i8* %1, i64 256
  %117 = bitcast i8* %116 to <4 x float>*
  %wide.load3.8 = load <4 x float>, <4 x float>* %117, align 4, !tbaa !259
  %118 = getelementptr inbounds i8, i8* %1, i64 272
  %119 = bitcast i8* %118 to <4 x float>*
  %wide.load4.8 = load <4 x float>, <4 x float>* %119, align 4, !tbaa !259
  %120 = fadd <4 x float> %wide.load.8, %wide.load3.8
  %121 = fadd <4 x float> %wide.load2.8, %wide.load4.8
  %122 = getelementptr inbounds i8, i8* %0, i64 256
  %123 = bitcast i8* %122 to <4 x float>*
  store <4 x float> %120, <4 x float>* %123, align 4, !tbaa !262
  %124 = getelementptr inbounds i8, i8* %0, i64 272
  %125 = bitcast i8* %124 to <4 x float>*
  store <4 x float> %121, <4 x float>* %125, align 4, !tbaa !262
  %126 = getelementptr inbounds i8, i8* %2, i64 288
  %127 = bitcast i8* %126 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %127, align 4, !tbaa !256
  %128 = getelementptr inbounds i8, i8* %2, i64 304
  %129 = bitcast i8* %128 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %129, align 4, !tbaa !256
  %130 = getelementptr inbounds i8, i8* %1, i64 288
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load3.9 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !259
  %132 = getelementptr inbounds i8, i8* %1, i64 304
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load4.9 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !259
  %134 = fadd <4 x float> %wide.load.9, %wide.load3.9
  %135 = fadd <4 x float> %wide.load2.9, %wide.load4.9
  %136 = getelementptr inbounds i8, i8* %0, i64 288
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !262
  %138 = getelementptr inbounds i8, i8* %0, i64 304
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !262
  %140 = getelementptr inbounds i8, i8* %2, i64 320
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !256
  %142 = getelementptr inbounds i8, i8* %2, i64 336
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !256
  %144 = getelementptr inbounds i8, i8* %1, i64 320
  %145 = bitcast i8* %144 to <4 x float>*
  %wide.load3.10 = load <4 x float>, <4 x float>* %145, align 4, !tbaa !259
  %146 = getelementptr inbounds i8, i8* %1, i64 336
  %147 = bitcast i8* %146 to <4 x float>*
  %wide.load4.10 = load <4 x float>, <4 x float>* %147, align 4, !tbaa !259
  %148 = fadd <4 x float> %wide.load.10, %wide.load3.10
  %149 = fadd <4 x float> %wide.load2.10, %wide.load4.10
  %150 = getelementptr inbounds i8, i8* %0, i64 320
  %151 = bitcast i8* %150 to <4 x float>*
  store <4 x float> %148, <4 x float>* %151, align 4, !tbaa !262
  %152 = getelementptr inbounds i8, i8* %0, i64 336
  %153 = bitcast i8* %152 to <4 x float>*
  store <4 x float> %149, <4 x float>* %153, align 4, !tbaa !262
  %154 = getelementptr inbounds i8, i8* %2, i64 352
  %155 = bitcast i8* %154 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %155, align 4, !tbaa !256
  %156 = getelementptr inbounds i8, i8* %2, i64 368
  %157 = bitcast i8* %156 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %157, align 4, !tbaa !256
  %158 = getelementptr inbounds i8, i8* %1, i64 352
  %159 = bitcast i8* %158 to <4 x float>*
  %wide.load3.11 = load <4 x float>, <4 x float>* %159, align 4, !tbaa !259
  %160 = getelementptr inbounds i8, i8* %1, i64 368
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load4.11 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !259
  %162 = fadd <4 x float> %wide.load.11, %wide.load3.11
  %163 = fadd <4 x float> %wide.load2.11, %wide.load4.11
  %164 = getelementptr inbounds i8, i8* %0, i64 352
  %165 = bitcast i8* %164 to <4 x float>*
  store <4 x float> %162, <4 x float>* %165, align 4, !tbaa !262
  %166 = getelementptr inbounds i8, i8* %0, i64 368
  %167 = bitcast i8* %166 to <4 x float>*
  store <4 x float> %163, <4 x float>* %167, align 4, !tbaa !262
  %168 = getelementptr inbounds i8, i8* %2, i64 384
  %169 = bitcast i8* %168 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %169, align 4, !tbaa !256
  %170 = getelementptr inbounds i8, i8* %2, i64 400
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !256
  %172 = getelementptr inbounds i8, i8* %1, i64 384
  %173 = bitcast i8* %172 to <4 x float>*
  %wide.load3.12 = load <4 x float>, <4 x float>* %173, align 4, !tbaa !259
  %174 = getelementptr inbounds i8, i8* %1, i64 400
  %175 = bitcast i8* %174 to <4 x float>*
  %wide.load4.12 = load <4 x float>, <4 x float>* %175, align 4, !tbaa !259
  %176 = fadd <4 x float> %wide.load.12, %wide.load3.12
  %177 = fadd <4 x float> %wide.load2.12, %wide.load4.12
  %178 = getelementptr inbounds i8, i8* %0, i64 384
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !tbaa !262
  %180 = getelementptr inbounds i8, i8* %0, i64 400
  %181 = bitcast i8* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !tbaa !262
  %182 = getelementptr inbounds i8, i8* %2, i64 416
  %183 = bitcast i8* %182 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !256
  %184 = getelementptr inbounds i8, i8* %2, i64 432
  %185 = bitcast i8* %184 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %185, align 4, !tbaa !256
  %186 = getelementptr inbounds i8, i8* %1, i64 416
  %187 = bitcast i8* %186 to <4 x float>*
  %wide.load3.13 = load <4 x float>, <4 x float>* %187, align 4, !tbaa !259
  %188 = getelementptr inbounds i8, i8* %1, i64 432
  %189 = bitcast i8* %188 to <4 x float>*
  %wide.load4.13 = load <4 x float>, <4 x float>* %189, align 4, !tbaa !259
  %190 = fadd <4 x float> %wide.load.13, %wide.load3.13
  %191 = fadd <4 x float> %wide.load2.13, %wide.load4.13
  %192 = getelementptr inbounds i8, i8* %0, i64 416
  %193 = bitcast i8* %192 to <4 x float>*
  store <4 x float> %190, <4 x float>* %193, align 4, !tbaa !262
  %194 = getelementptr inbounds i8, i8* %0, i64 432
  %195 = bitcast i8* %194 to <4 x float>*
  store <4 x float> %191, <4 x float>* %195, align 4, !tbaa !262
  %196 = getelementptr inbounds i8, i8* %2, i64 448
  %197 = bitcast i8* %196 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %197, align 4, !tbaa !256
  %198 = getelementptr inbounds i8, i8* %2, i64 464
  %199 = bitcast i8* %198 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %199, align 4, !tbaa !256
  %200 = getelementptr inbounds i8, i8* %1, i64 448
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load3.14 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !259
  %202 = getelementptr inbounds i8, i8* %1, i64 464
  %203 = bitcast i8* %202 to <4 x float>*
  %wide.load4.14 = load <4 x float>, <4 x float>* %203, align 4, !tbaa !259
  %204 = fadd <4 x float> %wide.load.14, %wide.load3.14
  %205 = fadd <4 x float> %wide.load2.14, %wide.load4.14
  %206 = getelementptr inbounds i8, i8* %0, i64 448
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> %204, <4 x float>* %207, align 4, !tbaa !262
  %208 = getelementptr inbounds i8, i8* %0, i64 464
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %205, <4 x float>* %209, align 4, !tbaa !262
  %210 = getelementptr inbounds i8, i8* %2, i64 480
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !256
  %212 = getelementptr inbounds i8, i8* %2, i64 496
  %213 = bitcast i8* %212 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %213, align 4, !tbaa !256
  %214 = getelementptr inbounds i8, i8* %1, i64 480
  %215 = bitcast i8* %214 to <4 x float>*
  %wide.load3.15 = load <4 x float>, <4 x float>* %215, align 4, !tbaa !259
  %216 = getelementptr inbounds i8, i8* %1, i64 496
  %217 = bitcast i8* %216 to <4 x float>*
  %wide.load4.15 = load <4 x float>, <4 x float>* %217, align 4, !tbaa !259
  %218 = fadd <4 x float> %wide.load.15, %wide.load3.15
  %219 = fadd <4 x float> %wide.load2.15, %wide.load4.15
  %220 = getelementptr inbounds i8, i8* %0, i64 480
  %221 = bitcast i8* %220 to <4 x float>*
  store <4 x float> %218, <4 x float>* %221, align 4, !tbaa !262
  %222 = getelementptr inbounds i8, i8* %0, i64 496
  %223 = bitcast i8* %222 to <4 x float>*
  store <4 x float> %219, <4 x float>* %223, align 4, !tbaa !262
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_2_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 64, !tbaa !265
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  %5 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !279
  %6 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %7 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %6, <4 x float>* %7, align 4, !tbaa !282
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !279
  %10 = fdiv <4 x float> %broadcast.splat2, %wide.load.1
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !282
  %13 = getelementptr inbounds i8, i8* %2, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !279
  %15 = fdiv <4 x float> %broadcast.splat2, %wide.load.2
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  store <4 x float> %15, <4 x float>* %17, align 4, !tbaa !282
  %18 = getelementptr inbounds i8, i8* %2, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !279
  %20 = fdiv <4 x float> %broadcast.splat2, %wide.load.3
  %21 = getelementptr inbounds i8, i8* %0, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %20, <4 x float>* %22, align 4, !tbaa !282
  %23 = getelementptr inbounds i8, i8* %2, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !279
  %25 = fdiv <4 x float> %broadcast.splat2, %wide.load.4
  %26 = getelementptr inbounds i8, i8* %0, i64 64
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !282
  %28 = getelementptr inbounds i8, i8* %2, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !279
  %30 = fdiv <4 x float> %broadcast.splat2, %wide.load.5
  %31 = getelementptr inbounds i8, i8* %0, i64 80
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 4, !tbaa !282
  %33 = getelementptr inbounds i8, i8* %2, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !279
  %35 = fdiv <4 x float> %broadcast.splat2, %wide.load.6
  %36 = getelementptr inbounds i8, i8* %0, i64 96
  %37 = bitcast i8* %36 to <4 x float>*
  store <4 x float> %35, <4 x float>* %37, align 4, !tbaa !282
  %38 = getelementptr inbounds i8, i8* %2, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %39, align 4, !tbaa !279
  %40 = fdiv <4 x float> %broadcast.splat2, %wide.load.7
  %41 = getelementptr inbounds i8, i8* %0, i64 112
  %42 = bitcast i8* %41 to <4 x float>*
  store <4 x float> %40, <4 x float>* %42, align 4, !tbaa !282
  %43 = getelementptr inbounds i8, i8* %2, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !279
  %45 = fdiv <4 x float> %broadcast.splat2, %wide.load.8
  %46 = getelementptr inbounds i8, i8* %0, i64 128
  %47 = bitcast i8* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !282
  %48 = getelementptr inbounds i8, i8* %2, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !279
  %50 = fdiv <4 x float> %broadcast.splat2, %wide.load.9
  %51 = getelementptr inbounds i8, i8* %0, i64 144
  %52 = bitcast i8* %51 to <4 x float>*
  store <4 x float> %50, <4 x float>* %52, align 4, !tbaa !282
  %53 = getelementptr inbounds i8, i8* %2, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !279
  %55 = fdiv <4 x float> %broadcast.splat2, %wide.load.10
  %56 = getelementptr inbounds i8, i8* %0, i64 160
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !282
  %58 = getelementptr inbounds i8, i8* %2, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !279
  %60 = fdiv <4 x float> %broadcast.splat2, %wide.load.11
  %61 = getelementptr inbounds i8, i8* %0, i64 176
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %60, <4 x float>* %62, align 4, !tbaa !282
  %63 = getelementptr inbounds i8, i8* %2, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !279
  %65 = fdiv <4 x float> %broadcast.splat2, %wide.load.12
  %66 = getelementptr inbounds i8, i8* %0, i64 192
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %65, <4 x float>* %67, align 4, !tbaa !282
  %68 = getelementptr inbounds i8, i8* %2, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !279
  %70 = fdiv <4 x float> %broadcast.splat2, %wide.load.13
  %71 = getelementptr inbounds i8, i8* %0, i64 208
  %72 = bitcast i8* %71 to <4 x float>*
  store <4 x float> %70, <4 x float>* %72, align 4, !tbaa !282
  %73 = getelementptr inbounds i8, i8* %2, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !279
  %75 = fdiv <4 x float> %broadcast.splat2, %wide.load.14
  %76 = getelementptr inbounds i8, i8* %0, i64 224
  %77 = bitcast i8* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 4, !tbaa !282
  %78 = getelementptr inbounds i8, i8* %2, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %79, align 4, !tbaa !279
  %80 = fdiv <4 x float> %broadcast.splat2, %wide.load.15
  %81 = getelementptr inbounds i8, i8* %0, i64 240
  %82 = bitcast i8* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !282
  %83 = getelementptr inbounds i8, i8* %2, i64 256
  %84 = bitcast i8* %83 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !279
  %85 = fdiv <4 x float> %broadcast.splat2, %wide.load.16
  %86 = getelementptr inbounds i8, i8* %0, i64 256
  %87 = bitcast i8* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !282
  %88 = getelementptr inbounds i8, i8* %2, i64 272
  %89 = bitcast i8* %88 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %89, align 4, !tbaa !279
  %90 = fdiv <4 x float> %broadcast.splat2, %wide.load.17
  %91 = getelementptr inbounds i8, i8* %0, i64 272
  %92 = bitcast i8* %91 to <4 x float>*
  store <4 x float> %90, <4 x float>* %92, align 4, !tbaa !282
  %93 = getelementptr inbounds i8, i8* %2, i64 288
  %94 = bitcast i8* %93 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %94, align 4, !tbaa !279
  %95 = fdiv <4 x float> %broadcast.splat2, %wide.load.18
  %96 = getelementptr inbounds i8, i8* %0, i64 288
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %95, <4 x float>* %97, align 4, !tbaa !282
  %98 = getelementptr inbounds i8, i8* %2, i64 304
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !279
  %100 = fdiv <4 x float> %broadcast.splat2, %wide.load.19
  %101 = getelementptr inbounds i8, i8* %0, i64 304
  %102 = bitcast i8* %101 to <4 x float>*
  store <4 x float> %100, <4 x float>* %102, align 4, !tbaa !282
  %103 = getelementptr inbounds i8, i8* %2, i64 320
  %104 = bitcast i8* %103 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %104, align 4, !tbaa !279
  %105 = fdiv <4 x float> %broadcast.splat2, %wide.load.20
  %106 = getelementptr inbounds i8, i8* %0, i64 320
  %107 = bitcast i8* %106 to <4 x float>*
  store <4 x float> %105, <4 x float>* %107, align 4, !tbaa !282
  %108 = getelementptr inbounds i8, i8* %2, i64 336
  %109 = bitcast i8* %108 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %109, align 4, !tbaa !279
  %110 = fdiv <4 x float> %broadcast.splat2, %wide.load.21
  %111 = getelementptr inbounds i8, i8* %0, i64 336
  %112 = bitcast i8* %111 to <4 x float>*
  store <4 x float> %110, <4 x float>* %112, align 4, !tbaa !282
  %113 = getelementptr inbounds i8, i8* %2, i64 352
  %114 = bitcast i8* %113 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !279
  %115 = fdiv <4 x float> %broadcast.splat2, %wide.load.22
  %116 = getelementptr inbounds i8, i8* %0, i64 352
  %117 = bitcast i8* %116 to <4 x float>*
  store <4 x float> %115, <4 x float>* %117, align 4, !tbaa !282
  %118 = getelementptr inbounds i8, i8* %2, i64 368
  %119 = bitcast i8* %118 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %119, align 4, !tbaa !279
  %120 = fdiv <4 x float> %broadcast.splat2, %wide.load.23
  %121 = getelementptr inbounds i8, i8* %0, i64 368
  %122 = bitcast i8* %121 to <4 x float>*
  store <4 x float> %120, <4 x float>* %122, align 4, !tbaa !282
  %123 = getelementptr inbounds i8, i8* %2, i64 384
  %124 = bitcast i8* %123 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %124, align 4, !tbaa !279
  %125 = fdiv <4 x float> %broadcast.splat2, %wide.load.24
  %126 = getelementptr inbounds i8, i8* %0, i64 384
  %127 = bitcast i8* %126 to <4 x float>*
  store <4 x float> %125, <4 x float>* %127, align 4, !tbaa !282
  %128 = getelementptr inbounds i8, i8* %2, i64 400
  %129 = bitcast i8* %128 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %129, align 4, !tbaa !279
  %130 = fdiv <4 x float> %broadcast.splat2, %wide.load.25
  %131 = getelementptr inbounds i8, i8* %0, i64 400
  %132 = bitcast i8* %131 to <4 x float>*
  store <4 x float> %130, <4 x float>* %132, align 4, !tbaa !282
  %133 = getelementptr inbounds i8, i8* %2, i64 416
  %134 = bitcast i8* %133 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %134, align 4, !tbaa !279
  %135 = fdiv <4 x float> %broadcast.splat2, %wide.load.26
  %136 = getelementptr inbounds i8, i8* %0, i64 416
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %135, <4 x float>* %137, align 4, !tbaa !282
  %138 = getelementptr inbounds i8, i8* %2, i64 432
  %139 = bitcast i8* %138 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %139, align 4, !tbaa !279
  %140 = fdiv <4 x float> %broadcast.splat2, %wide.load.27
  %141 = getelementptr inbounds i8, i8* %0, i64 432
  %142 = bitcast i8* %141 to <4 x float>*
  store <4 x float> %140, <4 x float>* %142, align 4, !tbaa !282
  %143 = getelementptr inbounds i8, i8* %2, i64 448
  %144 = bitcast i8* %143 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %144, align 4, !tbaa !279
  %145 = fdiv <4 x float> %broadcast.splat2, %wide.load.28
  %146 = getelementptr inbounds i8, i8* %0, i64 448
  %147 = bitcast i8* %146 to <4 x float>*
  store <4 x float> %145, <4 x float>* %147, align 4, !tbaa !282
  %148 = getelementptr inbounds i8, i8* %2, i64 464
  %149 = bitcast i8* %148 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %149, align 4, !tbaa !279
  %150 = fdiv <4 x float> %broadcast.splat2, %wide.load.29
  %151 = getelementptr inbounds i8, i8* %0, i64 464
  %152 = bitcast i8* %151 to <4 x float>*
  store <4 x float> %150, <4 x float>* %152, align 4, !tbaa !282
  %153 = getelementptr inbounds i8, i8* %2, i64 480
  %154 = bitcast i8* %153 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %154, align 4, !tbaa !279
  %155 = fdiv <4 x float> %broadcast.splat2, %wide.load.30
  %156 = getelementptr inbounds i8, i8* %0, i64 480
  %157 = bitcast i8* %156 to <4 x float>*
  store <4 x float> %155, <4 x float>* %157, align 4, !tbaa !282
  %158 = getelementptr inbounds i8, i8* %2, i64 496
  %159 = bitcast i8* %158 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %159, align 4, !tbaa !279
  %160 = fdiv <4 x float> %broadcast.splat2, %wide.load.31
  %161 = getelementptr inbounds i8, i8* %0, i64 496
  %162 = bitcast i8* %161 to <4 x float>*
  store <4 x float> %160, <4 x float>* %162, align 4, !tbaa !282
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_3_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %0 to float*
  %5 = bitcast i8* %1 to float*
  %6 = load float, float* %5, align 64, !tbaa !285
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %6, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !299
  %9 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !302
  %index.next = add i64 %index, 4
  %12 = icmp eq i64 %index.next, 512
  br i1 %12, label %for_end, label %vector.body, !llvm.loop !305

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_7(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_7_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_7_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !306
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !309
  %13 = fadd <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !312
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !309
  %19 = fadd <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !312
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !309
  %25 = fadd <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !312
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !309
  %31 = fadd <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !312
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !309
  %37 = fadd <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !312
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !309
  %43 = fadd <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !312
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !309
  %49 = fadd <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !312
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !309
  %55 = fadd <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !312
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !309
  %61 = fadd <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !312
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !309
  %67 = fadd <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !312
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !309
  %73 = fadd <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !312
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !309
  %79 = fadd <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !312
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !309
  %85 = fadd <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !312
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !309
  %91 = fadd <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !312
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_7(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_7_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_7_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !315
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !318
  %29 = fadd <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !321
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !318
  %36 = fadd <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !321
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !318
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !321
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !318
  %50 = fadd <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !321
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !318
  %57 = fadd <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !321
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !318
  %64 = fadd <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !321
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !318
  %71 = fadd <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !321
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 512
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_3_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv1, 196
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv, 14
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = getelementptr inbounds float, float* %3, i64 %6
  %9 = bitcast float* %7 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !324
  %11 = fcmp ogt <4 x float> %10, zeroinitializer
  %12 = select <4 x i1> %11, <4 x float> %10, <4 x float> zeroinitializer
  %13 = bitcast float* %8 to <4 x float>*
  store <4 x float> %12, <4 x float>* %13, align 4, !tbaa !327
  %14 = add nuw nsw i64 %6, 4
  %15 = getelementptr inbounds float, float* %2, i64 %14
  %16 = getelementptr inbounds float, float* %3, i64 %14
  %17 = bitcast float* %15 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !324
  %19 = fcmp ogt <4 x float> %18, zeroinitializer
  %20 = select <4 x i1> %19, <4 x float> %18, <4 x float> zeroinitializer
  %21 = bitcast float* %16 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 4, !tbaa !327
  %22 = add nuw nsw i64 %6, 8
  %23 = getelementptr inbounds float, float* %2, i64 %22
  %24 = getelementptr inbounds float, float* %3, i64 %22
  %25 = bitcast float* %23 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !324
  %27 = fcmp ogt <4 x float> %26, zeroinitializer
  %28 = select <4 x i1> %27, <4 x float> %26, <4 x float> zeroinitializer
  %29 = bitcast float* %24 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !327
  %30 = add nuw nsw i64 %6, 12
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = load float, float* %31, align 4, !tbaa !324
  %33 = fcmp ogt float %32, 0.000000e+00
  %34 = select i1 %33, float %32, float 0.000000e+00
  %35 = getelementptr inbounds float, float* %3, i64 %30
  store float %34, float* %35, align 4, !tbaa !327
  %36 = add nuw nsw i64 %6, 13
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !324
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float* %3, i64 %36
  store float %40, float* %41, align 4, !tbaa !327
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 256
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_4_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !330
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !333
  %21 = fadd <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !336
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !333
  %28 = fadd <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !336
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !333
  %35 = fadd <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !336
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !333
  %40 = fadd float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !336
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !333
  %45 = fadd float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !336
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 1024
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_6(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_6_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_6_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [4096 x <64 x float>], align 16
  %5 = alloca [200704 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = phi i32 [ 0, %entry ], [ %20, %for_end3 ]
  %7 = mul nuw nsw i64 %indvar, 7168
  %8 = urem i32 %6, 14
  %9 = mul nuw nsw i32 %8, 14
  %10 = udiv i32 %6, 14
  %11 = mul nsw i32 %10, 100352
  %12 = or i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %15 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar48 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next49, %for_begin4.preheader ]
  %16 = mul nuw nsw i64 %indvar48, 14
  %17 = add nuw nsw i64 %7, %16
  %scevgep = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %17
  %scevgep50 = bitcast float* %scevgep to i8*
  %18 = mul nuw nsw i64 %indvar48, 784
  %19 = add nuw nsw i64 %14, %18
  %scevgep51 = getelementptr i8, i8* %0, i64 %19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep50, i8* align 4 %scevgep51, i64 56, i1 false)
  %indvar.next49 = add nuw nsw i64 %indvar48, 1
  %exitcond52 = icmp eq i64 %indvar.next49, 512
  br i1 %exitcond52, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %20 = add nuw nsw i32 %6, 1
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond53 = icmp eq i64 %indvar.next, 28
  br i1 %exitcond53, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv42 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next43, %for_end12 ]
  %21 = shl nsw i64 %indvars.iv42, 16
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %22 = bitcast i8* %2 to float*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv39 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next40, %for_end15 ]
  %23 = shl i64 %indvars.iv39, 15
  %24 = add nuw nsw i64 %23, %21
  %25 = shl i64 %indvars.iv39, 9
  %26 = add nuw nsw i64 %25, %21
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond44 = icmp eq i64 %indvars.iv.next43, 4
  br i1 %exitcond44, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv36 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next37, %for_body14 ]
  %27 = shl i64 %indvars.iv36, 6
  %28 = add nuw nsw i64 %24, %27
  %29 = add nuw nsw i64 %26, %indvars.iv36
  %30 = add nuw nsw i64 %29, 1024
  %31 = add nuw nsw i64 %29, 2048
  %32 = add nuw nsw i64 %29, 3072
  %33 = add nuw nsw i64 %29, 4096
  %34 = add nuw nsw i64 %29, 5120
  %35 = add nuw nsw i64 %29, 6144
  %36 = add nuw nsw i64 %29, 7168
  %37 = add nuw nsw i64 %29, 8192
  %38 = add nuw nsw i64 %29, 9216
  %39 = add nuw nsw i64 %29, 10240
  %40 = add nuw nsw i64 %29, 11264
  %41 = add nuw nsw i64 %29, 12288
  %42 = add nuw nsw i64 %29, 13312
  %43 = add nuw nsw i64 %29, 14336
  %44 = add nuw nsw i64 %29, 15360
  %45 = add nuw nsw i64 %29, 16384
  %46 = add nuw nsw i64 %29, 17408
  %47 = add nuw nsw i64 %29, 18432
  %48 = add nuw nsw i64 %29, 19456
  %49 = add nuw nsw i64 %29, 20480
  %50 = add nuw nsw i64 %29, 21504
  %51 = add nuw nsw i64 %29, 22528
  %52 = add nuw nsw i64 %29, 23552
  %53 = add nuw nsw i64 %29, 24576
  %54 = add nuw nsw i64 %29, 25600
  %55 = add nuw nsw i64 %29, 26624
  %56 = add nuw nsw i64 %29, 27648
  %57 = add nuw nsw i64 %29, 28672
  %58 = add nuw nsw i64 %29, 29696
  %59 = add nuw nsw i64 %29, 30720
  %60 = add nuw nsw i64 %29, 31744
  %61 = add nuw nsw i64 %29, 32768
  %62 = add nuw nsw i64 %29, 33792
  %63 = add nuw nsw i64 %29, 34816
  %64 = add nuw nsw i64 %29, 35840
  %65 = add nuw nsw i64 %29, 36864
  %66 = add nuw nsw i64 %29, 37888
  %67 = add nuw nsw i64 %29, 38912
  %68 = add nuw nsw i64 %29, 39936
  %69 = add nuw nsw i64 %29, 40960
  %70 = add nuw nsw i64 %29, 41984
  %71 = add nuw nsw i64 %29, 43008
  %72 = add nuw nsw i64 %29, 44032
  %73 = add nuw nsw i64 %29, 45056
  %74 = add nuw nsw i64 %29, 46080
  %75 = add nuw nsw i64 %29, 47104
  %76 = add nuw nsw i64 %29, 48128
  %77 = add nuw nsw i64 %29, 49152
  %78 = add nuw nsw i64 %29, 50176
  %79 = add nuw nsw i64 %29, 51200
  %80 = add nuw nsw i64 %29, 52224
  %81 = add nuw nsw i64 %29, 53248
  %82 = add nuw nsw i64 %29, 54272
  %83 = add nuw nsw i64 %29, 55296
  %84 = add nuw nsw i64 %29, 56320
  %85 = add nuw nsw i64 %29, 57344
  %86 = add nuw nsw i64 %29, 58368
  %87 = add nuw nsw i64 %29, 59392
  %88 = add nuw nsw i64 %29, 60416
  %89 = add nuw nsw i64 %29, 61440
  %90 = add nuw nsw i64 %29, 62464
  %91 = add nuw nsw i64 %29, 63488
  %92 = add nuw nsw i64 %29, 64512
  %93 = getelementptr inbounds float, float* %15, i64 %29
  %94 = load float, float* %93, align 4, !tbaa !339
  %95 = insertelement <64 x float> undef, float %94, i32 0
  %96 = getelementptr inbounds float, float* %15, i64 %30
  %97 = load float, float* %96, align 4, !tbaa !339
  %98 = insertelement <64 x float> %95, float %97, i32 1
  %99 = getelementptr inbounds float, float* %15, i64 %31
  %100 = load float, float* %99, align 4, !tbaa !339
  %101 = insertelement <64 x float> %98, float %100, i32 2
  %102 = getelementptr inbounds float, float* %15, i64 %32
  %103 = load float, float* %102, align 4, !tbaa !339
  %104 = insertelement <64 x float> %101, float %103, i32 3
  %105 = getelementptr inbounds float, float* %15, i64 %33
  %106 = load float, float* %105, align 4, !tbaa !339
  %107 = insertelement <64 x float> %104, float %106, i32 4
  %108 = getelementptr inbounds float, float* %15, i64 %34
  %109 = load float, float* %108, align 4, !tbaa !339
  %110 = insertelement <64 x float> %107, float %109, i32 5
  %111 = getelementptr inbounds float, float* %15, i64 %35
  %112 = load float, float* %111, align 4, !tbaa !339
  %113 = insertelement <64 x float> %110, float %112, i32 6
  %114 = getelementptr inbounds float, float* %15, i64 %36
  %115 = load float, float* %114, align 4, !tbaa !339
  %116 = insertelement <64 x float> %113, float %115, i32 7
  %117 = getelementptr inbounds float, float* %15, i64 %37
  %118 = load float, float* %117, align 4, !tbaa !339
  %119 = insertelement <64 x float> %116, float %118, i32 8
  %120 = getelementptr inbounds float, float* %15, i64 %38
  %121 = load float, float* %120, align 4, !tbaa !339
  %122 = insertelement <64 x float> %119, float %121, i32 9
  %123 = getelementptr inbounds float, float* %15, i64 %39
  %124 = load float, float* %123, align 4, !tbaa !339
  %125 = insertelement <64 x float> %122, float %124, i32 10
  %126 = getelementptr inbounds float, float* %15, i64 %40
  %127 = load float, float* %126, align 4, !tbaa !339
  %128 = insertelement <64 x float> %125, float %127, i32 11
  %129 = getelementptr inbounds float, float* %15, i64 %41
  %130 = load float, float* %129, align 4, !tbaa !339
  %131 = insertelement <64 x float> %128, float %130, i32 12
  %132 = getelementptr inbounds float, float* %15, i64 %42
  %133 = load float, float* %132, align 4, !tbaa !339
  %134 = insertelement <64 x float> %131, float %133, i32 13
  %135 = getelementptr inbounds float, float* %15, i64 %43
  %136 = load float, float* %135, align 4, !tbaa !339
  %137 = insertelement <64 x float> %134, float %136, i32 14
  %138 = getelementptr inbounds float, float* %15, i64 %44
  %139 = load float, float* %138, align 4, !tbaa !339
  %140 = insertelement <64 x float> %137, float %139, i32 15
  %141 = getelementptr inbounds float, float* %15, i64 %45
  %142 = load float, float* %141, align 4, !tbaa !339
  %143 = insertelement <64 x float> %140, float %142, i32 16
  %144 = getelementptr inbounds float, float* %15, i64 %46
  %145 = load float, float* %144, align 4, !tbaa !339
  %146 = insertelement <64 x float> %143, float %145, i32 17
  %147 = getelementptr inbounds float, float* %15, i64 %47
  %148 = load float, float* %147, align 4, !tbaa !339
  %149 = insertelement <64 x float> %146, float %148, i32 18
  %150 = getelementptr inbounds float, float* %15, i64 %48
  %151 = load float, float* %150, align 4, !tbaa !339
  %152 = insertelement <64 x float> %149, float %151, i32 19
  %153 = getelementptr inbounds float, float* %15, i64 %49
  %154 = load float, float* %153, align 4, !tbaa !339
  %155 = insertelement <64 x float> %152, float %154, i32 20
  %156 = getelementptr inbounds float, float* %15, i64 %50
  %157 = load float, float* %156, align 4, !tbaa !339
  %158 = insertelement <64 x float> %155, float %157, i32 21
  %159 = getelementptr inbounds float, float* %15, i64 %51
  %160 = load float, float* %159, align 4, !tbaa !339
  %161 = insertelement <64 x float> %158, float %160, i32 22
  %162 = getelementptr inbounds float, float* %15, i64 %52
  %163 = load float, float* %162, align 4, !tbaa !339
  %164 = insertelement <64 x float> %161, float %163, i32 23
  %165 = getelementptr inbounds float, float* %15, i64 %53
  %166 = load float, float* %165, align 4, !tbaa !339
  %167 = insertelement <64 x float> %164, float %166, i32 24
  %168 = getelementptr inbounds float, float* %15, i64 %54
  %169 = load float, float* %168, align 4, !tbaa !339
  %170 = insertelement <64 x float> %167, float %169, i32 25
  %171 = getelementptr inbounds float, float* %15, i64 %55
  %172 = load float, float* %171, align 4, !tbaa !339
  %173 = insertelement <64 x float> %170, float %172, i32 26
  %174 = getelementptr inbounds float, float* %15, i64 %56
  %175 = load float, float* %174, align 4, !tbaa !339
  %176 = insertelement <64 x float> %173, float %175, i32 27
  %177 = getelementptr inbounds float, float* %15, i64 %57
  %178 = load float, float* %177, align 4, !tbaa !339
  %179 = insertelement <64 x float> %176, float %178, i32 28
  %180 = getelementptr inbounds float, float* %15, i64 %58
  %181 = load float, float* %180, align 4, !tbaa !339
  %182 = insertelement <64 x float> %179, float %181, i32 29
  %183 = getelementptr inbounds float, float* %15, i64 %59
  %184 = load float, float* %183, align 4, !tbaa !339
  %185 = insertelement <64 x float> %182, float %184, i32 30
  %186 = getelementptr inbounds float, float* %15, i64 %60
  %187 = load float, float* %186, align 4, !tbaa !339
  %188 = insertelement <64 x float> %185, float %187, i32 31
  %189 = getelementptr inbounds float, float* %15, i64 %61
  %190 = load float, float* %189, align 4, !tbaa !339
  %191 = insertelement <64 x float> %188, float %190, i32 32
  %192 = getelementptr inbounds float, float* %15, i64 %62
  %193 = load float, float* %192, align 4, !tbaa !339
  %194 = insertelement <64 x float> %191, float %193, i32 33
  %195 = getelementptr inbounds float, float* %15, i64 %63
  %196 = load float, float* %195, align 4, !tbaa !339
  %197 = insertelement <64 x float> %194, float %196, i32 34
  %198 = getelementptr inbounds float, float* %15, i64 %64
  %199 = load float, float* %198, align 4, !tbaa !339
  %200 = insertelement <64 x float> %197, float %199, i32 35
  %201 = getelementptr inbounds float, float* %15, i64 %65
  %202 = load float, float* %201, align 4, !tbaa !339
  %203 = insertelement <64 x float> %200, float %202, i32 36
  %204 = getelementptr inbounds float, float* %15, i64 %66
  %205 = load float, float* %204, align 4, !tbaa !339
  %206 = insertelement <64 x float> %203, float %205, i32 37
  %207 = getelementptr inbounds float, float* %15, i64 %67
  %208 = load float, float* %207, align 4, !tbaa !339
  %209 = insertelement <64 x float> %206, float %208, i32 38
  %210 = getelementptr inbounds float, float* %15, i64 %68
  %211 = load float, float* %210, align 4, !tbaa !339
  %212 = insertelement <64 x float> %209, float %211, i32 39
  %213 = getelementptr inbounds float, float* %15, i64 %69
  %214 = load float, float* %213, align 4, !tbaa !339
  %215 = insertelement <64 x float> %212, float %214, i32 40
  %216 = getelementptr inbounds float, float* %15, i64 %70
  %217 = load float, float* %216, align 4, !tbaa !339
  %218 = insertelement <64 x float> %215, float %217, i32 41
  %219 = getelementptr inbounds float, float* %15, i64 %71
  %220 = load float, float* %219, align 4, !tbaa !339
  %221 = insertelement <64 x float> %218, float %220, i32 42
  %222 = getelementptr inbounds float, float* %15, i64 %72
  %223 = load float, float* %222, align 4, !tbaa !339
  %224 = insertelement <64 x float> %221, float %223, i32 43
  %225 = getelementptr inbounds float, float* %15, i64 %73
  %226 = load float, float* %225, align 4, !tbaa !339
  %227 = insertelement <64 x float> %224, float %226, i32 44
  %228 = getelementptr inbounds float, float* %15, i64 %74
  %229 = load float, float* %228, align 4, !tbaa !339
  %230 = insertelement <64 x float> %227, float %229, i32 45
  %231 = getelementptr inbounds float, float* %15, i64 %75
  %232 = load float, float* %231, align 4, !tbaa !339
  %233 = insertelement <64 x float> %230, float %232, i32 46
  %234 = getelementptr inbounds float, float* %15, i64 %76
  %235 = load float, float* %234, align 4, !tbaa !339
  %236 = insertelement <64 x float> %233, float %235, i32 47
  %237 = getelementptr inbounds float, float* %15, i64 %77
  %238 = load float, float* %237, align 4, !tbaa !339
  %239 = insertelement <64 x float> %236, float %238, i32 48
  %240 = getelementptr inbounds float, float* %15, i64 %78
  %241 = load float, float* %240, align 4, !tbaa !339
  %242 = insertelement <64 x float> %239, float %241, i32 49
  %243 = getelementptr inbounds float, float* %15, i64 %79
  %244 = load float, float* %243, align 4, !tbaa !339
  %245 = insertelement <64 x float> %242, float %244, i32 50
  %246 = getelementptr inbounds float, float* %15, i64 %80
  %247 = load float, float* %246, align 4, !tbaa !339
  %248 = insertelement <64 x float> %245, float %247, i32 51
  %249 = getelementptr inbounds float, float* %15, i64 %81
  %250 = load float, float* %249, align 4, !tbaa !339
  %251 = insertelement <64 x float> %248, float %250, i32 52
  %252 = getelementptr inbounds float, float* %15, i64 %82
  %253 = load float, float* %252, align 4, !tbaa !339
  %254 = insertelement <64 x float> %251, float %253, i32 53
  %255 = getelementptr inbounds float, float* %15, i64 %83
  %256 = load float, float* %255, align 4, !tbaa !339
  %257 = insertelement <64 x float> %254, float %256, i32 54
  %258 = getelementptr inbounds float, float* %15, i64 %84
  %259 = load float, float* %258, align 4, !tbaa !339
  %260 = insertelement <64 x float> %257, float %259, i32 55
  %261 = getelementptr inbounds float, float* %15, i64 %85
  %262 = load float, float* %261, align 4, !tbaa !339
  %263 = insertelement <64 x float> %260, float %262, i32 56
  %264 = getelementptr inbounds float, float* %15, i64 %86
  %265 = load float, float* %264, align 4, !tbaa !339
  %266 = insertelement <64 x float> %263, float %265, i32 57
  %267 = getelementptr inbounds float, float* %15, i64 %87
  %268 = load float, float* %267, align 4, !tbaa !339
  %269 = insertelement <64 x float> %266, float %268, i32 58
  %270 = getelementptr inbounds float, float* %15, i64 %88
  %271 = load float, float* %270, align 4, !tbaa !339
  %272 = insertelement <64 x float> %269, float %271, i32 59
  %273 = getelementptr inbounds float, float* %15, i64 %89
  %274 = load float, float* %273, align 4, !tbaa !339
  %275 = insertelement <64 x float> %272, float %274, i32 60
  %276 = getelementptr inbounds float, float* %15, i64 %90
  %277 = load float, float* %276, align 4, !tbaa !339
  %278 = insertelement <64 x float> %275, float %277, i32 61
  %279 = getelementptr inbounds float, float* %15, i64 %91
  %280 = load float, float* %279, align 4, !tbaa !339
  %281 = insertelement <64 x float> %278, float %280, i32 62
  %282 = getelementptr inbounds float, float* %15, i64 %92
  %283 = load float, float* %282, align 4, !tbaa !339
  %284 = insertelement <64 x float> %281, float %283, i32 63
  %285 = getelementptr inbounds [4096 x <64 x float>], [4096 x <64 x float>]* %4, i64 0, i64 0, i64 %28
  %286 = bitcast float* %285 to <64 x float>*
  store <64 x float> %284, <64 x float>* %286, align 16, !tbaa !342
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %exitcond38 = icmp eq i64 %indvars.iv.next37, 512
  br i1 %exitcond38, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %exitcond41 = icmp eq i64 %indvars.iv.next40, 2
  br i1 %exitcond41, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end30, %for_begin16.preheader
  %287 = phi i32 [ 0, %for_begin16.preheader ], [ %361, %for_end30 ]
  %288 = urem i32 %287, 7
  %289 = mul nuw nsw i32 %288, 14336
  %290 = udiv i32 %287, 7
  %291 = shl i32 %290, 16
  %292 = sext i32 %291 to i64
  %293 = zext i32 %289 to i64
  %294 = or i64 %292, 32768
  br label %for_body20

for_end18:                                        ; preds = %for_end30
  ret void

for_begin28.preheader:                            ; preds = %for_end27.1
  %295 = mul nuw nsw i32 %288, 28
  %296 = mul nsw i32 %290, 12544
  %297 = or i32 %296, %295
  %298 = zext i32 %297 to i64
  br label %for_begin31.preheader

for_body20:                                       ; preds = %for_end27.1, %for_begin19.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next23, %for_end27.1 ]
  %299 = shl nsw i64 %indvars.iv22, 7
  %300 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %299
  %301 = bitcast float* %300 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %301, align 16, !tbaa !345
  %302 = or i64 %299, 64
  %303 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %302
  %304 = bitcast float* %303 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %304, align 16, !tbaa !345
  %305 = add nuw nsw i64 %299, 896
  %306 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %305
  %307 = bitcast float* %306 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %307, align 16, !tbaa !345
  %308 = add nuw nsw i64 %299, 960
  %309 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %308
  %310 = bitcast float* %309 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %310, align 16, !tbaa !345
  %311 = shl nuw nsw i64 %indvars.iv22, 1
  %312 = add nuw nsw i64 %311, %293
  %313 = trunc i64 %312 to i32
  br label %for_body26

for_body26:                                       ; preds = %for_body26, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_body26 ]
  %314 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %354, %for_body26 ]
  %315 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %347, %for_body26 ]
  %316 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %340, %for_body26 ]
  %317 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %333, %for_body26 ]
  %318 = phi i32 [ 0, %for_body20 ], [ %355, %for_body26 ]
  %319 = mul nuw nsw i64 %indvars.iv, 14
  %320 = mul nuw nsw i32 %318, 14
  %321 = add nuw nsw i64 %312, %319
  %322 = add nsw i32 %320, %313
  %323 = and i64 %321, 4294967294
  %324 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %323
  %325 = load float, float* %324, align 8, !tbaa !348
  %326 = insertelement <64 x float> undef, float %325, i32 0
  %327 = shufflevector <64 x float> %326, <64 x float> undef, <64 x i32> zeroinitializer
  %328 = shl i64 %indvars.iv, 6
  %329 = add nuw nsw i64 %328, %292
  %330 = getelementptr inbounds [4096 x <64 x float>], [4096 x <64 x float>]* %4, i64 0, i64 0, i64 %329
  %331 = bitcast float* %330 to <64 x float>*
  %332 = load <64 x float>, <64 x float>* %331, align 16, !tbaa !342
  %333 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %327, <64 x float> %332, <64 x float> %317)
  %334 = or i32 %322, 1
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !348
  %338 = insertelement <64 x float> undef, float %337, i32 0
  %339 = shufflevector <64 x float> %338, <64 x float> undef, <64 x i32> zeroinitializer
  %340 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %339, <64 x float> %332, <64 x float> %316)
  %341 = add nuw i64 %321, 7168
  %342 = and i64 %341, 4294967294
  %343 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %342
  %344 = load float, float* %343, align 8, !tbaa !348
  %345 = insertelement <64 x float> undef, float %344, i32 0
  %346 = shufflevector <64 x float> %345, <64 x float> undef, <64 x i32> zeroinitializer
  %347 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %346, <64 x float> %332, <64 x float> %315)
  %348 = add nuw i64 %321, 7169
  %349 = and i64 %348, 4294967295
  %350 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %349
  %351 = load float, float* %350, align 4, !tbaa !348
  %352 = insertelement <64 x float> undef, float %351, i32 0
  %353 = shufflevector <64 x float> %352, <64 x float> undef, <64 x i32> zeroinitializer
  %354 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %353, <64 x float> %332, <64 x float> %314)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %355 = add nuw nsw i32 %318, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %356 = add nuw nsw i64 %312, 100352
  %357 = trunc i64 %356 to i32
  br label %for_body26.1

for_begin31.preheader:                            ; preds = %for_end33, %for_begin28.preheader
  %indvars.iv32 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next33, %for_end33 ]
  %358 = shl nuw nsw i64 %indvars.iv32, 1
  %359 = add nuw nsw i64 %358, %298
  %360 = shl i64 %indvars.iv32, 7
  br label %for_begin34.preheader

for_end30:                                        ; preds = %for_end33
  %361 = add nuw nsw i32 %287, 1
  %exitcond35 = icmp eq i32 %361, 28
  br i1 %exitcond35, label %for_end18, label %for_begin19.preheader, !prof !5

for_begin34.preheader:                            ; preds = %for_end36, %for_begin31.preheader
  %indvars.iv29 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next30, %for_end36 ]
  %362 = mul nuw nsw i64 %indvars.iv29, 14
  %363 = add nuw nsw i64 %359, %362
  %364 = mul nuw nsw i64 %indvars.iv29, 896
  %365 = add nuw nsw i64 %364, %360
  br label %for_body35

for_end33:                                        ; preds = %for_end36
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %exitcond34 = icmp eq i64 %indvars.iv.next33, 7
  br i1 %exitcond34, label %for_end30, label %for_begin31.preheader, !prof !5

for_body35:                                       ; preds = %for_body35, %for_begin34.preheader
  %indvars.iv26 = phi i64 [ 0, %for_begin34.preheader ], [ %indvars.iv.next27, %for_body35 ]
  %366 = add nuw nsw i64 %363, %indvars.iv26
  %367 = shl i64 %indvars.iv26, 6
  %368 = add nuw nsw i64 %365, %367
  %369 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %368
  %370 = bitcast float* %369 to <64 x float>*
  %371 = load <64 x float>, <64 x float>* %370, align 16, !tbaa !345
  %372 = getelementptr inbounds float, float* %22, i64 %366
  %373 = extractelement <64 x float> %371, i64 0
  store float %373, float* %372, align 4, !tbaa !351
  %374 = shl i64 %366, 32
  %sext = add i64 %374, 841813590016
  %375 = ashr exact i64 %sext, 32
  %376 = getelementptr inbounds float, float* %22, i64 %375
  %377 = extractelement <64 x float> %371, i64 1
  store float %377, float* %376, align 4, !tbaa !351
  %378 = shl i64 %366, 32
  %sext54 = add i64 %378, 1683627180032
  %379 = ashr exact i64 %sext54, 32
  %380 = getelementptr inbounds float, float* %22, i64 %379
  %381 = extractelement <64 x float> %371, i64 2
  store float %381, float* %380, align 4, !tbaa !351
  %382 = shl i64 %366, 32
  %sext55 = add i64 %382, 2525440770048
  %383 = ashr exact i64 %sext55, 32
  %384 = getelementptr inbounds float, float* %22, i64 %383
  %385 = extractelement <64 x float> %371, i64 3
  store float %385, float* %384, align 4, !tbaa !351
  %386 = shl i64 %366, 32
  %sext56 = add i64 %386, 3367254360064
  %387 = ashr exact i64 %sext56, 32
  %388 = getelementptr inbounds float, float* %22, i64 %387
  %389 = extractelement <64 x float> %371, i64 4
  store float %389, float* %388, align 4, !tbaa !351
  %390 = shl i64 %366, 32
  %sext57 = add i64 %390, 4209067950080
  %391 = ashr exact i64 %sext57, 32
  %392 = getelementptr inbounds float, float* %22, i64 %391
  %393 = extractelement <64 x float> %371, i64 5
  store float %393, float* %392, align 4, !tbaa !351
  %394 = shl i64 %366, 32
  %sext58 = add i64 %394, 5050881540096
  %395 = ashr exact i64 %sext58, 32
  %396 = getelementptr inbounds float, float* %22, i64 %395
  %397 = extractelement <64 x float> %371, i64 6
  store float %397, float* %396, align 4, !tbaa !351
  %398 = shl i64 %366, 32
  %sext59 = add i64 %398, 5892695130112
  %399 = ashr exact i64 %sext59, 32
  %400 = getelementptr inbounds float, float* %22, i64 %399
  %401 = extractelement <64 x float> %371, i64 7
  store float %401, float* %400, align 4, !tbaa !351
  %402 = shl i64 %366, 32
  %sext60 = add i64 %402, 6734508720128
  %403 = ashr exact i64 %sext60, 32
  %404 = getelementptr inbounds float, float* %22, i64 %403
  %405 = extractelement <64 x float> %371, i64 8
  store float %405, float* %404, align 4, !tbaa !351
  %406 = shl i64 %366, 32
  %sext61 = add i64 %406, 7576322310144
  %407 = ashr exact i64 %sext61, 32
  %408 = getelementptr inbounds float, float* %22, i64 %407
  %409 = extractelement <64 x float> %371, i64 9
  store float %409, float* %408, align 4, !tbaa !351
  %410 = shl i64 %366, 32
  %sext62 = add i64 %410, 8418135900160
  %411 = ashr exact i64 %sext62, 32
  %412 = getelementptr inbounds float, float* %22, i64 %411
  %413 = extractelement <64 x float> %371, i64 10
  store float %413, float* %412, align 4, !tbaa !351
  %414 = shl i64 %366, 32
  %sext63 = add i64 %414, 9259949490176
  %415 = ashr exact i64 %sext63, 32
  %416 = getelementptr inbounds float, float* %22, i64 %415
  %417 = extractelement <64 x float> %371, i64 11
  store float %417, float* %416, align 4, !tbaa !351
  %418 = shl i64 %366, 32
  %sext64 = add i64 %418, 10101763080192
  %419 = ashr exact i64 %sext64, 32
  %420 = getelementptr inbounds float, float* %22, i64 %419
  %421 = extractelement <64 x float> %371, i64 12
  store float %421, float* %420, align 4, !tbaa !351
  %422 = shl i64 %366, 32
  %sext65 = add i64 %422, 10943576670208
  %423 = ashr exact i64 %sext65, 32
  %424 = getelementptr inbounds float, float* %22, i64 %423
  %425 = extractelement <64 x float> %371, i64 13
  store float %425, float* %424, align 4, !tbaa !351
  %426 = shl i64 %366, 32
  %sext66 = add i64 %426, 11785390260224
  %427 = ashr exact i64 %sext66, 32
  %428 = getelementptr inbounds float, float* %22, i64 %427
  %429 = extractelement <64 x float> %371, i64 14
  store float %429, float* %428, align 4, !tbaa !351
  %430 = shl i64 %366, 32
  %sext67 = add i64 %430, 12627203850240
  %431 = ashr exact i64 %sext67, 32
  %432 = getelementptr inbounds float, float* %22, i64 %431
  %433 = extractelement <64 x float> %371, i64 15
  store float %433, float* %432, align 4, !tbaa !351
  %434 = shl i64 %366, 32
  %sext68 = add i64 %434, 13469017440256
  %435 = ashr exact i64 %sext68, 32
  %436 = getelementptr inbounds float, float* %22, i64 %435
  %437 = extractelement <64 x float> %371, i64 16
  store float %437, float* %436, align 4, !tbaa !351
  %438 = shl i64 %366, 32
  %sext69 = add i64 %438, 14310831030272
  %439 = ashr exact i64 %sext69, 32
  %440 = getelementptr inbounds float, float* %22, i64 %439
  %441 = extractelement <64 x float> %371, i64 17
  store float %441, float* %440, align 4, !tbaa !351
  %442 = shl i64 %366, 32
  %sext70 = add i64 %442, 15152644620288
  %443 = ashr exact i64 %sext70, 32
  %444 = getelementptr inbounds float, float* %22, i64 %443
  %445 = extractelement <64 x float> %371, i64 18
  store float %445, float* %444, align 4, !tbaa !351
  %446 = shl i64 %366, 32
  %sext71 = add i64 %446, 15994458210304
  %447 = ashr exact i64 %sext71, 32
  %448 = getelementptr inbounds float, float* %22, i64 %447
  %449 = extractelement <64 x float> %371, i64 19
  store float %449, float* %448, align 4, !tbaa !351
  %450 = shl i64 %366, 32
  %sext72 = add i64 %450, 16836271800320
  %451 = ashr exact i64 %sext72, 32
  %452 = getelementptr inbounds float, float* %22, i64 %451
  %453 = extractelement <64 x float> %371, i64 20
  store float %453, float* %452, align 4, !tbaa !351
  %454 = shl i64 %366, 32
  %sext73 = add i64 %454, 17678085390336
  %455 = ashr exact i64 %sext73, 32
  %456 = getelementptr inbounds float, float* %22, i64 %455
  %457 = extractelement <64 x float> %371, i64 21
  store float %457, float* %456, align 4, !tbaa !351
  %458 = shl i64 %366, 32
  %sext74 = add i64 %458, 18519898980352
  %459 = ashr exact i64 %sext74, 32
  %460 = getelementptr inbounds float, float* %22, i64 %459
  %461 = extractelement <64 x float> %371, i64 22
  store float %461, float* %460, align 4, !tbaa !351
  %462 = shl i64 %366, 32
  %sext75 = add i64 %462, 19361712570368
  %463 = ashr exact i64 %sext75, 32
  %464 = getelementptr inbounds float, float* %22, i64 %463
  %465 = extractelement <64 x float> %371, i64 23
  store float %465, float* %464, align 4, !tbaa !351
  %466 = shl i64 %366, 32
  %sext76 = add i64 %466, 20203526160384
  %467 = ashr exact i64 %sext76, 32
  %468 = getelementptr inbounds float, float* %22, i64 %467
  %469 = extractelement <64 x float> %371, i64 24
  store float %469, float* %468, align 4, !tbaa !351
  %470 = shl i64 %366, 32
  %sext77 = add i64 %470, 21045339750400
  %471 = ashr exact i64 %sext77, 32
  %472 = getelementptr inbounds float, float* %22, i64 %471
  %473 = extractelement <64 x float> %371, i64 25
  store float %473, float* %472, align 4, !tbaa !351
  %474 = shl i64 %366, 32
  %sext78 = add i64 %474, 21887153340416
  %475 = ashr exact i64 %sext78, 32
  %476 = getelementptr inbounds float, float* %22, i64 %475
  %477 = extractelement <64 x float> %371, i64 26
  store float %477, float* %476, align 4, !tbaa !351
  %478 = shl i64 %366, 32
  %sext79 = add i64 %478, 22728966930432
  %479 = ashr exact i64 %sext79, 32
  %480 = getelementptr inbounds float, float* %22, i64 %479
  %481 = extractelement <64 x float> %371, i64 27
  store float %481, float* %480, align 4, !tbaa !351
  %482 = shl i64 %366, 32
  %sext80 = add i64 %482, 23570780520448
  %483 = ashr exact i64 %sext80, 32
  %484 = getelementptr inbounds float, float* %22, i64 %483
  %485 = extractelement <64 x float> %371, i64 28
  store float %485, float* %484, align 4, !tbaa !351
  %486 = shl i64 %366, 32
  %sext81 = add i64 %486, 24412594110464
  %487 = ashr exact i64 %sext81, 32
  %488 = getelementptr inbounds float, float* %22, i64 %487
  %489 = extractelement <64 x float> %371, i64 29
  store float %489, float* %488, align 4, !tbaa !351
  %490 = shl i64 %366, 32
  %sext82 = add i64 %490, 25254407700480
  %491 = ashr exact i64 %sext82, 32
  %492 = getelementptr inbounds float, float* %22, i64 %491
  %493 = extractelement <64 x float> %371, i64 30
  store float %493, float* %492, align 4, !tbaa !351
  %494 = shl i64 %366, 32
  %sext83 = add i64 %494, 26096221290496
  %495 = ashr exact i64 %sext83, 32
  %496 = getelementptr inbounds float, float* %22, i64 %495
  %497 = extractelement <64 x float> %371, i64 31
  store float %497, float* %496, align 4, !tbaa !351
  %498 = shl i64 %366, 32
  %sext84 = add i64 %498, 26938034880512
  %499 = ashr exact i64 %sext84, 32
  %500 = getelementptr inbounds float, float* %22, i64 %499
  %501 = extractelement <64 x float> %371, i64 32
  store float %501, float* %500, align 4, !tbaa !351
  %502 = shl i64 %366, 32
  %sext85 = add i64 %502, 27779848470528
  %503 = ashr exact i64 %sext85, 32
  %504 = getelementptr inbounds float, float* %22, i64 %503
  %505 = extractelement <64 x float> %371, i64 33
  store float %505, float* %504, align 4, !tbaa !351
  %506 = shl i64 %366, 32
  %sext86 = add i64 %506, 28621662060544
  %507 = ashr exact i64 %sext86, 32
  %508 = getelementptr inbounds float, float* %22, i64 %507
  %509 = extractelement <64 x float> %371, i64 34
  store float %509, float* %508, align 4, !tbaa !351
  %510 = shl i64 %366, 32
  %sext87 = add i64 %510, 29463475650560
  %511 = ashr exact i64 %sext87, 32
  %512 = getelementptr inbounds float, float* %22, i64 %511
  %513 = extractelement <64 x float> %371, i64 35
  store float %513, float* %512, align 4, !tbaa !351
  %514 = shl i64 %366, 32
  %sext88 = add i64 %514, 30305289240576
  %515 = ashr exact i64 %sext88, 32
  %516 = getelementptr inbounds float, float* %22, i64 %515
  %517 = extractelement <64 x float> %371, i64 36
  store float %517, float* %516, align 4, !tbaa !351
  %518 = shl i64 %366, 32
  %sext89 = add i64 %518, 31147102830592
  %519 = ashr exact i64 %sext89, 32
  %520 = getelementptr inbounds float, float* %22, i64 %519
  %521 = extractelement <64 x float> %371, i64 37
  store float %521, float* %520, align 4, !tbaa !351
  %522 = shl i64 %366, 32
  %sext90 = add i64 %522, 31988916420608
  %523 = ashr exact i64 %sext90, 32
  %524 = getelementptr inbounds float, float* %22, i64 %523
  %525 = extractelement <64 x float> %371, i64 38
  store float %525, float* %524, align 4, !tbaa !351
  %526 = shl i64 %366, 32
  %sext91 = add i64 %526, 32830730010624
  %527 = ashr exact i64 %sext91, 32
  %528 = getelementptr inbounds float, float* %22, i64 %527
  %529 = extractelement <64 x float> %371, i64 39
  store float %529, float* %528, align 4, !tbaa !351
  %530 = shl i64 %366, 32
  %sext92 = add i64 %530, 33672543600640
  %531 = ashr exact i64 %sext92, 32
  %532 = getelementptr inbounds float, float* %22, i64 %531
  %533 = extractelement <64 x float> %371, i64 40
  store float %533, float* %532, align 4, !tbaa !351
  %534 = shl i64 %366, 32
  %sext93 = add i64 %534, 34514357190656
  %535 = ashr exact i64 %sext93, 32
  %536 = getelementptr inbounds float, float* %22, i64 %535
  %537 = extractelement <64 x float> %371, i64 41
  store float %537, float* %536, align 4, !tbaa !351
  %538 = shl i64 %366, 32
  %sext94 = add i64 %538, 35356170780672
  %539 = ashr exact i64 %sext94, 32
  %540 = getelementptr inbounds float, float* %22, i64 %539
  %541 = extractelement <64 x float> %371, i64 42
  store float %541, float* %540, align 4, !tbaa !351
  %542 = shl i64 %366, 32
  %sext95 = add i64 %542, 36197984370688
  %543 = ashr exact i64 %sext95, 32
  %544 = getelementptr inbounds float, float* %22, i64 %543
  %545 = extractelement <64 x float> %371, i64 43
  store float %545, float* %544, align 4, !tbaa !351
  %546 = shl i64 %366, 32
  %sext96 = add i64 %546, 37039797960704
  %547 = ashr exact i64 %sext96, 32
  %548 = getelementptr inbounds float, float* %22, i64 %547
  %549 = extractelement <64 x float> %371, i64 44
  store float %549, float* %548, align 4, !tbaa !351
  %550 = shl i64 %366, 32
  %sext97 = add i64 %550, 37881611550720
  %551 = ashr exact i64 %sext97, 32
  %552 = getelementptr inbounds float, float* %22, i64 %551
  %553 = extractelement <64 x float> %371, i64 45
  store float %553, float* %552, align 4, !tbaa !351
  %554 = shl i64 %366, 32
  %sext98 = add i64 %554, 38723425140736
  %555 = ashr exact i64 %sext98, 32
  %556 = getelementptr inbounds float, float* %22, i64 %555
  %557 = extractelement <64 x float> %371, i64 46
  store float %557, float* %556, align 4, !tbaa !351
  %558 = shl i64 %366, 32
  %sext99 = add i64 %558, 39565238730752
  %559 = ashr exact i64 %sext99, 32
  %560 = getelementptr inbounds float, float* %22, i64 %559
  %561 = extractelement <64 x float> %371, i64 47
  store float %561, float* %560, align 4, !tbaa !351
  %562 = shl i64 %366, 32
  %sext100 = add i64 %562, 40407052320768
  %563 = ashr exact i64 %sext100, 32
  %564 = getelementptr inbounds float, float* %22, i64 %563
  %565 = extractelement <64 x float> %371, i64 48
  store float %565, float* %564, align 4, !tbaa !351
  %566 = shl i64 %366, 32
  %sext101 = add i64 %566, 41248865910784
  %567 = ashr exact i64 %sext101, 32
  %568 = getelementptr inbounds float, float* %22, i64 %567
  %569 = extractelement <64 x float> %371, i64 49
  store float %569, float* %568, align 4, !tbaa !351
  %570 = shl i64 %366, 32
  %sext102 = add i64 %570, 42090679500800
  %571 = ashr exact i64 %sext102, 32
  %572 = getelementptr inbounds float, float* %22, i64 %571
  %573 = extractelement <64 x float> %371, i64 50
  store float %573, float* %572, align 4, !tbaa !351
  %574 = shl i64 %366, 32
  %sext103 = add i64 %574, 42932493090816
  %575 = ashr exact i64 %sext103, 32
  %576 = getelementptr inbounds float, float* %22, i64 %575
  %577 = extractelement <64 x float> %371, i64 51
  store float %577, float* %576, align 4, !tbaa !351
  %578 = shl i64 %366, 32
  %sext104 = add i64 %578, 43774306680832
  %579 = ashr exact i64 %sext104, 32
  %580 = getelementptr inbounds float, float* %22, i64 %579
  %581 = extractelement <64 x float> %371, i64 52
  store float %581, float* %580, align 4, !tbaa !351
  %582 = shl i64 %366, 32
  %sext105 = add i64 %582, 44616120270848
  %583 = ashr exact i64 %sext105, 32
  %584 = getelementptr inbounds float, float* %22, i64 %583
  %585 = extractelement <64 x float> %371, i64 53
  store float %585, float* %584, align 4, !tbaa !351
  %586 = shl i64 %366, 32
  %sext106 = add i64 %586, 45457933860864
  %587 = ashr exact i64 %sext106, 32
  %588 = getelementptr inbounds float, float* %22, i64 %587
  %589 = extractelement <64 x float> %371, i64 54
  store float %589, float* %588, align 4, !tbaa !351
  %590 = shl i64 %366, 32
  %sext107 = add i64 %590, 46299747450880
  %591 = ashr exact i64 %sext107, 32
  %592 = getelementptr inbounds float, float* %22, i64 %591
  %593 = extractelement <64 x float> %371, i64 55
  store float %593, float* %592, align 4, !tbaa !351
  %594 = shl i64 %366, 32
  %sext108 = add i64 %594, 47141561040896
  %595 = ashr exact i64 %sext108, 32
  %596 = getelementptr inbounds float, float* %22, i64 %595
  %597 = extractelement <64 x float> %371, i64 56
  store float %597, float* %596, align 4, !tbaa !351
  %598 = shl i64 %366, 32
  %sext109 = add i64 %598, 47983374630912
  %599 = ashr exact i64 %sext109, 32
  %600 = getelementptr inbounds float, float* %22, i64 %599
  %601 = extractelement <64 x float> %371, i64 57
  store float %601, float* %600, align 4, !tbaa !351
  %602 = shl i64 %366, 32
  %sext110 = add i64 %602, 48825188220928
  %603 = ashr exact i64 %sext110, 32
  %604 = getelementptr inbounds float, float* %22, i64 %603
  %605 = extractelement <64 x float> %371, i64 58
  store float %605, float* %604, align 4, !tbaa !351
  %606 = shl i64 %366, 32
  %sext111 = add i64 %606, 49667001810944
  %607 = ashr exact i64 %sext111, 32
  %608 = getelementptr inbounds float, float* %22, i64 %607
  %609 = extractelement <64 x float> %371, i64 59
  store float %609, float* %608, align 4, !tbaa !351
  %610 = shl i64 %366, 32
  %sext112 = add i64 %610, 50508815400960
  %611 = ashr exact i64 %sext112, 32
  %612 = getelementptr inbounds float, float* %22, i64 %611
  %613 = extractelement <64 x float> %371, i64 60
  store float %613, float* %612, align 4, !tbaa !351
  %614 = shl i64 %366, 32
  %sext113 = add i64 %614, 51350628990976
  %615 = ashr exact i64 %sext113, 32
  %616 = getelementptr inbounds float, float* %22, i64 %615
  %617 = extractelement <64 x float> %371, i64 61
  store float %617, float* %616, align 4, !tbaa !351
  %618 = shl i64 %366, 32
  %sext114 = add i64 %618, 52192442580992
  %619 = ashr exact i64 %sext114, 32
  %620 = getelementptr inbounds float, float* %22, i64 %619
  %621 = extractelement <64 x float> %371, i64 62
  store float %621, float* %620, align 4, !tbaa !351
  %622 = shl i64 %366, 32
  %sext115 = add i64 %622, 53034256171008
  %623 = ashr exact i64 %sext115, 32
  %624 = getelementptr inbounds float, float* %22, i64 %623
  %625 = extractelement <64 x float> %371, i64 63
  store float %625, float* %624, align 4, !tbaa !351
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %exitcond28 = icmp eq i64 %indvars.iv.next27, 2
  br i1 %exitcond28, label %for_end36, label %for_body35, !prof !5

for_end36:                                        ; preds = %for_body35
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp eq i64 %indvars.iv.next30, 2
  br i1 %exitcond31, label %for_end33, label %for_begin34.preheader, !prof !5

for_body26.1:                                     ; preds = %for_body26.1, %for_end27
  %indvars.iv.1 = phi i64 [ 0, %for_end27 ], [ %indvars.iv.next.1, %for_body26.1 ]
  %626 = phi <64 x float> [ %354, %for_end27 ], [ %666, %for_body26.1 ]
  %627 = phi <64 x float> [ %347, %for_end27 ], [ %659, %for_body26.1 ]
  %628 = phi <64 x float> [ %340, %for_end27 ], [ %652, %for_body26.1 ]
  %629 = phi <64 x float> [ %333, %for_end27 ], [ %645, %for_body26.1 ]
  %630 = phi i32 [ 0, %for_end27 ], [ %667, %for_body26.1 ]
  %631 = mul nuw nsw i64 %indvars.iv.1, 14
  %632 = mul nuw nsw i32 %630, 14
  %633 = add nuw nsw i64 %356, %631
  %634 = add nsw i32 %632, %357
  %635 = and i64 %633, 4294967294
  %636 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %635
  %637 = load float, float* %636, align 8, !tbaa !348
  %638 = insertelement <64 x float> undef, float %637, i32 0
  %639 = shufflevector <64 x float> %638, <64 x float> undef, <64 x i32> zeroinitializer
  %640 = shl i64 %indvars.iv.1, 6
  %641 = add nuw nsw i64 %294, %640
  %642 = getelementptr inbounds [4096 x <64 x float>], [4096 x <64 x float>]* %4, i64 0, i64 0, i64 %641
  %643 = bitcast float* %642 to <64 x float>*
  %644 = load <64 x float>, <64 x float>* %643, align 16, !tbaa !342
  %645 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %639, <64 x float> %644, <64 x float> %629)
  %646 = or i32 %634, 1
  %647 = zext i32 %646 to i64
  %648 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %647
  %649 = load float, float* %648, align 4, !tbaa !348
  %650 = insertelement <64 x float> undef, float %649, i32 0
  %651 = shufflevector <64 x float> %650, <64 x float> undef, <64 x i32> zeroinitializer
  %652 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %651, <64 x float> %644, <64 x float> %628)
  %653 = add nuw i64 %633, 7168
  %654 = and i64 %653, 4294967295
  %655 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %654
  %656 = load float, float* %655, align 8, !tbaa !348
  %657 = insertelement <64 x float> undef, float %656, i32 0
  %658 = shufflevector <64 x float> %657, <64 x float> undef, <64 x i32> zeroinitializer
  %659 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %658, <64 x float> %644, <64 x float> %627)
  %660 = add nuw i64 %633, 7169
  %661 = and i64 %660, 4294967295
  %662 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %661
  %663 = load float, float* %662, align 4, !tbaa !348
  %664 = insertelement <64 x float> undef, float %663, i32 0
  %665 = shufflevector <64 x float> %664, <64 x float> undef, <64 x i32> zeroinitializer
  %666 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %665, <64 x float> %644, <64 x float> %626)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %667 = add nuw nsw i32 %630, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end27.1, label %for_body26.1, !prof !5

for_end27.1:                                      ; preds = %for_body26.1
  store <64 x float> %645, <64 x float>* %301, align 16, !tbaa !345
  store <64 x float> %652, <64 x float>* %304, align 16, !tbaa !345
  store <64 x float> %659, <64 x float>* %307, align 16, !tbaa !345
  store <64 x float> %666, <64 x float>* %310, align 16, !tbaa !345
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 7
  br i1 %exitcond24, label %for_begin28.preheader, label %for_body20, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_1_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_1_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [73728 x <32 x float>], align 16
  %5 = alloca [41472 x float], align 16
  %6 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %7 = mul nuw nsw i64 %indvar, 4608
  %8 = trunc i64 %indvar to i32
  %9 = add i32 %8, -1
  %10 = icmp ult i32 %9, 7
  %11 = mul nuw nsw i64 %indvar, 7
  %12 = add nsw i64 %11, -8
  br i1 %10, label %if_end.us.us.8, label %for_begin4.preheader.preheader

for_begin4.preheader.preheader:                   ; preds = %for_begin1.preheader
  %scevgep62 = getelementptr [41472 x float], [41472 x float]* %5, i64 0, i64 %7
  %scevgep6263 = bitcast float* %scevgep62 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %scevgep6263, i8 0, i64 18432, i1 false)
  br label %for_end3

for_begin7.preheader:                             ; preds = %for_end3
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  %13 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_end3:                                         ; preds = %if_end.us.us.8, %for_begin4.preheader.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond71 = icmp eq i64 %indvar.next, 9
  br i1 %exitcond71, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv52 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next53, %for_end12 ]
  %14 = mul nuw nsw i64 %indvars.iv52, 49152
  %15 = trunc i64 %indvars.iv52 to i32
  %16 = urem i32 %15, 3
  %17 = mul nuw nsw i32 %16, 3
  %18 = udiv i32 %15, 3
  %19 = mul nsw i32 %18, 147456
  %20 = or i32 %17, %19
  %21 = zext i32 %20 to i64
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %22 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %23 = bitcast float* %22 to <32 x float>*
  %24 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %25 = bitcast float* %24 to <32 x float>*
  %26 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %27 = bitcast float* %26 to <32 x float>*
  %28 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %29 = bitcast float* %28 to <32 x float>*
  %30 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %31 = bitcast float* %30 to <32 x float>*
  %32 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %33 = bitcast float* %32 to <32 x float>*
  %34 = bitcast i8* %2 to float*
  %35 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body17

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv49 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next50, %for_end15 ]
  %36 = shl i64 %indvars.iv49, 14
  %37 = add nuw nsw i64 %36, %14
  %38 = add nuw nsw i64 %indvars.iv49, %21
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 48
  br i1 %exitcond54, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv46 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next47, %for_body14 ]
  %39 = shl i64 %indvars.iv46, 5
  %40 = add nuw nsw i64 %37, %39
  %41 = mul nuw nsw i64 %indvars.iv46, 9
  %42 = add nuw nsw i64 %38, %41
  %43 = add nuw nsw i64 %42, 4608
  %44 = add nuw nsw i64 %42, 9216
  %45 = add nuw nsw i64 %42, 13824
  %46 = add nuw nsw i64 %42, 18432
  %47 = add nuw nsw i64 %42, 23040
  %48 = add nuw nsw i64 %42, 27648
  %49 = add nuw nsw i64 %42, 32256
  %50 = add nuw nsw i64 %42, 36864
  %51 = add nuw nsw i64 %42, 41472
  %52 = add nuw nsw i64 %42, 46080
  %53 = add nuw nsw i64 %42, 50688
  %54 = add nuw nsw i64 %42, 55296
  %55 = add nuw nsw i64 %42, 59904
  %56 = add nuw nsw i64 %42, 64512
  %57 = add nuw nsw i64 %42, 69120
  %58 = add nuw nsw i64 %42, 73728
  %59 = add nuw nsw i64 %42, 78336
  %60 = add nuw nsw i64 %42, 82944
  %61 = add nuw nsw i64 %42, 87552
  %62 = add nuw nsw i64 %42, 92160
  %63 = add nuw nsw i64 %42, 96768
  %64 = add nuw nsw i64 %42, 101376
  %65 = add nuw nsw i64 %42, 105984
  %66 = add nuw nsw i64 %42, 110592
  %67 = add nuw nsw i64 %42, 115200
  %68 = add nuw nsw i64 %42, 119808
  %69 = add nuw nsw i64 %42, 124416
  %70 = add nuw nsw i64 %42, 129024
  %71 = add nuw nsw i64 %42, 133632
  %72 = add nuw nsw i64 %42, 138240
  %73 = add nuw nsw i64 %42, 142848
  %74 = getelementptr inbounds float, float* %13, i64 %42
  %75 = load float, float* %74, align 4, !tbaa !354
  %76 = insertelement <32 x float> undef, float %75, i32 0
  %77 = getelementptr inbounds float, float* %13, i64 %43
  %78 = load float, float* %77, align 4, !tbaa !354
  %79 = insertelement <32 x float> %76, float %78, i32 1
  %80 = getelementptr inbounds float, float* %13, i64 %44
  %81 = load float, float* %80, align 4, !tbaa !354
  %82 = insertelement <32 x float> %79, float %81, i32 2
  %83 = getelementptr inbounds float, float* %13, i64 %45
  %84 = load float, float* %83, align 4, !tbaa !354
  %85 = insertelement <32 x float> %82, float %84, i32 3
  %86 = getelementptr inbounds float, float* %13, i64 %46
  %87 = load float, float* %86, align 4, !tbaa !354
  %88 = insertelement <32 x float> %85, float %87, i32 4
  %89 = getelementptr inbounds float, float* %13, i64 %47
  %90 = load float, float* %89, align 4, !tbaa !354
  %91 = insertelement <32 x float> %88, float %90, i32 5
  %92 = getelementptr inbounds float, float* %13, i64 %48
  %93 = load float, float* %92, align 4, !tbaa !354
  %94 = insertelement <32 x float> %91, float %93, i32 6
  %95 = getelementptr inbounds float, float* %13, i64 %49
  %96 = load float, float* %95, align 4, !tbaa !354
  %97 = insertelement <32 x float> %94, float %96, i32 7
  %98 = getelementptr inbounds float, float* %13, i64 %50
  %99 = load float, float* %98, align 4, !tbaa !354
  %100 = insertelement <32 x float> %97, float %99, i32 8
  %101 = getelementptr inbounds float, float* %13, i64 %51
  %102 = load float, float* %101, align 4, !tbaa !354
  %103 = insertelement <32 x float> %100, float %102, i32 9
  %104 = getelementptr inbounds float, float* %13, i64 %52
  %105 = load float, float* %104, align 4, !tbaa !354
  %106 = insertelement <32 x float> %103, float %105, i32 10
  %107 = getelementptr inbounds float, float* %13, i64 %53
  %108 = load float, float* %107, align 4, !tbaa !354
  %109 = insertelement <32 x float> %106, float %108, i32 11
  %110 = getelementptr inbounds float, float* %13, i64 %54
  %111 = load float, float* %110, align 4, !tbaa !354
  %112 = insertelement <32 x float> %109, float %111, i32 12
  %113 = getelementptr inbounds float, float* %13, i64 %55
  %114 = load float, float* %113, align 4, !tbaa !354
  %115 = insertelement <32 x float> %112, float %114, i32 13
  %116 = getelementptr inbounds float, float* %13, i64 %56
  %117 = load float, float* %116, align 4, !tbaa !354
  %118 = insertelement <32 x float> %115, float %117, i32 14
  %119 = getelementptr inbounds float, float* %13, i64 %57
  %120 = load float, float* %119, align 4, !tbaa !354
  %121 = insertelement <32 x float> %118, float %120, i32 15
  %122 = getelementptr inbounds float, float* %13, i64 %58
  %123 = load float, float* %122, align 4, !tbaa !354
  %124 = insertelement <32 x float> %121, float %123, i32 16
  %125 = getelementptr inbounds float, float* %13, i64 %59
  %126 = load float, float* %125, align 4, !tbaa !354
  %127 = insertelement <32 x float> %124, float %126, i32 17
  %128 = getelementptr inbounds float, float* %13, i64 %60
  %129 = load float, float* %128, align 4, !tbaa !354
  %130 = insertelement <32 x float> %127, float %129, i32 18
  %131 = getelementptr inbounds float, float* %13, i64 %61
  %132 = load float, float* %131, align 4, !tbaa !354
  %133 = insertelement <32 x float> %130, float %132, i32 19
  %134 = getelementptr inbounds float, float* %13, i64 %62
  %135 = load float, float* %134, align 4, !tbaa !354
  %136 = insertelement <32 x float> %133, float %135, i32 20
  %137 = getelementptr inbounds float, float* %13, i64 %63
  %138 = load float, float* %137, align 4, !tbaa !354
  %139 = insertelement <32 x float> %136, float %138, i32 21
  %140 = getelementptr inbounds float, float* %13, i64 %64
  %141 = load float, float* %140, align 4, !tbaa !354
  %142 = insertelement <32 x float> %139, float %141, i32 22
  %143 = getelementptr inbounds float, float* %13, i64 %65
  %144 = load float, float* %143, align 4, !tbaa !354
  %145 = insertelement <32 x float> %142, float %144, i32 23
  %146 = getelementptr inbounds float, float* %13, i64 %66
  %147 = load float, float* %146, align 4, !tbaa !354
  %148 = insertelement <32 x float> %145, float %147, i32 24
  %149 = getelementptr inbounds float, float* %13, i64 %67
  %150 = load float, float* %149, align 4, !tbaa !354
  %151 = insertelement <32 x float> %148, float %150, i32 25
  %152 = getelementptr inbounds float, float* %13, i64 %68
  %153 = load float, float* %152, align 4, !tbaa !354
  %154 = insertelement <32 x float> %151, float %153, i32 26
  %155 = getelementptr inbounds float, float* %13, i64 %69
  %156 = load float, float* %155, align 4, !tbaa !354
  %157 = insertelement <32 x float> %154, float %156, i32 27
  %158 = getelementptr inbounds float, float* %13, i64 %70
  %159 = load float, float* %158, align 4, !tbaa !354
  %160 = insertelement <32 x float> %157, float %159, i32 28
  %161 = getelementptr inbounds float, float* %13, i64 %71
  %162 = load float, float* %161, align 4, !tbaa !354
  %163 = insertelement <32 x float> %160, float %162, i32 29
  %164 = getelementptr inbounds float, float* %13, i64 %72
  %165 = load float, float* %164, align 4, !tbaa !354
  %166 = insertelement <32 x float> %163, float %165, i32 30
  %167 = getelementptr inbounds float, float* %13, i64 %73
  %168 = load float, float* %167, align 4, !tbaa !354
  %169 = insertelement <32 x float> %166, float %168, i32 31
  %170 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %40
  %171 = bitcast float* %170 to <32 x float>*
  store <32 x float> %169, <32 x float>* %171, align 16, !tbaa !357
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %exitcond48 = icmp eq i64 %indvars.iv.next47, 512
  br i1 %exitcond48, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 1
  %exitcond51 = icmp eq i64 %indvars.iv.next50, 3
  br i1 %exitcond51, label %for_end12, label %for_begin13.preheader, !prof !5

for_body17:                                       ; preds = %for_end27, %for_begin16.preheader
  %172 = phi i32 [ 0, %for_begin16.preheader ], [ %370, %for_end27 ]
  %173 = urem i32 %172, 7
  %174 = udiv i32 %172, 7
  %175 = mul nsw i32 %174, 147456
  %176 = zext i32 %175 to i64
  %177 = mul nuw nsw i32 %173, 4608
  %178 = zext i32 %177 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %35, i8 0, i64 896, i1 false)
  br label %for_body23

for_end18:                                        ; preds = %for_end27
  ret void

for_body23:                                       ; preds = %for_body23, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body23 ]
  %179 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %265, %for_body23 ]
  %180 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %259, %for_body23 ]
  %181 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %258, %for_body23 ]
  %182 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %257, %for_body23 ]
  %183 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %256, %for_body23 ]
  %184 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %255, %for_body23 ]
  %185 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %254, %for_body23 ]
  %186 = mul nuw nsw i64 %indvars.iv, 9
  %187 = add nuw nsw i64 %186, %178
  %188 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %187
  %189 = load float, float* %188, align 4, !tbaa !360
  %190 = insertelement <32 x float> undef, float %189, i32 0
  %191 = shufflevector <32 x float> %190, <32 x float> undef, <32 x i32> zeroinitializer
  %192 = shl nsw i64 %indvars.iv, 5
  %193 = add nuw nsw i64 %192, %176
  %194 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %193
  %195 = bitcast float* %194 to <32 x float>*
  %196 = load <32 x float>, <32 x float>* %195, align 16, !tbaa !357
  %197 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %191, <32 x float> %196, <32 x float> %185)
  %198 = add nuw nsw i64 %187, 1
  %199 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !360
  %201 = insertelement <32 x float> undef, float %200, i32 0
  %202 = shufflevector <32 x float> %201, <32 x float> undef, <32 x i32> zeroinitializer
  %203 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %202, <32 x float> %196, <32 x float> %184)
  %204 = add nuw nsw i64 %187, 2
  %205 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %204
  %206 = load float, float* %205, align 4, !tbaa !360
  %207 = insertelement <32 x float> undef, float %206, i32 0
  %208 = shufflevector <32 x float> %207, <32 x float> undef, <32 x i32> zeroinitializer
  %209 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %208, <32 x float> %196, <32 x float> %183)
  %210 = add nuw nsw i64 %187, 3
  %211 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !360
  %213 = insertelement <32 x float> undef, float %212, i32 0
  %214 = shufflevector <32 x float> %213, <32 x float> undef, <32 x i32> zeroinitializer
  %215 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %196, <32 x float> %182)
  %216 = add nuw nsw i64 %187, 4
  %217 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %216
  %218 = load float, float* %217, align 4, !tbaa !360
  %219 = insertelement <32 x float> undef, float %218, i32 0
  %220 = shufflevector <32 x float> %219, <32 x float> undef, <32 x i32> zeroinitializer
  %221 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %220, <32 x float> %196, <32 x float> %181)
  %222 = add nuw nsw i64 %187, 5
  %223 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %222
  %224 = load float, float* %223, align 4, !tbaa !360
  %225 = insertelement <32 x float> undef, float %224, i32 0
  %226 = shufflevector <32 x float> %225, <32 x float> undef, <32 x i32> zeroinitializer
  %227 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %196, <32 x float> %180)
  %228 = add nuw nsw i64 %187, 6
  %229 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %228
  %230 = load float, float* %229, align 4, !tbaa !360
  %231 = insertelement <32 x float> undef, float %230, i32 0
  %232 = shufflevector <32 x float> %231, <32 x float> undef, <32 x i32> zeroinitializer
  %233 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %196, <32 x float> %179)
  %234 = add nuw nsw i64 %193, 16384
  %235 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %234
  %236 = bitcast float* %235 to <32 x float>*
  %237 = load <32 x float>, <32 x float>* %236, align 16, !tbaa !357
  %238 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %202, <32 x float> %237, <32 x float> %197)
  %239 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %208, <32 x float> %237, <32 x float> %203)
  %240 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %237, <32 x float> %209)
  %241 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %220, <32 x float> %237, <32 x float> %215)
  %242 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %237, <32 x float> %221)
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %237, <32 x float> %227)
  %244 = add nuw nsw i64 %187, 7
  %245 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !360
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %237, <32 x float> %233)
  %250 = add nuw nsw i64 %193, 32768
  %251 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %250
  %252 = bitcast float* %251 to <32 x float>*
  %253 = load <32 x float>, <32 x float>* %252, align 16, !tbaa !357
  %254 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %208, <32 x float> %253, <32 x float> %238)
  %255 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %253, <32 x float> %239)
  %256 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %220, <32 x float> %253, <32 x float> %240)
  %257 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %253, <32 x float> %241)
  %258 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %253, <32 x float> %242)
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %253, <32 x float> %243)
  %260 = add nuw nsw i64 %187, 8
  %261 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !360
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %253, <32 x float> %249)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end24, label %for_body23, !prof !5

for_end24:                                        ; preds = %for_body23
  %266 = mul nuw nsw i32 %173, 4608
  %267 = add nuw nsw i32 %266, 4608
  %268 = add nuw nsw i64 %176, 49152
  %269 = zext i32 %267 to i64
  br label %for_body23.1

for_body26:                                       ; preds = %for_body26, %for_end24.2
  %indvars.iv42 = phi i64 [ 0, %for_end24.2 ], [ %indvars.iv.next43, %for_body26 ]
  %270 = add nuw nsw i64 %indvars.iv42, %552
  %271 = add nuw nsw i64 %270, 49
  %272 = add nuw nsw i64 %270, 98
  %273 = add nuw nsw i64 %270, 147
  %274 = add nuw nsw i64 %270, 196
  %275 = add nuw nsw i64 %270, 245
  %276 = add nuw nsw i64 %270, 294
  %277 = add nuw nsw i64 %270, 343
  %278 = add nuw nsw i64 %270, 392
  %279 = add nuw nsw i64 %270, 441
  %280 = add nuw nsw i64 %270, 490
  %281 = add nuw nsw i64 %270, 539
  %282 = add nuw nsw i64 %270, 588
  %283 = add nuw nsw i64 %270, 637
  %284 = add nuw nsw i64 %270, 686
  %285 = add nuw nsw i64 %270, 735
  %286 = add nuw nsw i64 %270, 784
  %287 = add nuw nsw i64 %270, 833
  %288 = add nuw nsw i64 %270, 882
  %289 = add nuw nsw i64 %270, 931
  %290 = add nuw nsw i64 %270, 980
  %291 = add nuw nsw i64 %270, 1029
  %292 = add nuw nsw i64 %270, 1078
  %293 = add nuw nsw i64 %270, 1127
  %294 = add nuw nsw i64 %270, 1176
  %295 = add nuw nsw i64 %270, 1225
  %296 = add nuw nsw i64 %270, 1274
  %297 = add nuw nsw i64 %270, 1323
  %298 = add nuw nsw i64 %270, 1372
  %299 = add nuw nsw i64 %270, 1421
  %300 = add nuw nsw i64 %270, 1470
  %301 = add nuw nsw i64 %270, 1519
  %302 = shl nsw i64 %indvars.iv42, 5
  %303 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 %302
  %304 = bitcast float* %303 to <32 x float>*
  %305 = load <32 x float>, <32 x float>* %304, align 128, !tbaa !363
  %306 = getelementptr inbounds float, float* %34, i64 %270
  %307 = extractelement <32 x float> %305, i64 0
  store float %307, float* %306, align 4, !tbaa !366
  %308 = getelementptr inbounds float, float* %34, i64 %271
  %309 = extractelement <32 x float> %305, i64 1
  store float %309, float* %308, align 4, !tbaa !366
  %310 = getelementptr inbounds float, float* %34, i64 %272
  %311 = extractelement <32 x float> %305, i64 2
  store float %311, float* %310, align 4, !tbaa !366
  %312 = getelementptr inbounds float, float* %34, i64 %273
  %313 = extractelement <32 x float> %305, i64 3
  store float %313, float* %312, align 4, !tbaa !366
  %314 = getelementptr inbounds float, float* %34, i64 %274
  %315 = extractelement <32 x float> %305, i64 4
  store float %315, float* %314, align 4, !tbaa !366
  %316 = getelementptr inbounds float, float* %34, i64 %275
  %317 = extractelement <32 x float> %305, i64 5
  store float %317, float* %316, align 4, !tbaa !366
  %318 = getelementptr inbounds float, float* %34, i64 %276
  %319 = extractelement <32 x float> %305, i64 6
  store float %319, float* %318, align 4, !tbaa !366
  %320 = getelementptr inbounds float, float* %34, i64 %277
  %321 = extractelement <32 x float> %305, i64 7
  store float %321, float* %320, align 4, !tbaa !366
  %322 = getelementptr inbounds float, float* %34, i64 %278
  %323 = extractelement <32 x float> %305, i64 8
  store float %323, float* %322, align 4, !tbaa !366
  %324 = getelementptr inbounds float, float* %34, i64 %279
  %325 = extractelement <32 x float> %305, i64 9
  store float %325, float* %324, align 4, !tbaa !366
  %326 = getelementptr inbounds float, float* %34, i64 %280
  %327 = extractelement <32 x float> %305, i64 10
  store float %327, float* %326, align 4, !tbaa !366
  %328 = getelementptr inbounds float, float* %34, i64 %281
  %329 = extractelement <32 x float> %305, i64 11
  store float %329, float* %328, align 4, !tbaa !366
  %330 = getelementptr inbounds float, float* %34, i64 %282
  %331 = extractelement <32 x float> %305, i64 12
  store float %331, float* %330, align 4, !tbaa !366
  %332 = getelementptr inbounds float, float* %34, i64 %283
  %333 = extractelement <32 x float> %305, i64 13
  store float %333, float* %332, align 4, !tbaa !366
  %334 = getelementptr inbounds float, float* %34, i64 %284
  %335 = extractelement <32 x float> %305, i64 14
  store float %335, float* %334, align 4, !tbaa !366
  %336 = getelementptr inbounds float, float* %34, i64 %285
  %337 = extractelement <32 x float> %305, i64 15
  store float %337, float* %336, align 4, !tbaa !366
  %338 = getelementptr inbounds float, float* %34, i64 %286
  %339 = extractelement <32 x float> %305, i64 16
  store float %339, float* %338, align 4, !tbaa !366
  %340 = getelementptr inbounds float, float* %34, i64 %287
  %341 = extractelement <32 x float> %305, i64 17
  store float %341, float* %340, align 4, !tbaa !366
  %342 = getelementptr inbounds float, float* %34, i64 %288
  %343 = extractelement <32 x float> %305, i64 18
  store float %343, float* %342, align 4, !tbaa !366
  %344 = getelementptr inbounds float, float* %34, i64 %289
  %345 = extractelement <32 x float> %305, i64 19
  store float %345, float* %344, align 4, !tbaa !366
  %346 = getelementptr inbounds float, float* %34, i64 %290
  %347 = extractelement <32 x float> %305, i64 20
  store float %347, float* %346, align 4, !tbaa !366
  %348 = getelementptr inbounds float, float* %34, i64 %291
  %349 = extractelement <32 x float> %305, i64 21
  store float %349, float* %348, align 4, !tbaa !366
  %350 = getelementptr inbounds float, float* %34, i64 %292
  %351 = extractelement <32 x float> %305, i64 22
  store float %351, float* %350, align 4, !tbaa !366
  %352 = getelementptr inbounds float, float* %34, i64 %293
  %353 = extractelement <32 x float> %305, i64 23
  store float %353, float* %352, align 4, !tbaa !366
  %354 = getelementptr inbounds float, float* %34, i64 %294
  %355 = extractelement <32 x float> %305, i64 24
  store float %355, float* %354, align 4, !tbaa !366
  %356 = getelementptr inbounds float, float* %34, i64 %295
  %357 = extractelement <32 x float> %305, i64 25
  store float %357, float* %356, align 4, !tbaa !366
  %358 = getelementptr inbounds float, float* %34, i64 %296
  %359 = extractelement <32 x float> %305, i64 26
  store float %359, float* %358, align 4, !tbaa !366
  %360 = getelementptr inbounds float, float* %34, i64 %297
  %361 = extractelement <32 x float> %305, i64 27
  store float %361, float* %360, align 4, !tbaa !366
  %362 = getelementptr inbounds float, float* %34, i64 %298
  %363 = extractelement <32 x float> %305, i64 28
  store float %363, float* %362, align 4, !tbaa !366
  %364 = getelementptr inbounds float, float* %34, i64 %299
  %365 = extractelement <32 x float> %305, i64 29
  store float %365, float* %364, align 4, !tbaa !366
  %366 = getelementptr inbounds float, float* %34, i64 %300
  %367 = extractelement <32 x float> %305, i64 30
  store float %367, float* %366, align 4, !tbaa !366
  %368 = getelementptr inbounds float, float* %34, i64 %301
  %369 = extractelement <32 x float> %305, i64 31
  store float %369, float* %368, align 4, !tbaa !366
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond44 = icmp eq i64 %indvars.iv.next43, 7
  br i1 %exitcond44, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %370 = add nuw nsw i32 %172, 1
  %exitcond45 = icmp eq i32 %370, 112
  br i1 %exitcond45, label %for_end18, label %for_body17, !prof !5

for_body23.1:                                     ; preds = %for_body23.1, %for_end24
  %indvars.iv.1 = phi i64 [ 0, %for_end24 ], [ %indvars.iv.next.1, %for_body23.1 ]
  %371 = phi <32 x float> [ %265, %for_end24 ], [ %457, %for_body23.1 ]
  %372 = phi <32 x float> [ %259, %for_end24 ], [ %451, %for_body23.1 ]
  %373 = phi <32 x float> [ %258, %for_end24 ], [ %450, %for_body23.1 ]
  %374 = phi <32 x float> [ %257, %for_end24 ], [ %449, %for_body23.1 ]
  %375 = phi <32 x float> [ %256, %for_end24 ], [ %448, %for_body23.1 ]
  %376 = phi <32 x float> [ %255, %for_end24 ], [ %447, %for_body23.1 ]
  %377 = phi <32 x float> [ %254, %for_end24 ], [ %446, %for_body23.1 ]
  %378 = mul nuw nsw i64 %indvars.iv.1, 9
  %379 = add nuw nsw i64 %378, %269
  %380 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %379
  %381 = load float, float* %380, align 4, !tbaa !360
  %382 = insertelement <32 x float> undef, float %381, i32 0
  %383 = shufflevector <32 x float> %382, <32 x float> undef, <32 x i32> zeroinitializer
  %384 = shl nsw i64 %indvars.iv.1, 5
  %385 = add nuw nsw i64 %268, %384
  %386 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %385
  %387 = bitcast float* %386 to <32 x float>*
  %388 = load <32 x float>, <32 x float>* %387, align 16, !tbaa !357
  %389 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %383, <32 x float> %388, <32 x float> %377)
  %390 = add nuw nsw i64 %379, 1
  %391 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !360
  %393 = insertelement <32 x float> undef, float %392, i32 0
  %394 = shufflevector <32 x float> %393, <32 x float> undef, <32 x i32> zeroinitializer
  %395 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %394, <32 x float> %388, <32 x float> %376)
  %396 = add nuw nsw i64 %379, 2
  %397 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %396
  %398 = load float, float* %397, align 4, !tbaa !360
  %399 = insertelement <32 x float> undef, float %398, i32 0
  %400 = shufflevector <32 x float> %399, <32 x float> undef, <32 x i32> zeroinitializer
  %401 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %400, <32 x float> %388, <32 x float> %375)
  %402 = add nuw nsw i64 %379, 3
  %403 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !360
  %405 = insertelement <32 x float> undef, float %404, i32 0
  %406 = shufflevector <32 x float> %405, <32 x float> undef, <32 x i32> zeroinitializer
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %388, <32 x float> %374)
  %408 = add nuw nsw i64 %379, 4
  %409 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !360
  %411 = insertelement <32 x float> undef, float %410, i32 0
  %412 = shufflevector <32 x float> %411, <32 x float> undef, <32 x i32> zeroinitializer
  %413 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %388, <32 x float> %373)
  %414 = add nuw nsw i64 %379, 5
  %415 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %414
  %416 = load float, float* %415, align 4, !tbaa !360
  %417 = insertelement <32 x float> undef, float %416, i32 0
  %418 = shufflevector <32 x float> %417, <32 x float> undef, <32 x i32> zeroinitializer
  %419 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %418, <32 x float> %388, <32 x float> %372)
  %420 = add nuw nsw i64 %379, 6
  %421 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %420
  %422 = load float, float* %421, align 4, !tbaa !360
  %423 = insertelement <32 x float> undef, float %422, i32 0
  %424 = shufflevector <32 x float> %423, <32 x float> undef, <32 x i32> zeroinitializer
  %425 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %424, <32 x float> %388, <32 x float> %371)
  %426 = add nuw nsw i64 %385, 16384
  %427 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %426
  %428 = bitcast float* %427 to <32 x float>*
  %429 = load <32 x float>, <32 x float>* %428, align 16, !tbaa !357
  %430 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %394, <32 x float> %429, <32 x float> %389)
  %431 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %400, <32 x float> %429, <32 x float> %395)
  %432 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %429, <32 x float> %401)
  %433 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %429, <32 x float> %407)
  %434 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %418, <32 x float> %429, <32 x float> %413)
  %435 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %424, <32 x float> %429, <32 x float> %419)
  %436 = add nuw nsw i64 %379, 7
  %437 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %436
  %438 = load float, float* %437, align 4, !tbaa !360
  %439 = insertelement <32 x float> undef, float %438, i32 0
  %440 = shufflevector <32 x float> %439, <32 x float> undef, <32 x i32> zeroinitializer
  %441 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %440, <32 x float> %429, <32 x float> %425)
  %442 = add nuw nsw i64 %385, 32768
  %443 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %442
  %444 = bitcast float* %443 to <32 x float>*
  %445 = load <32 x float>, <32 x float>* %444, align 16, !tbaa !357
  %446 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %400, <32 x float> %445, <32 x float> %430)
  %447 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %445, <32 x float> %431)
  %448 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %445, <32 x float> %432)
  %449 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %418, <32 x float> %445, <32 x float> %433)
  %450 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %424, <32 x float> %445, <32 x float> %434)
  %451 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %440, <32 x float> %445, <32 x float> %435)
  %452 = add nuw nsw i64 %379, 8
  %453 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %452
  %454 = load float, float* %453, align 4, !tbaa !360
  %455 = insertelement <32 x float> undef, float %454, i32 0
  %456 = shufflevector <32 x float> %455, <32 x float> undef, <32 x i32> zeroinitializer
  %457 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %456, <32 x float> %445, <32 x float> %441)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end24.1, label %for_body23.1, !prof !5

for_end24.1:                                      ; preds = %for_body23.1
  %458 = mul nuw nsw i32 %173, 4608
  %459 = add nuw nsw i32 %458, 9216
  %460 = add nuw nsw i64 %176, 98304
  %461 = zext i32 %459 to i64
  br label %for_body23.2

for_body23.2:                                     ; preds = %for_body23.2, %for_end24.1
  %indvars.iv.2 = phi i64 [ 0, %for_end24.1 ], [ %indvars.iv.next.2, %for_body23.2 ]
  %462 = phi <32 x float> [ %457, %for_end24.1 ], [ %548, %for_body23.2 ]
  %463 = phi <32 x float> [ %451, %for_end24.1 ], [ %542, %for_body23.2 ]
  %464 = phi <32 x float> [ %450, %for_end24.1 ], [ %541, %for_body23.2 ]
  %465 = phi <32 x float> [ %449, %for_end24.1 ], [ %540, %for_body23.2 ]
  %466 = phi <32 x float> [ %448, %for_end24.1 ], [ %539, %for_body23.2 ]
  %467 = phi <32 x float> [ %447, %for_end24.1 ], [ %538, %for_body23.2 ]
  %468 = phi <32 x float> [ %446, %for_end24.1 ], [ %537, %for_body23.2 ]
  %469 = mul nuw nsw i64 %indvars.iv.2, 9
  %470 = add nuw nsw i64 %469, %461
  %471 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %470
  %472 = load float, float* %471, align 4, !tbaa !360
  %473 = insertelement <32 x float> undef, float %472, i32 0
  %474 = shufflevector <32 x float> %473, <32 x float> undef, <32 x i32> zeroinitializer
  %475 = shl nsw i64 %indvars.iv.2, 5
  %476 = add nuw nsw i64 %460, %475
  %477 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %476
  %478 = bitcast float* %477 to <32 x float>*
  %479 = load <32 x float>, <32 x float>* %478, align 16, !tbaa !357
  %480 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %474, <32 x float> %479, <32 x float> %468)
  %481 = add nuw nsw i64 %470, 1
  %482 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %481
  %483 = load float, float* %482, align 4, !tbaa !360
  %484 = insertelement <32 x float> undef, float %483, i32 0
  %485 = shufflevector <32 x float> %484, <32 x float> undef, <32 x i32> zeroinitializer
  %486 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %485, <32 x float> %479, <32 x float> %467)
  %487 = add nuw nsw i64 %470, 2
  %488 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %487
  %489 = load float, float* %488, align 4, !tbaa !360
  %490 = insertelement <32 x float> undef, float %489, i32 0
  %491 = shufflevector <32 x float> %490, <32 x float> undef, <32 x i32> zeroinitializer
  %492 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %491, <32 x float> %479, <32 x float> %466)
  %493 = add nuw nsw i64 %470, 3
  %494 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %493
  %495 = load float, float* %494, align 4, !tbaa !360
  %496 = insertelement <32 x float> undef, float %495, i32 0
  %497 = shufflevector <32 x float> %496, <32 x float> undef, <32 x i32> zeroinitializer
  %498 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %497, <32 x float> %479, <32 x float> %465)
  %499 = add nuw nsw i64 %470, 4
  %500 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %499
  %501 = load float, float* %500, align 4, !tbaa !360
  %502 = insertelement <32 x float> undef, float %501, i32 0
  %503 = shufflevector <32 x float> %502, <32 x float> undef, <32 x i32> zeroinitializer
  %504 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %503, <32 x float> %479, <32 x float> %464)
  %505 = add nuw nsw i64 %470, 5
  %506 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %505
  %507 = load float, float* %506, align 4, !tbaa !360
  %508 = insertelement <32 x float> undef, float %507, i32 0
  %509 = shufflevector <32 x float> %508, <32 x float> undef, <32 x i32> zeroinitializer
  %510 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %509, <32 x float> %479, <32 x float> %463)
  %511 = add nuw nsw i64 %470, 6
  %512 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %511
  %513 = load float, float* %512, align 4, !tbaa !360
  %514 = insertelement <32 x float> undef, float %513, i32 0
  %515 = shufflevector <32 x float> %514, <32 x float> undef, <32 x i32> zeroinitializer
  %516 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %515, <32 x float> %479, <32 x float> %462)
  %517 = add nuw nsw i64 %476, 16384
  %518 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %517
  %519 = bitcast float* %518 to <32 x float>*
  %520 = load <32 x float>, <32 x float>* %519, align 16, !tbaa !357
  %521 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %485, <32 x float> %520, <32 x float> %480)
  %522 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %491, <32 x float> %520, <32 x float> %486)
  %523 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %497, <32 x float> %520, <32 x float> %492)
  %524 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %503, <32 x float> %520, <32 x float> %498)
  %525 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %509, <32 x float> %520, <32 x float> %504)
  %526 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %515, <32 x float> %520, <32 x float> %510)
  %527 = add nuw nsw i64 %470, 7
  %528 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %527
  %529 = load float, float* %528, align 4, !tbaa !360
  %530 = insertelement <32 x float> undef, float %529, i32 0
  %531 = shufflevector <32 x float> %530, <32 x float> undef, <32 x i32> zeroinitializer
  %532 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %531, <32 x float> %520, <32 x float> %516)
  %533 = add nuw nsw i64 %476, 32768
  %534 = getelementptr inbounds [73728 x <32 x float>], [73728 x <32 x float>]* %4, i64 0, i64 0, i64 %533
  %535 = bitcast float* %534 to <32 x float>*
  %536 = load <32 x float>, <32 x float>* %535, align 16, !tbaa !357
  %537 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %491, <32 x float> %536, <32 x float> %521)
  %538 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %497, <32 x float> %536, <32 x float> %522)
  %539 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %503, <32 x float> %536, <32 x float> %523)
  %540 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %509, <32 x float> %536, <32 x float> %524)
  %541 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %515, <32 x float> %536, <32 x float> %525)
  %542 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %531, <32 x float> %536, <32 x float> %526)
  %543 = add nuw nsw i64 %470, 8
  %544 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %543
  %545 = load float, float* %544, align 4, !tbaa !360
  %546 = insertelement <32 x float> undef, float %545, i32 0
  %547 = shufflevector <32 x float> %546, <32 x float> undef, <32 x i32> zeroinitializer
  %548 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %547, <32 x float> %536, <32 x float> %532)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 512
  br i1 %exitcond.2, label %for_end24.2, label %for_body23.2, !prof !5

for_end24.2:                                      ; preds = %for_body23.2
  store <32 x float> %537, <32 x float>* %.sub, align 128, !tbaa !369
  store <32 x float> %538, <32 x float>* %23, align 128, !tbaa !369
  store <32 x float> %539, <32 x float>* %25, align 128, !tbaa !369
  store <32 x float> %540, <32 x float>* %27, align 128, !tbaa !369
  store <32 x float> %541, <32 x float>* %29, align 128, !tbaa !369
  store <32 x float> %542, <32 x float>* %31, align 128, !tbaa !369
  store <32 x float> %548, <32 x float>* %33, align 128, !tbaa !369
  %549 = mul nuw nsw i32 %173, 7
  %550 = mul nsw i32 %174, 1568
  %551 = add nuw nsw i32 %550, %549
  %552 = zext i32 %551 to i64
  br label %for_body26

if_end.us.us.8:                                   ; preds = %for_begin1.preheader, %if_end.us.us.8
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %if_end.us.us.8 ], [ 0, %for_begin1.preheader ]
  %553 = mul nuw nsw i64 %indvars.iv67, 9
  %554 = add nuw nsw i64 %553, %7
  %555 = mul nuw nsw i64 %indvars.iv67, 49
  %556 = add nsw i64 %12, %555
  %557 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %554
  store float 0.000000e+00, float* %557, align 4, !tbaa !360
  %558 = add nuw nsw i64 %554, 1
  %559 = add nsw i64 %556, 1
  %560 = getelementptr inbounds float, float* %6, i64 %559
  %561 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %558
  %562 = bitcast float* %560 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4, !tbaa !376
  %564 = bitcast float* %561 to <4 x i32>*
  store <4 x i32> %563, <4 x i32>* %564, align 4, !tbaa !360
  %565 = add nuw nsw i64 %554, 5
  %566 = add nsw i64 %556, 5
  %567 = getelementptr inbounds float, float* %6, i64 %566
  %568 = bitcast float* %567 to i32*
  %569 = load i32, i32* %568, align 4, !tbaa !376
  %570 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %565
  %571 = bitcast float* %570 to i32*
  store i32 %569, i32* %571, align 4, !tbaa !360
  %572 = add nuw nsw i64 %554, 6
  %573 = add nsw i64 %556, 6
  %574 = getelementptr inbounds float, float* %6, i64 %573
  %575 = bitcast float* %574 to i32*
  %576 = load i32, i32* %575, align 4, !tbaa !376
  %577 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %572
  %578 = bitcast float* %577 to i32*
  store i32 %576, i32* %578, align 4, !tbaa !360
  %579 = add nuw nsw i64 %554, 7
  %580 = add nsw i64 %556, 7
  %581 = getelementptr inbounds float, float* %6, i64 %580
  %582 = bitcast float* %581 to i32*
  %583 = load i32, i32* %582, align 4, !tbaa !376
  %584 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %579
  %585 = bitcast float* %584 to i32*
  store i32 %583, i32* %585, align 4, !tbaa !360
  %586 = add nuw nsw i64 %554, 8
  %587 = getelementptr inbounds [41472 x float], [41472 x float]* %5, i64 0, i64 %586
  store float 0.000000e+00, float* %587, align 4, !tbaa !360
  %indvars.iv.next68 = add nuw nsw i64 %indvars.iv67, 1
  %exitcond69 = icmp eq i64 %indvars.iv.next68, 512
  br i1 %exitcond69, label %for_end3, label %if_end.us.us.8, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_5_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_5_compute_(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #1 {
entry:
  %3 = alloca [14 x <16 x float>], align 64
  %4 = alloca [36864 x <16 x float>], align 16
  %5 = alloca [65536 x float], align 16
  %6 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %7 = shl i64 %indvar, 11
  %8 = trunc i64 %indvar to i32
  %trunc = trunc i64 %indvar to i4
  switch i4 %trunc, label %for_begin4.preheader.us.preheader [
    i4 -1, label %for_begin1.preheader.split
    i4 0, label %for_begin1.preheader.split
  ]

for_begin4.preheader.us.preheader:                ; preds = %for_begin1.preheader
  %9 = lshr i32 %8, 4
  %10 = mul nsw i32 %9, 25088
  %11 = add nsw i32 %10, -15
  %12 = and i32 %8, 15
  %13 = mul nuw nsw i32 %12, 14
  %14 = add i32 %11, %13
  %15 = sext i32 %14 to i64
  br label %if_end.us.us.15

for_begin1.preheader.split:                       ; preds = %for_begin1.preheader, %for_begin1.preheader
  %scevgep130 = getelementptr [65536 x float], [65536 x float]* %5, i64 0, i64 %7
  %scevgep130131 = bitcast float* %scevgep130 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %scevgep130131, i8 0, i64 8192, i1 false)
  br label %for_end3

for_begin7.preheader:                             ; preds = %for_end3
  %.sub = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0
  %16 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_end3:                                         ; preds = %if_end.us.us.15, %for_begin1.preheader.split
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond138 = icmp eq i64 %indvar.next, 32
  br i1 %exitcond138, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %17 = phi i32 [ 0, %for_begin7.preheader ], [ %59, %for_end12 ]
  %18 = urem i32 %17, 3
  %19 = mul nuw nsw i32 %18, 6144
  %20 = udiv i32 %17, 3
  %21 = mul nsw i32 %20, 36864
  %22 = add nuw i32 %19, %21
  %23 = mul nuw nsw i32 %18, 3
  %24 = or i32 %23, %21
  %25 = zext i32 %24 to i64
  %26 = sext i32 %22 to i64
  br label %for_begin13.preheader

for_begin19.preheader:                            ; preds = %for_end12
  %27 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 16
  %28 = bitcast float* %27 to <16 x float>*
  %29 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 32
  %30 = bitcast float* %29 to <16 x float>*
  %31 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 48
  %32 = bitcast float* %31 to <16 x float>*
  %33 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 64
  %34 = bitcast float* %33 to <16 x float>*
  %35 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 80
  %36 = bitcast float* %35 to <16 x float>*
  %37 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 96
  %38 = bitcast float* %37 to <16 x float>*
  %39 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 112
  %40 = bitcast float* %39 to <16 x float>*
  %41 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 128
  %42 = bitcast float* %41 to <16 x float>*
  %43 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 144
  %44 = bitcast float* %43 to <16 x float>*
  %45 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 160
  %46 = bitcast float* %45 to <16 x float>*
  %47 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 176
  %48 = bitcast float* %47 to <16 x float>*
  %49 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 192
  %50 = bitcast float* %49 to <16 x float>*
  %51 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 208
  %52 = bitcast float* %51 to <16 x float>*
  %53 = bitcast i8* %2 to float*
  %54 = bitcast [14 x <16 x float>]* %3 to i8*
  br label %for_body20

for_begin13.preheader:                            ; preds = %for_end18.2, %for_begin10.preheader
  %indvars.iv119 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next120, %for_end18.2 ]
  %55 = mul nuw nsw i64 %indvars.iv119, 18432
  %56 = add nuw nsw i64 %55, %26
  %57 = mul nuw nsw i64 %indvars.iv119, 1152
  %58 = add nuw nsw i64 %57, %25
  br label %for_body17

for_end12:                                        ; preds = %for_end18.2
  %59 = add nuw nsw i32 %17, 1
  %exitcond122 = icmp eq i32 %59, 48
  br i1 %exitcond122, label %for_begin19.preheader, label %for_begin10.preheader, !prof !5

for_body17:                                       ; preds = %for_body17, %for_begin13.preheader
  %indvars.iv113 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next114, %for_body17 ]
  %60 = shl i64 %indvars.iv113, 4
  %61 = add nuw nsw i64 %56, %60
  %62 = mul nuw nsw i64 %indvars.iv113, 9
  %63 = add nuw nsw i64 %58, %62
  %64 = add nuw nsw i64 %63, 2304
  %65 = add nuw nsw i64 %63, 4608
  %66 = add nuw nsw i64 %63, 6912
  %67 = add nuw nsw i64 %63, 9216
  %68 = add nuw nsw i64 %63, 11520
  %69 = add nuw nsw i64 %63, 13824
  %70 = add nuw nsw i64 %63, 16128
  %71 = add nuw nsw i64 %63, 18432
  %72 = add nuw nsw i64 %63, 20736
  %73 = add nuw nsw i64 %63, 23040
  %74 = add nuw nsw i64 %63, 25344
  %75 = add nuw nsw i64 %63, 27648
  %76 = add nuw nsw i64 %63, 29952
  %77 = add nuw nsw i64 %63, 32256
  %78 = add nuw nsw i64 %63, 34560
  %79 = getelementptr inbounds float, float* %16, i64 %63
  %80 = load float, float* %79, align 4, !tbaa !379
  %81 = insertelement <16 x float> undef, float %80, i32 0
  %82 = getelementptr inbounds float, float* %16, i64 %64
  %83 = load float, float* %82, align 4, !tbaa !379
  %84 = insertelement <16 x float> %81, float %83, i32 1
  %85 = getelementptr inbounds float, float* %16, i64 %65
  %86 = load float, float* %85, align 4, !tbaa !379
  %87 = insertelement <16 x float> %84, float %86, i32 2
  %88 = getelementptr inbounds float, float* %16, i64 %66
  %89 = load float, float* %88, align 4, !tbaa !379
  %90 = insertelement <16 x float> %87, float %89, i32 3
  %91 = getelementptr inbounds float, float* %16, i64 %67
  %92 = load float, float* %91, align 4, !tbaa !379
  %93 = insertelement <16 x float> %90, float %92, i32 4
  %94 = getelementptr inbounds float, float* %16, i64 %68
  %95 = load float, float* %94, align 4, !tbaa !379
  %96 = insertelement <16 x float> %93, float %95, i32 5
  %97 = getelementptr inbounds float, float* %16, i64 %69
  %98 = load float, float* %97, align 4, !tbaa !379
  %99 = insertelement <16 x float> %96, float %98, i32 6
  %100 = getelementptr inbounds float, float* %16, i64 %70
  %101 = load float, float* %100, align 4, !tbaa !379
  %102 = insertelement <16 x float> %99, float %101, i32 7
  %103 = getelementptr inbounds float, float* %16, i64 %71
  %104 = load float, float* %103, align 4, !tbaa !379
  %105 = insertelement <16 x float> %102, float %104, i32 8
  %106 = getelementptr inbounds float, float* %16, i64 %72
  %107 = load float, float* %106, align 4, !tbaa !379
  %108 = insertelement <16 x float> %105, float %107, i32 9
  %109 = getelementptr inbounds float, float* %16, i64 %73
  %110 = load float, float* %109, align 4, !tbaa !379
  %111 = insertelement <16 x float> %108, float %110, i32 10
  %112 = getelementptr inbounds float, float* %16, i64 %74
  %113 = load float, float* %112, align 4, !tbaa !379
  %114 = insertelement <16 x float> %111, float %113, i32 11
  %115 = getelementptr inbounds float, float* %16, i64 %75
  %116 = load float, float* %115, align 4, !tbaa !379
  %117 = insertelement <16 x float> %114, float %116, i32 12
  %118 = getelementptr inbounds float, float* %16, i64 %76
  %119 = load float, float* %118, align 4, !tbaa !379
  %120 = insertelement <16 x float> %117, float %119, i32 13
  %121 = getelementptr inbounds float, float* %16, i64 %77
  %122 = load float, float* %121, align 4, !tbaa !379
  %123 = insertelement <16 x float> %120, float %122, i32 14
  %124 = getelementptr inbounds float, float* %16, i64 %78
  %125 = load float, float* %124, align 4, !tbaa !379
  %126 = insertelement <16 x float> %123, float %125, i32 15
  %127 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %61
  %128 = bitcast float* %127 to <16 x float>*
  store <16 x float> %126, <16 x float>* %128, align 16, !tbaa !382
  %indvars.iv.next114 = add nuw nsw i64 %indvars.iv113, 1
  %exitcond115 = icmp eq i64 %indvars.iv.next114, 128
  br i1 %exitcond115, label %for_end18, label %for_body17, !prof !5

for_end18:                                        ; preds = %for_body17
  %129 = add nuw nsw i64 %56, 2048
  %130 = add nuw nsw i64 %58, 1
  br label %for_body17.1

for_body20:                                       ; preds = %for_end33, %for_begin19.preheader
  %131 = phi i32 [ 0, %for_begin19.preheader ], [ %363, %for_end33 ]
  %132 = urem i32 %131, 14
  %133 = udiv i32 %131, 14
  %134 = mul nsw i32 %133, 36864
  %135 = zext i32 %134 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %54, i8 0, i64 896, i1 false)
  br label %for_begin28.preheader

for_end21:                                        ; preds = %for_end33
  ret void

for_begin28.preheader:                            ; preds = %for_end30, %for_body20
  %indvars.iv101 = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next102, %for_end30 ]
  %.lcssa2754 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %308, %for_end30 ]
  %.lcssa2552 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %301, %for_end30 ]
  %.lcssa2350 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %300, %for_end30 ]
  %.lcssa2148 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %299, %for_end30 ]
  %.lcssa1946 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %298, %for_end30 ]
  %.lcssa1744 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %297, %for_end30 ]
  %.lcssa1542 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %296, %for_end30 ]
  %.lcssa1340 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %295, %for_end30 ]
  %.lcssa1138 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %294, %for_end30 ]
  %.lcssa936 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %293, %for_end30 ]
  %.lcssa734 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %292, %for_end30 ]
  %.lcssa532 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %291, %for_end30 ]
  %.lcssa331 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %290, %for_end30 ]
  %.lcssa29 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %289, %for_end30 ]
  %136 = phi i32 [ 0, %for_body20 ], [ %310, %for_end30 ]
  %reass.add = add nuw nsw i32 %136, %132
  %reass.mul = shl i32 %reass.add, 11
  %137 = mul nuw nsw i64 %indvars.iv101, 6144
  %138 = add nuw nsw i64 %137, %135
  br label %for_body29

for_end27:                                        ; preds = %for_end30
  %139 = add nuw nsw i64 %135, 18432
  br label %for_begin28.preheader.1

for_body29:                                       ; preds = %for_body29, %for_begin28.preheader
  %indvars.iv = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next, %for_body29 ]
  %140 = phi <16 x float> [ %.lcssa2754, %for_begin28.preheader ], [ %308, %for_body29 ]
  %141 = phi <16 x float> [ %.lcssa2552, %for_begin28.preheader ], [ %301, %for_body29 ]
  %142 = phi <16 x float> [ %.lcssa2350, %for_begin28.preheader ], [ %300, %for_body29 ]
  %143 = phi <16 x float> [ %.lcssa2148, %for_begin28.preheader ], [ %299, %for_body29 ]
  %144 = phi <16 x float> [ %.lcssa1946, %for_begin28.preheader ], [ %298, %for_body29 ]
  %145 = phi <16 x float> [ %.lcssa1744, %for_begin28.preheader ], [ %297, %for_body29 ]
  %146 = phi <16 x float> [ %.lcssa1542, %for_begin28.preheader ], [ %296, %for_body29 ]
  %147 = phi <16 x float> [ %.lcssa1340, %for_begin28.preheader ], [ %295, %for_body29 ]
  %148 = phi <16 x float> [ %.lcssa1138, %for_begin28.preheader ], [ %294, %for_body29 ]
  %149 = phi <16 x float> [ %.lcssa936, %for_begin28.preheader ], [ %293, %for_body29 ]
  %150 = phi <16 x float> [ %.lcssa734, %for_begin28.preheader ], [ %292, %for_body29 ]
  %151 = phi <16 x float> [ %.lcssa532, %for_begin28.preheader ], [ %291, %for_body29 ]
  %152 = phi <16 x float> [ %.lcssa331, %for_begin28.preheader ], [ %290, %for_body29 ]
  %153 = phi <16 x float> [ %.lcssa29, %for_begin28.preheader ], [ %289, %for_body29 ]
  %154 = phi i32 [ 0, %for_begin28.preheader ], [ %309, %for_body29 ]
  %155 = shl nsw i64 %indvars.iv, 4
  %156 = shl nsw i32 %154, 4
  %157 = add nsw i32 %reass.mul, %156
  %158 = trunc i64 %155 to i32
  %159 = add i32 %reass.mul, %158
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %160
  %162 = load float, float* %161, align 16, !tbaa !385
  %163 = insertelement <16 x float> undef, float %162, i32 0
  %164 = shufflevector <16 x float> %163, <16 x float> undef, <16 x i32> zeroinitializer
  %165 = add nuw nsw i64 %138, %155
  %166 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %165
  %167 = bitcast float* %166 to <16 x float>*
  %168 = load <16 x float>, <16 x float>* %167, align 16, !tbaa !382
  %169 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %164, <16 x float> %168, <16 x float> %153)
  %170 = or i32 %157, 1
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !385
  %174 = insertelement <16 x float> undef, float %173, i32 0
  %175 = shufflevector <16 x float> %174, <16 x float> undef, <16 x i32> zeroinitializer
  %176 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %175, <16 x float> %168, <16 x float> %152)
  %177 = or i32 %157, 2
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %178
  %180 = load float, float* %179, align 8, !tbaa !385
  %181 = insertelement <16 x float> undef, float %180, i32 0
  %182 = shufflevector <16 x float> %181, <16 x float> undef, <16 x i32> zeroinitializer
  %183 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %182, <16 x float> %168, <16 x float> %151)
  %184 = or i32 %157, 3
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !385
  %188 = insertelement <16 x float> undef, float %187, i32 0
  %189 = shufflevector <16 x float> %188, <16 x float> undef, <16 x i32> zeroinitializer
  %190 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %189, <16 x float> %168, <16 x float> %150)
  %191 = or i32 %157, 4
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %192
  %194 = load float, float* %193, align 16, !tbaa !385
  %195 = insertelement <16 x float> undef, float %194, i32 0
  %196 = shufflevector <16 x float> %195, <16 x float> undef, <16 x i32> zeroinitializer
  %197 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %196, <16 x float> %168, <16 x float> %149)
  %198 = or i32 %157, 5
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !385
  %202 = insertelement <16 x float> undef, float %201, i32 0
  %203 = shufflevector <16 x float> %202, <16 x float> undef, <16 x i32> zeroinitializer
  %204 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %203, <16 x float> %168, <16 x float> %148)
  %205 = or i32 %157, 6
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %206
  %208 = load float, float* %207, align 8, !tbaa !385
  %209 = insertelement <16 x float> undef, float %208, i32 0
  %210 = shufflevector <16 x float> %209, <16 x float> undef, <16 x i32> zeroinitializer
  %211 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %210, <16 x float> %168, <16 x float> %147)
  %212 = or i32 %157, 7
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %213
  %215 = load float, float* %214, align 4, !tbaa !385
  %216 = insertelement <16 x float> undef, float %215, i32 0
  %217 = shufflevector <16 x float> %216, <16 x float> undef, <16 x i32> zeroinitializer
  %218 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %217, <16 x float> %168, <16 x float> %146)
  %219 = or i32 %157, 8
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %220
  %222 = load float, float* %221, align 16, !tbaa !385
  %223 = insertelement <16 x float> undef, float %222, i32 0
  %224 = shufflevector <16 x float> %223, <16 x float> undef, <16 x i32> zeroinitializer
  %225 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %224, <16 x float> %168, <16 x float> %145)
  %226 = or i32 %157, 9
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %227
  %229 = load float, float* %228, align 4, !tbaa !385
  %230 = insertelement <16 x float> undef, float %229, i32 0
  %231 = shufflevector <16 x float> %230, <16 x float> undef, <16 x i32> zeroinitializer
  %232 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %231, <16 x float> %168, <16 x float> %144)
  %233 = or i32 %157, 10
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %234
  %236 = load float, float* %235, align 8, !tbaa !385
  %237 = insertelement <16 x float> undef, float %236, i32 0
  %238 = shufflevector <16 x float> %237, <16 x float> undef, <16 x i32> zeroinitializer
  %239 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %238, <16 x float> %168, <16 x float> %143)
  %240 = or i32 %157, 11
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !385
  %244 = insertelement <16 x float> undef, float %243, i32 0
  %245 = shufflevector <16 x float> %244, <16 x float> undef, <16 x i32> zeroinitializer
  %246 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %245, <16 x float> %168, <16 x float> %142)
  %247 = or i32 %157, 12
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %248
  %250 = load float, float* %249, align 16, !tbaa !385
  %251 = insertelement <16 x float> undef, float %250, i32 0
  %252 = shufflevector <16 x float> %251, <16 x float> undef, <16 x i32> zeroinitializer
  %253 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %252, <16 x float> %168, <16 x float> %141)
  %254 = or i32 %157, 13
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %255
  %257 = load float, float* %256, align 4, !tbaa !385
  %258 = insertelement <16 x float> undef, float %257, i32 0
  %259 = shufflevector <16 x float> %258, <16 x float> undef, <16 x i32> zeroinitializer
  %260 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %259, <16 x float> %168, <16 x float> %140)
  %261 = add nuw nsw i64 %165, 2048
  %262 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %261
  %263 = bitcast float* %262 to <16 x float>*
  %264 = load <16 x float>, <16 x float>* %263, align 16, !tbaa !382
  %265 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %175, <16 x float> %264, <16 x float> %169)
  %266 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %182, <16 x float> %264, <16 x float> %176)
  %267 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %189, <16 x float> %264, <16 x float> %183)
  %268 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %196, <16 x float> %264, <16 x float> %190)
  %269 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %203, <16 x float> %264, <16 x float> %197)
  %270 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %210, <16 x float> %264, <16 x float> %204)
  %271 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %217, <16 x float> %264, <16 x float> %211)
  %272 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %224, <16 x float> %264, <16 x float> %218)
  %273 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %231, <16 x float> %264, <16 x float> %225)
  %274 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %238, <16 x float> %264, <16 x float> %232)
  %275 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %245, <16 x float> %264, <16 x float> %239)
  %276 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %252, <16 x float> %264, <16 x float> %246)
  %277 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %259, <16 x float> %264, <16 x float> %253)
  %278 = or i32 %157, 14
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %279
  %281 = load float, float* %280, align 8, !tbaa !385
  %282 = insertelement <16 x float> undef, float %281, i32 0
  %283 = shufflevector <16 x float> %282, <16 x float> undef, <16 x i32> zeroinitializer
  %284 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %283, <16 x float> %264, <16 x float> %260)
  %285 = add nuw nsw i64 %165, 4096
  %286 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %285
  %287 = bitcast float* %286 to <16 x float>*
  %288 = load <16 x float>, <16 x float>* %287, align 16, !tbaa !382
  %289 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %182, <16 x float> %288, <16 x float> %265)
  %290 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %189, <16 x float> %288, <16 x float> %266)
  %291 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %196, <16 x float> %288, <16 x float> %267)
  %292 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %203, <16 x float> %288, <16 x float> %268)
  %293 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %210, <16 x float> %288, <16 x float> %269)
  %294 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %217, <16 x float> %288, <16 x float> %270)
  %295 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %224, <16 x float> %288, <16 x float> %271)
  %296 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %231, <16 x float> %288, <16 x float> %272)
  %297 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %238, <16 x float> %288, <16 x float> %273)
  %298 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %245, <16 x float> %288, <16 x float> %274)
  %299 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %252, <16 x float> %288, <16 x float> %275)
  %300 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %259, <16 x float> %288, <16 x float> %276)
  %301 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %283, <16 x float> %288, <16 x float> %277)
  %302 = or i32 %157, 15
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %303
  %305 = load float, float* %304, align 4, !tbaa !385
  %306 = insertelement <16 x float> undef, float %305, i32 0
  %307 = shufflevector <16 x float> %306, <16 x float> undef, <16 x i32> zeroinitializer
  %308 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %307, <16 x float> %288, <16 x float> %284)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %309 = add nuw nsw i32 %154, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end30, label %for_body29, !prof !5

for_end30:                                        ; preds = %for_body29
  %indvars.iv.next102 = add nuw nsw i64 %indvars.iv101, 1
  %310 = add nuw nsw i32 %136, 1
  %exitcond105 = icmp eq i64 %indvars.iv.next102, 3
  br i1 %exitcond105, label %for_end27, label %for_begin28.preheader, !prof !5

for_body32:                                       ; preds = %for_body32, %for_end27.1
  %indvars.iv109 = phi i64 [ 0, %for_end27.1 ], [ %indvars.iv.next110, %for_body32 ]
  %311 = add nuw nsw i64 %indvars.iv109, %542
  %312 = add nuw nsw i64 %311, 196
  %313 = add nuw nsw i64 %311, 392
  %314 = add nuw nsw i64 %311, 588
  %315 = add nuw nsw i64 %311, 784
  %316 = add nuw nsw i64 %311, 980
  %317 = add nuw nsw i64 %311, 1176
  %318 = add nuw nsw i64 %311, 1372
  %319 = add nuw nsw i64 %311, 1568
  %320 = add nuw nsw i64 %311, 1764
  %321 = add nuw nsw i64 %311, 1960
  %322 = add nuw nsw i64 %311, 2156
  %323 = add nuw nsw i64 %311, 2352
  %324 = add nuw nsw i64 %311, 2548
  %325 = add nuw nsw i64 %311, 2744
  %326 = add nuw nsw i64 %311, 2940
  %327 = shl nsw i64 %indvars.iv109, 4
  %328 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 %327
  %329 = bitcast float* %328 to <16 x float>*
  %330 = load <16 x float>, <16 x float>* %329, align 64, !tbaa !388
  %331 = getelementptr inbounds float, float* %53, i64 %311
  %332 = extractelement <16 x float> %330, i64 0
  store float %332, float* %331, align 4, !tbaa !391
  %333 = getelementptr inbounds float, float* %53, i64 %312
  %334 = extractelement <16 x float> %330, i64 1
  store float %334, float* %333, align 4, !tbaa !391
  %335 = getelementptr inbounds float, float* %53, i64 %313
  %336 = extractelement <16 x float> %330, i64 2
  store float %336, float* %335, align 4, !tbaa !391
  %337 = getelementptr inbounds float, float* %53, i64 %314
  %338 = extractelement <16 x float> %330, i64 3
  store float %338, float* %337, align 4, !tbaa !391
  %339 = getelementptr inbounds float, float* %53, i64 %315
  %340 = extractelement <16 x float> %330, i64 4
  store float %340, float* %339, align 4, !tbaa !391
  %341 = getelementptr inbounds float, float* %53, i64 %316
  %342 = extractelement <16 x float> %330, i64 5
  store float %342, float* %341, align 4, !tbaa !391
  %343 = getelementptr inbounds float, float* %53, i64 %317
  %344 = extractelement <16 x float> %330, i64 6
  store float %344, float* %343, align 4, !tbaa !391
  %345 = getelementptr inbounds float, float* %53, i64 %318
  %346 = extractelement <16 x float> %330, i64 7
  store float %346, float* %345, align 4, !tbaa !391
  %347 = getelementptr inbounds float, float* %53, i64 %319
  %348 = extractelement <16 x float> %330, i64 8
  store float %348, float* %347, align 4, !tbaa !391
  %349 = getelementptr inbounds float, float* %53, i64 %320
  %350 = extractelement <16 x float> %330, i64 9
  store float %350, float* %349, align 4, !tbaa !391
  %351 = getelementptr inbounds float, float* %53, i64 %321
  %352 = extractelement <16 x float> %330, i64 10
  store float %352, float* %351, align 4, !tbaa !391
  %353 = getelementptr inbounds float, float* %53, i64 %322
  %354 = extractelement <16 x float> %330, i64 11
  store float %354, float* %353, align 4, !tbaa !391
  %355 = getelementptr inbounds float, float* %53, i64 %323
  %356 = extractelement <16 x float> %330, i64 12
  store float %356, float* %355, align 4, !tbaa !391
  %357 = getelementptr inbounds float, float* %53, i64 %324
  %358 = extractelement <16 x float> %330, i64 13
  store float %358, float* %357, align 4, !tbaa !391
  %359 = getelementptr inbounds float, float* %53, i64 %325
  %360 = extractelement <16 x float> %330, i64 14
  store float %360, float* %359, align 4, !tbaa !391
  %361 = getelementptr inbounds float, float* %53, i64 %326
  %362 = extractelement <16 x float> %330, i64 15
  store float %362, float* %361, align 4, !tbaa !391
  %indvars.iv.next110 = add nuw nsw i64 %indvars.iv109, 1
  %exitcond111 = icmp eq i64 %indvars.iv.next110, 14
  br i1 %exitcond111, label %for_end33, label %for_body32, !prof !5

for_end33:                                        ; preds = %for_body32
  %363 = add nuw nsw i32 %131, 1
  %exitcond112 = icmp eq i32 %363, 224
  br i1 %exitcond112, label %for_end21, label %for_body20, !prof !5

for_begin28.preheader.1:                          ; preds = %for_end30.1, %for_end27
  %indvars.iv101.1 = phi i64 [ 0, %for_end27 ], [ %indvars.iv.next102.1, %for_end30.1 ]
  %.lcssa2754.1 = phi <16 x float> [ %308, %for_end27 ], [ %536, %for_end30.1 ]
  %.lcssa2552.1 = phi <16 x float> [ %301, %for_end27 ], [ %529, %for_end30.1 ]
  %.lcssa2350.1 = phi <16 x float> [ %300, %for_end27 ], [ %528, %for_end30.1 ]
  %.lcssa2148.1 = phi <16 x float> [ %299, %for_end27 ], [ %527, %for_end30.1 ]
  %.lcssa1946.1 = phi <16 x float> [ %298, %for_end27 ], [ %526, %for_end30.1 ]
  %.lcssa1744.1 = phi <16 x float> [ %297, %for_end27 ], [ %525, %for_end30.1 ]
  %.lcssa1542.1 = phi <16 x float> [ %296, %for_end27 ], [ %524, %for_end30.1 ]
  %.lcssa1340.1 = phi <16 x float> [ %295, %for_end27 ], [ %523, %for_end30.1 ]
  %.lcssa1138.1 = phi <16 x float> [ %294, %for_end27 ], [ %522, %for_end30.1 ]
  %.lcssa936.1 = phi <16 x float> [ %293, %for_end27 ], [ %521, %for_end30.1 ]
  %.lcssa734.1 = phi <16 x float> [ %292, %for_end27 ], [ %520, %for_end30.1 ]
  %.lcssa532.1 = phi <16 x float> [ %291, %for_end27 ], [ %519, %for_end30.1 ]
  %.lcssa331.1 = phi <16 x float> [ %290, %for_end27 ], [ %518, %for_end30.1 ]
  %.lcssa29.1 = phi <16 x float> [ %289, %for_end27 ], [ %517, %for_end30.1 ]
  %364 = phi i32 [ 0, %for_end27 ], [ %538, %for_end30.1 ]
  %reass.add.1 = add nuw nsw i32 %364, %132
  %reass.mul.1 = shl i32 %reass.add.1, 11
  %365 = add nsw i32 %reass.mul.1, 32768
  %366 = mul nuw nsw i64 %indvars.iv101.1, 6144
  %367 = add nuw nsw i64 %139, %366
  br label %for_body29.1

for_body29.1:                                     ; preds = %for_body29.1, %for_begin28.preheader.1
  %indvars.iv.1 = phi i64 [ 0, %for_begin28.preheader.1 ], [ %indvars.iv.next.1, %for_body29.1 ]
  %368 = phi <16 x float> [ %.lcssa2754.1, %for_begin28.preheader.1 ], [ %536, %for_body29.1 ]
  %369 = phi <16 x float> [ %.lcssa2552.1, %for_begin28.preheader.1 ], [ %529, %for_body29.1 ]
  %370 = phi <16 x float> [ %.lcssa2350.1, %for_begin28.preheader.1 ], [ %528, %for_body29.1 ]
  %371 = phi <16 x float> [ %.lcssa2148.1, %for_begin28.preheader.1 ], [ %527, %for_body29.1 ]
  %372 = phi <16 x float> [ %.lcssa1946.1, %for_begin28.preheader.1 ], [ %526, %for_body29.1 ]
  %373 = phi <16 x float> [ %.lcssa1744.1, %for_begin28.preheader.1 ], [ %525, %for_body29.1 ]
  %374 = phi <16 x float> [ %.lcssa1542.1, %for_begin28.preheader.1 ], [ %524, %for_body29.1 ]
  %375 = phi <16 x float> [ %.lcssa1340.1, %for_begin28.preheader.1 ], [ %523, %for_body29.1 ]
  %376 = phi <16 x float> [ %.lcssa1138.1, %for_begin28.preheader.1 ], [ %522, %for_body29.1 ]
  %377 = phi <16 x float> [ %.lcssa936.1, %for_begin28.preheader.1 ], [ %521, %for_body29.1 ]
  %378 = phi <16 x float> [ %.lcssa734.1, %for_begin28.preheader.1 ], [ %520, %for_body29.1 ]
  %379 = phi <16 x float> [ %.lcssa532.1, %for_begin28.preheader.1 ], [ %519, %for_body29.1 ]
  %380 = phi <16 x float> [ %.lcssa331.1, %for_begin28.preheader.1 ], [ %518, %for_body29.1 ]
  %381 = phi <16 x float> [ %.lcssa29.1, %for_begin28.preheader.1 ], [ %517, %for_body29.1 ]
  %382 = phi i32 [ 0, %for_begin28.preheader.1 ], [ %537, %for_body29.1 ]
  %383 = shl nsw i64 %indvars.iv.1, 4
  %384 = shl nsw i32 %382, 4
  %385 = add nsw i32 %365, %384
  %386 = trunc i64 %383 to i32
  %387 = add i32 %365, %386
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %388
  %390 = load float, float* %389, align 16, !tbaa !385
  %391 = insertelement <16 x float> undef, float %390, i32 0
  %392 = shufflevector <16 x float> %391, <16 x float> undef, <16 x i32> zeroinitializer
  %393 = add nuw nsw i64 %367, %383
  %394 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %393
  %395 = bitcast float* %394 to <16 x float>*
  %396 = load <16 x float>, <16 x float>* %395, align 16, !tbaa !382
  %397 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %392, <16 x float> %396, <16 x float> %381)
  %398 = or i32 %385, 1
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %399
  %401 = load float, float* %400, align 4, !tbaa !385
  %402 = insertelement <16 x float> undef, float %401, i32 0
  %403 = shufflevector <16 x float> %402, <16 x float> undef, <16 x i32> zeroinitializer
  %404 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %403, <16 x float> %396, <16 x float> %380)
  %405 = or i32 %385, 2
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %406
  %408 = load float, float* %407, align 8, !tbaa !385
  %409 = insertelement <16 x float> undef, float %408, i32 0
  %410 = shufflevector <16 x float> %409, <16 x float> undef, <16 x i32> zeroinitializer
  %411 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %410, <16 x float> %396, <16 x float> %379)
  %412 = or i32 %385, 3
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %413
  %415 = load float, float* %414, align 4, !tbaa !385
  %416 = insertelement <16 x float> undef, float %415, i32 0
  %417 = shufflevector <16 x float> %416, <16 x float> undef, <16 x i32> zeroinitializer
  %418 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %417, <16 x float> %396, <16 x float> %378)
  %419 = or i32 %385, 4
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %420
  %422 = load float, float* %421, align 16, !tbaa !385
  %423 = insertelement <16 x float> undef, float %422, i32 0
  %424 = shufflevector <16 x float> %423, <16 x float> undef, <16 x i32> zeroinitializer
  %425 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %424, <16 x float> %396, <16 x float> %377)
  %426 = or i32 %385, 5
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %427
  %429 = load float, float* %428, align 4, !tbaa !385
  %430 = insertelement <16 x float> undef, float %429, i32 0
  %431 = shufflevector <16 x float> %430, <16 x float> undef, <16 x i32> zeroinitializer
  %432 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %431, <16 x float> %396, <16 x float> %376)
  %433 = or i32 %385, 6
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %434
  %436 = load float, float* %435, align 8, !tbaa !385
  %437 = insertelement <16 x float> undef, float %436, i32 0
  %438 = shufflevector <16 x float> %437, <16 x float> undef, <16 x i32> zeroinitializer
  %439 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %438, <16 x float> %396, <16 x float> %375)
  %440 = or i32 %385, 7
  %441 = zext i32 %440 to i64
  %442 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %441
  %443 = load float, float* %442, align 4, !tbaa !385
  %444 = insertelement <16 x float> undef, float %443, i32 0
  %445 = shufflevector <16 x float> %444, <16 x float> undef, <16 x i32> zeroinitializer
  %446 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %445, <16 x float> %396, <16 x float> %374)
  %447 = or i32 %385, 8
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %448
  %450 = load float, float* %449, align 16, !tbaa !385
  %451 = insertelement <16 x float> undef, float %450, i32 0
  %452 = shufflevector <16 x float> %451, <16 x float> undef, <16 x i32> zeroinitializer
  %453 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %452, <16 x float> %396, <16 x float> %373)
  %454 = or i32 %385, 9
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %455
  %457 = load float, float* %456, align 4, !tbaa !385
  %458 = insertelement <16 x float> undef, float %457, i32 0
  %459 = shufflevector <16 x float> %458, <16 x float> undef, <16 x i32> zeroinitializer
  %460 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %459, <16 x float> %396, <16 x float> %372)
  %461 = or i32 %385, 10
  %462 = zext i32 %461 to i64
  %463 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %462
  %464 = load float, float* %463, align 8, !tbaa !385
  %465 = insertelement <16 x float> undef, float %464, i32 0
  %466 = shufflevector <16 x float> %465, <16 x float> undef, <16 x i32> zeroinitializer
  %467 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %466, <16 x float> %396, <16 x float> %371)
  %468 = or i32 %385, 11
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %469
  %471 = load float, float* %470, align 4, !tbaa !385
  %472 = insertelement <16 x float> undef, float %471, i32 0
  %473 = shufflevector <16 x float> %472, <16 x float> undef, <16 x i32> zeroinitializer
  %474 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %473, <16 x float> %396, <16 x float> %370)
  %475 = or i32 %385, 12
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %476
  %478 = load float, float* %477, align 16, !tbaa !385
  %479 = insertelement <16 x float> undef, float %478, i32 0
  %480 = shufflevector <16 x float> %479, <16 x float> undef, <16 x i32> zeroinitializer
  %481 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %480, <16 x float> %396, <16 x float> %369)
  %482 = or i32 %385, 13
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %483
  %485 = load float, float* %484, align 4, !tbaa !385
  %486 = insertelement <16 x float> undef, float %485, i32 0
  %487 = shufflevector <16 x float> %486, <16 x float> undef, <16 x i32> zeroinitializer
  %488 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %487, <16 x float> %396, <16 x float> %368)
  %489 = add nuw nsw i64 %393, 2048
  %490 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %489
  %491 = bitcast float* %490 to <16 x float>*
  %492 = load <16 x float>, <16 x float>* %491, align 16, !tbaa !382
  %493 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %403, <16 x float> %492, <16 x float> %397)
  %494 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %410, <16 x float> %492, <16 x float> %404)
  %495 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %417, <16 x float> %492, <16 x float> %411)
  %496 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %424, <16 x float> %492, <16 x float> %418)
  %497 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %431, <16 x float> %492, <16 x float> %425)
  %498 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %438, <16 x float> %492, <16 x float> %432)
  %499 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %445, <16 x float> %492, <16 x float> %439)
  %500 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %452, <16 x float> %492, <16 x float> %446)
  %501 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %459, <16 x float> %492, <16 x float> %453)
  %502 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %466, <16 x float> %492, <16 x float> %460)
  %503 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %473, <16 x float> %492, <16 x float> %467)
  %504 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %480, <16 x float> %492, <16 x float> %474)
  %505 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %487, <16 x float> %492, <16 x float> %481)
  %506 = or i32 %385, 14
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %507
  %509 = load float, float* %508, align 8, !tbaa !385
  %510 = insertelement <16 x float> undef, float %509, i32 0
  %511 = shufflevector <16 x float> %510, <16 x float> undef, <16 x i32> zeroinitializer
  %512 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %511, <16 x float> %492, <16 x float> %488)
  %513 = add nuw nsw i64 %393, 4096
  %514 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %513
  %515 = bitcast float* %514 to <16 x float>*
  %516 = load <16 x float>, <16 x float>* %515, align 16, !tbaa !382
  %517 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %410, <16 x float> %516, <16 x float> %493)
  %518 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %417, <16 x float> %516, <16 x float> %494)
  %519 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %424, <16 x float> %516, <16 x float> %495)
  %520 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %431, <16 x float> %516, <16 x float> %496)
  %521 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %438, <16 x float> %516, <16 x float> %497)
  %522 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %445, <16 x float> %516, <16 x float> %498)
  %523 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %452, <16 x float> %516, <16 x float> %499)
  %524 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %459, <16 x float> %516, <16 x float> %500)
  %525 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %466, <16 x float> %516, <16 x float> %501)
  %526 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %473, <16 x float> %516, <16 x float> %502)
  %527 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %480, <16 x float> %516, <16 x float> %503)
  %528 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %487, <16 x float> %516, <16 x float> %504)
  %529 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %511, <16 x float> %516, <16 x float> %505)
  %530 = or i32 %385, 15
  %531 = zext i32 %530 to i64
  %532 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %531
  %533 = load float, float* %532, align 4, !tbaa !385
  %534 = insertelement <16 x float> undef, float %533, i32 0
  %535 = shufflevector <16 x float> %534, <16 x float> undef, <16 x i32> zeroinitializer
  %536 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %535, <16 x float> %516, <16 x float> %512)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %537 = add nuw nsw i32 %382, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 128
  br i1 %exitcond.1, label %for_end30.1, label %for_body29.1, !prof !5

for_end30.1:                                      ; preds = %for_body29.1
  %indvars.iv.next102.1 = add nuw nsw i64 %indvars.iv101.1, 1
  %538 = add nuw nsw i32 %364, 1
  %exitcond105.1 = icmp eq i64 %indvars.iv.next102.1, 3
  br i1 %exitcond105.1, label %for_end27.1, label %for_begin28.preheader.1, !prof !5

for_end27.1:                                      ; preds = %for_end30.1
  store <16 x float> %517, <16 x float>* %.sub, align 64, !tbaa !394
  store <16 x float> %518, <16 x float>* %28, align 64, !tbaa !394
  store <16 x float> %519, <16 x float>* %30, align 64, !tbaa !394
  store <16 x float> %520, <16 x float>* %32, align 64, !tbaa !394
  store <16 x float> %521, <16 x float>* %34, align 64, !tbaa !394
  store <16 x float> %522, <16 x float>* %36, align 64, !tbaa !394
  store <16 x float> %523, <16 x float>* %38, align 64, !tbaa !394
  store <16 x float> %524, <16 x float>* %40, align 64, !tbaa !394
  store <16 x float> %525, <16 x float>* %42, align 64, !tbaa !394
  store <16 x float> %526, <16 x float>* %44, align 64, !tbaa !394
  store <16 x float> %527, <16 x float>* %46, align 64, !tbaa !394
  store <16 x float> %528, <16 x float>* %48, align 64, !tbaa !394
  store <16 x float> %529, <16 x float>* %50, align 64, !tbaa !394
  store <16 x float> %536, <16 x float>* %52, align 64, !tbaa !394
  %539 = mul nuw nsw i32 %132, 14
  %540 = mul nsw i32 %133, 3136
  %541 = add nuw nsw i32 %540, %539
  %542 = zext i32 %541 to i64
  br label %for_body32

for_body17.1:                                     ; preds = %for_body17.1, %for_end18
  %indvars.iv113.1 = phi i64 [ 0, %for_end18 ], [ %indvars.iv.next114.1, %for_body17.1 ]
  %543 = shl i64 %indvars.iv113.1, 4
  %544 = add nuw nsw i64 %129, %543
  %545 = mul nuw nsw i64 %indvars.iv113.1, 9
  %546 = add nuw nsw i64 %130, %545
  %547 = add nuw nsw i64 %546, 2304
  %548 = add nuw nsw i64 %546, 4608
  %549 = add nuw nsw i64 %546, 6912
  %550 = add nuw nsw i64 %546, 9216
  %551 = add nuw nsw i64 %546, 11520
  %552 = add nuw nsw i64 %546, 13824
  %553 = add nuw nsw i64 %546, 16128
  %554 = add nuw nsw i64 %546, 18432
  %555 = add nuw nsw i64 %546, 20736
  %556 = add nuw nsw i64 %546, 23040
  %557 = add nuw nsw i64 %546, 25344
  %558 = add nuw nsw i64 %546, 27648
  %559 = add nuw nsw i64 %546, 29952
  %560 = add nuw nsw i64 %546, 32256
  %561 = add nuw nsw i64 %546, 34560
  %562 = getelementptr inbounds float, float* %16, i64 %546
  %563 = load float, float* %562, align 4, !tbaa !379
  %564 = insertelement <16 x float> undef, float %563, i32 0
  %565 = getelementptr inbounds float, float* %16, i64 %547
  %566 = load float, float* %565, align 4, !tbaa !379
  %567 = insertelement <16 x float> %564, float %566, i32 1
  %568 = getelementptr inbounds float, float* %16, i64 %548
  %569 = load float, float* %568, align 4, !tbaa !379
  %570 = insertelement <16 x float> %567, float %569, i32 2
  %571 = getelementptr inbounds float, float* %16, i64 %549
  %572 = load float, float* %571, align 4, !tbaa !379
  %573 = insertelement <16 x float> %570, float %572, i32 3
  %574 = getelementptr inbounds float, float* %16, i64 %550
  %575 = load float, float* %574, align 4, !tbaa !379
  %576 = insertelement <16 x float> %573, float %575, i32 4
  %577 = getelementptr inbounds float, float* %16, i64 %551
  %578 = load float, float* %577, align 4, !tbaa !379
  %579 = insertelement <16 x float> %576, float %578, i32 5
  %580 = getelementptr inbounds float, float* %16, i64 %552
  %581 = load float, float* %580, align 4, !tbaa !379
  %582 = insertelement <16 x float> %579, float %581, i32 6
  %583 = getelementptr inbounds float, float* %16, i64 %553
  %584 = load float, float* %583, align 4, !tbaa !379
  %585 = insertelement <16 x float> %582, float %584, i32 7
  %586 = getelementptr inbounds float, float* %16, i64 %554
  %587 = load float, float* %586, align 4, !tbaa !379
  %588 = insertelement <16 x float> %585, float %587, i32 8
  %589 = getelementptr inbounds float, float* %16, i64 %555
  %590 = load float, float* %589, align 4, !tbaa !379
  %591 = insertelement <16 x float> %588, float %590, i32 9
  %592 = getelementptr inbounds float, float* %16, i64 %556
  %593 = load float, float* %592, align 4, !tbaa !379
  %594 = insertelement <16 x float> %591, float %593, i32 10
  %595 = getelementptr inbounds float, float* %16, i64 %557
  %596 = load float, float* %595, align 4, !tbaa !379
  %597 = insertelement <16 x float> %594, float %596, i32 11
  %598 = getelementptr inbounds float, float* %16, i64 %558
  %599 = load float, float* %598, align 4, !tbaa !379
  %600 = insertelement <16 x float> %597, float %599, i32 12
  %601 = getelementptr inbounds float, float* %16, i64 %559
  %602 = load float, float* %601, align 4, !tbaa !379
  %603 = insertelement <16 x float> %600, float %602, i32 13
  %604 = getelementptr inbounds float, float* %16, i64 %560
  %605 = load float, float* %604, align 4, !tbaa !379
  %606 = insertelement <16 x float> %603, float %605, i32 14
  %607 = getelementptr inbounds float, float* %16, i64 %561
  %608 = load float, float* %607, align 4, !tbaa !379
  %609 = insertelement <16 x float> %606, float %608, i32 15
  %610 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %544
  %611 = bitcast float* %610 to <16 x float>*
  store <16 x float> %609, <16 x float>* %611, align 16, !tbaa !382
  %indvars.iv.next114.1 = add nuw nsw i64 %indvars.iv113.1, 1
  %exitcond115.1 = icmp eq i64 %indvars.iv.next114.1, 128
  br i1 %exitcond115.1, label %for_end18.1, label %for_body17.1, !prof !5

for_end18.1:                                      ; preds = %for_body17.1
  %612 = add nuw nsw i64 %56, 4096
  %613 = add nuw nsw i64 %58, 2
  br label %for_body17.2

for_body17.2:                                     ; preds = %for_body17.2, %for_end18.1
  %indvars.iv113.2 = phi i64 [ 0, %for_end18.1 ], [ %indvars.iv.next114.2, %for_body17.2 ]
  %614 = shl i64 %indvars.iv113.2, 4
  %615 = add nuw nsw i64 %612, %614
  %616 = mul nuw nsw i64 %indvars.iv113.2, 9
  %617 = add nuw nsw i64 %613, %616
  %618 = add nuw nsw i64 %617, 2304
  %619 = add nuw nsw i64 %617, 4608
  %620 = add nuw nsw i64 %617, 6912
  %621 = add nuw nsw i64 %617, 9216
  %622 = add nuw nsw i64 %617, 11520
  %623 = add nuw nsw i64 %617, 13824
  %624 = add nuw nsw i64 %617, 16128
  %625 = add nuw nsw i64 %617, 18432
  %626 = add nuw nsw i64 %617, 20736
  %627 = add nuw nsw i64 %617, 23040
  %628 = add nuw nsw i64 %617, 25344
  %629 = add nuw nsw i64 %617, 27648
  %630 = add nuw nsw i64 %617, 29952
  %631 = add nuw nsw i64 %617, 32256
  %632 = add nuw nsw i64 %617, 34560
  %633 = getelementptr inbounds float, float* %16, i64 %617
  %634 = load float, float* %633, align 4, !tbaa !379
  %635 = insertelement <16 x float> undef, float %634, i32 0
  %636 = getelementptr inbounds float, float* %16, i64 %618
  %637 = load float, float* %636, align 4, !tbaa !379
  %638 = insertelement <16 x float> %635, float %637, i32 1
  %639 = getelementptr inbounds float, float* %16, i64 %619
  %640 = load float, float* %639, align 4, !tbaa !379
  %641 = insertelement <16 x float> %638, float %640, i32 2
  %642 = getelementptr inbounds float, float* %16, i64 %620
  %643 = load float, float* %642, align 4, !tbaa !379
  %644 = insertelement <16 x float> %641, float %643, i32 3
  %645 = getelementptr inbounds float, float* %16, i64 %621
  %646 = load float, float* %645, align 4, !tbaa !379
  %647 = insertelement <16 x float> %644, float %646, i32 4
  %648 = getelementptr inbounds float, float* %16, i64 %622
  %649 = load float, float* %648, align 4, !tbaa !379
  %650 = insertelement <16 x float> %647, float %649, i32 5
  %651 = getelementptr inbounds float, float* %16, i64 %623
  %652 = load float, float* %651, align 4, !tbaa !379
  %653 = insertelement <16 x float> %650, float %652, i32 6
  %654 = getelementptr inbounds float, float* %16, i64 %624
  %655 = load float, float* %654, align 4, !tbaa !379
  %656 = insertelement <16 x float> %653, float %655, i32 7
  %657 = getelementptr inbounds float, float* %16, i64 %625
  %658 = load float, float* %657, align 4, !tbaa !379
  %659 = insertelement <16 x float> %656, float %658, i32 8
  %660 = getelementptr inbounds float, float* %16, i64 %626
  %661 = load float, float* %660, align 4, !tbaa !379
  %662 = insertelement <16 x float> %659, float %661, i32 9
  %663 = getelementptr inbounds float, float* %16, i64 %627
  %664 = load float, float* %663, align 4, !tbaa !379
  %665 = insertelement <16 x float> %662, float %664, i32 10
  %666 = getelementptr inbounds float, float* %16, i64 %628
  %667 = load float, float* %666, align 4, !tbaa !379
  %668 = insertelement <16 x float> %665, float %667, i32 11
  %669 = getelementptr inbounds float, float* %16, i64 %629
  %670 = load float, float* %669, align 4, !tbaa !379
  %671 = insertelement <16 x float> %668, float %670, i32 12
  %672 = getelementptr inbounds float, float* %16, i64 %630
  %673 = load float, float* %672, align 4, !tbaa !379
  %674 = insertelement <16 x float> %671, float %673, i32 13
  %675 = getelementptr inbounds float, float* %16, i64 %631
  %676 = load float, float* %675, align 4, !tbaa !379
  %677 = insertelement <16 x float> %674, float %676, i32 14
  %678 = getelementptr inbounds float, float* %16, i64 %632
  %679 = load float, float* %678, align 4, !tbaa !379
  %680 = insertelement <16 x float> %677, float %679, i32 15
  %681 = getelementptr inbounds [36864 x <16 x float>], [36864 x <16 x float>]* %4, i64 0, i64 0, i64 %615
  %682 = bitcast float* %681 to <16 x float>*
  store <16 x float> %680, <16 x float>* %682, align 16, !tbaa !382
  %indvars.iv.next114.2 = add nuw nsw i64 %indvars.iv113.2, 1
  %exitcond115.2 = icmp eq i64 %indvars.iv.next114.2, 128
  br i1 %exitcond115.2, label %for_end18.2, label %for_body17.2, !prof !5

for_end18.2:                                      ; preds = %for_body17.2
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %exitcond121 = icmp eq i64 %indvars.iv.next120, 2
  br i1 %exitcond121, label %for_end12, label %for_begin13.preheader, !prof !5

if_end.us.us.15:                                  ; preds = %if_end.us.us.15, %for_begin4.preheader.us.preheader
  %indvars.iv135 = phi i64 [ 0, %for_begin4.preheader.us.preheader ], [ %indvars.iv.next136, %if_end.us.us.15 ]
  %683 = shl i64 %indvars.iv135, 4
  %684 = add nuw nsw i64 %683, %7
  %685 = mul nuw nsw i64 %indvars.iv135, 196
  %686 = add nsw i64 %685, %15
  %687 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %684
  store float 0.000000e+00, float* %687, align 16, !tbaa !385
  %688 = or i64 %684, 1
  %689 = add nsw i64 %686, 1
  %690 = getelementptr inbounds float, float* %6, i64 %689
  %691 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %688
  %692 = bitcast float* %690 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4, !tbaa !402
  %694 = bitcast float* %691 to <4 x i32>*
  store <4 x i32> %693, <4 x i32>* %694, align 4, !tbaa !385
  %695 = or i64 %684, 5
  %696 = add nsw i64 %686, 5
  %697 = getelementptr inbounds float, float* %6, i64 %696
  %698 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %695
  %699 = bitcast float* %697 to <4 x i32>*
  %700 = load <4 x i32>, <4 x i32>* %699, align 4, !tbaa !402
  %701 = bitcast float* %698 to <4 x i32>*
  store <4 x i32> %700, <4 x i32>* %701, align 4, !tbaa !385
  %702 = or i64 %684, 9
  %703 = add nsw i64 %686, 9
  %704 = getelementptr inbounds float, float* %6, i64 %703
  %705 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %702
  %706 = bitcast float* %704 to <4 x i32>*
  %707 = load <4 x i32>, <4 x i32>* %706, align 4, !tbaa !402
  %708 = bitcast float* %705 to <4 x i32>*
  store <4 x i32> %707, <4 x i32>* %708, align 4, !tbaa !385
  %709 = or i64 %684, 13
  %710 = add nsw i64 %686, 13
  %711 = getelementptr inbounds float, float* %6, i64 %710
  %712 = bitcast float* %711 to i32*
  %713 = load i32, i32* %712, align 4, !tbaa !402
  %714 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %709
  %715 = bitcast float* %714 to i32*
  store i32 %713, i32* %715, align 4, !tbaa !385
  %716 = or i64 %684, 14
  %717 = add nsw i64 %686, 14
  %718 = getelementptr inbounds float, float* %6, i64 %717
  %719 = bitcast float* %718 to i32*
  %720 = load i32, i32* %719, align 4, !tbaa !402
  %721 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %716
  %722 = bitcast float* %721 to i32*
  store i32 %720, i32* %722, align 8, !tbaa !385
  %723 = or i64 %684, 15
  %724 = getelementptr inbounds [65536 x float], [65536 x float]* %5, i64 0, i64 %723
  store float 0.000000e+00, float* %724, align 4, !tbaa !385
  %indvars.iv.next136 = add nuw nsw i64 %indvars.iv135, 1
  %exitcond137 = icmp eq i64 %indvars.iv.next136, 128
  br i1 %exitcond137, label %for_end3, label %if_end.us.us.15, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>) #2

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_3_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 2048, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_5_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !405
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !408
  %21 = fadd <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !411
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !408
  %28 = fadd <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !411
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !408
  %35 = fadd <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !411
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !408
  %40 = fadd float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !411
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !408
  %45 = fadd float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !411
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 256
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_6(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_6_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_6_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !414
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !417
  %29 = fadd <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !420
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !417
  %36 = fadd <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !420
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !417
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !420
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !417
  %50 = fadd <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !420
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !417
  %57 = fadd <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !420
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !417
  %64 = fadd <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !420
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !417
  %71 = fadd <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !420
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 128
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_5_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !423
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !426
  %29 = fmul <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !429
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !426
  %36 = fmul <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !429
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !426
  %43 = fmul <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !429
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !426
  %50 = fmul <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !429
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !426
  %57 = fmul <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !429
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !426
  %64 = fmul <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !429
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !426
  %71 = fmul <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !429
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 512
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_12(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_12_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_12_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 12544
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !432
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 112
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !435
  %13 = fadd <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !438
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !435
  %19 = fadd <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !438
  %22 = or i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !435
  %25 = fadd <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !438
  %28 = or i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !435
  %31 = fadd <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !438
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !435
  %37 = fadd <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !438
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !435
  %43 = fadd <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !438
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !435
  %49 = fadd <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !438
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !435
  %55 = fadd <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !438
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !435
  %61 = fadd <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !438
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !435
  %67 = fadd <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !438
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !435
  %73 = fadd <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !438
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !435
  %79 = fadd <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !438
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !435
  %85 = fadd <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !438
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !435
  %91 = fadd <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !438
  %94 = add nuw nsw i64 %10, 56
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = bitcast float* %95 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !435
  %97 = fadd <4 x float> %broadcast.splat8, %wide.load.14
  %98 = getelementptr inbounds float, float* %5, i64 %94
  %99 = bitcast float* %98 to <4 x float>*
  store <4 x float> %97, <4 x float>* %99, align 4, !tbaa !438
  %100 = add nuw nsw i64 %10, 60
  %101 = getelementptr inbounds float, float* %4, i64 %100
  %102 = bitcast float* %101 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %102, align 4, !tbaa !435
  %103 = fadd <4 x float> %broadcast.splat8, %wide.load.15
  %104 = getelementptr inbounds float, float* %5, i64 %100
  %105 = bitcast float* %104 to <4 x float>*
  store <4 x float> %103, <4 x float>* %105, align 4, !tbaa !438
  %106 = add nuw nsw i64 %10, 64
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = bitcast float* %107 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %108, align 4, !tbaa !435
  %109 = fadd <4 x float> %broadcast.splat8, %wide.load.16
  %110 = getelementptr inbounds float, float* %5, i64 %106
  %111 = bitcast float* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 4, !tbaa !438
  %112 = add nuw nsw i64 %10, 68
  %113 = getelementptr inbounds float, float* %4, i64 %112
  %114 = bitcast float* %113 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !435
  %115 = fadd <4 x float> %broadcast.splat8, %wide.load.17
  %116 = getelementptr inbounds float, float* %5, i64 %112
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %115, <4 x float>* %117, align 4, !tbaa !438
  %118 = add nuw nsw i64 %10, 72
  %119 = getelementptr inbounds float, float* %4, i64 %118
  %120 = bitcast float* %119 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %120, align 4, !tbaa !435
  %121 = fadd <4 x float> %broadcast.splat8, %wide.load.18
  %122 = getelementptr inbounds float, float* %5, i64 %118
  %123 = bitcast float* %122 to <4 x float>*
  store <4 x float> %121, <4 x float>* %123, align 4, !tbaa !438
  %124 = add nuw nsw i64 %10, 76
  %125 = getelementptr inbounds float, float* %4, i64 %124
  %126 = bitcast float* %125 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !435
  %127 = fadd <4 x float> %broadcast.splat8, %wide.load.19
  %128 = getelementptr inbounds float, float* %5, i64 %124
  %129 = bitcast float* %128 to <4 x float>*
  store <4 x float> %127, <4 x float>* %129, align 4, !tbaa !438
  %130 = add nuw nsw i64 %10, 80
  %131 = getelementptr inbounds float, float* %4, i64 %130
  %132 = bitcast float* %131 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %132, align 4, !tbaa !435
  %133 = fadd <4 x float> %broadcast.splat8, %wide.load.20
  %134 = getelementptr inbounds float, float* %5, i64 %130
  %135 = bitcast float* %134 to <4 x float>*
  store <4 x float> %133, <4 x float>* %135, align 4, !tbaa !438
  %136 = add nuw nsw i64 %10, 84
  %137 = getelementptr inbounds float, float* %4, i64 %136
  %138 = bitcast float* %137 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %138, align 4, !tbaa !435
  %139 = fadd <4 x float> %broadcast.splat8, %wide.load.21
  %140 = getelementptr inbounds float, float* %5, i64 %136
  %141 = bitcast float* %140 to <4 x float>*
  store <4 x float> %139, <4 x float>* %141, align 4, !tbaa !438
  %142 = add nuw nsw i64 %10, 88
  %143 = getelementptr inbounds float, float* %4, i64 %142
  %144 = bitcast float* %143 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %144, align 4, !tbaa !435
  %145 = fadd <4 x float> %broadcast.splat8, %wide.load.22
  %146 = getelementptr inbounds float, float* %5, i64 %142
  %147 = bitcast float* %146 to <4 x float>*
  store <4 x float> %145, <4 x float>* %147, align 4, !tbaa !438
  %148 = add nuw nsw i64 %10, 92
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = bitcast float* %149 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %150, align 4, !tbaa !435
  %151 = fadd <4 x float> %broadcast.splat8, %wide.load.23
  %152 = getelementptr inbounds float, float* %5, i64 %148
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %151, <4 x float>* %153, align 4, !tbaa !438
  %154 = add nuw nsw i64 %10, 96
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = bitcast float* %155 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !435
  %157 = fadd <4 x float> %broadcast.splat8, %wide.load.24
  %158 = getelementptr inbounds float, float* %5, i64 %154
  %159 = bitcast float* %158 to <4 x float>*
  store <4 x float> %157, <4 x float>* %159, align 4, !tbaa !438
  %160 = add nuw nsw i64 %10, 100
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = bitcast float* %161 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %162, align 4, !tbaa !435
  %163 = fadd <4 x float> %broadcast.splat8, %wide.load.25
  %164 = getelementptr inbounds float, float* %5, i64 %160
  %165 = bitcast float* %164 to <4 x float>*
  store <4 x float> %163, <4 x float>* %165, align 4, !tbaa !438
  %166 = add nuw nsw i64 %10, 104
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = bitcast float* %167 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %168, align 4, !tbaa !435
  %169 = fadd <4 x float> %broadcast.splat8, %wide.load.26
  %170 = getelementptr inbounds float, float* %5, i64 %166
  %171 = bitcast float* %170 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 4, !tbaa !438
  %172 = add nuw nsw i64 %10, 108
  %173 = getelementptr inbounds float, float* %4, i64 %172
  %174 = bitcast float* %173 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %174, align 4, !tbaa !435
  %175 = fadd <4 x float> %broadcast.splat8, %wide.load.27
  %176 = getelementptr inbounds float, float* %5, i64 %172
  %177 = bitcast float* %176 to <4 x float>*
  store <4 x float> %175, <4 x float>* %177, align 4, !tbaa !438
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 112
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_2_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !441
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !444
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fadd <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !447
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !444
  %22 = fadd <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !447
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !444
  %29 = fadd <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !447
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !444
  %36 = fadd <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !447
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !444
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !447
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !444
  %50 = fadd <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !447
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !444
  %57 = fadd <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !447
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !444
  %64 = fadd <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !447
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !444
  %71 = fadd <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !447
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !444
  %78 = fadd <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !447
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !444
  %85 = fadd <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !447
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !444
  %92 = fadd <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !447
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !444
  %97 = fadd float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !447
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_3_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !450
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !453
  %21 = fadd <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !456
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !453
  %28 = fadd <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !456
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !453
  %35 = fadd <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !456
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !453
  %40 = fadd float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !456
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !453
  %45 = fadd float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !456
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 1024
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_12(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_12_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_12_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !459
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %5, align 4, !tbaa !459
  %6 = bitcast i8* %1 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !462
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !462
  %9 = fmul <4 x float> %wide.load, %wide.load3
  %10 = fmul <4 x float> %wide.load2, %wide.load4
  %11 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !465
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %10, <4 x float>* %13, align 4, !tbaa !465
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !459
  %16 = getelementptr inbounds i8, i8* %2, i64 48
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !459
  %18 = getelementptr inbounds i8, i8* %1, i64 32
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load3.1 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !462
  %20 = getelementptr inbounds i8, i8* %1, i64 48
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load4.1 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !462
  %22 = fmul <4 x float> %wide.load.1, %wide.load3.1
  %23 = fmul <4 x float> %wide.load2.1, %wide.load4.1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <4 x float>*
  store <4 x float> %22, <4 x float>* %25, align 4, !tbaa !465
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %23, <4 x float>* %27, align 4, !tbaa !465
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !459
  %30 = getelementptr inbounds i8, i8* %2, i64 80
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !459
  %32 = getelementptr inbounds i8, i8* %1, i64 64
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load3.2 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !462
  %34 = getelementptr inbounds i8, i8* %1, i64 80
  %35 = bitcast i8* %34 to <4 x float>*
  %wide.load4.2 = load <4 x float>, <4 x float>* %35, align 4, !tbaa !462
  %36 = fmul <4 x float> %wide.load.2, %wide.load3.2
  %37 = fmul <4 x float> %wide.load2.2, %wide.load4.2
  %38 = getelementptr inbounds i8, i8* %0, i64 64
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4, !tbaa !465
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4, !tbaa !465
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !459
  %44 = getelementptr inbounds i8, i8* %2, i64 112
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !459
  %46 = getelementptr inbounds i8, i8* %1, i64 96
  %47 = bitcast i8* %46 to <4 x float>*
  %wide.load3.3 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !462
  %48 = getelementptr inbounds i8, i8* %1, i64 112
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load4.3 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !462
  %50 = fmul <4 x float> %wide.load.3, %wide.load3.3
  %51 = fmul <4 x float> %wide.load2.3, %wide.load4.3
  %52 = getelementptr inbounds i8, i8* %0, i64 96
  %53 = bitcast i8* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !tbaa !465
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !tbaa !465
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !459
  %58 = getelementptr inbounds i8, i8* %2, i64 144
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !459
  %60 = getelementptr inbounds i8, i8* %1, i64 128
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load3.4 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !462
  %62 = getelementptr inbounds i8, i8* %1, i64 144
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load4.4 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !462
  %64 = fmul <4 x float> %wide.load.4, %wide.load3.4
  %65 = fmul <4 x float> %wide.load2.4, %wide.load4.4
  %66 = getelementptr inbounds i8, i8* %0, i64 128
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !465
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !465
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !459
  %72 = getelementptr inbounds i8, i8* %2, i64 176
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !459
  %74 = getelementptr inbounds i8, i8* %1, i64 160
  %75 = bitcast i8* %74 to <4 x float>*
  %wide.load3.5 = load <4 x float>, <4 x float>* %75, align 4, !tbaa !462
  %76 = getelementptr inbounds i8, i8* %1, i64 176
  %77 = bitcast i8* %76 to <4 x float>*
  %wide.load4.5 = load <4 x float>, <4 x float>* %77, align 4, !tbaa !462
  %78 = fmul <4 x float> %wide.load.5, %wide.load3.5
  %79 = fmul <4 x float> %wide.load2.5, %wide.load4.5
  %80 = getelementptr inbounds i8, i8* %0, i64 160
  %81 = bitcast i8* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !tbaa !465
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %79, <4 x float>* %83, align 4, !tbaa !465
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !459
  %86 = getelementptr inbounds i8, i8* %2, i64 208
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !459
  %88 = getelementptr inbounds i8, i8* %1, i64 192
  %89 = bitcast i8* %88 to <4 x float>*
  %wide.load3.6 = load <4 x float>, <4 x float>* %89, align 4, !tbaa !462
  %90 = getelementptr inbounds i8, i8* %1, i64 208
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load4.6 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !462
  %92 = fmul <4 x float> %wide.load.6, %wide.load3.6
  %93 = fmul <4 x float> %wide.load2.6, %wide.load4.6
  %94 = getelementptr inbounds i8, i8* %0, i64 192
  %95 = bitcast i8* %94 to <4 x float>*
  store <4 x float> %92, <4 x float>* %95, align 4, !tbaa !465
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %93, <4 x float>* %97, align 4, !tbaa !465
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !459
  %100 = getelementptr inbounds i8, i8* %2, i64 240
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !459
  %102 = getelementptr inbounds i8, i8* %1, i64 224
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load3.7 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !462
  %104 = getelementptr inbounds i8, i8* %1, i64 240
  %105 = bitcast i8* %104 to <4 x float>*
  %wide.load4.7 = load <4 x float>, <4 x float>* %105, align 4, !tbaa !462
  %106 = fmul <4 x float> %wide.load.7, %wide.load3.7
  %107 = fmul <4 x float> %wide.load2.7, %wide.load4.7
  %108 = getelementptr inbounds i8, i8* %0, i64 224
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %106, <4 x float>* %109, align 4, !tbaa !465
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %107, <4 x float>* %111, align 4, !tbaa !465
  %112 = getelementptr inbounds i8, i8* %2, i64 256
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !459
  %114 = getelementptr inbounds i8, i8* %2, i64 272
  %115 = bitcast i8* %114 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %115, align 4, !tbaa !459
  %116 = getelementptr inbounds i8, i8* %1, i64 256
  %117 = bitcast i8* %116 to <4 x float>*
  %wide.load3.8 = load <4 x float>, <4 x float>* %117, align 4, !tbaa !462
  %118 = getelementptr inbounds i8, i8* %1, i64 272
  %119 = bitcast i8* %118 to <4 x float>*
  %wide.load4.8 = load <4 x float>, <4 x float>* %119, align 4, !tbaa !462
  %120 = fmul <4 x float> %wide.load.8, %wide.load3.8
  %121 = fmul <4 x float> %wide.load2.8, %wide.load4.8
  %122 = getelementptr inbounds i8, i8* %0, i64 256
  %123 = bitcast i8* %122 to <4 x float>*
  store <4 x float> %120, <4 x float>* %123, align 4, !tbaa !465
  %124 = getelementptr inbounds i8, i8* %0, i64 272
  %125 = bitcast i8* %124 to <4 x float>*
  store <4 x float> %121, <4 x float>* %125, align 4, !tbaa !465
  %126 = getelementptr inbounds i8, i8* %2, i64 288
  %127 = bitcast i8* %126 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %127, align 4, !tbaa !459
  %128 = getelementptr inbounds i8, i8* %2, i64 304
  %129 = bitcast i8* %128 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %129, align 4, !tbaa !459
  %130 = getelementptr inbounds i8, i8* %1, i64 288
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load3.9 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !462
  %132 = getelementptr inbounds i8, i8* %1, i64 304
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load4.9 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !462
  %134 = fmul <4 x float> %wide.load.9, %wide.load3.9
  %135 = fmul <4 x float> %wide.load2.9, %wide.load4.9
  %136 = getelementptr inbounds i8, i8* %0, i64 288
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !465
  %138 = getelementptr inbounds i8, i8* %0, i64 304
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !465
  %140 = getelementptr inbounds i8, i8* %2, i64 320
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !459
  %142 = getelementptr inbounds i8, i8* %2, i64 336
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !459
  %144 = getelementptr inbounds i8, i8* %1, i64 320
  %145 = bitcast i8* %144 to <4 x float>*
  %wide.load3.10 = load <4 x float>, <4 x float>* %145, align 4, !tbaa !462
  %146 = getelementptr inbounds i8, i8* %1, i64 336
  %147 = bitcast i8* %146 to <4 x float>*
  %wide.load4.10 = load <4 x float>, <4 x float>* %147, align 4, !tbaa !462
  %148 = fmul <4 x float> %wide.load.10, %wide.load3.10
  %149 = fmul <4 x float> %wide.load2.10, %wide.load4.10
  %150 = getelementptr inbounds i8, i8* %0, i64 320
  %151 = bitcast i8* %150 to <4 x float>*
  store <4 x float> %148, <4 x float>* %151, align 4, !tbaa !465
  %152 = getelementptr inbounds i8, i8* %0, i64 336
  %153 = bitcast i8* %152 to <4 x float>*
  store <4 x float> %149, <4 x float>* %153, align 4, !tbaa !465
  %154 = getelementptr inbounds i8, i8* %2, i64 352
  %155 = bitcast i8* %154 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %155, align 4, !tbaa !459
  %156 = getelementptr inbounds i8, i8* %2, i64 368
  %157 = bitcast i8* %156 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %157, align 4, !tbaa !459
  %158 = getelementptr inbounds i8, i8* %1, i64 352
  %159 = bitcast i8* %158 to <4 x float>*
  %wide.load3.11 = load <4 x float>, <4 x float>* %159, align 4, !tbaa !462
  %160 = getelementptr inbounds i8, i8* %1, i64 368
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load4.11 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !462
  %162 = fmul <4 x float> %wide.load.11, %wide.load3.11
  %163 = fmul <4 x float> %wide.load2.11, %wide.load4.11
  %164 = getelementptr inbounds i8, i8* %0, i64 352
  %165 = bitcast i8* %164 to <4 x float>*
  store <4 x float> %162, <4 x float>* %165, align 4, !tbaa !465
  %166 = getelementptr inbounds i8, i8* %0, i64 368
  %167 = bitcast i8* %166 to <4 x float>*
  store <4 x float> %163, <4 x float>* %167, align 4, !tbaa !465
  %168 = getelementptr inbounds i8, i8* %2, i64 384
  %169 = bitcast i8* %168 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %169, align 4, !tbaa !459
  %170 = getelementptr inbounds i8, i8* %2, i64 400
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !459
  %172 = getelementptr inbounds i8, i8* %1, i64 384
  %173 = bitcast i8* %172 to <4 x float>*
  %wide.load3.12 = load <4 x float>, <4 x float>* %173, align 4, !tbaa !462
  %174 = getelementptr inbounds i8, i8* %1, i64 400
  %175 = bitcast i8* %174 to <4 x float>*
  %wide.load4.12 = load <4 x float>, <4 x float>* %175, align 4, !tbaa !462
  %176 = fmul <4 x float> %wide.load.12, %wide.load3.12
  %177 = fmul <4 x float> %wide.load2.12, %wide.load4.12
  %178 = getelementptr inbounds i8, i8* %0, i64 384
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !tbaa !465
  %180 = getelementptr inbounds i8, i8* %0, i64 400
  %181 = bitcast i8* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !tbaa !465
  %182 = getelementptr inbounds i8, i8* %2, i64 416
  %183 = bitcast i8* %182 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !459
  %184 = getelementptr inbounds i8, i8* %2, i64 432
  %185 = bitcast i8* %184 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %185, align 4, !tbaa !459
  %186 = getelementptr inbounds i8, i8* %1, i64 416
  %187 = bitcast i8* %186 to <4 x float>*
  %wide.load3.13 = load <4 x float>, <4 x float>* %187, align 4, !tbaa !462
  %188 = getelementptr inbounds i8, i8* %1, i64 432
  %189 = bitcast i8* %188 to <4 x float>*
  %wide.load4.13 = load <4 x float>, <4 x float>* %189, align 4, !tbaa !462
  %190 = fmul <4 x float> %wide.load.13, %wide.load3.13
  %191 = fmul <4 x float> %wide.load2.13, %wide.load4.13
  %192 = getelementptr inbounds i8, i8* %0, i64 416
  %193 = bitcast i8* %192 to <4 x float>*
  store <4 x float> %190, <4 x float>* %193, align 4, !tbaa !465
  %194 = getelementptr inbounds i8, i8* %0, i64 432
  %195 = bitcast i8* %194 to <4 x float>*
  store <4 x float> %191, <4 x float>* %195, align 4, !tbaa !465
  %196 = getelementptr inbounds i8, i8* %2, i64 448
  %197 = bitcast i8* %196 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %197, align 4, !tbaa !459
  %198 = getelementptr inbounds i8, i8* %2, i64 464
  %199 = bitcast i8* %198 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %199, align 4, !tbaa !459
  %200 = getelementptr inbounds i8, i8* %1, i64 448
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load3.14 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !462
  %202 = getelementptr inbounds i8, i8* %1, i64 464
  %203 = bitcast i8* %202 to <4 x float>*
  %wide.load4.14 = load <4 x float>, <4 x float>* %203, align 4, !tbaa !462
  %204 = fmul <4 x float> %wide.load.14, %wide.load3.14
  %205 = fmul <4 x float> %wide.load2.14, %wide.load4.14
  %206 = getelementptr inbounds i8, i8* %0, i64 448
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> %204, <4 x float>* %207, align 4, !tbaa !465
  %208 = getelementptr inbounds i8, i8* %0, i64 464
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %205, <4 x float>* %209, align 4, !tbaa !465
  %210 = getelementptr inbounds i8, i8* %2, i64 480
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !459
  %212 = getelementptr inbounds i8, i8* %2, i64 496
  %213 = bitcast i8* %212 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %213, align 4, !tbaa !459
  %214 = getelementptr inbounds i8, i8* %1, i64 480
  %215 = bitcast i8* %214 to <4 x float>*
  %wide.load3.15 = load <4 x float>, <4 x float>* %215, align 4, !tbaa !462
  %216 = getelementptr inbounds i8, i8* %1, i64 496
  %217 = bitcast i8* %216 to <4 x float>*
  %wide.load4.15 = load <4 x float>, <4 x float>* %217, align 4, !tbaa !462
  %218 = fmul <4 x float> %wide.load.15, %wide.load3.15
  %219 = fmul <4 x float> %wide.load2.15, %wide.load4.15
  %220 = getelementptr inbounds i8, i8* %0, i64 480
  %221 = bitcast i8* %220 to <4 x float>*
  store <4 x float> %218, <4 x float>* %221, align 4, !tbaa !465
  %222 = getelementptr inbounds i8, i8* %0, i64 496
  %223 = bitcast i8* %222 to <4 x float>*
  store <4 x float> %219, <4 x float>* %223, align 4, !tbaa !465
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_batch_flatten(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_batch_flatten_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_batch_flatten_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 8192, i1 false)
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_dense(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_dense_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_dense_compute_(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #1 {
entry:
  %3 = bitcast i8* %0 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %2 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv3 = phi i64 [ 0, %entry ], [ %indvars.iv.next4, %for_end3 ]
  %6 = shl i64 %indvars.iv3, 11
  br label %for_body2

for_end:                                          ; preds = %for_end3
  ret void

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %.02 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %15, %for_body2 ]
  %7 = shl nsw i64 %indvars.iv, 4
  %8 = getelementptr inbounds float, float* %3, i64 %7
  %9 = bitcast float* %8 to <16 x float>*
  %10 = load <16 x float>, <16 x float>* %9, align 64, !tbaa !468
  %11 = add nuw nsw i64 %7, %6
  %12 = getelementptr inbounds float, float* %4, i64 %11
  %13 = bitcast float* %12 to <16 x float>*
  %14 = load <16 x float>, <16 x float>* %13, align 64, !tbaa !471
  %15 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %10, <16 x float> %14, <16 x float> %.02)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !5

for_end3:                                         ; preds = %for_body2
  %16 = getelementptr inbounds float, float* %5, i64 %indvars.iv3
  %.0.vec.extract = extractelement <16 x float> %15, i32 0
  %17 = fadd float %.0.vec.extract, 0.000000e+00
  %.4.vec.extract = extractelement <16 x float> %15, i32 1
  %18 = fadd float %.4.vec.extract, %17
  %.8.vec.extract = extractelement <16 x float> %15, i32 2
  %19 = fadd float %.8.vec.extract, %18
  %.12.vec.extract = extractelement <16 x float> %15, i32 3
  %20 = fadd float %.12.vec.extract, %19
  %.16.vec.extract = extractelement <16 x float> %15, i32 4
  %21 = fadd float %.16.vec.extract, %20
  %.20.vec.extract = extractelement <16 x float> %15, i32 5
  %22 = fadd float %.20.vec.extract, %21
  %.24.vec.extract = extractelement <16 x float> %15, i32 6
  %23 = fadd float %.24.vec.extract, %22
  %.28.vec.extract = extractelement <16 x float> %15, i32 7
  %24 = fadd float %.28.vec.extract, %23
  %.32.vec.extract = extractelement <16 x float> %15, i32 8
  %25 = fadd float %.32.vec.extract, %24
  %.36.vec.extract = extractelement <16 x float> %15, i32 9
  %26 = fadd float %.36.vec.extract, %25
  %.40.vec.extract = extractelement <16 x float> %15, i32 10
  %27 = fadd float %.40.vec.extract, %26
  %.44.vec.extract = extractelement <16 x float> %15, i32 11
  %28 = fadd float %.44.vec.extract, %27
  %.48.vec.extract = extractelement <16 x float> %15, i32 12
  %29 = fadd float %.48.vec.extract, %28
  %.52.vec.extract = extractelement <16 x float> %15, i32 13
  %30 = fadd float %.52.vec.extract, %29
  %.56.vec.extract = extractelement <16 x float> %15, i32 14
  %31 = fadd float %.56.vec.extract, %30
  %.60.vec.extract = extractelement <16 x float> %15, i32 15
  %32 = fadd float %.60.vec.extract, %31
  store float %32, float* %16, align 4, !tbaa !474
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %exitcond5 = icmp eq i64 %indvars.iv.next4, 1000
  br i1 %exitcond5, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 256, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_2_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !477
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !480
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !483
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !480
  %22 = fmul <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !483
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !480
  %29 = fmul <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !483
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !480
  %36 = fmul <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !483
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !480
  %43 = fmul <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !483
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !480
  %50 = fmul <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !483
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !480
  %57 = fmul <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !483
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !480
  %64 = fmul <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !483
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !480
  %71 = fmul <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !483
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !480
  %78 = fmul <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !483
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !480
  %85 = fmul <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !483
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !480
  %92 = fmul <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !483
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !480
  %97 = fmul float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !483
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %6
  %8 = getelementptr inbounds float, float* %4, i64 %6
  %9 = getelementptr inbounds float, float* %5, i64 %6
  %10 = bitcast float* %7 to <4 x float>*
  %11 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !486
  %12 = bitcast float* %8 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 4, !tbaa !489
  %14 = fadd <4 x float> %11, %13
  %15 = bitcast float* %9 to <4 x float>*
  store <4 x float> %14, <4 x float>* %15, align 4, !tbaa !492
  %16 = add nuw nsw i64 %6, 4
  %17 = getelementptr inbounds float, float* %3, i64 %16
  %18 = getelementptr inbounds float, float* %4, i64 %16
  %19 = getelementptr inbounds float, float* %5, i64 %16
  %20 = bitcast float* %17 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !486
  %22 = bitcast float* %18 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !489
  %24 = fadd <4 x float> %21, %23
  %25 = bitcast float* %19 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4, !tbaa !492
  %26 = add nuw nsw i64 %6, 8
  %27 = getelementptr inbounds float, float* %3, i64 %26
  %28 = getelementptr inbounds float, float* %4, i64 %26
  %29 = getelementptr inbounds float, float* %5, i64 %26
  %30 = bitcast float* %27 to <4 x float>*
  %31 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !486
  %32 = bitcast float* %28 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4, !tbaa !489
  %34 = fadd <4 x float> %31, %33
  %35 = bitcast float* %29 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 4, !tbaa !492
  %36 = add nuw nsw i64 %6, 12
  %37 = getelementptr inbounds float, float* %3, i64 %36
  %38 = getelementptr inbounds float, float* %4, i64 %36
  %39 = getelementptr inbounds float, float* %5, i64 %36
  %40 = bitcast float* %37 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4, !tbaa !486
  %42 = bitcast float* %38 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !489
  %44 = fadd <4 x float> %41, %43
  %45 = bitcast float* %39 to <4 x float>*
  store <4 x float> %44, <4 x float>* %45, align 4, !tbaa !492
  %46 = add nuw nsw i64 %6, 16
  %47 = getelementptr inbounds float, float* %3, i64 %46
  %48 = getelementptr inbounds float, float* %4, i64 %46
  %49 = getelementptr inbounds float, float* %5, i64 %46
  %50 = bitcast float* %47 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !486
  %52 = bitcast float* %48 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 4, !tbaa !489
  %54 = fadd <4 x float> %51, %53
  %55 = bitcast float* %49 to <4 x float>*
  store <4 x float> %54, <4 x float>* %55, align 4, !tbaa !492
  %56 = add nuw nsw i64 %6, 20
  %57 = getelementptr inbounds float, float* %3, i64 %56
  %58 = getelementptr inbounds float, float* %4, i64 %56
  %59 = getelementptr inbounds float, float* %5, i64 %56
  %60 = bitcast float* %57 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !486
  %62 = bitcast float* %58 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !489
  %64 = fadd <4 x float> %61, %63
  %65 = bitcast float* %59 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !492
  %66 = add nuw nsw i64 %6, 24
  %67 = getelementptr inbounds float, float* %3, i64 %66
  %68 = getelementptr inbounds float, float* %4, i64 %66
  %69 = getelementptr inbounds float, float* %5, i64 %66
  %70 = bitcast float* %67 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 4, !tbaa !486
  %72 = bitcast float* %68 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !489
  %74 = fadd <4 x float> %71, %73
  %75 = bitcast float* %69 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !492
  %76 = add nuw nsw i64 %6, 28
  %77 = getelementptr inbounds float, float* %3, i64 %76
  %78 = getelementptr inbounds float, float* %4, i64 %76
  %79 = getelementptr inbounds float, float* %5, i64 %76
  %80 = bitcast float* %77 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 4, !tbaa !486
  %82 = bitcast float* %78 to <4 x float>*
  %83 = load <4 x float>, <4 x float>* %82, align 4, !tbaa !489
  %84 = fadd <4 x float> %81, %83
  %85 = bitcast float* %79 to <4 x float>*
  store <4 x float> %84, <4 x float>* %85, align 4, !tbaa !492
  %86 = add nuw nsw i64 %6, 32
  %87 = getelementptr inbounds float, float* %3, i64 %86
  %88 = getelementptr inbounds float, float* %4, i64 %86
  %89 = getelementptr inbounds float, float* %5, i64 %86
  %90 = bitcast float* %87 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !486
  %92 = bitcast float* %88 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !489
  %94 = fadd <4 x float> %91, %93
  %95 = bitcast float* %89 to <4 x float>*
  store <4 x float> %94, <4 x float>* %95, align 4, !tbaa !492
  %96 = add nuw nsw i64 %6, 36
  %97 = getelementptr inbounds float, float* %3, i64 %96
  %98 = getelementptr inbounds float, float* %4, i64 %96
  %99 = getelementptr inbounds float, float* %5, i64 %96
  %100 = bitcast float* %97 to <4 x float>*
  %101 = load <4 x float>, <4 x float>* %100, align 4, !tbaa !486
  %102 = bitcast float* %98 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 4, !tbaa !489
  %104 = fadd <4 x float> %101, %103
  %105 = bitcast float* %99 to <4 x float>*
  store <4 x float> %104, <4 x float>* %105, align 4, !tbaa !492
  %106 = add nuw nsw i64 %6, 40
  %107 = getelementptr inbounds float, float* %3, i64 %106
  %108 = getelementptr inbounds float, float* %4, i64 %106
  %109 = getelementptr inbounds float, float* %5, i64 %106
  %110 = bitcast float* %107 to <4 x float>*
  %111 = load <4 x float>, <4 x float>* %110, align 4, !tbaa !486
  %112 = bitcast float* %108 to <4 x float>*
  %113 = load <4 x float>, <4 x float>* %112, align 4, !tbaa !489
  %114 = fadd <4 x float> %111, %113
  %115 = bitcast float* %109 to <4 x float>*
  store <4 x float> %114, <4 x float>* %115, align 4, !tbaa !492
  %116 = add nuw nsw i64 %6, 44
  %117 = getelementptr inbounds float, float* %3, i64 %116
  %118 = getelementptr inbounds float, float* %4, i64 %116
  %119 = getelementptr inbounds float, float* %5, i64 %116
  %120 = bitcast float* %117 to <4 x float>*
  %121 = load <4 x float>, <4 x float>* %120, align 4, !tbaa !486
  %122 = bitcast float* %118 to <4 x float>*
  %123 = load <4 x float>, <4 x float>* %122, align 4, !tbaa !489
  %124 = fadd <4 x float> %121, %123
  %125 = bitcast float* %119 to <4 x float>*
  store <4 x float> %124, <4 x float>* %125, align 4, !tbaa !492
  %126 = add nuw nsw i64 %6, 48
  %127 = getelementptr inbounds float, float* %3, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !486
  %129 = getelementptr inbounds float, float* %4, i64 %126
  %130 = load float, float* %129, align 4, !tbaa !489
  %131 = fadd float %128, %130
  %132 = getelementptr inbounds float, float* %5, i64 %126
  store float %131, float* %132, align 4, !tbaa !492
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2048
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_9(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_9_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_9_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [28 x <32 x float>], align 16
  %5 = alloca [4608 x <32 x float>], align 16
  %6 = alloca [115200 x float], align 16
  %7 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar69 = phi i64 [ 0, %entry ], [ %indvar.next70, %for_end3 ]
  %8 = mul nuw nsw i64 %indvar69, 3840
  %9 = trunc i64 %indvar69 to i32
  %10 = add i32 %9, -1
  %11 = icmp ult i32 %10, 28
  %12 = mul nuw nsw i64 %indvar69, 28
  %13 = add nsw i64 %12, -29
  br i1 %11, label %if_end.us.us.29, label %for_begin4.preheader.preheader

for_begin4.preheader.preheader:                   ; preds = %for_begin1.preheader
  %scevgep76 = getelementptr [115200 x float], [115200 x float]* %6, i64 0, i64 %8
  %scevgep7677 = bitcast float* %scevgep76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %scevgep7677, i8 0, i64 15360, i1 false)
  br label %for_end3

for_begin7.preheader:                             ; preds = %for_end3
  %14 = bitcast [7 x <32 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  %15 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_end3:                                         ; preds = %if_end.us.us.29, %for_begin4.preheader.preheader
  %indvar.next70 = add nuw nsw i64 %indvar69, 1
  %exitcond85 = icmp eq i64 %indvar.next70, 30
  br i1 %exitcond85, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv63 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next64, %for_end12 ]
  %16 = mul nuw nsw i64 %indvars.iv63, 12288
  %17 = trunc i64 %indvars.iv63 to i32
  %18 = urem i32 %17, 3
  %19 = mul nuw nsw i32 %18, 3
  %20 = udiv i32 %17, 3
  %21 = mul nsw i32 %20, 36864
  %22 = or i32 %19, %21
  %23 = zext i32 %22 to i64
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %24 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %25 = bitcast float* %24 to <32 x float>*
  %26 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %27 = bitcast float* %26 to <32 x float>*
  %28 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %29 = bitcast float* %28 to <32 x float>*
  %30 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %31 = bitcast float* %30 to <32 x float>*
  %32 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %33 = bitcast float* %32 to <32 x float>*
  %34 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %35 = bitcast float* %34 to <32 x float>*
  %36 = bitcast i8* %2 to float*
  %37 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv60 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next61, %for_end15 ]
  %38 = shl i64 %indvars.iv60, 12
  %39 = add nuw nsw i64 %38, %16
  %40 = add nuw nsw i64 %indvars.iv60, %23
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %exitcond65 = icmp eq i64 %indvars.iv.next64, 12
  br i1 %exitcond65, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv57 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next58, %for_body14 ]
  %41 = shl i64 %indvars.iv57, 5
  %42 = add nuw nsw i64 %39, %41
  %43 = mul nuw nsw i64 %indvars.iv57, 9
  %44 = add nuw nsw i64 %40, %43
  %45 = add nuw nsw i64 %44, 1152
  %46 = add nuw nsw i64 %44, 2304
  %47 = add nuw nsw i64 %44, 3456
  %48 = add nuw nsw i64 %44, 4608
  %49 = add nuw nsw i64 %44, 5760
  %50 = add nuw nsw i64 %44, 6912
  %51 = add nuw nsw i64 %44, 8064
  %52 = add nuw nsw i64 %44, 9216
  %53 = add nuw nsw i64 %44, 10368
  %54 = add nuw nsw i64 %44, 11520
  %55 = add nuw nsw i64 %44, 12672
  %56 = add nuw nsw i64 %44, 13824
  %57 = add nuw nsw i64 %44, 14976
  %58 = add nuw nsw i64 %44, 16128
  %59 = add nuw nsw i64 %44, 17280
  %60 = add nuw nsw i64 %44, 18432
  %61 = add nuw nsw i64 %44, 19584
  %62 = add nuw nsw i64 %44, 20736
  %63 = add nuw nsw i64 %44, 21888
  %64 = add nuw nsw i64 %44, 23040
  %65 = add nuw nsw i64 %44, 24192
  %66 = add nuw nsw i64 %44, 25344
  %67 = add nuw nsw i64 %44, 26496
  %68 = add nuw nsw i64 %44, 27648
  %69 = add nuw nsw i64 %44, 28800
  %70 = add nuw nsw i64 %44, 29952
  %71 = add nuw nsw i64 %44, 31104
  %72 = add nuw nsw i64 %44, 32256
  %73 = add nuw nsw i64 %44, 33408
  %74 = add nuw nsw i64 %44, 34560
  %75 = add nuw nsw i64 %44, 35712
  %76 = getelementptr inbounds float, float* %15, i64 %44
  %77 = load float, float* %76, align 4, !tbaa !495
  %78 = insertelement <32 x float> undef, float %77, i32 0
  %79 = getelementptr inbounds float, float* %15, i64 %45
  %80 = load float, float* %79, align 4, !tbaa !495
  %81 = insertelement <32 x float> %78, float %80, i32 1
  %82 = getelementptr inbounds float, float* %15, i64 %46
  %83 = load float, float* %82, align 4, !tbaa !495
  %84 = insertelement <32 x float> %81, float %83, i32 2
  %85 = getelementptr inbounds float, float* %15, i64 %47
  %86 = load float, float* %85, align 4, !tbaa !495
  %87 = insertelement <32 x float> %84, float %86, i32 3
  %88 = getelementptr inbounds float, float* %15, i64 %48
  %89 = load float, float* %88, align 4, !tbaa !495
  %90 = insertelement <32 x float> %87, float %89, i32 4
  %91 = getelementptr inbounds float, float* %15, i64 %49
  %92 = load float, float* %91, align 4, !tbaa !495
  %93 = insertelement <32 x float> %90, float %92, i32 5
  %94 = getelementptr inbounds float, float* %15, i64 %50
  %95 = load float, float* %94, align 4, !tbaa !495
  %96 = insertelement <32 x float> %93, float %95, i32 6
  %97 = getelementptr inbounds float, float* %15, i64 %51
  %98 = load float, float* %97, align 4, !tbaa !495
  %99 = insertelement <32 x float> %96, float %98, i32 7
  %100 = getelementptr inbounds float, float* %15, i64 %52
  %101 = load float, float* %100, align 4, !tbaa !495
  %102 = insertelement <32 x float> %99, float %101, i32 8
  %103 = getelementptr inbounds float, float* %15, i64 %53
  %104 = load float, float* %103, align 4, !tbaa !495
  %105 = insertelement <32 x float> %102, float %104, i32 9
  %106 = getelementptr inbounds float, float* %15, i64 %54
  %107 = load float, float* %106, align 4, !tbaa !495
  %108 = insertelement <32 x float> %105, float %107, i32 10
  %109 = getelementptr inbounds float, float* %15, i64 %55
  %110 = load float, float* %109, align 4, !tbaa !495
  %111 = insertelement <32 x float> %108, float %110, i32 11
  %112 = getelementptr inbounds float, float* %15, i64 %56
  %113 = load float, float* %112, align 4, !tbaa !495
  %114 = insertelement <32 x float> %111, float %113, i32 12
  %115 = getelementptr inbounds float, float* %15, i64 %57
  %116 = load float, float* %115, align 4, !tbaa !495
  %117 = insertelement <32 x float> %114, float %116, i32 13
  %118 = getelementptr inbounds float, float* %15, i64 %58
  %119 = load float, float* %118, align 4, !tbaa !495
  %120 = insertelement <32 x float> %117, float %119, i32 14
  %121 = getelementptr inbounds float, float* %15, i64 %59
  %122 = load float, float* %121, align 4, !tbaa !495
  %123 = insertelement <32 x float> %120, float %122, i32 15
  %124 = getelementptr inbounds float, float* %15, i64 %60
  %125 = load float, float* %124, align 4, !tbaa !495
  %126 = insertelement <32 x float> %123, float %125, i32 16
  %127 = getelementptr inbounds float, float* %15, i64 %61
  %128 = load float, float* %127, align 4, !tbaa !495
  %129 = insertelement <32 x float> %126, float %128, i32 17
  %130 = getelementptr inbounds float, float* %15, i64 %62
  %131 = load float, float* %130, align 4, !tbaa !495
  %132 = insertelement <32 x float> %129, float %131, i32 18
  %133 = getelementptr inbounds float, float* %15, i64 %63
  %134 = load float, float* %133, align 4, !tbaa !495
  %135 = insertelement <32 x float> %132, float %134, i32 19
  %136 = getelementptr inbounds float, float* %15, i64 %64
  %137 = load float, float* %136, align 4, !tbaa !495
  %138 = insertelement <32 x float> %135, float %137, i32 20
  %139 = getelementptr inbounds float, float* %15, i64 %65
  %140 = load float, float* %139, align 4, !tbaa !495
  %141 = insertelement <32 x float> %138, float %140, i32 21
  %142 = getelementptr inbounds float, float* %15, i64 %66
  %143 = load float, float* %142, align 4, !tbaa !495
  %144 = insertelement <32 x float> %141, float %143, i32 22
  %145 = getelementptr inbounds float, float* %15, i64 %67
  %146 = load float, float* %145, align 4, !tbaa !495
  %147 = insertelement <32 x float> %144, float %146, i32 23
  %148 = getelementptr inbounds float, float* %15, i64 %68
  %149 = load float, float* %148, align 4, !tbaa !495
  %150 = insertelement <32 x float> %147, float %149, i32 24
  %151 = getelementptr inbounds float, float* %15, i64 %69
  %152 = load float, float* %151, align 4, !tbaa !495
  %153 = insertelement <32 x float> %150, float %152, i32 25
  %154 = getelementptr inbounds float, float* %15, i64 %70
  %155 = load float, float* %154, align 4, !tbaa !495
  %156 = insertelement <32 x float> %153, float %155, i32 26
  %157 = getelementptr inbounds float, float* %15, i64 %71
  %158 = load float, float* %157, align 4, !tbaa !495
  %159 = insertelement <32 x float> %156, float %158, i32 27
  %160 = getelementptr inbounds float, float* %15, i64 %72
  %161 = load float, float* %160, align 4, !tbaa !495
  %162 = insertelement <32 x float> %159, float %161, i32 28
  %163 = getelementptr inbounds float, float* %15, i64 %73
  %164 = load float, float* %163, align 4, !tbaa !495
  %165 = insertelement <32 x float> %162, float %164, i32 29
  %166 = getelementptr inbounds float, float* %15, i64 %74
  %167 = load float, float* %166, align 4, !tbaa !495
  %168 = insertelement <32 x float> %165, float %167, i32 30
  %169 = getelementptr inbounds float, float* %15, i64 %75
  %170 = load float, float* %169, align 4, !tbaa !495
  %171 = insertelement <32 x float> %168, float %170, i32 31
  %172 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %42
  %173 = bitcast float* %172 to <32 x float>*
  store <32 x float> %171, <32 x float>* %173, align 16, !tbaa !498
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %exitcond59 = icmp eq i64 %indvars.iv.next58, 128
  br i1 %exitcond59, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %exitcond62 = icmp eq i64 %indvars.iv.next61, 3
  br i1 %exitcond62, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end33, %for_begin16.preheader
  %174 = phi i32 [ 0, %for_begin16.preheader ], [ %286, %for_end33 ]
  %175 = urem i32 %174, 28
  %176 = udiv i32 %174, 28
  %177 = mul nsw i32 %176, 36864
  %178 = zext i32 %177 to i64
  %179 = mul nuw nsw i32 %175, 3840
  %180 = zext i32 %179 to i64
  %181 = mul nuw nsw i32 %175, 3840
  %182 = add nuw nsw i32 %181, 3840
  %183 = zext i32 %182 to i64
  %184 = add nuw nsw i64 %178, 12288
  %185 = mul nuw nsw i32 %175, 3840
  %186 = add nuw nsw i32 %185, 7680
  %187 = zext i32 %186 to i64
  %188 = add nuw nsw i64 %178, 24576
  br label %for_body20

for_end18:                                        ; preds = %for_end33
  ret void

for_begin31.preheader:                            ; preds = %for_end27.2
  %189 = mul nuw nsw i32 %175, 28
  %190 = mul nsw i32 %176, 25088
  %191 = add nuw nsw i32 %190, %189
  %192 = zext i32 %191 to i64
  br label %for_begin34.preheader

for_body20:                                       ; preds = %for_end27.2, %for_begin19.preheader
  %indvar = phi i64 [ 0, %for_begin19.preheader ], [ %indvar.next, %for_end27.2 ]
  %193 = mul nuw nsw i64 %indvar, 7
  %scevgep = getelementptr [28 x <32 x float>], [28 x <32 x float>]* %4, i64 0, i64 %193
  %scevgep48 = bitcast <32 x float>* %scevgep to i8*
  %194 = add nuw nsw i64 %193, %180
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %37, i8 0, i64 896, i1 false)
  br label %for_body26

for_body26:                                       ; preds = %for_body26, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_body26 ]
  %195 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %281, %for_body26 ]
  %196 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %275, %for_body26 ]
  %197 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %274, %for_body26 ]
  %198 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %273, %for_body26 ]
  %199 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %272, %for_body26 ]
  %200 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %271, %for_body26 ]
  %201 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %270, %for_body26 ]
  %202 = mul nuw nsw i64 %indvars.iv, 30
  %203 = add nuw nsw i64 %194, %202
  %204 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %203
  %205 = load float, float* %204, align 4, !tbaa !501
  %206 = insertelement <32 x float> undef, float %205, i32 0
  %207 = shufflevector <32 x float> %206, <32 x float> undef, <32 x i32> zeroinitializer
  %208 = shl nsw i64 %indvars.iv, 5
  %209 = add nuw nsw i64 %208, %178
  %210 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %209
  %211 = bitcast float* %210 to <32 x float>*
  %212 = load <32 x float>, <32 x float>* %211, align 16, !tbaa !498
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %207, <32 x float> %212, <32 x float> %201)
  %214 = add nuw nsw i64 %203, 1
  %215 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !501
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %212, <32 x float> %200)
  %220 = add nuw nsw i64 %203, 2
  %221 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !501
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %212, <32 x float> %199)
  %226 = add nuw nsw i64 %203, 3
  %227 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !501
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %212, <32 x float> %198)
  %232 = add nuw nsw i64 %203, 4
  %233 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !501
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %212, <32 x float> %197)
  %238 = add nuw nsw i64 %203, 5
  %239 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !501
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %212, <32 x float> %196)
  %244 = add nuw nsw i64 %203, 6
  %245 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !501
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %212, <32 x float> %195)
  %250 = add nuw nsw i64 %209, 4096
  %251 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %250
  %252 = bitcast float* %251 to <32 x float>*
  %253 = load <32 x float>, <32 x float>* %252, align 16, !tbaa !498
  %254 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %253, <32 x float> %213)
  %255 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %253, <32 x float> %219)
  %256 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %253, <32 x float> %225)
  %257 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %253, <32 x float> %231)
  %258 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %253, <32 x float> %237)
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %253, <32 x float> %243)
  %260 = add nuw nsw i64 %203, 7
  %261 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !501
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %253, <32 x float> %249)
  %266 = add nuw nsw i64 %209, 8192
  %267 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %266
  %268 = bitcast float* %267 to <32 x float>*
  %269 = load <32 x float>, <32 x float>* %268, align 16, !tbaa !498
  %270 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %269, <32 x float> %254)
  %271 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %269, <32 x float> %255)
  %272 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %269, <32 x float> %256)
  %273 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %269, <32 x float> %257)
  %274 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %269, <32 x float> %258)
  %275 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %269, <32 x float> %259)
  %276 = add nuw nsw i64 %203, 8
  %277 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %276
  %278 = load float, float* %277, align 4, !tbaa !501
  %279 = insertelement <32 x float> undef, float %278, i32 0
  %280 = shufflevector <32 x float> %279, <32 x float> undef, <32 x i32> zeroinitializer
  %281 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %280, <32 x float> %269, <32 x float> %265)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %282 = add nuw nsw i64 %193, %183
  br label %for_body26.1

for_begin34.preheader:                            ; preds = %for_end36, %for_begin31.preheader
  %indvars.iv53 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next54, %for_end36 ]
  %283 = mul nuw nsw i64 %indvars.iv53, 7
  %284 = add nuw nsw i64 %283, %192
  %285 = mul nuw nsw i64 %indvars.iv53, 224
  br label %for_body35

for_end33:                                        ; preds = %for_end36
  %286 = add nuw nsw i32 %174, 1
  %exitcond56 = icmp eq i32 %286, 112
  br i1 %exitcond56, label %for_end18, label %for_begin19.preheader, !prof !5

for_body35:                                       ; preds = %for_body35, %for_begin34.preheader
  %indvars.iv50 = phi i64 [ 0, %for_begin34.preheader ], [ %indvars.iv.next51, %for_body35 ]
  %287 = add nuw nsw i64 %284, %indvars.iv50
  %288 = add nuw nsw i64 %287, 784
  %289 = add nuw nsw i64 %287, 1568
  %290 = add nuw nsw i64 %287, 2352
  %291 = add nuw nsw i64 %287, 3136
  %292 = add nuw nsw i64 %287, 3920
  %293 = add nuw nsw i64 %287, 4704
  %294 = add nuw nsw i64 %287, 5488
  %295 = add nuw nsw i64 %287, 6272
  %296 = add nuw nsw i64 %287, 7056
  %297 = add nuw nsw i64 %287, 7840
  %298 = add nuw nsw i64 %287, 8624
  %299 = add nuw nsw i64 %287, 9408
  %300 = add nuw nsw i64 %287, 10192
  %301 = add nuw nsw i64 %287, 10976
  %302 = add nuw nsw i64 %287, 11760
  %303 = add nuw nsw i64 %287, 12544
  %304 = add nuw nsw i64 %287, 13328
  %305 = add nuw nsw i64 %287, 14112
  %306 = add nuw nsw i64 %287, 14896
  %307 = add nuw nsw i64 %287, 15680
  %308 = add nuw nsw i64 %287, 16464
  %309 = add nuw nsw i64 %287, 17248
  %310 = add nuw nsw i64 %287, 18032
  %311 = add nuw nsw i64 %287, 18816
  %312 = add nuw nsw i64 %287, 19600
  %313 = add nuw nsw i64 %287, 20384
  %314 = add nuw nsw i64 %287, 21168
  %315 = add nuw nsw i64 %287, 21952
  %316 = add nuw nsw i64 %287, 22736
  %317 = add nuw nsw i64 %287, 23520
  %318 = add nuw nsw i64 %287, 24304
  %319 = shl i64 %indvars.iv50, 5
  %320 = add nuw nsw i64 %319, %285
  %321 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %4, i64 0, i64 0, i64 %320
  %322 = bitcast float* %321 to <32 x float>*
  %323 = load <32 x float>, <32 x float>* %322, align 16, !tbaa !504
  %324 = getelementptr inbounds float, float* %36, i64 %287
  %325 = extractelement <32 x float> %323, i64 0
  store float %325, float* %324, align 4, !tbaa !507
  %326 = getelementptr inbounds float, float* %36, i64 %288
  %327 = extractelement <32 x float> %323, i64 1
  store float %327, float* %326, align 4, !tbaa !507
  %328 = getelementptr inbounds float, float* %36, i64 %289
  %329 = extractelement <32 x float> %323, i64 2
  store float %329, float* %328, align 4, !tbaa !507
  %330 = getelementptr inbounds float, float* %36, i64 %290
  %331 = extractelement <32 x float> %323, i64 3
  store float %331, float* %330, align 4, !tbaa !507
  %332 = getelementptr inbounds float, float* %36, i64 %291
  %333 = extractelement <32 x float> %323, i64 4
  store float %333, float* %332, align 4, !tbaa !507
  %334 = getelementptr inbounds float, float* %36, i64 %292
  %335 = extractelement <32 x float> %323, i64 5
  store float %335, float* %334, align 4, !tbaa !507
  %336 = getelementptr inbounds float, float* %36, i64 %293
  %337 = extractelement <32 x float> %323, i64 6
  store float %337, float* %336, align 4, !tbaa !507
  %338 = getelementptr inbounds float, float* %36, i64 %294
  %339 = extractelement <32 x float> %323, i64 7
  store float %339, float* %338, align 4, !tbaa !507
  %340 = getelementptr inbounds float, float* %36, i64 %295
  %341 = extractelement <32 x float> %323, i64 8
  store float %341, float* %340, align 4, !tbaa !507
  %342 = getelementptr inbounds float, float* %36, i64 %296
  %343 = extractelement <32 x float> %323, i64 9
  store float %343, float* %342, align 4, !tbaa !507
  %344 = getelementptr inbounds float, float* %36, i64 %297
  %345 = extractelement <32 x float> %323, i64 10
  store float %345, float* %344, align 4, !tbaa !507
  %346 = getelementptr inbounds float, float* %36, i64 %298
  %347 = extractelement <32 x float> %323, i64 11
  store float %347, float* %346, align 4, !tbaa !507
  %348 = getelementptr inbounds float, float* %36, i64 %299
  %349 = extractelement <32 x float> %323, i64 12
  store float %349, float* %348, align 4, !tbaa !507
  %350 = getelementptr inbounds float, float* %36, i64 %300
  %351 = extractelement <32 x float> %323, i64 13
  store float %351, float* %350, align 4, !tbaa !507
  %352 = getelementptr inbounds float, float* %36, i64 %301
  %353 = extractelement <32 x float> %323, i64 14
  store float %353, float* %352, align 4, !tbaa !507
  %354 = getelementptr inbounds float, float* %36, i64 %302
  %355 = extractelement <32 x float> %323, i64 15
  store float %355, float* %354, align 4, !tbaa !507
  %356 = getelementptr inbounds float, float* %36, i64 %303
  %357 = extractelement <32 x float> %323, i64 16
  store float %357, float* %356, align 4, !tbaa !507
  %358 = getelementptr inbounds float, float* %36, i64 %304
  %359 = extractelement <32 x float> %323, i64 17
  store float %359, float* %358, align 4, !tbaa !507
  %360 = getelementptr inbounds float, float* %36, i64 %305
  %361 = extractelement <32 x float> %323, i64 18
  store float %361, float* %360, align 4, !tbaa !507
  %362 = getelementptr inbounds float, float* %36, i64 %306
  %363 = extractelement <32 x float> %323, i64 19
  store float %363, float* %362, align 4, !tbaa !507
  %364 = getelementptr inbounds float, float* %36, i64 %307
  %365 = extractelement <32 x float> %323, i64 20
  store float %365, float* %364, align 4, !tbaa !507
  %366 = getelementptr inbounds float, float* %36, i64 %308
  %367 = extractelement <32 x float> %323, i64 21
  store float %367, float* %366, align 4, !tbaa !507
  %368 = getelementptr inbounds float, float* %36, i64 %309
  %369 = extractelement <32 x float> %323, i64 22
  store float %369, float* %368, align 4, !tbaa !507
  %370 = getelementptr inbounds float, float* %36, i64 %310
  %371 = extractelement <32 x float> %323, i64 23
  store float %371, float* %370, align 4, !tbaa !507
  %372 = getelementptr inbounds float, float* %36, i64 %311
  %373 = extractelement <32 x float> %323, i64 24
  store float %373, float* %372, align 4, !tbaa !507
  %374 = getelementptr inbounds float, float* %36, i64 %312
  %375 = extractelement <32 x float> %323, i64 25
  store float %375, float* %374, align 4, !tbaa !507
  %376 = getelementptr inbounds float, float* %36, i64 %313
  %377 = extractelement <32 x float> %323, i64 26
  store float %377, float* %376, align 4, !tbaa !507
  %378 = getelementptr inbounds float, float* %36, i64 %314
  %379 = extractelement <32 x float> %323, i64 27
  store float %379, float* %378, align 4, !tbaa !507
  %380 = getelementptr inbounds float, float* %36, i64 %315
  %381 = extractelement <32 x float> %323, i64 28
  store float %381, float* %380, align 4, !tbaa !507
  %382 = getelementptr inbounds float, float* %36, i64 %316
  %383 = extractelement <32 x float> %323, i64 29
  store float %383, float* %382, align 4, !tbaa !507
  %384 = getelementptr inbounds float, float* %36, i64 %317
  %385 = extractelement <32 x float> %323, i64 30
  store float %385, float* %384, align 4, !tbaa !507
  %386 = getelementptr inbounds float, float* %36, i64 %318
  %387 = extractelement <32 x float> %323, i64 31
  store float %387, float* %386, align 4, !tbaa !507
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond52 = icmp eq i64 %indvars.iv.next51, 7
  br i1 %exitcond52, label %for_end36, label %for_body35, !prof !5

for_end36:                                        ; preds = %for_body35
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond55 = icmp eq i64 %indvars.iv.next54, 4
  br i1 %exitcond55, label %for_end33, label %for_begin34.preheader, !prof !5

for_body26.1:                                     ; preds = %for_body26.1, %for_end27
  %indvars.iv.1 = phi i64 [ 0, %for_end27 ], [ %indvars.iv.next.1, %for_body26.1 ]
  %388 = phi <32 x float> [ %281, %for_end27 ], [ %474, %for_body26.1 ]
  %389 = phi <32 x float> [ %275, %for_end27 ], [ %468, %for_body26.1 ]
  %390 = phi <32 x float> [ %274, %for_end27 ], [ %467, %for_body26.1 ]
  %391 = phi <32 x float> [ %273, %for_end27 ], [ %466, %for_body26.1 ]
  %392 = phi <32 x float> [ %272, %for_end27 ], [ %465, %for_body26.1 ]
  %393 = phi <32 x float> [ %271, %for_end27 ], [ %464, %for_body26.1 ]
  %394 = phi <32 x float> [ %270, %for_end27 ], [ %463, %for_body26.1 ]
  %395 = mul nuw nsw i64 %indvars.iv.1, 30
  %396 = add nuw nsw i64 %282, %395
  %397 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %396
  %398 = load float, float* %397, align 4, !tbaa !501
  %399 = insertelement <32 x float> undef, float %398, i32 0
  %400 = shufflevector <32 x float> %399, <32 x float> undef, <32 x i32> zeroinitializer
  %401 = shl nsw i64 %indvars.iv.1, 5
  %402 = add nuw nsw i64 %184, %401
  %403 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %402
  %404 = bitcast float* %403 to <32 x float>*
  %405 = load <32 x float>, <32 x float>* %404, align 16, !tbaa !498
  %406 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %400, <32 x float> %405, <32 x float> %394)
  %407 = add nuw nsw i64 %396, 1
  %408 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %407
  %409 = load float, float* %408, align 4, !tbaa !501
  %410 = insertelement <32 x float> undef, float %409, i32 0
  %411 = shufflevector <32 x float> %410, <32 x float> undef, <32 x i32> zeroinitializer
  %412 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %411, <32 x float> %405, <32 x float> %393)
  %413 = add nuw nsw i64 %396, 2
  %414 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %413
  %415 = load float, float* %414, align 4, !tbaa !501
  %416 = insertelement <32 x float> undef, float %415, i32 0
  %417 = shufflevector <32 x float> %416, <32 x float> undef, <32 x i32> zeroinitializer
  %418 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %417, <32 x float> %405, <32 x float> %392)
  %419 = add nuw nsw i64 %396, 3
  %420 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %419
  %421 = load float, float* %420, align 4, !tbaa !501
  %422 = insertelement <32 x float> undef, float %421, i32 0
  %423 = shufflevector <32 x float> %422, <32 x float> undef, <32 x i32> zeroinitializer
  %424 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %423, <32 x float> %405, <32 x float> %391)
  %425 = add nuw nsw i64 %396, 4
  %426 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %425
  %427 = load float, float* %426, align 4, !tbaa !501
  %428 = insertelement <32 x float> undef, float %427, i32 0
  %429 = shufflevector <32 x float> %428, <32 x float> undef, <32 x i32> zeroinitializer
  %430 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %405, <32 x float> %390)
  %431 = add nuw nsw i64 %396, 5
  %432 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %431
  %433 = load float, float* %432, align 4, !tbaa !501
  %434 = insertelement <32 x float> undef, float %433, i32 0
  %435 = shufflevector <32 x float> %434, <32 x float> undef, <32 x i32> zeroinitializer
  %436 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %405, <32 x float> %389)
  %437 = add nuw nsw i64 %396, 6
  %438 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %437
  %439 = load float, float* %438, align 4, !tbaa !501
  %440 = insertelement <32 x float> undef, float %439, i32 0
  %441 = shufflevector <32 x float> %440, <32 x float> undef, <32 x i32> zeroinitializer
  %442 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %405, <32 x float> %388)
  %443 = add nuw nsw i64 %402, 4096
  %444 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %443
  %445 = bitcast float* %444 to <32 x float>*
  %446 = load <32 x float>, <32 x float>* %445, align 16, !tbaa !498
  %447 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %411, <32 x float> %446, <32 x float> %406)
  %448 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %417, <32 x float> %446, <32 x float> %412)
  %449 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %423, <32 x float> %446, <32 x float> %418)
  %450 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %446, <32 x float> %424)
  %451 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %446, <32 x float> %430)
  %452 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %446, <32 x float> %436)
  %453 = add nuw nsw i64 %396, 7
  %454 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %453
  %455 = load float, float* %454, align 4, !tbaa !501
  %456 = insertelement <32 x float> undef, float %455, i32 0
  %457 = shufflevector <32 x float> %456, <32 x float> undef, <32 x i32> zeroinitializer
  %458 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %457, <32 x float> %446, <32 x float> %442)
  %459 = add nuw nsw i64 %402, 8192
  %460 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %459
  %461 = bitcast float* %460 to <32 x float>*
  %462 = load <32 x float>, <32 x float>* %461, align 16, !tbaa !498
  %463 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %417, <32 x float> %462, <32 x float> %447)
  %464 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %423, <32 x float> %462, <32 x float> %448)
  %465 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %462, <32 x float> %449)
  %466 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %462, <32 x float> %450)
  %467 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %462, <32 x float> %451)
  %468 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %457, <32 x float> %462, <32 x float> %452)
  %469 = add nuw nsw i64 %396, 8
  %470 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %469
  %471 = load float, float* %470, align 4, !tbaa !501
  %472 = insertelement <32 x float> undef, float %471, i32 0
  %473 = shufflevector <32 x float> %472, <32 x float> undef, <32 x i32> zeroinitializer
  %474 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %473, <32 x float> %462, <32 x float> %458)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 128
  br i1 %exitcond.1, label %for_end27.1, label %for_body26.1, !prof !5

for_end27.1:                                      ; preds = %for_body26.1
  %475 = add nuw nsw i64 %193, %187
  br label %for_body26.2

for_body26.2:                                     ; preds = %for_body26.2, %for_end27.1
  %indvars.iv.2 = phi i64 [ 0, %for_end27.1 ], [ %indvars.iv.next.2, %for_body26.2 ]
  %476 = phi <32 x float> [ %474, %for_end27.1 ], [ %562, %for_body26.2 ]
  %477 = phi <32 x float> [ %468, %for_end27.1 ], [ %556, %for_body26.2 ]
  %478 = phi <32 x float> [ %467, %for_end27.1 ], [ %555, %for_body26.2 ]
  %479 = phi <32 x float> [ %466, %for_end27.1 ], [ %554, %for_body26.2 ]
  %480 = phi <32 x float> [ %465, %for_end27.1 ], [ %553, %for_body26.2 ]
  %481 = phi <32 x float> [ %464, %for_end27.1 ], [ %552, %for_body26.2 ]
  %482 = phi <32 x float> [ %463, %for_end27.1 ], [ %551, %for_body26.2 ]
  %483 = mul nuw nsw i64 %indvars.iv.2, 30
  %484 = add nuw nsw i64 %475, %483
  %485 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %484
  %486 = load float, float* %485, align 4, !tbaa !501
  %487 = insertelement <32 x float> undef, float %486, i32 0
  %488 = shufflevector <32 x float> %487, <32 x float> undef, <32 x i32> zeroinitializer
  %489 = shl nsw i64 %indvars.iv.2, 5
  %490 = add nuw nsw i64 %188, %489
  %491 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %490
  %492 = bitcast float* %491 to <32 x float>*
  %493 = load <32 x float>, <32 x float>* %492, align 16, !tbaa !498
  %494 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %488, <32 x float> %493, <32 x float> %482)
  %495 = add nuw nsw i64 %484, 1
  %496 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %495
  %497 = load float, float* %496, align 4, !tbaa !501
  %498 = insertelement <32 x float> undef, float %497, i32 0
  %499 = shufflevector <32 x float> %498, <32 x float> undef, <32 x i32> zeroinitializer
  %500 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %499, <32 x float> %493, <32 x float> %481)
  %501 = add nuw nsw i64 %484, 2
  %502 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %501
  %503 = load float, float* %502, align 4, !tbaa !501
  %504 = insertelement <32 x float> undef, float %503, i32 0
  %505 = shufflevector <32 x float> %504, <32 x float> undef, <32 x i32> zeroinitializer
  %506 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %505, <32 x float> %493, <32 x float> %480)
  %507 = add nuw nsw i64 %484, 3
  %508 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %507
  %509 = load float, float* %508, align 4, !tbaa !501
  %510 = insertelement <32 x float> undef, float %509, i32 0
  %511 = shufflevector <32 x float> %510, <32 x float> undef, <32 x i32> zeroinitializer
  %512 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %493, <32 x float> %479)
  %513 = add nuw nsw i64 %484, 4
  %514 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %513
  %515 = load float, float* %514, align 4, !tbaa !501
  %516 = insertelement <32 x float> undef, float %515, i32 0
  %517 = shufflevector <32 x float> %516, <32 x float> undef, <32 x i32> zeroinitializer
  %518 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %493, <32 x float> %478)
  %519 = add nuw nsw i64 %484, 5
  %520 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %519
  %521 = load float, float* %520, align 4, !tbaa !501
  %522 = insertelement <32 x float> undef, float %521, i32 0
  %523 = shufflevector <32 x float> %522, <32 x float> undef, <32 x i32> zeroinitializer
  %524 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %493, <32 x float> %477)
  %525 = add nuw nsw i64 %484, 6
  %526 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %525
  %527 = load float, float* %526, align 4, !tbaa !501
  %528 = insertelement <32 x float> undef, float %527, i32 0
  %529 = shufflevector <32 x float> %528, <32 x float> undef, <32 x i32> zeroinitializer
  %530 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %493, <32 x float> %476)
  %531 = add nuw nsw i64 %490, 4096
  %532 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %531
  %533 = bitcast float* %532 to <32 x float>*
  %534 = load <32 x float>, <32 x float>* %533, align 16, !tbaa !498
  %535 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %499, <32 x float> %534, <32 x float> %494)
  %536 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %505, <32 x float> %534, <32 x float> %500)
  %537 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %534, <32 x float> %506)
  %538 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %534, <32 x float> %512)
  %539 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %534, <32 x float> %518)
  %540 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %534, <32 x float> %524)
  %541 = add nuw nsw i64 %484, 7
  %542 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %541
  %543 = load float, float* %542, align 4, !tbaa !501
  %544 = insertelement <32 x float> undef, float %543, i32 0
  %545 = shufflevector <32 x float> %544, <32 x float> undef, <32 x i32> zeroinitializer
  %546 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %545, <32 x float> %534, <32 x float> %530)
  %547 = add nuw nsw i64 %490, 8192
  %548 = getelementptr inbounds [4608 x <32 x float>], [4608 x <32 x float>]* %5, i64 0, i64 0, i64 %547
  %549 = bitcast float* %548 to <32 x float>*
  %550 = load <32 x float>, <32 x float>* %549, align 16, !tbaa !498
  %551 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %505, <32 x float> %550, <32 x float> %535)
  %552 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %550, <32 x float> %536)
  %553 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %550, <32 x float> %537)
  %554 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %550, <32 x float> %538)
  %555 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %550, <32 x float> %539)
  %556 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %545, <32 x float> %550, <32 x float> %540)
  %557 = add nuw nsw i64 %484, 8
  %558 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %557
  %559 = load float, float* %558, align 4, !tbaa !501
  %560 = insertelement <32 x float> undef, float %559, i32 0
  %561 = shufflevector <32 x float> %560, <32 x float> undef, <32 x i32> zeroinitializer
  %562 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %561, <32 x float> %550, <32 x float> %546)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 128
  br i1 %exitcond.2, label %for_end27.2, label %for_body26.2, !prof !5

for_end27.2:                                      ; preds = %for_body26.2
  store <32 x float> %551, <32 x float>* %.sub, align 128, !tbaa !510
  store <32 x float> %552, <32 x float>* %25, align 128, !tbaa !510
  store <32 x float> %553, <32 x float>* %27, align 128, !tbaa !510
  store <32 x float> %554, <32 x float>* %29, align 128, !tbaa !510
  store <32 x float> %555, <32 x float>* %31, align 128, !tbaa !510
  store <32 x float> %556, <32 x float>* %33, align 128, !tbaa !510
  store <32 x float> %562, <32 x float>* %35, align 128, !tbaa !510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep48, i8* nonnull align 128 %14, i64 896, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond49 = icmp eq i64 %indvar.next, 4
  br i1 %exitcond49, label %for_begin31.preheader, label %for_body20, !prof !5

if_end.us.us.29:                                  ; preds = %for_begin1.preheader, %if_end.us.us.29
  %indvars.iv81 = phi i64 [ %indvars.iv.next82, %if_end.us.us.29 ], [ 0, %for_begin1.preheader ]
  %563 = mul nuw nsw i64 %indvars.iv81, 30
  %564 = add nuw nsw i64 %563, %8
  %565 = mul nuw nsw i64 %indvars.iv81, 784
  %566 = add nsw i64 %13, %565
  %567 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %564
  store float 0.000000e+00, float* %567, align 8, !tbaa !501
  %568 = or i64 %564, 1
  %569 = add nsw i64 %566, 1
  %570 = getelementptr inbounds float, float* %7, i64 %569
  %571 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %568
  %572 = bitcast float* %570 to <4 x i32>*
  %573 = load <4 x i32>, <4 x i32>* %572, align 4, !tbaa !519
  %574 = bitcast float* %571 to <4 x i32>*
  store <4 x i32> %573, <4 x i32>* %574, align 4, !tbaa !501
  %575 = add nuw nsw i64 %564, 5
  %576 = add nsw i64 %566, 5
  %577 = getelementptr inbounds float, float* %7, i64 %576
  %578 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %575
  %579 = bitcast float* %577 to <4 x i32>*
  %580 = load <4 x i32>, <4 x i32>* %579, align 4, !tbaa !519
  %581 = bitcast float* %578 to <4 x i32>*
  store <4 x i32> %580, <4 x i32>* %581, align 4, !tbaa !501
  %582 = add nuw nsw i64 %564, 9
  %583 = add nsw i64 %566, 9
  %584 = getelementptr inbounds float, float* %7, i64 %583
  %585 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %582
  %586 = bitcast float* %584 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 4, !tbaa !519
  %588 = bitcast float* %585 to <4 x i32>*
  store <4 x i32> %587, <4 x i32>* %588, align 4, !tbaa !501
  %589 = add nuw nsw i64 %564, 13
  %590 = add nsw i64 %566, 13
  %591 = getelementptr inbounds float, float* %7, i64 %590
  %592 = bitcast float* %591 to i32*
  %593 = load i32, i32* %592, align 4, !tbaa !519
  %594 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %589
  %595 = bitcast float* %594 to i32*
  store i32 %593, i32* %595, align 4, !tbaa !501
  %596 = add nuw nsw i64 %564, 14
  %597 = add nsw i64 %566, 14
  %598 = getelementptr inbounds float, float* %7, i64 %597
  %599 = bitcast float* %598 to i32*
  %600 = load i32, i32* %599, align 4, !tbaa !519
  %601 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %596
  %602 = bitcast float* %601 to i32*
  store i32 %600, i32* %602, align 8, !tbaa !501
  %603 = add nuw nsw i64 %564, 15
  %604 = add nsw i64 %566, 15
  %605 = getelementptr inbounds float, float* %7, i64 %604
  %606 = bitcast float* %605 to i32*
  %607 = load i32, i32* %606, align 4, !tbaa !519
  %608 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %603
  %609 = bitcast float* %608 to i32*
  store i32 %607, i32* %609, align 4, !tbaa !501
  %610 = add nuw nsw i64 %564, 16
  %611 = add nsw i64 %566, 16
  %612 = getelementptr inbounds float, float* %7, i64 %611
  %613 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %610
  %614 = bitcast float* %612 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !tbaa !519
  %616 = bitcast float* %613 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %616, align 8, !tbaa !501
  %617 = add nuw nsw i64 %564, 20
  %618 = add nsw i64 %566, 20
  %619 = getelementptr inbounds float, float* %7, i64 %618
  %620 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %617
  %621 = bitcast float* %619 to <4 x i32>*
  %622 = load <4 x i32>, <4 x i32>* %621, align 4, !tbaa !519
  %623 = bitcast float* %620 to <4 x i32>*
  store <4 x i32> %622, <4 x i32>* %623, align 8, !tbaa !501
  %624 = add nuw nsw i64 %564, 24
  %625 = add nsw i64 %566, 24
  %626 = getelementptr inbounds float, float* %7, i64 %625
  %627 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %624
  %628 = bitcast float* %626 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4, !tbaa !519
  %630 = bitcast float* %627 to <4 x i32>*
  store <4 x i32> %629, <4 x i32>* %630, align 8, !tbaa !501
  %631 = add nuw nsw i64 %564, 28
  %632 = add nsw i64 %566, 28
  %633 = getelementptr inbounds float, float* %7, i64 %632
  %634 = bitcast float* %633 to i32*
  %635 = load i32, i32* %634, align 4, !tbaa !519
  %636 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %631
  %637 = bitcast float* %636 to i32*
  store i32 %635, i32* %637, align 8, !tbaa !501
  %638 = add nuw nsw i64 %564, 29
  %639 = getelementptr inbounds [115200 x float], [115200 x float]* %6, i64 0, i64 %638
  store float 0.000000e+00, float* %639, align 4, !tbaa !501
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %exitcond83 = icmp eq i64 %indvars.iv.next82, 128
  br i1 %exitcond83, label %for_end3, label %if_end.us.us.29, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_2_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 512, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !522
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !522
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !525
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !525
  %14 = fadd <4 x float> %wide.load, %wide.load3
  %15 = fadd <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !528
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !528
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 1000
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !531

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_4_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !532
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !535
  %21 = fadd <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !538
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !535
  %28 = fadd <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !538
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !535
  %35 = fadd <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !538
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !535
  %40 = fadd float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !538
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !535
  %45 = fadd float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !538
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 256
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_global_avg_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_global_avg_pool2d_compute_(i8* %9, i8* %11)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_global_avg_pool2d_compute_(i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #4 {
entry:
  %2 = alloca [2048 x float], align 16
  %3 = bitcast i8* %0 to float*
  br label %for_body

for_begin7.preheader:                             ; preds = %for_body
  %4 = bitcast i8* %1 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %for_begin7.preheader
  %index = phi i64 [ 0, %for_begin7.preheader ], [ %index.next, %vector.body ]
  %5 = getelementptr inbounds [2048 x float], [2048 x float]* %2, i64 0, i64 %index
  %6 = bitcast float* %5 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %6, align 16, !tbaa !541
  %7 = getelementptr inbounds float, float* %5, i64 4
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load13 = load <4 x float>, <4 x float>* %8, align 16, !tbaa !541
  %9 = fmul <4 x float> %wide.load, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %10 = fmul <4 x float> %wide.load13, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %11 = getelementptr inbounds float, float* %4, i64 %index
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> %9, <4 x float>* %12, align 4, !tbaa !544
  %13 = getelementptr inbounds float, float* %11, i64 4
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %10, <4 x float>* %14, align 4, !tbaa !544
  %index.next = add i64 %index, 8
  %15 = icmp eq i64 %index.next, 2048
  br i1 %15, label %for_end9, label %vector.body, !llvm.loop !547

for_body:                                         ; preds = %for_body, %entry
  %indvars.iv9 = phi i64 [ 0, %entry ], [ %indvars.iv.next10, %for_body ]
  %16 = getelementptr inbounds [2048 x float], [2048 x float]* %2, i64 0, i64 %indvars.iv9
  store float 0.000000e+00, float* %16, align 4, !tbaa !541
  %17 = mul nuw nsw i64 %indvars.iv9, 49
  %18 = getelementptr inbounds float, float* %3, i64 %17
  %19 = load float, float* %18, align 4, !tbaa !548
  %20 = fadd float %19, 0.000000e+00
  %21 = add nuw nsw i64 %17, 1
  %22 = getelementptr inbounds float, float* %3, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !548
  %24 = fadd float %23, %20
  %25 = add nuw nsw i64 %17, 2
  %26 = getelementptr inbounds float, float* %3, i64 %25
  %27 = load float, float* %26, align 4, !tbaa !548
  %28 = fadd float %27, %24
  %29 = add nuw nsw i64 %17, 3
  %30 = getelementptr inbounds float, float* %3, i64 %29
  %31 = load float, float* %30, align 4, !tbaa !548
  %32 = fadd float %31, %28
  %33 = add nuw nsw i64 %17, 4
  %34 = getelementptr inbounds float, float* %3, i64 %33
  %35 = load float, float* %34, align 4, !tbaa !548
  %36 = fadd float %35, %32
  %37 = add nuw nsw i64 %17, 5
  %38 = getelementptr inbounds float, float* %3, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !548
  %40 = fadd float %39, %36
  %41 = add nuw nsw i64 %17, 6
  %42 = getelementptr inbounds float, float* %3, i64 %41
  %43 = load float, float* %42, align 4, !tbaa !548
  %44 = fadd float %43, %40
  %45 = add nuw nsw i64 %17, 7
  %46 = getelementptr inbounds float, float* %3, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !548
  %48 = fadd float %47, %44
  %49 = add nuw nsw i64 %17, 8
  %50 = getelementptr inbounds float, float* %3, i64 %49
  %51 = load float, float* %50, align 4, !tbaa !548
  %52 = fadd float %51, %48
  %53 = add nuw nsw i64 %17, 9
  %54 = getelementptr inbounds float, float* %3, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !548
  %56 = fadd float %55, %52
  %57 = add nuw nsw i64 %17, 10
  %58 = getelementptr inbounds float, float* %3, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !548
  %60 = fadd float %59, %56
  %61 = add nuw nsw i64 %17, 11
  %62 = getelementptr inbounds float, float* %3, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !548
  %64 = fadd float %63, %60
  %65 = add nuw nsw i64 %17, 12
  %66 = getelementptr inbounds float, float* %3, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !548
  %68 = fadd float %67, %64
  %69 = add nuw nsw i64 %17, 13
  %70 = getelementptr inbounds float, float* %3, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !548
  %72 = fadd float %71, %68
  %73 = add nuw nsw i64 %17, 14
  %74 = getelementptr inbounds float, float* %3, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !548
  %76 = fadd float %75, %72
  %77 = add nuw nsw i64 %17, 15
  %78 = getelementptr inbounds float, float* %3, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !548
  %80 = fadd float %79, %76
  %81 = add nuw nsw i64 %17, 16
  %82 = getelementptr inbounds float, float* %3, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !548
  %84 = fadd float %83, %80
  %85 = add nuw nsw i64 %17, 17
  %86 = getelementptr inbounds float, float* %3, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !548
  %88 = fadd float %87, %84
  %89 = add nuw nsw i64 %17, 18
  %90 = getelementptr inbounds float, float* %3, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !548
  %92 = fadd float %91, %88
  %93 = add nuw nsw i64 %17, 19
  %94 = getelementptr inbounds float, float* %3, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !548
  %96 = fadd float %95, %92
  %97 = add nuw nsw i64 %17, 20
  %98 = getelementptr inbounds float, float* %3, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !548
  %100 = fadd float %99, %96
  %101 = add nuw nsw i64 %17, 21
  %102 = getelementptr inbounds float, float* %3, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !548
  %104 = fadd float %103, %100
  %105 = add nuw nsw i64 %17, 22
  %106 = getelementptr inbounds float, float* %3, i64 %105
  %107 = load float, float* %106, align 4, !tbaa !548
  %108 = fadd float %107, %104
  %109 = add nuw nsw i64 %17, 23
  %110 = getelementptr inbounds float, float* %3, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !548
  %112 = fadd float %111, %108
  %113 = add nuw nsw i64 %17, 24
  %114 = getelementptr inbounds float, float* %3, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !548
  %116 = fadd float %115, %112
  %117 = add nuw nsw i64 %17, 25
  %118 = getelementptr inbounds float, float* %3, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !548
  %120 = fadd float %119, %116
  %121 = add nuw nsw i64 %17, 26
  %122 = getelementptr inbounds float, float* %3, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !548
  %124 = fadd float %123, %120
  %125 = add nuw nsw i64 %17, 27
  %126 = getelementptr inbounds float, float* %3, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !548
  %128 = fadd float %127, %124
  %129 = add nuw nsw i64 %17, 28
  %130 = getelementptr inbounds float, float* %3, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !548
  %132 = fadd float %131, %128
  %133 = add nuw nsw i64 %17, 29
  %134 = getelementptr inbounds float, float* %3, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !548
  %136 = fadd float %135, %132
  %137 = add nuw nsw i64 %17, 30
  %138 = getelementptr inbounds float, float* %3, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !548
  %140 = fadd float %139, %136
  %141 = add nuw nsw i64 %17, 31
  %142 = getelementptr inbounds float, float* %3, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !548
  %144 = fadd float %143, %140
  %145 = add nuw nsw i64 %17, 32
  %146 = getelementptr inbounds float, float* %3, i64 %145
  %147 = load float, float* %146, align 4, !tbaa !548
  %148 = fadd float %147, %144
  %149 = add nuw nsw i64 %17, 33
  %150 = getelementptr inbounds float, float* %3, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !548
  %152 = fadd float %151, %148
  %153 = add nuw nsw i64 %17, 34
  %154 = getelementptr inbounds float, float* %3, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !548
  %156 = fadd float %155, %152
  %157 = add nuw nsw i64 %17, 35
  %158 = getelementptr inbounds float, float* %3, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !548
  %160 = fadd float %159, %156
  %161 = add nuw nsw i64 %17, 36
  %162 = getelementptr inbounds float, float* %3, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !548
  %164 = fadd float %163, %160
  %165 = add nuw nsw i64 %17, 37
  %166 = getelementptr inbounds float, float* %3, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !548
  %168 = fadd float %167, %164
  %169 = add nuw nsw i64 %17, 38
  %170 = getelementptr inbounds float, float* %3, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !548
  %172 = fadd float %171, %168
  %173 = add nuw nsw i64 %17, 39
  %174 = getelementptr inbounds float, float* %3, i64 %173
  %175 = load float, float* %174, align 4, !tbaa !548
  %176 = fadd float %175, %172
  %177 = add nuw nsw i64 %17, 40
  %178 = getelementptr inbounds float, float* %3, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !548
  %180 = fadd float %179, %176
  %181 = add nuw nsw i64 %17, 41
  %182 = getelementptr inbounds float, float* %3, i64 %181
  %183 = load float, float* %182, align 4, !tbaa !548
  %184 = fadd float %183, %180
  %185 = add nuw nsw i64 %17, 42
  %186 = getelementptr inbounds float, float* %3, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !548
  %188 = fadd float %187, %184
  %189 = add nuw nsw i64 %17, 43
  %190 = getelementptr inbounds float, float* %3, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !548
  %192 = fadd float %191, %188
  %193 = add nuw nsw i64 %17, 44
  %194 = getelementptr inbounds float, float* %3, i64 %193
  %195 = load float, float* %194, align 4, !tbaa !548
  %196 = fadd float %195, %192
  %197 = add nuw nsw i64 %17, 45
  %198 = getelementptr inbounds float, float* %3, i64 %197
  %199 = load float, float* %198, align 4, !tbaa !548
  %200 = fadd float %199, %196
  %201 = add nuw nsw i64 %17, 46
  %202 = getelementptr inbounds float, float* %3, i64 %201
  %203 = load float, float* %202, align 4, !tbaa !548
  %204 = fadd float %203, %200
  %205 = add nuw nsw i64 %17, 47
  %206 = getelementptr inbounds float, float* %3, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !548
  %208 = fadd float %207, %204
  %209 = add nuw nsw i64 %17, 48
  %210 = getelementptr inbounds float, float* %3, i64 %209
  %211 = load float, float* %210, align 4, !tbaa !548
  %212 = fadd float %211, %208
  store float %212, float* %16, align 4, !tbaa !541
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %exitcond11 = icmp eq i64 %indvars.iv.next10, 2048
  br i1 %exitcond11, label %for_begin7.preheader, label %for_body, !prof !5

for_end9:                                         ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %4 = mul nuw nsw i64 %indvars.iv, 49
  %5 = getelementptr inbounds float, float* %2, i64 %4
  %6 = getelementptr inbounds float, float* %3, i64 %4
  %7 = bitcast float* %5 to <4 x float>*
  %8 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !551
  %9 = fcmp ogt <4 x float> %8, zeroinitializer
  %10 = select <4 x i1> %9, <4 x float> %8, <4 x float> zeroinitializer
  %11 = bitcast float* %6 to <4 x float>*
  store <4 x float> %10, <4 x float>* %11, align 4, !tbaa !554
  %12 = add nuw nsw i64 %4, 4
  %13 = getelementptr inbounds float, float* %2, i64 %12
  %14 = getelementptr inbounds float, float* %3, i64 %12
  %15 = bitcast float* %13 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !551
  %17 = fcmp ogt <4 x float> %16, zeroinitializer
  %18 = select <4 x i1> %17, <4 x float> %16, <4 x float> zeroinitializer
  %19 = bitcast float* %14 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 4, !tbaa !554
  %20 = add nuw nsw i64 %4, 8
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = getelementptr inbounds float, float* %3, i64 %20
  %23 = bitcast float* %21 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !551
  %25 = fcmp ogt <4 x float> %24, zeroinitializer
  %26 = select <4 x i1> %25, <4 x float> %24, <4 x float> zeroinitializer
  %27 = bitcast float* %22 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !554
  %28 = add nuw nsw i64 %4, 12
  %29 = getelementptr inbounds float, float* %2, i64 %28
  %30 = getelementptr inbounds float, float* %3, i64 %28
  %31 = bitcast float* %29 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !551
  %33 = fcmp ogt <4 x float> %32, zeroinitializer
  %34 = select <4 x i1> %33, <4 x float> %32, <4 x float> zeroinitializer
  %35 = bitcast float* %30 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 4, !tbaa !554
  %36 = add nuw nsw i64 %4, 16
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = getelementptr inbounds float, float* %3, i64 %36
  %39 = bitcast float* %37 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4, !tbaa !551
  %41 = fcmp ogt <4 x float> %40, zeroinitializer
  %42 = select <4 x i1> %41, <4 x float> %40, <4 x float> zeroinitializer
  %43 = bitcast float* %38 to <4 x float>*
  store <4 x float> %42, <4 x float>* %43, align 4, !tbaa !554
  %44 = add nuw nsw i64 %4, 20
  %45 = getelementptr inbounds float, float* %2, i64 %44
  %46 = getelementptr inbounds float, float* %3, i64 %44
  %47 = bitcast float* %45 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !551
  %49 = fcmp ogt <4 x float> %48, zeroinitializer
  %50 = select <4 x i1> %49, <4 x float> %48, <4 x float> zeroinitializer
  %51 = bitcast float* %46 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !554
  %52 = add nuw nsw i64 %4, 24
  %53 = getelementptr inbounds float, float* %2, i64 %52
  %54 = getelementptr inbounds float, float* %3, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !551
  %57 = fcmp ogt <4 x float> %56, zeroinitializer
  %58 = select <4 x i1> %57, <4 x float> %56, <4 x float> zeroinitializer
  %59 = bitcast float* %54 to <4 x float>*
  store <4 x float> %58, <4 x float>* %59, align 4, !tbaa !554
  %60 = add nuw nsw i64 %4, 28
  %61 = getelementptr inbounds float, float* %2, i64 %60
  %62 = getelementptr inbounds float, float* %3, i64 %60
  %63 = bitcast float* %61 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !551
  %65 = fcmp ogt <4 x float> %64, zeroinitializer
  %66 = select <4 x i1> %65, <4 x float> %64, <4 x float> zeroinitializer
  %67 = bitcast float* %62 to <4 x float>*
  store <4 x float> %66, <4 x float>* %67, align 4, !tbaa !554
  %68 = add nuw nsw i64 %4, 32
  %69 = getelementptr inbounds float, float* %2, i64 %68
  %70 = getelementptr inbounds float, float* %3, i64 %68
  %71 = bitcast float* %69 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !551
  %73 = fcmp ogt <4 x float> %72, zeroinitializer
  %74 = select <4 x i1> %73, <4 x float> %72, <4 x float> zeroinitializer
  %75 = bitcast float* %70 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !554
  %76 = add nuw nsw i64 %4, 36
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = getelementptr inbounds float, float* %3, i64 %76
  %79 = bitcast float* %77 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4, !tbaa !551
  %81 = fcmp ogt <4 x float> %80, zeroinitializer
  %82 = select <4 x i1> %81, <4 x float> %80, <4 x float> zeroinitializer
  %83 = bitcast float* %78 to <4 x float>*
  store <4 x float> %82, <4 x float>* %83, align 4, !tbaa !554
  %84 = add nuw nsw i64 %4, 40
  %85 = getelementptr inbounds float, float* %2, i64 %84
  %86 = getelementptr inbounds float, float* %3, i64 %84
  %87 = bitcast float* %85 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !551
  %89 = fcmp ogt <4 x float> %88, zeroinitializer
  %90 = select <4 x i1> %89, <4 x float> %88, <4 x float> zeroinitializer
  %91 = bitcast float* %86 to <4 x float>*
  store <4 x float> %90, <4 x float>* %91, align 4, !tbaa !554
  %92 = add nuw nsw i64 %4, 44
  %93 = getelementptr inbounds float, float* %2, i64 %92
  %94 = getelementptr inbounds float, float* %3, i64 %92
  %95 = bitcast float* %93 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 4, !tbaa !551
  %97 = fcmp ogt <4 x float> %96, zeroinitializer
  %98 = select <4 x i1> %97, <4 x float> %96, <4 x float> zeroinitializer
  %99 = bitcast float* %94 to <4 x float>*
  store <4 x float> %98, <4 x float>* %99, align 4, !tbaa !554
  %100 = add nuw nsw i64 %4, 48
  %101 = getelementptr inbounds float, float* %2, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !551
  %103 = fcmp ogt float %102, 0.000000e+00
  %104 = select i1 %103, float %102, float 0.000000e+00
  %105 = getelementptr inbounds float, float* %3, i64 %100
  store float %104, float* %105, align 4, !tbaa !554
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2048
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_8(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_8_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_8_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !557
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !560
  %13 = fadd <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !563
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !560
  %19 = fadd <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !563
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !560
  %25 = fadd <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !563
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !560
  %31 = fadd <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !563
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !560
  %37 = fadd <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !563
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !560
  %43 = fadd <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !563
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !560
  %49 = fadd <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !563
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !560
  %55 = fadd <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !563
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !560
  %61 = fadd <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !563
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !560
  %67 = fadd <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !563
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !560
  %73 = fadd <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !563
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !560
  %79 = fadd <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !563
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !560
  %85 = fadd <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !563
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !560
  %91 = fadd <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !563
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_4_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !566
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !569
  %21 = fmul <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !572
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !569
  %28 = fmul <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !572
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !569
  %35 = fmul <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !572
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !569
  %40 = fmul float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !572
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !569
  %45 = fmul float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !572
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 256
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_14(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_14_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_14_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %6 = getelementptr inbounds float, float* %3, i64 %index
  %7 = bitcast float* %6 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %7, align 4, !tbaa !575
  %8 = getelementptr inbounds float, float* %6, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !575
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !578
  %12 = getelementptr inbounds float, float* %10, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !578
  %14 = fmul <4 x float> %wide.load, %wide.load3
  %15 = fmul <4 x float> %wide.load2, %wide.load4
  %16 = getelementptr inbounds float, float* %5, i64 %index
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !581
  %18 = getelementptr inbounds float, float* %16, i64 4
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !581
  %index.next = add i64 %index, 8
  %20 = icmp eq i64 %index.next, 1024
  br i1 %20, label %for_end, label %vector.body, !llvm.loop !584

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_3_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_3_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [16384 x <32 x float>], align 16
  %5 = alloca [173056 x float], align 16
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = phi i32 [ 0, %entry ], [ %20, %for_end3 ]
  %7 = mul nuw nsw i64 %indvar, 6656
  %8 = urem i32 %6, 13
  %9 = mul nuw nsw i32 %8, 14
  %10 = udiv i32 %6, 13
  %11 = mul nsw i32 %10, 100352
  %12 = or i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %15 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar52 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next53, %for_begin4.preheader ]
  %16 = mul nuw nsw i64 %indvar52, 13
  %17 = add nuw nsw i64 %7, %16
  %scevgep = getelementptr [173056 x float], [173056 x float]* %5, i64 0, i64 %17
  %scevgep54 = bitcast float* %scevgep to i8*
  %18 = mul nuw nsw i64 %indvar52, 784
  %19 = add nuw nsw i64 %14, %18
  %scevgep55 = getelementptr i8, i8* %0, i64 %19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep54, i8* align 4 %scevgep55, i64 52, i1 false)
  %indvar.next53 = add nuw nsw i64 %indvar52, 1
  %exitcond56 = icmp eq i64 %indvar.next53, 512
  br i1 %exitcond56, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %20 = add nuw nsw i32 %6, 1
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond57 = icmp eq i64 %indvar.next, 26
  br i1 %exitcond57, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end15.1, %for_begin7.preheader
  %indvars.iv46 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next47, %for_end15.1 ]
  %21 = shl nsw i64 %indvars.iv46, 15
  br label %for_body14

for_begin16.preheader:                            ; preds = %for_end15.1
  %22 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %23 = bitcast float* %22 to <32 x float>*
  %24 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %25 = bitcast float* %24 to <32 x float>*
  %26 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %27 = bitcast float* %26 to <32 x float>*
  %28 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %29 = bitcast float* %28 to <32 x float>*
  %30 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %31 = bitcast float* %30 to <32 x float>*
  %32 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %33 = bitcast float* %32 to <32 x float>*
  %34 = bitcast i8* %2 to float*
  %35 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body17

for_body14:                                       ; preds = %for_body14, %for_begin10.preheader
  %indvars.iv40 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next41, %for_body14 ]
  %36 = shl i64 %indvars.iv40, 5
  %37 = add nuw nsw i64 %21, %36
  %38 = add nuw nsw i64 %21, %indvars.iv40
  %39 = add nuw nsw i64 %38, 1024
  %40 = add nuw nsw i64 %38, 2048
  %41 = add nuw nsw i64 %38, 3072
  %42 = add nuw nsw i64 %38, 4096
  %43 = add nuw nsw i64 %38, 5120
  %44 = add nuw nsw i64 %38, 6144
  %45 = add nuw nsw i64 %38, 7168
  %46 = add nuw nsw i64 %38, 8192
  %47 = add nuw nsw i64 %38, 9216
  %48 = add nuw nsw i64 %38, 10240
  %49 = add nuw nsw i64 %38, 11264
  %50 = add nuw nsw i64 %38, 12288
  %51 = add nuw nsw i64 %38, 13312
  %52 = add nuw nsw i64 %38, 14336
  %53 = add nuw nsw i64 %38, 15360
  %54 = add nuw nsw i64 %38, 16384
  %55 = add nuw nsw i64 %38, 17408
  %56 = add nuw nsw i64 %38, 18432
  %57 = add nuw nsw i64 %38, 19456
  %58 = add nuw nsw i64 %38, 20480
  %59 = add nuw nsw i64 %38, 21504
  %60 = add nuw nsw i64 %38, 22528
  %61 = add nuw nsw i64 %38, 23552
  %62 = add nuw nsw i64 %38, 24576
  %63 = add nuw nsw i64 %38, 25600
  %64 = add nuw nsw i64 %38, 26624
  %65 = add nuw nsw i64 %38, 27648
  %66 = add nuw nsw i64 %38, 28672
  %67 = add nuw nsw i64 %38, 29696
  %68 = add nuw nsw i64 %38, 30720
  %69 = add nuw nsw i64 %38, 31744
  %70 = getelementptr inbounds float, float* %15, i64 %38
  %71 = load float, float* %70, align 4, !tbaa !585
  %72 = insertelement <32 x float> undef, float %71, i32 0
  %73 = getelementptr inbounds float, float* %15, i64 %39
  %74 = load float, float* %73, align 4, !tbaa !585
  %75 = insertelement <32 x float> %72, float %74, i32 1
  %76 = getelementptr inbounds float, float* %15, i64 %40
  %77 = load float, float* %76, align 4, !tbaa !585
  %78 = insertelement <32 x float> %75, float %77, i32 2
  %79 = getelementptr inbounds float, float* %15, i64 %41
  %80 = load float, float* %79, align 4, !tbaa !585
  %81 = insertelement <32 x float> %78, float %80, i32 3
  %82 = getelementptr inbounds float, float* %15, i64 %42
  %83 = load float, float* %82, align 4, !tbaa !585
  %84 = insertelement <32 x float> %81, float %83, i32 4
  %85 = getelementptr inbounds float, float* %15, i64 %43
  %86 = load float, float* %85, align 4, !tbaa !585
  %87 = insertelement <32 x float> %84, float %86, i32 5
  %88 = getelementptr inbounds float, float* %15, i64 %44
  %89 = load float, float* %88, align 4, !tbaa !585
  %90 = insertelement <32 x float> %87, float %89, i32 6
  %91 = getelementptr inbounds float, float* %15, i64 %45
  %92 = load float, float* %91, align 4, !tbaa !585
  %93 = insertelement <32 x float> %90, float %92, i32 7
  %94 = getelementptr inbounds float, float* %15, i64 %46
  %95 = load float, float* %94, align 4, !tbaa !585
  %96 = insertelement <32 x float> %93, float %95, i32 8
  %97 = getelementptr inbounds float, float* %15, i64 %47
  %98 = load float, float* %97, align 4, !tbaa !585
  %99 = insertelement <32 x float> %96, float %98, i32 9
  %100 = getelementptr inbounds float, float* %15, i64 %48
  %101 = load float, float* %100, align 4, !tbaa !585
  %102 = insertelement <32 x float> %99, float %101, i32 10
  %103 = getelementptr inbounds float, float* %15, i64 %49
  %104 = load float, float* %103, align 4, !tbaa !585
  %105 = insertelement <32 x float> %102, float %104, i32 11
  %106 = getelementptr inbounds float, float* %15, i64 %50
  %107 = load float, float* %106, align 4, !tbaa !585
  %108 = insertelement <32 x float> %105, float %107, i32 12
  %109 = getelementptr inbounds float, float* %15, i64 %51
  %110 = load float, float* %109, align 4, !tbaa !585
  %111 = insertelement <32 x float> %108, float %110, i32 13
  %112 = getelementptr inbounds float, float* %15, i64 %52
  %113 = load float, float* %112, align 4, !tbaa !585
  %114 = insertelement <32 x float> %111, float %113, i32 14
  %115 = getelementptr inbounds float, float* %15, i64 %53
  %116 = load float, float* %115, align 4, !tbaa !585
  %117 = insertelement <32 x float> %114, float %116, i32 15
  %118 = getelementptr inbounds float, float* %15, i64 %54
  %119 = load float, float* %118, align 4, !tbaa !585
  %120 = insertelement <32 x float> %117, float %119, i32 16
  %121 = getelementptr inbounds float, float* %15, i64 %55
  %122 = load float, float* %121, align 4, !tbaa !585
  %123 = insertelement <32 x float> %120, float %122, i32 17
  %124 = getelementptr inbounds float, float* %15, i64 %56
  %125 = load float, float* %124, align 4, !tbaa !585
  %126 = insertelement <32 x float> %123, float %125, i32 18
  %127 = getelementptr inbounds float, float* %15, i64 %57
  %128 = load float, float* %127, align 4, !tbaa !585
  %129 = insertelement <32 x float> %126, float %128, i32 19
  %130 = getelementptr inbounds float, float* %15, i64 %58
  %131 = load float, float* %130, align 4, !tbaa !585
  %132 = insertelement <32 x float> %129, float %131, i32 20
  %133 = getelementptr inbounds float, float* %15, i64 %59
  %134 = load float, float* %133, align 4, !tbaa !585
  %135 = insertelement <32 x float> %132, float %134, i32 21
  %136 = getelementptr inbounds float, float* %15, i64 %60
  %137 = load float, float* %136, align 4, !tbaa !585
  %138 = insertelement <32 x float> %135, float %137, i32 22
  %139 = getelementptr inbounds float, float* %15, i64 %61
  %140 = load float, float* %139, align 4, !tbaa !585
  %141 = insertelement <32 x float> %138, float %140, i32 23
  %142 = getelementptr inbounds float, float* %15, i64 %62
  %143 = load float, float* %142, align 4, !tbaa !585
  %144 = insertelement <32 x float> %141, float %143, i32 24
  %145 = getelementptr inbounds float, float* %15, i64 %63
  %146 = load float, float* %145, align 4, !tbaa !585
  %147 = insertelement <32 x float> %144, float %146, i32 25
  %148 = getelementptr inbounds float, float* %15, i64 %64
  %149 = load float, float* %148, align 4, !tbaa !585
  %150 = insertelement <32 x float> %147, float %149, i32 26
  %151 = getelementptr inbounds float, float* %15, i64 %65
  %152 = load float, float* %151, align 4, !tbaa !585
  %153 = insertelement <32 x float> %150, float %152, i32 27
  %154 = getelementptr inbounds float, float* %15, i64 %66
  %155 = load float, float* %154, align 4, !tbaa !585
  %156 = insertelement <32 x float> %153, float %155, i32 28
  %157 = getelementptr inbounds float, float* %15, i64 %67
  %158 = load float, float* %157, align 4, !tbaa !585
  %159 = insertelement <32 x float> %156, float %158, i32 29
  %160 = getelementptr inbounds float, float* %15, i64 %68
  %161 = load float, float* %160, align 4, !tbaa !585
  %162 = insertelement <32 x float> %159, float %161, i32 30
  %163 = getelementptr inbounds float, float* %15, i64 %69
  %164 = load float, float* %163, align 4, !tbaa !585
  %165 = insertelement <32 x float> %162, float %164, i32 31
  %166 = getelementptr inbounds [16384 x <32 x float>], [16384 x <32 x float>]* %4, i64 0, i64 0, i64 %37
  %167 = bitcast float* %166 to <32 x float>*
  store <32 x float> %165, <32 x float>* %167, align 16, !tbaa !588
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 512
  br i1 %exitcond42, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %168 = or i64 %21, 16384
  %169 = or i64 %21, 512
  br label %for_body14.1

for_body17:                                       ; preds = %for_end27, %for_begin16.preheader
  %170 = phi i32 [ 0, %for_begin16.preheader ], [ %334, %for_end27 ]
  %171 = urem i32 %170, 7
  %172 = mul nuw nsw i32 %171, 13312
  %173 = udiv i32 %170, 7
  %174 = shl i32 %173, 15
  %175 = zext i32 %172 to i64
  %176 = sext i32 %174 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %35, i8 0, i64 896, i1 false)
  br label %for_body23

for_end18:                                        ; preds = %for_end27
  ret void

for_body23:                                       ; preds = %for_body23, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body23 ]
  %177 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %231, %for_body23 ]
  %178 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %225, %for_body23 ]
  %179 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %219, %for_body23 ]
  %180 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %213, %for_body23 ]
  %181 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %207, %for_body23 ]
  %182 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %201, %for_body23 ]
  %183 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %195, %for_body23 ]
  %184 = mul nuw nsw i64 %indvars.iv, 13
  %185 = add nuw nsw i64 %184, %175
  %186 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !591
  %188 = insertelement <32 x float> undef, float %187, i32 0
  %189 = shufflevector <32 x float> %188, <32 x float> undef, <32 x i32> zeroinitializer
  %190 = shl i64 %indvars.iv, 5
  %191 = add nuw nsw i64 %190, %176
  %192 = getelementptr inbounds [16384 x <32 x float>], [16384 x <32 x float>]* %4, i64 0, i64 0, i64 %191
  %193 = bitcast float* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 16, !tbaa !588
  %195 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %189, <32 x float> %194, <32 x float> %183)
  %196 = add nuw nsw i64 %185, 2
  %197 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !591
  %199 = insertelement <32 x float> undef, float %198, i32 0
  %200 = shufflevector <32 x float> %199, <32 x float> undef, <32 x i32> zeroinitializer
  %201 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %200, <32 x float> %194, <32 x float> %182)
  %202 = add nuw nsw i64 %185, 4
  %203 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %202
  %204 = load float, float* %203, align 4, !tbaa !591
  %205 = insertelement <32 x float> undef, float %204, i32 0
  %206 = shufflevector <32 x float> %205, <32 x float> undef, <32 x i32> zeroinitializer
  %207 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %206, <32 x float> %194, <32 x float> %181)
  %208 = add nuw nsw i64 %185, 6
  %209 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !591
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %194, <32 x float> %180)
  %214 = add nuw nsw i64 %185, 8
  %215 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !591
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %194, <32 x float> %179)
  %220 = add nuw nsw i64 %185, 10
  %221 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !591
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %194, <32 x float> %178)
  %226 = add nuw nsw i64 %185, 12
  %227 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !591
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %194, <32 x float> %177)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end24, label %for_body23, !prof !5

for_end24:                                        ; preds = %for_body23
  %232 = add nuw nsw i64 %175, 86528
  %233 = or i64 %176, 16384
  br label %for_body23.1

for_body26:                                       ; preds = %for_body26, %for_end24.1
  %indvars.iv36 = phi i64 [ 0, %for_end24.1 ], [ %indvars.iv.next37, %for_body26 ]
  %234 = add nuw nsw i64 %indvars.iv36, %393
  %235 = add nuw nsw i64 %234, 49
  %236 = add nuw nsw i64 %234, 98
  %237 = add nuw nsw i64 %234, 147
  %238 = add nuw nsw i64 %234, 196
  %239 = add nuw nsw i64 %234, 245
  %240 = add nuw nsw i64 %234, 294
  %241 = add nuw nsw i64 %234, 343
  %242 = add nuw nsw i64 %234, 392
  %243 = add nuw nsw i64 %234, 441
  %244 = add nuw nsw i64 %234, 490
  %245 = add nuw nsw i64 %234, 539
  %246 = add nuw nsw i64 %234, 588
  %247 = add nuw nsw i64 %234, 637
  %248 = add nuw nsw i64 %234, 686
  %249 = add nuw nsw i64 %234, 735
  %250 = add nuw nsw i64 %234, 784
  %251 = add nuw nsw i64 %234, 833
  %252 = add nuw nsw i64 %234, 882
  %253 = add nuw nsw i64 %234, 931
  %254 = add nuw nsw i64 %234, 980
  %255 = add nuw nsw i64 %234, 1029
  %256 = add nuw nsw i64 %234, 1078
  %257 = add nuw nsw i64 %234, 1127
  %258 = add nuw nsw i64 %234, 1176
  %259 = add nuw nsw i64 %234, 1225
  %260 = add nuw nsw i64 %234, 1274
  %261 = add nuw nsw i64 %234, 1323
  %262 = add nuw nsw i64 %234, 1372
  %263 = add nuw nsw i64 %234, 1421
  %264 = add nuw nsw i64 %234, 1470
  %265 = add nuw nsw i64 %234, 1519
  %266 = shl nsw i64 %indvars.iv36, 5
  %267 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 %266
  %268 = bitcast float* %267 to <32 x float>*
  %269 = load <32 x float>, <32 x float>* %268, align 128, !tbaa !594
  %270 = getelementptr inbounds float, float* %34, i64 %234
  %271 = extractelement <32 x float> %269, i64 0
  store float %271, float* %270, align 4, !tbaa !597
  %272 = getelementptr inbounds float, float* %34, i64 %235
  %273 = extractelement <32 x float> %269, i64 1
  store float %273, float* %272, align 4, !tbaa !597
  %274 = getelementptr inbounds float, float* %34, i64 %236
  %275 = extractelement <32 x float> %269, i64 2
  store float %275, float* %274, align 4, !tbaa !597
  %276 = getelementptr inbounds float, float* %34, i64 %237
  %277 = extractelement <32 x float> %269, i64 3
  store float %277, float* %276, align 4, !tbaa !597
  %278 = getelementptr inbounds float, float* %34, i64 %238
  %279 = extractelement <32 x float> %269, i64 4
  store float %279, float* %278, align 4, !tbaa !597
  %280 = getelementptr inbounds float, float* %34, i64 %239
  %281 = extractelement <32 x float> %269, i64 5
  store float %281, float* %280, align 4, !tbaa !597
  %282 = getelementptr inbounds float, float* %34, i64 %240
  %283 = extractelement <32 x float> %269, i64 6
  store float %283, float* %282, align 4, !tbaa !597
  %284 = getelementptr inbounds float, float* %34, i64 %241
  %285 = extractelement <32 x float> %269, i64 7
  store float %285, float* %284, align 4, !tbaa !597
  %286 = getelementptr inbounds float, float* %34, i64 %242
  %287 = extractelement <32 x float> %269, i64 8
  store float %287, float* %286, align 4, !tbaa !597
  %288 = getelementptr inbounds float, float* %34, i64 %243
  %289 = extractelement <32 x float> %269, i64 9
  store float %289, float* %288, align 4, !tbaa !597
  %290 = getelementptr inbounds float, float* %34, i64 %244
  %291 = extractelement <32 x float> %269, i64 10
  store float %291, float* %290, align 4, !tbaa !597
  %292 = getelementptr inbounds float, float* %34, i64 %245
  %293 = extractelement <32 x float> %269, i64 11
  store float %293, float* %292, align 4, !tbaa !597
  %294 = getelementptr inbounds float, float* %34, i64 %246
  %295 = extractelement <32 x float> %269, i64 12
  store float %295, float* %294, align 4, !tbaa !597
  %296 = getelementptr inbounds float, float* %34, i64 %247
  %297 = extractelement <32 x float> %269, i64 13
  store float %297, float* %296, align 4, !tbaa !597
  %298 = getelementptr inbounds float, float* %34, i64 %248
  %299 = extractelement <32 x float> %269, i64 14
  store float %299, float* %298, align 4, !tbaa !597
  %300 = getelementptr inbounds float, float* %34, i64 %249
  %301 = extractelement <32 x float> %269, i64 15
  store float %301, float* %300, align 4, !tbaa !597
  %302 = getelementptr inbounds float, float* %34, i64 %250
  %303 = extractelement <32 x float> %269, i64 16
  store float %303, float* %302, align 4, !tbaa !597
  %304 = getelementptr inbounds float, float* %34, i64 %251
  %305 = extractelement <32 x float> %269, i64 17
  store float %305, float* %304, align 4, !tbaa !597
  %306 = getelementptr inbounds float, float* %34, i64 %252
  %307 = extractelement <32 x float> %269, i64 18
  store float %307, float* %306, align 4, !tbaa !597
  %308 = getelementptr inbounds float, float* %34, i64 %253
  %309 = extractelement <32 x float> %269, i64 19
  store float %309, float* %308, align 4, !tbaa !597
  %310 = getelementptr inbounds float, float* %34, i64 %254
  %311 = extractelement <32 x float> %269, i64 20
  store float %311, float* %310, align 4, !tbaa !597
  %312 = getelementptr inbounds float, float* %34, i64 %255
  %313 = extractelement <32 x float> %269, i64 21
  store float %313, float* %312, align 4, !tbaa !597
  %314 = getelementptr inbounds float, float* %34, i64 %256
  %315 = extractelement <32 x float> %269, i64 22
  store float %315, float* %314, align 4, !tbaa !597
  %316 = getelementptr inbounds float, float* %34, i64 %257
  %317 = extractelement <32 x float> %269, i64 23
  store float %317, float* %316, align 4, !tbaa !597
  %318 = getelementptr inbounds float, float* %34, i64 %258
  %319 = extractelement <32 x float> %269, i64 24
  store float %319, float* %318, align 4, !tbaa !597
  %320 = getelementptr inbounds float, float* %34, i64 %259
  %321 = extractelement <32 x float> %269, i64 25
  store float %321, float* %320, align 4, !tbaa !597
  %322 = getelementptr inbounds float, float* %34, i64 %260
  %323 = extractelement <32 x float> %269, i64 26
  store float %323, float* %322, align 4, !tbaa !597
  %324 = getelementptr inbounds float, float* %34, i64 %261
  %325 = extractelement <32 x float> %269, i64 27
  store float %325, float* %324, align 4, !tbaa !597
  %326 = getelementptr inbounds float, float* %34, i64 %262
  %327 = extractelement <32 x float> %269, i64 28
  store float %327, float* %326, align 4, !tbaa !597
  %328 = getelementptr inbounds float, float* %34, i64 %263
  %329 = extractelement <32 x float> %269, i64 29
  store float %329, float* %328, align 4, !tbaa !597
  %330 = getelementptr inbounds float, float* %34, i64 %264
  %331 = extractelement <32 x float> %269, i64 30
  store float %331, float* %330, align 4, !tbaa !597
  %332 = getelementptr inbounds float, float* %34, i64 %265
  %333 = extractelement <32 x float> %269, i64 31
  store float %333, float* %332, align 4, !tbaa !597
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %exitcond38 = icmp eq i64 %indvars.iv.next37, 7
  br i1 %exitcond38, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %334 = add nuw nsw i32 %170, 1
  %exitcond39 = icmp eq i32 %334, 112
  br i1 %exitcond39, label %for_end18, label %for_body17, !prof !5

for_body23.1:                                     ; preds = %for_body23.1, %for_end24
  %indvars.iv.1 = phi i64 [ 0, %for_end24 ], [ %indvars.iv.next.1, %for_body23.1 ]
  %335 = phi <32 x float> [ %231, %for_end24 ], [ %389, %for_body23.1 ]
  %336 = phi <32 x float> [ %225, %for_end24 ], [ %383, %for_body23.1 ]
  %337 = phi <32 x float> [ %219, %for_end24 ], [ %377, %for_body23.1 ]
  %338 = phi <32 x float> [ %213, %for_end24 ], [ %371, %for_body23.1 ]
  %339 = phi <32 x float> [ %207, %for_end24 ], [ %365, %for_body23.1 ]
  %340 = phi <32 x float> [ %201, %for_end24 ], [ %359, %for_body23.1 ]
  %341 = phi <32 x float> [ %195, %for_end24 ], [ %353, %for_body23.1 ]
  %342 = mul nuw nsw i64 %indvars.iv.1, 13
  %343 = add nuw nsw i64 %232, %342
  %344 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %343
  %345 = load float, float* %344, align 4, !tbaa !591
  %346 = insertelement <32 x float> undef, float %345, i32 0
  %347 = shufflevector <32 x float> %346, <32 x float> undef, <32 x i32> zeroinitializer
  %348 = shl i64 %indvars.iv.1, 5
  %349 = add nuw nsw i64 %233, %348
  %350 = getelementptr inbounds [16384 x <32 x float>], [16384 x <32 x float>]* %4, i64 0, i64 0, i64 %349
  %351 = bitcast float* %350 to <32 x float>*
  %352 = load <32 x float>, <32 x float>* %351, align 16, !tbaa !588
  %353 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %347, <32 x float> %352, <32 x float> %341)
  %354 = add nuw nsw i64 %343, 2
  %355 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %354
  %356 = load float, float* %355, align 4, !tbaa !591
  %357 = insertelement <32 x float> undef, float %356, i32 0
  %358 = shufflevector <32 x float> %357, <32 x float> undef, <32 x i32> zeroinitializer
  %359 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %358, <32 x float> %352, <32 x float> %340)
  %360 = add nuw nsw i64 %343, 4
  %361 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %360
  %362 = load float, float* %361, align 4, !tbaa !591
  %363 = insertelement <32 x float> undef, float %362, i32 0
  %364 = shufflevector <32 x float> %363, <32 x float> undef, <32 x i32> zeroinitializer
  %365 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %364, <32 x float> %352, <32 x float> %339)
  %366 = add nuw nsw i64 %343, 6
  %367 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %366
  %368 = load float, float* %367, align 4, !tbaa !591
  %369 = insertelement <32 x float> undef, float %368, i32 0
  %370 = shufflevector <32 x float> %369, <32 x float> undef, <32 x i32> zeroinitializer
  %371 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %370, <32 x float> %352, <32 x float> %338)
  %372 = add nuw nsw i64 %343, 8
  %373 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %372
  %374 = load float, float* %373, align 4, !tbaa !591
  %375 = insertelement <32 x float> undef, float %374, i32 0
  %376 = shufflevector <32 x float> %375, <32 x float> undef, <32 x i32> zeroinitializer
  %377 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %376, <32 x float> %352, <32 x float> %337)
  %378 = add nuw nsw i64 %343, 10
  %379 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %378
  %380 = load float, float* %379, align 4, !tbaa !591
  %381 = insertelement <32 x float> undef, float %380, i32 0
  %382 = shufflevector <32 x float> %381, <32 x float> undef, <32 x i32> zeroinitializer
  %383 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %382, <32 x float> %352, <32 x float> %336)
  %384 = add nuw nsw i64 %343, 12
  %385 = getelementptr inbounds [173056 x float], [173056 x float]* %5, i64 0, i64 %384
  %386 = load float, float* %385, align 4, !tbaa !591
  %387 = insertelement <32 x float> undef, float %386, i32 0
  %388 = shufflevector <32 x float> %387, <32 x float> undef, <32 x i32> zeroinitializer
  %389 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %388, <32 x float> %352, <32 x float> %335)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end24.1, label %for_body23.1, !prof !5

for_end24.1:                                      ; preds = %for_body23.1
  store <32 x float> %353, <32 x float>* %.sub, align 128, !tbaa !600
  store <32 x float> %359, <32 x float>* %23, align 128, !tbaa !600
  store <32 x float> %365, <32 x float>* %25, align 128, !tbaa !600
  store <32 x float> %371, <32 x float>* %27, align 128, !tbaa !600
  store <32 x float> %377, <32 x float>* %29, align 128, !tbaa !600
  store <32 x float> %383, <32 x float>* %31, align 128, !tbaa !600
  store <32 x float> %389, <32 x float>* %33, align 128, !tbaa !600
  %390 = mul nuw nsw i32 %171, 7
  %391 = mul nsw i32 %173, 1568
  %392 = add nuw nsw i32 %391, %390
  %393 = zext i32 %392 to i64
  br label %for_body26

for_body14.1:                                     ; preds = %for_body14.1, %for_end15
  %indvars.iv40.1 = phi i64 [ 0, %for_end15 ], [ %indvars.iv.next41.1, %for_body14.1 ]
  %394 = shl i64 %indvars.iv40.1, 5
  %395 = add nuw nsw i64 %168, %394
  %396 = add nuw nsw i64 %169, %indvars.iv40.1
  %397 = add nuw nsw i64 %396, 1024
  %398 = add nuw nsw i64 %396, 2048
  %399 = add nuw nsw i64 %396, 3072
  %400 = add nuw nsw i64 %396, 4096
  %401 = add nuw nsw i64 %396, 5120
  %402 = add nuw nsw i64 %396, 6144
  %403 = add nuw nsw i64 %396, 7168
  %404 = add nuw nsw i64 %396, 8192
  %405 = add nuw nsw i64 %396, 9216
  %406 = add nuw nsw i64 %396, 10240
  %407 = add nuw nsw i64 %396, 11264
  %408 = add nuw nsw i64 %396, 12288
  %409 = add nuw nsw i64 %396, 13312
  %410 = add nuw nsw i64 %396, 14336
  %411 = add nuw nsw i64 %396, 15360
  %412 = add nuw nsw i64 %396, 16384
  %413 = add nuw nsw i64 %396, 17408
  %414 = add nuw nsw i64 %396, 18432
  %415 = add nuw nsw i64 %396, 19456
  %416 = add nuw nsw i64 %396, 20480
  %417 = add nuw nsw i64 %396, 21504
  %418 = add nuw nsw i64 %396, 22528
  %419 = add nuw nsw i64 %396, 23552
  %420 = add nuw nsw i64 %396, 24576
  %421 = add nuw nsw i64 %396, 25600
  %422 = add nuw nsw i64 %396, 26624
  %423 = add nuw nsw i64 %396, 27648
  %424 = add nuw nsw i64 %396, 28672
  %425 = add nuw nsw i64 %396, 29696
  %426 = add nuw nsw i64 %396, 30720
  %427 = add nuw nsw i64 %396, 31744
  %428 = getelementptr inbounds float, float* %15, i64 %396
  %429 = load float, float* %428, align 4, !tbaa !585
  %430 = insertelement <32 x float> undef, float %429, i32 0
  %431 = getelementptr inbounds float, float* %15, i64 %397
  %432 = load float, float* %431, align 4, !tbaa !585
  %433 = insertelement <32 x float> %430, float %432, i32 1
  %434 = getelementptr inbounds float, float* %15, i64 %398
  %435 = load float, float* %434, align 4, !tbaa !585
  %436 = insertelement <32 x float> %433, float %435, i32 2
  %437 = getelementptr inbounds float, float* %15, i64 %399
  %438 = load float, float* %437, align 4, !tbaa !585
  %439 = insertelement <32 x float> %436, float %438, i32 3
  %440 = getelementptr inbounds float, float* %15, i64 %400
  %441 = load float, float* %440, align 4, !tbaa !585
  %442 = insertelement <32 x float> %439, float %441, i32 4
  %443 = getelementptr inbounds float, float* %15, i64 %401
  %444 = load float, float* %443, align 4, !tbaa !585
  %445 = insertelement <32 x float> %442, float %444, i32 5
  %446 = getelementptr inbounds float, float* %15, i64 %402
  %447 = load float, float* %446, align 4, !tbaa !585
  %448 = insertelement <32 x float> %445, float %447, i32 6
  %449 = getelementptr inbounds float, float* %15, i64 %403
  %450 = load float, float* %449, align 4, !tbaa !585
  %451 = insertelement <32 x float> %448, float %450, i32 7
  %452 = getelementptr inbounds float, float* %15, i64 %404
  %453 = load float, float* %452, align 4, !tbaa !585
  %454 = insertelement <32 x float> %451, float %453, i32 8
  %455 = getelementptr inbounds float, float* %15, i64 %405
  %456 = load float, float* %455, align 4, !tbaa !585
  %457 = insertelement <32 x float> %454, float %456, i32 9
  %458 = getelementptr inbounds float, float* %15, i64 %406
  %459 = load float, float* %458, align 4, !tbaa !585
  %460 = insertelement <32 x float> %457, float %459, i32 10
  %461 = getelementptr inbounds float, float* %15, i64 %407
  %462 = load float, float* %461, align 4, !tbaa !585
  %463 = insertelement <32 x float> %460, float %462, i32 11
  %464 = getelementptr inbounds float, float* %15, i64 %408
  %465 = load float, float* %464, align 4, !tbaa !585
  %466 = insertelement <32 x float> %463, float %465, i32 12
  %467 = getelementptr inbounds float, float* %15, i64 %409
  %468 = load float, float* %467, align 4, !tbaa !585
  %469 = insertelement <32 x float> %466, float %468, i32 13
  %470 = getelementptr inbounds float, float* %15, i64 %410
  %471 = load float, float* %470, align 4, !tbaa !585
  %472 = insertelement <32 x float> %469, float %471, i32 14
  %473 = getelementptr inbounds float, float* %15, i64 %411
  %474 = load float, float* %473, align 4, !tbaa !585
  %475 = insertelement <32 x float> %472, float %474, i32 15
  %476 = getelementptr inbounds float, float* %15, i64 %412
  %477 = load float, float* %476, align 4, !tbaa !585
  %478 = insertelement <32 x float> %475, float %477, i32 16
  %479 = getelementptr inbounds float, float* %15, i64 %413
  %480 = load float, float* %479, align 4, !tbaa !585
  %481 = insertelement <32 x float> %478, float %480, i32 17
  %482 = getelementptr inbounds float, float* %15, i64 %414
  %483 = load float, float* %482, align 4, !tbaa !585
  %484 = insertelement <32 x float> %481, float %483, i32 18
  %485 = getelementptr inbounds float, float* %15, i64 %415
  %486 = load float, float* %485, align 4, !tbaa !585
  %487 = insertelement <32 x float> %484, float %486, i32 19
  %488 = getelementptr inbounds float, float* %15, i64 %416
  %489 = load float, float* %488, align 4, !tbaa !585
  %490 = insertelement <32 x float> %487, float %489, i32 20
  %491 = getelementptr inbounds float, float* %15, i64 %417
  %492 = load float, float* %491, align 4, !tbaa !585
  %493 = insertelement <32 x float> %490, float %492, i32 21
  %494 = getelementptr inbounds float, float* %15, i64 %418
  %495 = load float, float* %494, align 4, !tbaa !585
  %496 = insertelement <32 x float> %493, float %495, i32 22
  %497 = getelementptr inbounds float, float* %15, i64 %419
  %498 = load float, float* %497, align 4, !tbaa !585
  %499 = insertelement <32 x float> %496, float %498, i32 23
  %500 = getelementptr inbounds float, float* %15, i64 %420
  %501 = load float, float* %500, align 4, !tbaa !585
  %502 = insertelement <32 x float> %499, float %501, i32 24
  %503 = getelementptr inbounds float, float* %15, i64 %421
  %504 = load float, float* %503, align 4, !tbaa !585
  %505 = insertelement <32 x float> %502, float %504, i32 25
  %506 = getelementptr inbounds float, float* %15, i64 %422
  %507 = load float, float* %506, align 4, !tbaa !585
  %508 = insertelement <32 x float> %505, float %507, i32 26
  %509 = getelementptr inbounds float, float* %15, i64 %423
  %510 = load float, float* %509, align 4, !tbaa !585
  %511 = insertelement <32 x float> %508, float %510, i32 27
  %512 = getelementptr inbounds float, float* %15, i64 %424
  %513 = load float, float* %512, align 4, !tbaa !585
  %514 = insertelement <32 x float> %511, float %513, i32 28
  %515 = getelementptr inbounds float, float* %15, i64 %425
  %516 = load float, float* %515, align 4, !tbaa !585
  %517 = insertelement <32 x float> %514, float %516, i32 29
  %518 = getelementptr inbounds float, float* %15, i64 %426
  %519 = load float, float* %518, align 4, !tbaa !585
  %520 = insertelement <32 x float> %517, float %519, i32 30
  %521 = getelementptr inbounds float, float* %15, i64 %427
  %522 = load float, float* %521, align 4, !tbaa !585
  %523 = insertelement <32 x float> %520, float %522, i32 31
  %524 = getelementptr inbounds [16384 x <32 x float>], [16384 x <32 x float>]* %4, i64 0, i64 0, i64 %395
  %525 = bitcast float* %524 to <32 x float>*
  store <32 x float> %523, <32 x float>* %525, align 16, !tbaa !588
  %indvars.iv.next41.1 = add nuw nsw i64 %indvars.iv40.1, 1
  %exitcond42.1 = icmp eq i64 %indvars.iv.next41.1, 512
  br i1 %exitcond42.1, label %for_end15.1, label %for_body14.1, !prof !5

for_end15.1:                                      ; preds = %for_body14.1
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %exitcond48 = icmp eq i64 %indvars.iv.next47, 16
  br i1 %exitcond48, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_6(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_6_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_6_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %7 = mul nuw nsw i64 %indvars.iv, 28
  %8 = add nuw nsw i64 %7, %6
  %9 = getelementptr inbounds float, float* %3, i64 %8
  %10 = getelementptr inbounds float, float* %4, i64 %8
  %11 = getelementptr inbounds float, float* %5, i64 %8
  %12 = bitcast float* %9 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 4, !tbaa !607
  %14 = bitcast float* %10 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !610
  %16 = fadd <4 x float> %13, %15
  %17 = bitcast float* %11 to <4 x float>*
  store <4 x float> %16, <4 x float>* %17, align 4, !tbaa !613
  %18 = add nuw nsw i64 %8, 4
  %19 = getelementptr inbounds float, float* %3, i64 %18
  %20 = getelementptr inbounds float, float* %4, i64 %18
  %21 = getelementptr inbounds float, float* %5, i64 %18
  %22 = bitcast float* %19 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !607
  %24 = bitcast float* %20 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !610
  %26 = fadd <4 x float> %23, %25
  %27 = bitcast float* %21 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !613
  %28 = add nuw nsw i64 %8, 8
  %29 = getelementptr inbounds float, float* %3, i64 %28
  %30 = getelementptr inbounds float, float* %4, i64 %28
  %31 = getelementptr inbounds float, float* %5, i64 %28
  %32 = bitcast float* %29 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4, !tbaa !607
  %34 = bitcast float* %30 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !610
  %36 = fadd <4 x float> %33, %35
  %37 = bitcast float* %31 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !613
  %38 = add nuw nsw i64 %8, 12
  %39 = getelementptr inbounds float, float* %3, i64 %38
  %40 = getelementptr inbounds float, float* %4, i64 %38
  %41 = getelementptr inbounds float, float* %5, i64 %38
  %42 = bitcast float* %39 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !607
  %44 = bitcast float* %40 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !610
  %46 = fadd <4 x float> %43, %45
  %47 = bitcast float* %41 to <4 x float>*
  store <4 x float> %46, <4 x float>* %47, align 4, !tbaa !613
  %48 = add nuw nsw i64 %8, 16
  %49 = getelementptr inbounds float, float* %3, i64 %48
  %50 = getelementptr inbounds float, float* %4, i64 %48
  %51 = getelementptr inbounds float, float* %5, i64 %48
  %52 = bitcast float* %49 to <4 x float>*
  %53 = load <4 x float>, <4 x float>* %52, align 4, !tbaa !607
  %54 = bitcast float* %50 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !610
  %56 = fadd <4 x float> %53, %55
  %57 = bitcast float* %51 to <4 x float>*
  store <4 x float> %56, <4 x float>* %57, align 4, !tbaa !613
  %58 = add nuw nsw i64 %8, 20
  %59 = getelementptr inbounds float, float* %3, i64 %58
  %60 = getelementptr inbounds float, float* %4, i64 %58
  %61 = getelementptr inbounds float, float* %5, i64 %58
  %62 = bitcast float* %59 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !607
  %64 = bitcast float* %60 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !610
  %66 = fadd <4 x float> %63, %65
  %67 = bitcast float* %61 to <4 x float>*
  store <4 x float> %66, <4 x float>* %67, align 4, !tbaa !613
  %68 = add nuw nsw i64 %8, 24
  %69 = getelementptr inbounds float, float* %3, i64 %68
  %70 = getelementptr inbounds float, float* %4, i64 %68
  %71 = getelementptr inbounds float, float* %5, i64 %68
  %72 = bitcast float* %69 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !607
  %74 = bitcast float* %70 to <4 x float>*
  %75 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !610
  %76 = fadd <4 x float> %73, %75
  %77 = bitcast float* %71 to <4 x float>*
  store <4 x float> %76, <4 x float>* %77, align 4, !tbaa !613
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 512
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_2_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv1, 196
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv, 14
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = getelementptr inbounds float, float* %3, i64 %6
  %9 = bitcast float* %7 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !616
  %11 = fcmp ogt <4 x float> %10, zeroinitializer
  %12 = select <4 x i1> %11, <4 x float> %10, <4 x float> zeroinitializer
  %13 = bitcast float* %8 to <4 x float>*
  store <4 x float> %12, <4 x float>* %13, align 4, !tbaa !619
  %14 = add nuw nsw i64 %6, 4
  %15 = getelementptr inbounds float, float* %2, i64 %14
  %16 = getelementptr inbounds float, float* %3, i64 %14
  %17 = bitcast float* %15 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !616
  %19 = fcmp ogt <4 x float> %18, zeroinitializer
  %20 = select <4 x i1> %19, <4 x float> %18, <4 x float> zeroinitializer
  %21 = bitcast float* %16 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 4, !tbaa !619
  %22 = add nuw nsw i64 %6, 8
  %23 = getelementptr inbounds float, float* %2, i64 %22
  %24 = getelementptr inbounds float, float* %3, i64 %22
  %25 = bitcast float* %23 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !616
  %27 = fcmp ogt <4 x float> %26, zeroinitializer
  %28 = select <4 x i1> %27, <4 x float> %26, <4 x float> zeroinitializer
  %29 = bitcast float* %24 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !619
  %30 = add nuw nsw i64 %6, 12
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = load float, float* %31, align 4, !tbaa !616
  %33 = fcmp ogt float %32, 0.000000e+00
  %34 = select i1 %33, float %32, float 0.000000e+00
  %35 = getelementptr inbounds float, float* %3, i64 %30
  store float %34, float* %35, align 4, !tbaa !619
  %36 = add nuw nsw i64 %6, 13
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = load float, float* %37, align 4, !tbaa !616
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float* %3, i64 %36
  store float %40, float* %41, align 4, !tbaa !619
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 1024
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = load float, float* %4, align 64, !tbaa !622
  %6 = bitcast i8* %0 to float*
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %5, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %5, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !636
  %9 = getelementptr inbounds float, float* %7, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !636
  %11 = fmul <4 x float> %wide.load, %broadcast.splat4
  %12 = fmul <4 x float> %wide.load2, %broadcast.splat6
  %13 = getelementptr inbounds float, float* %6, i64 %index
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %11, <4 x float>* %14, align 4, !tbaa !639
  %15 = getelementptr inbounds float, float* %13, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> %12, <4 x float>* %16, align 4, !tbaa !639
  %index.next = add i64 %index, 8
  %17 = icmp eq i64 %index.next, 2048
  br i1 %17, label %for_end, label %vector.body, !llvm.loop !642

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_14(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_14_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_14_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !643
  %4 = bitcast i8* %1 to <4 x float>*
  %wide.load1 = load <4 x float>, <4 x float>* %4, align 4, !tbaa !646
  %5 = fadd <4 x float> %wide.load, %wide.load1
  %6 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %5, <4 x float>* %6, align 4, !tbaa !649
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !643
  %9 = getelementptr inbounds i8, i8* %1, i64 16
  %10 = bitcast i8* %9 to <4 x float>*
  %wide.load1.1 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !646
  %11 = fadd <4 x float> %wide.load.1, %wide.load1.1
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %11, <4 x float>* %13, align 4, !tbaa !649
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !643
  %16 = getelementptr inbounds i8, i8* %1, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load1.2 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !646
  %18 = fadd <4 x float> %wide.load.2, %wide.load1.2
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %18, <4 x float>* %20, align 4, !tbaa !649
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !643
  %23 = getelementptr inbounds i8, i8* %1, i64 48
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load1.3 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !646
  %25 = fadd <4 x float> %wide.load.3, %wide.load1.3
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !649
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !643
  %30 = getelementptr inbounds i8, i8* %1, i64 64
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load1.4 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !646
  %32 = fadd <4 x float> %wide.load.4, %wide.load1.4
  %33 = getelementptr inbounds i8, i8* %0, i64 64
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !649
  %35 = getelementptr inbounds i8, i8* %2, i64 80
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !643
  %37 = getelementptr inbounds i8, i8* %1, i64 80
  %38 = bitcast i8* %37 to <4 x float>*
  %wide.load1.5 = load <4 x float>, <4 x float>* %38, align 4, !tbaa !646
  %39 = fadd <4 x float> %wide.load.5, %wide.load1.5
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %39, <4 x float>* %41, align 4, !tbaa !649
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !643
  %44 = getelementptr inbounds i8, i8* %1, i64 96
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load1.6 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !646
  %46 = fadd <4 x float> %wide.load.6, %wide.load1.6
  %47 = getelementptr inbounds i8, i8* %0, i64 96
  %48 = bitcast i8* %47 to <4 x float>*
  store <4 x float> %46, <4 x float>* %48, align 4, !tbaa !649
  %49 = getelementptr inbounds i8, i8* %2, i64 112
  %50 = bitcast i8* %49 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !643
  %51 = getelementptr inbounds i8, i8* %1, i64 112
  %52 = bitcast i8* %51 to <4 x float>*
  %wide.load1.7 = load <4 x float>, <4 x float>* %52, align 4, !tbaa !646
  %53 = fadd <4 x float> %wide.load.7, %wide.load1.7
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %53, <4 x float>* %55, align 4, !tbaa !649
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !643
  %58 = getelementptr inbounds i8, i8* %1, i64 128
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load1.8 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !646
  %60 = fadd <4 x float> %wide.load.8, %wide.load1.8
  %61 = getelementptr inbounds i8, i8* %0, i64 128
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %60, <4 x float>* %62, align 4, !tbaa !649
  %63 = getelementptr inbounds i8, i8* %2, i64 144
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !643
  %65 = getelementptr inbounds i8, i8* %1, i64 144
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load1.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !646
  %67 = fadd <4 x float> %wide.load.9, %wide.load1.9
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !649
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !643
  %72 = getelementptr inbounds i8, i8* %1, i64 160
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load1.10 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !646
  %74 = fadd <4 x float> %wide.load.10, %wide.load1.10
  %75 = getelementptr inbounds i8, i8* %0, i64 160
  %76 = bitcast i8* %75 to <4 x float>*
  store <4 x float> %74, <4 x float>* %76, align 4, !tbaa !649
  %77 = getelementptr inbounds i8, i8* %2, i64 176
  %78 = bitcast i8* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !643
  %79 = getelementptr inbounds i8, i8* %1, i64 176
  %80 = bitcast i8* %79 to <4 x float>*
  %wide.load1.11 = load <4 x float>, <4 x float>* %80, align 4, !tbaa !646
  %81 = fadd <4 x float> %wide.load.11, %wide.load1.11
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4, !tbaa !649
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !643
  %86 = getelementptr inbounds i8, i8* %1, i64 192
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load1.12 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !646
  %88 = fadd <4 x float> %wide.load.12, %wide.load1.12
  %89 = getelementptr inbounds i8, i8* %0, i64 192
  %90 = bitcast i8* %89 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 4, !tbaa !649
  %91 = getelementptr inbounds i8, i8* %2, i64 208
  %92 = bitcast i8* %91 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !643
  %93 = getelementptr inbounds i8, i8* %1, i64 208
  %94 = bitcast i8* %93 to <4 x float>*
  %wide.load1.13 = load <4 x float>, <4 x float>* %94, align 4, !tbaa !646
  %95 = fadd <4 x float> %wide.load.13, %wide.load1.13
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %95, <4 x float>* %97, align 4, !tbaa !649
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !643
  %100 = getelementptr inbounds i8, i8* %1, i64 224
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load1.14 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !646
  %102 = fadd <4 x float> %wide.load.14, %wide.load1.14
  %103 = getelementptr inbounds i8, i8* %0, i64 224
  %104 = bitcast i8* %103 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !tbaa !649
  %105 = getelementptr inbounds i8, i8* %2, i64 240
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !643
  %107 = getelementptr inbounds i8, i8* %1, i64 240
  %108 = bitcast i8* %107 to <4 x float>*
  %wide.load1.15 = load <4 x float>, <4 x float>* %108, align 4, !tbaa !646
  %109 = fadd <4 x float> %wide.load.15, %wide.load1.15
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 4, !tbaa !649
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_8(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_8_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_8_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv4, 12544
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv1, 112
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !652
  %9 = fcmp ogt <4 x float> %wide.load, zeroinitializer
  %10 = select <4 x i1> %9, <4 x float> %wide.load, <4 x float> zeroinitializer
  %11 = getelementptr inbounds float, float* %3, i64 %6
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !655
  %13 = or i64 %6, 4
  %14 = getelementptr inbounds float, float* %2, i64 %13
  %15 = bitcast float* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !652
  %16 = fcmp ogt <4 x float> %wide.load.1, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> %wide.load.1, <4 x float> zeroinitializer
  %18 = getelementptr inbounds float, float* %3, i64 %13
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !655
  %20 = or i64 %6, 8
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = bitcast float* %21 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !652
  %23 = fcmp ogt <4 x float> %wide.load.2, zeroinitializer
  %24 = select <4 x i1> %23, <4 x float> %wide.load.2, <4 x float> zeroinitializer
  %25 = getelementptr inbounds float, float* %3, i64 %20
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> %24, <4 x float>* %26, align 4, !tbaa !655
  %27 = or i64 %6, 12
  %28 = getelementptr inbounds float, float* %2, i64 %27
  %29 = bitcast float* %28 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !652
  %30 = fcmp ogt <4 x float> %wide.load.3, zeroinitializer
  %31 = select <4 x i1> %30, <4 x float> %wide.load.3, <4 x float> zeroinitializer
  %32 = getelementptr inbounds float, float* %3, i64 %27
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !655
  %34 = add nuw nsw i64 %6, 16
  %35 = getelementptr inbounds float, float* %2, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !652
  %37 = fcmp ogt <4 x float> %wide.load.4, zeroinitializer
  %38 = select <4 x i1> %37, <4 x float> %wide.load.4, <4 x float> zeroinitializer
  %39 = getelementptr inbounds float, float* %3, i64 %34
  %40 = bitcast float* %39 to <4 x float>*
  store <4 x float> %38, <4 x float>* %40, align 4, !tbaa !655
  %41 = add nuw nsw i64 %6, 20
  %42 = getelementptr inbounds float, float* %2, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !652
  %44 = fcmp ogt <4 x float> %wide.load.5, zeroinitializer
  %45 = select <4 x i1> %44, <4 x float> %wide.load.5, <4 x float> zeroinitializer
  %46 = getelementptr inbounds float, float* %3, i64 %41
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !655
  %48 = add nuw nsw i64 %6, 24
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !652
  %51 = fcmp ogt <4 x float> %wide.load.6, zeroinitializer
  %52 = select <4 x i1> %51, <4 x float> %wide.load.6, <4 x float> zeroinitializer
  %53 = getelementptr inbounds float, float* %3, i64 %48
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !655
  %55 = add nuw nsw i64 %6, 28
  %56 = getelementptr inbounds float, float* %2, i64 %55
  %57 = bitcast float* %56 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !652
  %58 = fcmp ogt <4 x float> %wide.load.7, zeroinitializer
  %59 = select <4 x i1> %58, <4 x float> %wide.load.7, <4 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %3, i64 %55
  %61 = bitcast float* %60 to <4 x float>*
  store <4 x float> %59, <4 x float>* %61, align 4, !tbaa !655
  %62 = add nuw nsw i64 %6, 32
  %63 = getelementptr inbounds float, float* %2, i64 %62
  %64 = bitcast float* %63 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !652
  %65 = fcmp ogt <4 x float> %wide.load.8, zeroinitializer
  %66 = select <4 x i1> %65, <4 x float> %wide.load.8, <4 x float> zeroinitializer
  %67 = getelementptr inbounds float, float* %3, i64 %62
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %66, <4 x float>* %68, align 4, !tbaa !655
  %69 = add nuw nsw i64 %6, 36
  %70 = getelementptr inbounds float, float* %2, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !652
  %72 = fcmp ogt <4 x float> %wide.load.9, zeroinitializer
  %73 = select <4 x i1> %72, <4 x float> %wide.load.9, <4 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %3, i64 %69
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !655
  %76 = add nuw nsw i64 %6, 40
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !652
  %79 = fcmp ogt <4 x float> %wide.load.10, zeroinitializer
  %80 = select <4 x i1> %79, <4 x float> %wide.load.10, <4 x float> zeroinitializer
  %81 = getelementptr inbounds float, float* %3, i64 %76
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !655
  %83 = add nuw nsw i64 %6, 44
  %84 = getelementptr inbounds float, float* %2, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !652
  %86 = fcmp ogt <4 x float> %wide.load.11, zeroinitializer
  %87 = select <4 x i1> %86, <4 x float> %wide.load.11, <4 x float> zeroinitializer
  %88 = getelementptr inbounds float, float* %3, i64 %83
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4, !tbaa !655
  %90 = add nuw nsw i64 %6, 48
  %91 = getelementptr inbounds float, float* %2, i64 %90
  %92 = bitcast float* %91 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !652
  %93 = fcmp ogt <4 x float> %wide.load.12, zeroinitializer
  %94 = select <4 x i1> %93, <4 x float> %wide.load.12, <4 x float> zeroinitializer
  %95 = getelementptr inbounds float, float* %3, i64 %90
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %94, <4 x float>* %96, align 4, !tbaa !655
  %97 = add nuw nsw i64 %6, 52
  %98 = getelementptr inbounds float, float* %2, i64 %97
  %99 = bitcast float* %98 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !652
  %100 = fcmp ogt <4 x float> %wide.load.13, zeroinitializer
  %101 = select <4 x i1> %100, <4 x float> %wide.load.13, <4 x float> zeroinitializer
  %102 = getelementptr inbounds float, float* %3, i64 %97
  %103 = bitcast float* %102 to <4 x float>*
  store <4 x float> %101, <4 x float>* %103, align 4, !tbaa !655
  %104 = add nuw nsw i64 %6, 56
  %105 = getelementptr inbounds float, float* %2, i64 %104
  %106 = bitcast float* %105 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !652
  %107 = fcmp ogt <4 x float> %wide.load.14, zeroinitializer
  %108 = select <4 x i1> %107, <4 x float> %wide.load.14, <4 x float> zeroinitializer
  %109 = getelementptr inbounds float, float* %3, i64 %104
  %110 = bitcast float* %109 to <4 x float>*
  store <4 x float> %108, <4 x float>* %110, align 4, !tbaa !655
  %111 = add nuw nsw i64 %6, 60
  %112 = getelementptr inbounds float, float* %2, i64 %111
  %113 = bitcast float* %112 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !652
  %114 = fcmp ogt <4 x float> %wide.load.15, zeroinitializer
  %115 = select <4 x i1> %114, <4 x float> %wide.load.15, <4 x float> zeroinitializer
  %116 = getelementptr inbounds float, float* %3, i64 %111
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %115, <4 x float>* %117, align 4, !tbaa !655
  %118 = add nuw nsw i64 %6, 64
  %119 = getelementptr inbounds float, float* %2, i64 %118
  %120 = bitcast float* %119 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %120, align 4, !tbaa !652
  %121 = fcmp ogt <4 x float> %wide.load.16, zeroinitializer
  %122 = select <4 x i1> %121, <4 x float> %wide.load.16, <4 x float> zeroinitializer
  %123 = getelementptr inbounds float, float* %3, i64 %118
  %124 = bitcast float* %123 to <4 x float>*
  store <4 x float> %122, <4 x float>* %124, align 4, !tbaa !655
  %125 = add nuw nsw i64 %6, 68
  %126 = getelementptr inbounds float, float* %2, i64 %125
  %127 = bitcast float* %126 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %127, align 4, !tbaa !652
  %128 = fcmp ogt <4 x float> %wide.load.17, zeroinitializer
  %129 = select <4 x i1> %128, <4 x float> %wide.load.17, <4 x float> zeroinitializer
  %130 = getelementptr inbounds float, float* %3, i64 %125
  %131 = bitcast float* %130 to <4 x float>*
  store <4 x float> %129, <4 x float>* %131, align 4, !tbaa !655
  %132 = add nuw nsw i64 %6, 72
  %133 = getelementptr inbounds float, float* %2, i64 %132
  %134 = bitcast float* %133 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %134, align 4, !tbaa !652
  %135 = fcmp ogt <4 x float> %wide.load.18, zeroinitializer
  %136 = select <4 x i1> %135, <4 x float> %wide.load.18, <4 x float> zeroinitializer
  %137 = getelementptr inbounds float, float* %3, i64 %132
  %138 = bitcast float* %137 to <4 x float>*
  store <4 x float> %136, <4 x float>* %138, align 4, !tbaa !655
  %139 = add nuw nsw i64 %6, 76
  %140 = getelementptr inbounds float, float* %2, i64 %139
  %141 = bitcast float* %140 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !652
  %142 = fcmp ogt <4 x float> %wide.load.19, zeroinitializer
  %143 = select <4 x i1> %142, <4 x float> %wide.load.19, <4 x float> zeroinitializer
  %144 = getelementptr inbounds float, float* %3, i64 %139
  %145 = bitcast float* %144 to <4 x float>*
  store <4 x float> %143, <4 x float>* %145, align 4, !tbaa !655
  %146 = add nuw nsw i64 %6, 80
  %147 = getelementptr inbounds float, float* %2, i64 %146
  %148 = bitcast float* %147 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %148, align 4, !tbaa !652
  %149 = fcmp ogt <4 x float> %wide.load.20, zeroinitializer
  %150 = select <4 x i1> %149, <4 x float> %wide.load.20, <4 x float> zeroinitializer
  %151 = getelementptr inbounds float, float* %3, i64 %146
  %152 = bitcast float* %151 to <4 x float>*
  store <4 x float> %150, <4 x float>* %152, align 4, !tbaa !655
  %153 = add nuw nsw i64 %6, 84
  %154 = getelementptr inbounds float, float* %2, i64 %153
  %155 = bitcast float* %154 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %155, align 4, !tbaa !652
  %156 = fcmp ogt <4 x float> %wide.load.21, zeroinitializer
  %157 = select <4 x i1> %156, <4 x float> %wide.load.21, <4 x float> zeroinitializer
  %158 = getelementptr inbounds float, float* %3, i64 %153
  %159 = bitcast float* %158 to <4 x float>*
  store <4 x float> %157, <4 x float>* %159, align 4, !tbaa !655
  %160 = add nuw nsw i64 %6, 88
  %161 = getelementptr inbounds float, float* %2, i64 %160
  %162 = bitcast float* %161 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %162, align 4, !tbaa !652
  %163 = fcmp ogt <4 x float> %wide.load.22, zeroinitializer
  %164 = select <4 x i1> %163, <4 x float> %wide.load.22, <4 x float> zeroinitializer
  %165 = getelementptr inbounds float, float* %3, i64 %160
  %166 = bitcast float* %165 to <4 x float>*
  store <4 x float> %164, <4 x float>* %166, align 4, !tbaa !655
  %167 = add nuw nsw i64 %6, 92
  %168 = getelementptr inbounds float, float* %2, i64 %167
  %169 = bitcast float* %168 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %169, align 4, !tbaa !652
  %170 = fcmp ogt <4 x float> %wide.load.23, zeroinitializer
  %171 = select <4 x i1> %170, <4 x float> %wide.load.23, <4 x float> zeroinitializer
  %172 = getelementptr inbounds float, float* %3, i64 %167
  %173 = bitcast float* %172 to <4 x float>*
  store <4 x float> %171, <4 x float>* %173, align 4, !tbaa !655
  %174 = add nuw nsw i64 %6, 96
  %175 = getelementptr inbounds float, float* %2, i64 %174
  %176 = bitcast float* %175 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %176, align 4, !tbaa !652
  %177 = fcmp ogt <4 x float> %wide.load.24, zeroinitializer
  %178 = select <4 x i1> %177, <4 x float> %wide.load.24, <4 x float> zeroinitializer
  %179 = getelementptr inbounds float, float* %3, i64 %174
  %180 = bitcast float* %179 to <4 x float>*
  store <4 x float> %178, <4 x float>* %180, align 4, !tbaa !655
  %181 = add nuw nsw i64 %6, 100
  %182 = getelementptr inbounds float, float* %2, i64 %181
  %183 = bitcast float* %182 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !652
  %184 = fcmp ogt <4 x float> %wide.load.25, zeroinitializer
  %185 = select <4 x i1> %184, <4 x float> %wide.load.25, <4 x float> zeroinitializer
  %186 = getelementptr inbounds float, float* %3, i64 %181
  %187 = bitcast float* %186 to <4 x float>*
  store <4 x float> %185, <4 x float>* %187, align 4, !tbaa !655
  %188 = add nuw nsw i64 %6, 104
  %189 = getelementptr inbounds float, float* %2, i64 %188
  %190 = bitcast float* %189 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %190, align 4, !tbaa !652
  %191 = fcmp ogt <4 x float> %wide.load.26, zeroinitializer
  %192 = select <4 x i1> %191, <4 x float> %wide.load.26, <4 x float> zeroinitializer
  %193 = getelementptr inbounds float, float* %3, i64 %188
  %194 = bitcast float* %193 to <4 x float>*
  store <4 x float> %192, <4 x float>* %194, align 4, !tbaa !655
  %195 = add nuw nsw i64 %6, 108
  %196 = getelementptr inbounds float, float* %2, i64 %195
  %197 = bitcast float* %196 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %197, align 4, !tbaa !652
  %198 = fcmp ogt <4 x float> %wide.load.27, zeroinitializer
  %199 = select <4 x i1> %198, <4 x float> %wide.load.27, <4 x float> zeroinitializer
  %200 = getelementptr inbounds float, float* %3, i64 %195
  %201 = bitcast float* %200 to <4 x float>*
  store <4 x float> %199, <4 x float>* %201, align 4, !tbaa !655
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 112
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_3_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %7 = mul nuw nsw i64 %indvars.iv, 14
  %8 = add nuw nsw i64 %7, %6
  %9 = getelementptr inbounds float, float* %3, i64 %8
  %10 = getelementptr inbounds float, float* %4, i64 %8
  %11 = getelementptr inbounds float, float* %5, i64 %8
  %12 = bitcast float* %9 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 4, !tbaa !658
  %14 = bitcast float* %10 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !661
  %16 = fadd <4 x float> %13, %15
  %17 = bitcast float* %11 to <4 x float>*
  store <4 x float> %16, <4 x float>* %17, align 4, !tbaa !664
  %18 = add nuw nsw i64 %8, 4
  %19 = getelementptr inbounds float, float* %3, i64 %18
  %20 = getelementptr inbounds float, float* %4, i64 %18
  %21 = getelementptr inbounds float, float* %5, i64 %18
  %22 = bitcast float* %19 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !658
  %24 = bitcast float* %20 to <4 x float>*
  %25 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !661
  %26 = fadd <4 x float> %23, %25
  %27 = bitcast float* %21 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !664
  %28 = add nuw nsw i64 %8, 8
  %29 = getelementptr inbounds float, float* %3, i64 %28
  %30 = getelementptr inbounds float, float* %4, i64 %28
  %31 = getelementptr inbounds float, float* %5, i64 %28
  %32 = bitcast float* %29 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4, !tbaa !658
  %34 = bitcast float* %30 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !661
  %36 = fadd <4 x float> %33, %35
  %37 = bitcast float* %31 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !664
  %38 = add nuw nsw i64 %8, 12
  %39 = getelementptr inbounds float, float* %3, i64 %38
  %40 = load float, float* %39, align 4, !tbaa !658
  %41 = getelementptr inbounds float, float* %4, i64 %38
  %42 = load float, float* %41, align 4, !tbaa !661
  %43 = fadd float %40, %42
  %44 = getelementptr inbounds float, float* %5, i64 %38
  store float %43, float* %44, align 4, !tbaa !664
  %45 = add nuw nsw i64 %8, 13
  %46 = getelementptr inbounds float, float* %3, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !658
  %48 = getelementptr inbounds float, float* %4, i64 %45
  %49 = load float, float* %48, align 4, !tbaa !661
  %50 = fadd float %47, %49
  %51 = getelementptr inbounds float, float* %5, i64 %45
  store float %50, float* %51, align 4, !tbaa !664
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 1024
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_8(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_8_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_8_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <32 x float>], align 16
  %4 = alloca [2048 x <32 x float>], align 16
  %5 = alloca [100352 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_begin1.preheader ]
  %6 = trunc i64 %indvar to i32
  %7 = mul nuw nsw i64 %indvar, 112
  %8 = trunc i64 %indvar to i32
  %9 = mul i32 %8, 28
  %10 = udiv i32 %6, 28
  %11 = mul i32 %10, 2352
  %12 = add i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %scevgep = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %7
  %scevgep58 = bitcast float* %scevgep to i8*
  %scevgep59 = getelementptr i8, i8* %0, i64 %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58, i8* align 4 %scevgep59, i64 112, i1 false)
  %15 = add nuw nsw i64 %7, 28
  %scevgep.1 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %15
  %scevgep58.1 = bitcast float* %scevgep.1 to i8*
  %16 = add nuw nsw i64 %14, 3136
  %scevgep59.1 = getelementptr i8, i8* %0, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.1, i8* align 4 %scevgep59.1, i64 112, i1 false)
  %17 = add nuw nsw i64 %7, 56
  %scevgep.2 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %17
  %scevgep58.2 = bitcast float* %scevgep.2 to i8*
  %18 = add nuw nsw i64 %14, 6272
  %scevgep59.2 = getelementptr i8, i8* %0, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.2, i8* align 4 %scevgep59.2, i64 112, i1 false)
  %19 = add nuw nsw i64 %7, 84
  %scevgep.3 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %19
  %scevgep58.3 = bitcast float* %scevgep.3 to i8*
  %20 = add nuw nsw i64 %14, 9408
  %scevgep59.3 = getelementptr i8, i8* %0, i64 %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.3, i8* align 4 %scevgep59.3, i64 112, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond61 = icmp eq i64 %indvar.next, 896
  br i1 %exitcond61, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin7.preheader:                             ; preds = %for_begin1.preheader
  %21 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv50 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next51, %for_end12 ]
  %22 = shl nsw i64 %indvars.iv50, 12
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %23 = bitcast i8* %2 to float*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv47 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next48, %for_end15 ]
  %24 = shl i64 %indvars.iv47, 7
  %25 = add nuw nsw i64 %24, %22
  %26 = shl i64 %indvars.iv47, 2
  %27 = add nuw nsw i64 %26, %22
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond52 = icmp eq i64 %indvars.iv.next51, 16
  br i1 %exitcond52, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv44 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next45, %for_body14 ]
  %28 = shl i64 %indvars.iv44, 5
  %29 = add nuw nsw i64 %25, %28
  %30 = add nuw nsw i64 %27, %indvars.iv44
  %31 = add nuw nsw i64 %30, 128
  %32 = add nuw nsw i64 %30, 256
  %33 = add nuw nsw i64 %30, 384
  %34 = add nuw nsw i64 %30, 512
  %35 = add nuw nsw i64 %30, 640
  %36 = add nuw nsw i64 %30, 768
  %37 = add nuw nsw i64 %30, 896
  %38 = add nuw nsw i64 %30, 1024
  %39 = add nuw nsw i64 %30, 1152
  %40 = add nuw nsw i64 %30, 1280
  %41 = add nuw nsw i64 %30, 1408
  %42 = add nuw nsw i64 %30, 1536
  %43 = add nuw nsw i64 %30, 1664
  %44 = add nuw nsw i64 %30, 1792
  %45 = add nuw nsw i64 %30, 1920
  %46 = add nuw nsw i64 %30, 2048
  %47 = add nuw nsw i64 %30, 2176
  %48 = add nuw nsw i64 %30, 2304
  %49 = add nuw nsw i64 %30, 2432
  %50 = add nuw nsw i64 %30, 2560
  %51 = add nuw nsw i64 %30, 2688
  %52 = add nuw nsw i64 %30, 2816
  %53 = add nuw nsw i64 %30, 2944
  %54 = add nuw nsw i64 %30, 3072
  %55 = add nuw nsw i64 %30, 3200
  %56 = add nuw nsw i64 %30, 3328
  %57 = add nuw nsw i64 %30, 3456
  %58 = add nuw nsw i64 %30, 3584
  %59 = add nuw nsw i64 %30, 3712
  %60 = add nuw nsw i64 %30, 3840
  %61 = add nuw nsw i64 %30, 3968
  %62 = getelementptr inbounds float, float* %21, i64 %30
  %63 = load float, float* %62, align 4, !tbaa !667
  %64 = insertelement <32 x float> undef, float %63, i32 0
  %65 = getelementptr inbounds float, float* %21, i64 %31
  %66 = load float, float* %65, align 4, !tbaa !667
  %67 = insertelement <32 x float> %64, float %66, i32 1
  %68 = getelementptr inbounds float, float* %21, i64 %32
  %69 = load float, float* %68, align 4, !tbaa !667
  %70 = insertelement <32 x float> %67, float %69, i32 2
  %71 = getelementptr inbounds float, float* %21, i64 %33
  %72 = load float, float* %71, align 4, !tbaa !667
  %73 = insertelement <32 x float> %70, float %72, i32 3
  %74 = getelementptr inbounds float, float* %21, i64 %34
  %75 = load float, float* %74, align 4, !tbaa !667
  %76 = insertelement <32 x float> %73, float %75, i32 4
  %77 = getelementptr inbounds float, float* %21, i64 %35
  %78 = load float, float* %77, align 4, !tbaa !667
  %79 = insertelement <32 x float> %76, float %78, i32 5
  %80 = getelementptr inbounds float, float* %21, i64 %36
  %81 = load float, float* %80, align 4, !tbaa !667
  %82 = insertelement <32 x float> %79, float %81, i32 6
  %83 = getelementptr inbounds float, float* %21, i64 %37
  %84 = load float, float* %83, align 4, !tbaa !667
  %85 = insertelement <32 x float> %82, float %84, i32 7
  %86 = getelementptr inbounds float, float* %21, i64 %38
  %87 = load float, float* %86, align 4, !tbaa !667
  %88 = insertelement <32 x float> %85, float %87, i32 8
  %89 = getelementptr inbounds float, float* %21, i64 %39
  %90 = load float, float* %89, align 4, !tbaa !667
  %91 = insertelement <32 x float> %88, float %90, i32 9
  %92 = getelementptr inbounds float, float* %21, i64 %40
  %93 = load float, float* %92, align 4, !tbaa !667
  %94 = insertelement <32 x float> %91, float %93, i32 10
  %95 = getelementptr inbounds float, float* %21, i64 %41
  %96 = load float, float* %95, align 4, !tbaa !667
  %97 = insertelement <32 x float> %94, float %96, i32 11
  %98 = getelementptr inbounds float, float* %21, i64 %42
  %99 = load float, float* %98, align 4, !tbaa !667
  %100 = insertelement <32 x float> %97, float %99, i32 12
  %101 = getelementptr inbounds float, float* %21, i64 %43
  %102 = load float, float* %101, align 4, !tbaa !667
  %103 = insertelement <32 x float> %100, float %102, i32 13
  %104 = getelementptr inbounds float, float* %21, i64 %44
  %105 = load float, float* %104, align 4, !tbaa !667
  %106 = insertelement <32 x float> %103, float %105, i32 14
  %107 = getelementptr inbounds float, float* %21, i64 %45
  %108 = load float, float* %107, align 4, !tbaa !667
  %109 = insertelement <32 x float> %106, float %108, i32 15
  %110 = getelementptr inbounds float, float* %21, i64 %46
  %111 = load float, float* %110, align 4, !tbaa !667
  %112 = insertelement <32 x float> %109, float %111, i32 16
  %113 = getelementptr inbounds float, float* %21, i64 %47
  %114 = load float, float* %113, align 4, !tbaa !667
  %115 = insertelement <32 x float> %112, float %114, i32 17
  %116 = getelementptr inbounds float, float* %21, i64 %48
  %117 = load float, float* %116, align 4, !tbaa !667
  %118 = insertelement <32 x float> %115, float %117, i32 18
  %119 = getelementptr inbounds float, float* %21, i64 %49
  %120 = load float, float* %119, align 4, !tbaa !667
  %121 = insertelement <32 x float> %118, float %120, i32 19
  %122 = getelementptr inbounds float, float* %21, i64 %50
  %123 = load float, float* %122, align 4, !tbaa !667
  %124 = insertelement <32 x float> %121, float %123, i32 20
  %125 = getelementptr inbounds float, float* %21, i64 %51
  %126 = load float, float* %125, align 4, !tbaa !667
  %127 = insertelement <32 x float> %124, float %126, i32 21
  %128 = getelementptr inbounds float, float* %21, i64 %52
  %129 = load float, float* %128, align 4, !tbaa !667
  %130 = insertelement <32 x float> %127, float %129, i32 22
  %131 = getelementptr inbounds float, float* %21, i64 %53
  %132 = load float, float* %131, align 4, !tbaa !667
  %133 = insertelement <32 x float> %130, float %132, i32 23
  %134 = getelementptr inbounds float, float* %21, i64 %54
  %135 = load float, float* %134, align 4, !tbaa !667
  %136 = insertelement <32 x float> %133, float %135, i32 24
  %137 = getelementptr inbounds float, float* %21, i64 %55
  %138 = load float, float* %137, align 4, !tbaa !667
  %139 = insertelement <32 x float> %136, float %138, i32 25
  %140 = getelementptr inbounds float, float* %21, i64 %56
  %141 = load float, float* %140, align 4, !tbaa !667
  %142 = insertelement <32 x float> %139, float %141, i32 26
  %143 = getelementptr inbounds float, float* %21, i64 %57
  %144 = load float, float* %143, align 4, !tbaa !667
  %145 = insertelement <32 x float> %142, float %144, i32 27
  %146 = getelementptr inbounds float, float* %21, i64 %58
  %147 = load float, float* %146, align 4, !tbaa !667
  %148 = insertelement <32 x float> %145, float %147, i32 28
  %149 = getelementptr inbounds float, float* %21, i64 %59
  %150 = load float, float* %149, align 4, !tbaa !667
  %151 = insertelement <32 x float> %148, float %150, i32 29
  %152 = getelementptr inbounds float, float* %21, i64 %60
  %153 = load float, float* %152, align 4, !tbaa !667
  %154 = insertelement <32 x float> %151, float %153, i32 30
  %155 = getelementptr inbounds float, float* %21, i64 %61
  %156 = load float, float* %155, align 4, !tbaa !667
  %157 = insertelement <32 x float> %154, float %156, i32 31
  %158 = getelementptr inbounds [2048 x <32 x float>], [2048 x <32 x float>]* %4, i64 0, i64 0, i64 %29
  %159 = bitcast float* %158 to <32 x float>*
  store <32 x float> %157, <32 x float>* %159, align 16, !tbaa !670
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond46 = icmp eq i64 %indvars.iv.next45, 4
  br i1 %exitcond46, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond49 = icmp eq i64 %indvars.iv.next48, 32
  br i1 %exitcond49, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end30, %for_begin16.preheader
  %160 = phi i32 [ 0, %for_begin16.preheader ], [ %411, %for_end30 ]
  %161 = urem i32 %160, 28
  %162 = mul nuw nsw i32 %161, 112
  %163 = udiv i32 %160, 28
  %164 = shl i32 %163, 12
  %165 = sext i32 %164 to i64
  %166 = zext i32 %162 to i64
  br label %for_body20

for_end18:                                        ; preds = %for_end30
  ret void

for_begin28.preheader:                            ; preds = %for_end24
  %167 = mul nuw nsw i32 %161, 28
  %168 = mul nsw i32 %163, 25088
  %169 = add nuw nsw i32 %168, %167
  %170 = zext i32 %169 to i64
  br label %for_begin31.preheader

for_body20:                                       ; preds = %for_end24, %for_begin19.preheader
  %indvars.iv34 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next35, %for_end24 ]
  %171 = mul nuw nsw i64 %indvars.iv34, 224
  %172 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %171
  %173 = bitcast float* %172 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %173, align 16, !tbaa !673
  %174 = add nuw nsw i64 %171, 32
  %175 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %174
  %176 = bitcast float* %175 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %176, align 16, !tbaa !673
  %177 = add nuw nsw i64 %171, 64
  %178 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %177
  %179 = bitcast float* %178 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %179, align 16, !tbaa !673
  %180 = add nuw nsw i64 %171, 96
  %181 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %180
  %182 = bitcast float* %181 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %182, align 16, !tbaa !673
  %183 = add nuw nsw i64 %171, 128
  %184 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %183
  %185 = bitcast float* %184 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %185, align 16, !tbaa !673
  %186 = add nuw nsw i64 %171, 160
  %187 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %186
  %188 = bitcast float* %187 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %188, align 16, !tbaa !673
  %189 = add nuw nsw i64 %171, 192
  %190 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %189
  %191 = bitcast float* %190 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %191, align 16, !tbaa !673
  %192 = mul nuw nsw i64 %indvars.iv34, 7
  %193 = add nuw nsw i64 %192, %166
  br label %for_begin25.preheader

for_begin25.preheader:                            ; preds = %for_begin25.preheader, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_begin25.preheader ]
  %.lcssa1427 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %407, %for_begin25.preheader ]
  %.lcssa1225 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %400, %for_begin25.preheader ]
  %.lcssa1023 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %393, %for_begin25.preheader ]
  %.lcssa821 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %386, %for_begin25.preheader ]
  %.lcssa619 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %379, %for_begin25.preheader ]
  %.lcssa417 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %372, %for_begin25.preheader ]
  %.lcssa16 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %365, %for_begin25.preheader ]
  %194 = mul nuw nsw i64 %indvars.iv, 3136
  %195 = add nuw nsw i64 %193, %194
  %196 = shl i64 %indvars.iv, 7
  %197 = add nuw nsw i64 %196, %165
  %198 = and i64 %195, 4294967295
  %199 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !676
  %201 = insertelement <32 x float> undef, float %200, i32 0
  %202 = shufflevector <32 x float> %201, <32 x float> undef, <32 x i32> zeroinitializer
  %203 = getelementptr inbounds [2048 x <32 x float>], [2048 x <32 x float>]* %4, i64 0, i64 0, i64 %197
  %204 = bitcast float* %203 to <32 x float>*
  %205 = load <32 x float>, <32 x float>* %204, align 16, !tbaa !670
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %202, <32 x float> %205, <32 x float> %.lcssa16)
  %207 = add nuw i64 %195, 1
  %208 = and i64 %207, 4294967295
  %209 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !676
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %205, <32 x float> %.lcssa417)
  %214 = add nuw i64 %195, 2
  %215 = and i64 %214, 4294967295
  %216 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !676
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = shufflevector <32 x float> %218, <32 x float> undef, <32 x i32> zeroinitializer
  %220 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %219, <32 x float> %205, <32 x float> %.lcssa619)
  %221 = add nuw i64 %195, 3
  %222 = and i64 %221, 4294967295
  %223 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %222
  %224 = load float, float* %223, align 4, !tbaa !676
  %225 = insertelement <32 x float> undef, float %224, i32 0
  %226 = shufflevector <32 x float> %225, <32 x float> undef, <32 x i32> zeroinitializer
  %227 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %205, <32 x float> %.lcssa821)
  %228 = add nuw i64 %195, 4
  %229 = and i64 %228, 4294967295
  %230 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %229
  %231 = load float, float* %230, align 4, !tbaa !676
  %232 = insertelement <32 x float> undef, float %231, i32 0
  %233 = shufflevector <32 x float> %232, <32 x float> undef, <32 x i32> zeroinitializer
  %234 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %233, <32 x float> %205, <32 x float> %.lcssa1023)
  %235 = add nuw i64 %195, 5
  %236 = and i64 %235, 4294967295
  %237 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %236
  %238 = load float, float* %237, align 4, !tbaa !676
  %239 = insertelement <32 x float> undef, float %238, i32 0
  %240 = shufflevector <32 x float> %239, <32 x float> undef, <32 x i32> zeroinitializer
  %241 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %240, <32 x float> %205, <32 x float> %.lcssa1225)
  %242 = add nuw i64 %195, 6
  %243 = and i64 %242, 4294967295
  %244 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !676
  %246 = insertelement <32 x float> undef, float %245, i32 0
  %247 = shufflevector <32 x float> %246, <32 x float> undef, <32 x i32> zeroinitializer
  %248 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %247, <32 x float> %205, <32 x float> %.lcssa1427)
  %249 = add nuw nsw i64 %195, 28
  %250 = and i64 %249, 4294967295
  %251 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !676
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = or i64 %197, 32
  %256 = getelementptr inbounds [2048 x <32 x float>], [2048 x <32 x float>]* %4, i64 0, i64 0, i64 %255
  %257 = bitcast float* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 16, !tbaa !670
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %258, <32 x float> %206)
  %260 = add nuw i64 %195, 29
  %261 = and i64 %260, 4294967295
  %262 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !676
  %264 = insertelement <32 x float> undef, float %263, i32 0
  %265 = shufflevector <32 x float> %264, <32 x float> undef, <32 x i32> zeroinitializer
  %266 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %265, <32 x float> %258, <32 x float> %213)
  %267 = add nuw i64 %195, 30
  %268 = and i64 %267, 4294967295
  %269 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !676
  %271 = insertelement <32 x float> undef, float %270, i32 0
  %272 = shufflevector <32 x float> %271, <32 x float> undef, <32 x i32> zeroinitializer
  %273 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %258, <32 x float> %220)
  %274 = add nuw i64 %195, 31
  %275 = and i64 %274, 4294967295
  %276 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %275
  %277 = load float, float* %276, align 4, !tbaa !676
  %278 = insertelement <32 x float> undef, float %277, i32 0
  %279 = shufflevector <32 x float> %278, <32 x float> undef, <32 x i32> zeroinitializer
  %280 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %279, <32 x float> %258, <32 x float> %227)
  %281 = add nuw i64 %195, 32
  %282 = and i64 %281, 4294967295
  %283 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %282
  %284 = load float, float* %283, align 4, !tbaa !676
  %285 = insertelement <32 x float> undef, float %284, i32 0
  %286 = shufflevector <32 x float> %285, <32 x float> undef, <32 x i32> zeroinitializer
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %286, <32 x float> %258, <32 x float> %234)
  %288 = add nuw i64 %195, 33
  %289 = and i64 %288, 4294967295
  %290 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !676
  %292 = insertelement <32 x float> undef, float %291, i32 0
  %293 = shufflevector <32 x float> %292, <32 x float> undef, <32 x i32> zeroinitializer
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %258, <32 x float> %241)
  %295 = add nuw i64 %195, 34
  %296 = and i64 %295, 4294967295
  %297 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %296
  %298 = load float, float* %297, align 4, !tbaa !676
  %299 = insertelement <32 x float> undef, float %298, i32 0
  %300 = shufflevector <32 x float> %299, <32 x float> undef, <32 x i32> zeroinitializer
  %301 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %300, <32 x float> %258, <32 x float> %248)
  %302 = add nuw nsw i64 %195, 56
  %303 = and i64 %302, 4294967295
  %304 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %303
  %305 = load float, float* %304, align 4, !tbaa !676
  %306 = insertelement <32 x float> undef, float %305, i32 0
  %307 = shufflevector <32 x float> %306, <32 x float> undef, <32 x i32> zeroinitializer
  %308 = or i64 %197, 64
  %309 = getelementptr inbounds [2048 x <32 x float>], [2048 x <32 x float>]* %4, i64 0, i64 0, i64 %308
  %310 = bitcast float* %309 to <32 x float>*
  %311 = load <32 x float>, <32 x float>* %310, align 16, !tbaa !670
  %312 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %307, <32 x float> %311, <32 x float> %259)
  %313 = add nuw i64 %195, 57
  %314 = and i64 %313, 4294967295
  %315 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %314
  %316 = load float, float* %315, align 4, !tbaa !676
  %317 = insertelement <32 x float> undef, float %316, i32 0
  %318 = shufflevector <32 x float> %317, <32 x float> undef, <32 x i32> zeroinitializer
  %319 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %318, <32 x float> %311, <32 x float> %266)
  %320 = add nuw i64 %195, 58
  %321 = and i64 %320, 4294967295
  %322 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %321
  %323 = load float, float* %322, align 4, !tbaa !676
  %324 = insertelement <32 x float> undef, float %323, i32 0
  %325 = shufflevector <32 x float> %324, <32 x float> undef, <32 x i32> zeroinitializer
  %326 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %325, <32 x float> %311, <32 x float> %273)
  %327 = add nuw i64 %195, 59
  %328 = and i64 %327, 4294967295
  %329 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %328
  %330 = load float, float* %329, align 4, !tbaa !676
  %331 = insertelement <32 x float> undef, float %330, i32 0
  %332 = shufflevector <32 x float> %331, <32 x float> undef, <32 x i32> zeroinitializer
  %333 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %332, <32 x float> %311, <32 x float> %280)
  %334 = add nuw i64 %195, 60
  %335 = and i64 %334, 4294967295
  %336 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !676
  %338 = insertelement <32 x float> undef, float %337, i32 0
  %339 = shufflevector <32 x float> %338, <32 x float> undef, <32 x i32> zeroinitializer
  %340 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %339, <32 x float> %311, <32 x float> %287)
  %341 = add nuw i64 %195, 61
  %342 = and i64 %341, 4294967295
  %343 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %342
  %344 = load float, float* %343, align 4, !tbaa !676
  %345 = insertelement <32 x float> undef, float %344, i32 0
  %346 = shufflevector <32 x float> %345, <32 x float> undef, <32 x i32> zeroinitializer
  %347 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %346, <32 x float> %311, <32 x float> %294)
  %348 = add nuw i64 %195, 62
  %349 = and i64 %348, 4294967295
  %350 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %349
  %351 = load float, float* %350, align 4, !tbaa !676
  %352 = insertelement <32 x float> undef, float %351, i32 0
  %353 = shufflevector <32 x float> %352, <32 x float> undef, <32 x i32> zeroinitializer
  %354 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %353, <32 x float> %311, <32 x float> %301)
  %355 = add nuw nsw i64 %195, 84
  %356 = and i64 %355, 4294967295
  %357 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %356
  %358 = load float, float* %357, align 4, !tbaa !676
  %359 = insertelement <32 x float> undef, float %358, i32 0
  %360 = shufflevector <32 x float> %359, <32 x float> undef, <32 x i32> zeroinitializer
  %361 = or i64 %197, 96
  %362 = getelementptr inbounds [2048 x <32 x float>], [2048 x <32 x float>]* %4, i64 0, i64 0, i64 %361
  %363 = bitcast float* %362 to <32 x float>*
  %364 = load <32 x float>, <32 x float>* %363, align 16, !tbaa !670
  %365 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %360, <32 x float> %364, <32 x float> %312)
  %366 = add nuw i64 %195, 85
  %367 = and i64 %366, 4294967295
  %368 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %367
  %369 = load float, float* %368, align 4, !tbaa !676
  %370 = insertelement <32 x float> undef, float %369, i32 0
  %371 = shufflevector <32 x float> %370, <32 x float> undef, <32 x i32> zeroinitializer
  %372 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %371, <32 x float> %364, <32 x float> %319)
  %373 = add nuw i64 %195, 86
  %374 = and i64 %373, 4294967295
  %375 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %374
  %376 = load float, float* %375, align 4, !tbaa !676
  %377 = insertelement <32 x float> undef, float %376, i32 0
  %378 = shufflevector <32 x float> %377, <32 x float> undef, <32 x i32> zeroinitializer
  %379 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %378, <32 x float> %364, <32 x float> %326)
  %380 = add nuw i64 %195, 87
  %381 = and i64 %380, 4294967295
  %382 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %381
  %383 = load float, float* %382, align 4, !tbaa !676
  %384 = insertelement <32 x float> undef, float %383, i32 0
  %385 = shufflevector <32 x float> %384, <32 x float> undef, <32 x i32> zeroinitializer
  %386 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %385, <32 x float> %364, <32 x float> %333)
  %387 = add nuw i64 %195, 88
  %388 = and i64 %387, 4294967295
  %389 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %388
  %390 = load float, float* %389, align 4, !tbaa !676
  %391 = insertelement <32 x float> undef, float %390, i32 0
  %392 = shufflevector <32 x float> %391, <32 x float> undef, <32 x i32> zeroinitializer
  %393 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %392, <32 x float> %364, <32 x float> %340)
  %394 = add nuw i64 %195, 89
  %395 = and i64 %394, 4294967295
  %396 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %395
  %397 = load float, float* %396, align 4, !tbaa !676
  %398 = insertelement <32 x float> undef, float %397, i32 0
  %399 = shufflevector <32 x float> %398, <32 x float> undef, <32 x i32> zeroinitializer
  %400 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %399, <32 x float> %364, <32 x float> %347)
  %401 = add nuw i64 %195, 90
  %402 = and i64 %401, 4294967295
  %403 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !676
  %405 = insertelement <32 x float> undef, float %404, i32 0
  %406 = shufflevector <32 x float> %405, <32 x float> undef, <32 x i32> zeroinitializer
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %364, <32 x float> %354)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end24, label %for_begin25.preheader, !prof !5

for_end24:                                        ; preds = %for_begin25.preheader
  store <32 x float> %365, <32 x float>* %173, align 16, !tbaa !673
  store <32 x float> %372, <32 x float>* %176, align 16, !tbaa !673
  store <32 x float> %379, <32 x float>* %179, align 16, !tbaa !673
  store <32 x float> %386, <32 x float>* %182, align 16, !tbaa !673
  store <32 x float> %393, <32 x float>* %185, align 16, !tbaa !673
  store <32 x float> %400, <32 x float>* %188, align 16, !tbaa !673
  store <32 x float> %407, <32 x float>* %191, align 16, !tbaa !673
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %exitcond36 = icmp eq i64 %indvars.iv.next35, 4
  br i1 %exitcond36, label %for_begin28.preheader, label %for_body20, !prof !5

for_begin31.preheader:                            ; preds = %for_end33, %for_begin28.preheader
  %indvars.iv40 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next41, %for_end33 ]
  %408 = mul nuw nsw i64 %indvars.iv40, 7
  %409 = add nuw nsw i64 %408, %170
  %410 = mul nuw nsw i64 %indvars.iv40, 224
  br label %for_body32

for_end30:                                        ; preds = %for_end33
  %411 = add nuw nsw i32 %160, 1
  %exitcond43 = icmp eq i32 %411, 448
  br i1 %exitcond43, label %for_end18, label %for_begin19.preheader, !prof !5

for_body32:                                       ; preds = %for_body32, %for_begin31.preheader
  %indvars.iv37 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next38, %for_body32 ]
  %412 = add nuw nsw i64 %409, %indvars.iv37
  %413 = add nuw nsw i64 %412, 784
  %414 = add nuw nsw i64 %412, 1568
  %415 = add nuw nsw i64 %412, 2352
  %416 = add nuw nsw i64 %412, 3136
  %417 = add nuw nsw i64 %412, 3920
  %418 = add nuw nsw i64 %412, 4704
  %419 = add nuw nsw i64 %412, 5488
  %420 = add nuw nsw i64 %412, 6272
  %421 = add nuw nsw i64 %412, 7056
  %422 = add nuw nsw i64 %412, 7840
  %423 = add nuw nsw i64 %412, 8624
  %424 = add nuw nsw i64 %412, 9408
  %425 = add nuw nsw i64 %412, 10192
  %426 = add nuw nsw i64 %412, 10976
  %427 = add nuw nsw i64 %412, 11760
  %428 = add nuw nsw i64 %412, 12544
  %429 = add nuw nsw i64 %412, 13328
  %430 = add nuw nsw i64 %412, 14112
  %431 = add nuw nsw i64 %412, 14896
  %432 = add nuw nsw i64 %412, 15680
  %433 = add nuw nsw i64 %412, 16464
  %434 = add nuw nsw i64 %412, 17248
  %435 = add nuw nsw i64 %412, 18032
  %436 = add nuw nsw i64 %412, 18816
  %437 = add nuw nsw i64 %412, 19600
  %438 = add nuw nsw i64 %412, 20384
  %439 = add nuw nsw i64 %412, 21168
  %440 = add nuw nsw i64 %412, 21952
  %441 = add nuw nsw i64 %412, 22736
  %442 = add nuw nsw i64 %412, 23520
  %443 = add nuw nsw i64 %412, 24304
  %444 = shl i64 %indvars.iv37, 5
  %445 = add nuw nsw i64 %444, %410
  %446 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %445
  %447 = bitcast float* %446 to <32 x float>*
  %448 = load <32 x float>, <32 x float>* %447, align 16, !tbaa !673
  %449 = getelementptr inbounds float, float* %23, i64 %412
  %450 = extractelement <32 x float> %448, i64 0
  store float %450, float* %449, align 4, !tbaa !679
  %451 = getelementptr inbounds float, float* %23, i64 %413
  %452 = extractelement <32 x float> %448, i64 1
  store float %452, float* %451, align 4, !tbaa !679
  %453 = getelementptr inbounds float, float* %23, i64 %414
  %454 = extractelement <32 x float> %448, i64 2
  store float %454, float* %453, align 4, !tbaa !679
  %455 = getelementptr inbounds float, float* %23, i64 %415
  %456 = extractelement <32 x float> %448, i64 3
  store float %456, float* %455, align 4, !tbaa !679
  %457 = getelementptr inbounds float, float* %23, i64 %416
  %458 = extractelement <32 x float> %448, i64 4
  store float %458, float* %457, align 4, !tbaa !679
  %459 = getelementptr inbounds float, float* %23, i64 %417
  %460 = extractelement <32 x float> %448, i64 5
  store float %460, float* %459, align 4, !tbaa !679
  %461 = getelementptr inbounds float, float* %23, i64 %418
  %462 = extractelement <32 x float> %448, i64 6
  store float %462, float* %461, align 4, !tbaa !679
  %463 = getelementptr inbounds float, float* %23, i64 %419
  %464 = extractelement <32 x float> %448, i64 7
  store float %464, float* %463, align 4, !tbaa !679
  %465 = getelementptr inbounds float, float* %23, i64 %420
  %466 = extractelement <32 x float> %448, i64 8
  store float %466, float* %465, align 4, !tbaa !679
  %467 = getelementptr inbounds float, float* %23, i64 %421
  %468 = extractelement <32 x float> %448, i64 9
  store float %468, float* %467, align 4, !tbaa !679
  %469 = getelementptr inbounds float, float* %23, i64 %422
  %470 = extractelement <32 x float> %448, i64 10
  store float %470, float* %469, align 4, !tbaa !679
  %471 = getelementptr inbounds float, float* %23, i64 %423
  %472 = extractelement <32 x float> %448, i64 11
  store float %472, float* %471, align 4, !tbaa !679
  %473 = getelementptr inbounds float, float* %23, i64 %424
  %474 = extractelement <32 x float> %448, i64 12
  store float %474, float* %473, align 4, !tbaa !679
  %475 = getelementptr inbounds float, float* %23, i64 %425
  %476 = extractelement <32 x float> %448, i64 13
  store float %476, float* %475, align 4, !tbaa !679
  %477 = getelementptr inbounds float, float* %23, i64 %426
  %478 = extractelement <32 x float> %448, i64 14
  store float %478, float* %477, align 4, !tbaa !679
  %479 = getelementptr inbounds float, float* %23, i64 %427
  %480 = extractelement <32 x float> %448, i64 15
  store float %480, float* %479, align 4, !tbaa !679
  %481 = getelementptr inbounds float, float* %23, i64 %428
  %482 = extractelement <32 x float> %448, i64 16
  store float %482, float* %481, align 4, !tbaa !679
  %483 = getelementptr inbounds float, float* %23, i64 %429
  %484 = extractelement <32 x float> %448, i64 17
  store float %484, float* %483, align 4, !tbaa !679
  %485 = getelementptr inbounds float, float* %23, i64 %430
  %486 = extractelement <32 x float> %448, i64 18
  store float %486, float* %485, align 4, !tbaa !679
  %487 = getelementptr inbounds float, float* %23, i64 %431
  %488 = extractelement <32 x float> %448, i64 19
  store float %488, float* %487, align 4, !tbaa !679
  %489 = getelementptr inbounds float, float* %23, i64 %432
  %490 = extractelement <32 x float> %448, i64 20
  store float %490, float* %489, align 4, !tbaa !679
  %491 = getelementptr inbounds float, float* %23, i64 %433
  %492 = extractelement <32 x float> %448, i64 21
  store float %492, float* %491, align 4, !tbaa !679
  %493 = getelementptr inbounds float, float* %23, i64 %434
  %494 = extractelement <32 x float> %448, i64 22
  store float %494, float* %493, align 4, !tbaa !679
  %495 = getelementptr inbounds float, float* %23, i64 %435
  %496 = extractelement <32 x float> %448, i64 23
  store float %496, float* %495, align 4, !tbaa !679
  %497 = getelementptr inbounds float, float* %23, i64 %436
  %498 = extractelement <32 x float> %448, i64 24
  store float %498, float* %497, align 4, !tbaa !679
  %499 = getelementptr inbounds float, float* %23, i64 %437
  %500 = extractelement <32 x float> %448, i64 25
  store float %500, float* %499, align 4, !tbaa !679
  %501 = getelementptr inbounds float, float* %23, i64 %438
  %502 = extractelement <32 x float> %448, i64 26
  store float %502, float* %501, align 4, !tbaa !679
  %503 = getelementptr inbounds float, float* %23, i64 %439
  %504 = extractelement <32 x float> %448, i64 27
  store float %504, float* %503, align 4, !tbaa !679
  %505 = getelementptr inbounds float, float* %23, i64 %440
  %506 = extractelement <32 x float> %448, i64 28
  store float %506, float* %505, align 4, !tbaa !679
  %507 = getelementptr inbounds float, float* %23, i64 %441
  %508 = extractelement <32 x float> %448, i64 29
  store float %508, float* %507, align 4, !tbaa !679
  %509 = getelementptr inbounds float, float* %23, i64 %442
  %510 = extractelement <32 x float> %448, i64 30
  store float %510, float* %509, align 4, !tbaa !679
  %511 = getelementptr inbounds float, float* %23, i64 %443
  %512 = extractelement <32 x float> %448, i64 31
  store float %512, float* %511, align 4, !tbaa !679
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond39 = icmp eq i64 %indvars.iv.next38, 7
  br i1 %exitcond39, label %for_end33, label %for_body32, !prof !5

for_end33:                                        ; preds = %for_body32
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 4
  br i1 %exitcond42, label %for_end30, label %for_begin31.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_2_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !682
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !685
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fadd <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !688
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !685
  %22 = fadd <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !688
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !685
  %29 = fadd <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !688
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !685
  %36 = fadd <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !688
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !685
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !688
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !685
  %50 = fadd <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !688
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !685
  %57 = fadd <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !688
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !685
  %64 = fadd <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !688
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !685
  %71 = fadd <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !688
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !685
  %78 = fadd <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !688
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !685
  %85 = fadd <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !688
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !685
  %92 = fadd <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !688
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !685
  %97 = fadd float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !688
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_max_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_max_pool2d_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_max_pool2d_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %0 to float*
  %3 = bitcast i8* %1 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv13 = phi i64 [ 0, %entry ], [ %indvars.iv.next14, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv13, 3136
  %5 = mul nuw nsw i64 %indvars.iv13, 12544
  %6 = add nsw i64 %5, -113
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv10 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next11, %for_end6 ]
  %7 = mul nuw nsw i64 %indvars.iv10, 56
  %8 = add nuw nsw i64 %7, %4
  %9 = mul nuw nsw i64 %indvars.iv10, 224
  %10 = add nsw i64 %6, %9
  %11 = icmp eq i64 %indvars.iv10, 0
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %exitcond15 = icmp eq i64 %indvars.iv.next14, 64
  br i1 %exitcond15, label %for_end, label %for_begin1.preheader, !prof !5

for_body5:                                        ; preds = %for_end12.2, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_end12.2 ]
  %12 = add nuw nsw i64 %8, %indvars.iv
  %13 = getelementptr inbounds float, float* %2, i64 %12
  store float 0xC7EFFFFFE0000000, float* %13, align 4, !tbaa !691
  %14 = shl nuw nsw i64 %indvars.iv, 1
  %15 = add nsw i64 %10, %14
  br i1 %11, label %for_body11.us.preheader.1, label %for_body11.us.preheader

for_end6:                                         ; preds = %for_end12.2
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %exitcond12 = icmp eq i64 %indvars.iv.next11, 56
  br i1 %exitcond12, label %for_end3, label %for_begin4.preheader, !prof !5

for_body11.us.preheader:                          ; preds = %for_body5
  %16 = icmp eq i64 %indvars.iv, 0
  br i1 %16, label %if_end.us.2, label %if_then.us

if_then.us:                                       ; preds = %for_body11.us.preheader
  %17 = getelementptr inbounds float, float* %3, i64 %15
  %18 = load float, float* %17, align 4, !tbaa !694
  br label %if_end.us.2

if_end.us.2:                                      ; preds = %for_body11.us.preheader, %if_then.us
  %19 = phi float [ %18, %if_then.us ], [ 0xC7EFFFFFE0000000, %for_body11.us.preheader ]
  %20 = fcmp olt float %19, 0xC7EFFFFFE0000000
  %21 = select i1 %20, float 0xC7EFFFFFE0000000, float %19
  %22 = add nsw i64 %15, 1
  %23 = getelementptr inbounds float, float* %3, i64 %22
  %24 = load float, float* %23, align 4, !tbaa !694
  %25 = fcmp ogt float %21, %24
  %26 = select i1 %25, float %21, float %24
  %27 = add nsw i64 %15, 2
  %28 = getelementptr inbounds float, float* %3, i64 %27
  %29 = load float, float* %28, align 4, !tbaa !694
  %30 = fcmp ogt float %26, %29
  %31 = select i1 %30, float %26, float %29
  br label %for_body11.us.preheader.1

for_body11.us.preheader.1:                        ; preds = %if_end.us.2, %for_body5
  %.lcssa = phi float [ %31, %if_end.us.2 ], [ 0xC7EFFFFFE0000000, %for_body5 ]
  %32 = icmp eq i64 %indvars.iv, 0
  br i1 %32, label %for_body11.us.preheader.2, label %if_then.us.16

if_then.us.16:                                    ; preds = %for_body11.us.preheader.1
  %33 = add nsw i64 %15, 112
  %34 = getelementptr inbounds float, float* %3, i64 %33
  %35 = load float, float* %34, align 4, !tbaa !694
  br label %for_body11.us.preheader.2

for_body11.us.preheader.2:                        ; preds = %if_then.us.16, %for_body11.us.preheader.1
  %36 = phi float [ %35, %if_then.us.16 ], [ 0xC7EFFFFFE0000000, %for_body11.us.preheader.1 ]
  %37 = fcmp ogt float %.lcssa, %36
  %38 = select i1 %37, float %.lcssa, float %36
  %39 = add nsw i64 %15, 113
  %40 = getelementptr inbounds float, float* %3, i64 %39
  %41 = load float, float* %40, align 4, !tbaa !694
  %42 = fcmp ogt float %38, %41
  %43 = select i1 %42, float %38, float %41
  %44 = add nsw i64 %15, 114
  %45 = getelementptr inbounds float, float* %3, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !694
  %47 = fcmp ogt float %43, %46
  %48 = select i1 %47, float %43, float %46
  %49 = icmp eq i64 %indvars.iv, 0
  br i1 %49, label %for_end12.2, label %if_then.us.28

if_then.us.28:                                    ; preds = %for_body11.us.preheader.2
  %50 = add nsw i64 %15, 224
  %51 = getelementptr inbounds float, float* %3, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !694
  br label %for_end12.2

for_end12.2:                                      ; preds = %for_body11.us.preheader.2, %if_then.us.28
  %53 = phi float [ %52, %if_then.us.28 ], [ 0xC7EFFFFFE0000000, %for_body11.us.preheader.2 ]
  %54 = fcmp ogt float %48, %53
  %55 = select i1 %54, float %48, float %53
  %56 = add nsw i64 %15, 225
  %57 = getelementptr inbounds float, float* %3, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !694
  %59 = fcmp ogt float %55, %58
  %60 = select i1 %59, float %55, float %58
  %61 = add nsw i64 %15, 226
  %62 = getelementptr inbounds float, float* %3, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !694
  %64 = fcmp ogt float %60, %63
  %65 = select i1 %64, float %60, float %63
  store float %65, float* %13, align 4, !tbaa !691
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_1_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !697
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !700
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !703
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !700
  %22 = fmul <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !703
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !700
  %29 = fmul <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !703
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !700
  %36 = fmul <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !703
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !700
  %43 = fmul <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !703
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !700
  %50 = fmul <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !703
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !700
  %57 = fmul <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !703
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !700
  %64 = fmul <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !703
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !700
  %71 = fmul <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !703
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !700
  %78 = fmul <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !703
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !700
  %85 = fmul <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !703
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !700
  %92 = fmul <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !703
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !700
  %97 = fmul float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !703
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2048
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_16(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_16_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_16_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [8 x <32 x float>], align 16
  %4 = alloca [112 x <32 x float>], align 16
  %5 = alloca [294 x <32 x float>], align 128
  %6 = alloca [157323 x float], align 4
  %7 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar87 = phi i64 [ 0, %entry ], [ %indvar.next88, %for_end3 ]
  %8 = mul nuw nsw i64 %indvar87, 687
  %9 = trunc i64 %indvar87 to i32
  %10 = add i32 %9, -3
  %11 = icmp ult i32 %10, 224
  %12 = mul nuw nsw i64 %indvar87, 224
  %13 = add nsw i64 %12, -675
  br i1 %11, label %for_body5.us.us, label %for_begin4.preheader.preheader

for_begin4.preheader.preheader:                   ; preds = %for_begin1.preheader
  %scevgep94 = getelementptr [157323 x float], [157323 x float]* %6, i64 0, i64 %8
  %scevgep9495 = bitcast float* %scevgep94 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %scevgep9495, i8 0, i64 2748, i1 false)
  br label %for_end3

for_body5.us.us:                                  ; preds = %for_begin1.preheader, %if_end.us.us
  %indvars.iv96 = phi i64 [ %indvars.iv.next97, %if_end.us.us ], [ 0, %for_begin1.preheader ]
  %14 = add nuw nsw i64 %8, %indvars.iv96
  %15 = trunc i64 %indvars.iv96 to i32
  %16 = add i32 %15, -3
  %17 = icmp ult i32 %16, 224
  br i1 %17, label %if_then.us.us, label %if_end.us.us

if_then.us.us:                                    ; preds = %for_body5.us.us
  %18 = add nsw i64 %13, %indvars.iv96
  %19 = getelementptr inbounds float, float* %7, i64 %18
  %20 = load float, float* %19, align 4, !tbaa !706
  br label %if_end.us.us

if_end.us.us:                                     ; preds = %if_then.us.us, %for_body5.us.us
  %21 = phi float [ %20, %if_then.us.us ], [ 0.000000e+00, %for_body5.us.us ]
  %22 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %14
  store float %21, float* %22, align 4, !tbaa !709
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %exitcond99 = icmp eq i64 %indvars.iv.next97, 229
  br i1 %exitcond99, label %for_end6.us-lcssa.us.us, label %for_body5.us.us, !prof !5

for_end6.us-lcssa.us.us:                          ; preds = %if_end.us.us
  %23 = add nuw nsw i64 %8, 229
  %24 = add nuw nsw i64 %12, 49501
  br label %for_body5.us.us.1

for_begin7.preheader:                             ; preds = %for_end3
  %25 = bitcast [8 x <32 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0
  %26 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_end3:                                         ; preds = %if_end.us.us.2, %for_begin4.preheader.preheader
  %indvar.next88 = add nuw nsw i64 %indvar87, 1
  %exitcond104 = icmp eq i64 %indvar.next88, 229
  br i1 %exitcond104, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv81 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next82, %for_end12 ]
  %27 = mul nuw nsw i64 %indvars.iv81, 672
  %28 = trunc i64 %indvars.iv81 to i32
  %29 = urem i32 %28, 7
  %30 = mul nuw nsw i32 %29, 7
  %31 = udiv i32 %28, 7
  %32 = mul nsw i32 %31, 4704
  %33 = add nuw i32 %30, %32
  %34 = zext i32 %33 to i64
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %35 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %36 = bitcast float* %35 to <32 x float>*
  %37 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %38 = bitcast float* %37 to <32 x float>*
  %39 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %40 = bitcast float* %39 to <32 x float>*
  %41 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %42 = bitcast float* %41 to <32 x float>*
  %43 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %44 = bitcast float* %43 to <32 x float>*
  %45 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %46 = bitcast float* %45 to <32 x float>*
  %47 = getelementptr inbounds [8 x <32 x float>], [8 x <32 x float>]* %3, i64 0, i64 0, i64 224
  %48 = bitcast float* %47 to <32 x float>*
  %49 = bitcast i8* %2 to float*
  %50 = bitcast [8 x <32 x float>]* %3 to i8*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv78 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next79, %for_begin13.preheader ]
  %51 = mul nuw nsw i64 %indvars.iv78, 96
  %52 = add nuw nsw i64 %51, %27
  %53 = add nuw nsw i64 %indvars.iv78, %34
  %54 = add nuw nsw i64 %53, 147
  %55 = add nuw nsw i64 %53, 294
  %56 = add nuw nsw i64 %53, 441
  %57 = add nuw nsw i64 %53, 588
  %58 = add nuw nsw i64 %53, 735
  %59 = add nuw nsw i64 %53, 882
  %60 = add nuw nsw i64 %53, 1029
  %61 = add nuw nsw i64 %53, 1176
  %62 = add nuw nsw i64 %53, 1323
  %63 = add nuw nsw i64 %53, 1470
  %64 = add nuw nsw i64 %53, 1617
  %65 = add nuw nsw i64 %53, 1764
  %66 = add nuw nsw i64 %53, 1911
  %67 = add nuw nsw i64 %53, 2058
  %68 = add nuw nsw i64 %53, 2205
  %69 = add nuw nsw i64 %53, 2352
  %70 = add nuw nsw i64 %53, 2499
  %71 = add nuw nsw i64 %53, 2646
  %72 = add nuw nsw i64 %53, 2793
  %73 = add nuw nsw i64 %53, 2940
  %74 = add nuw nsw i64 %53, 3087
  %75 = add nuw nsw i64 %53, 3234
  %76 = add nuw nsw i64 %53, 3381
  %77 = add nuw nsw i64 %53, 3528
  %78 = add nuw nsw i64 %53, 3675
  %79 = add nuw nsw i64 %53, 3822
  %80 = add nuw nsw i64 %53, 3969
  %81 = add nuw nsw i64 %53, 4116
  %82 = add nuw nsw i64 %53, 4263
  %83 = add nuw nsw i64 %53, 4410
  %84 = add nuw nsw i64 %53, 4557
  %85 = getelementptr inbounds float, float* %26, i64 %53
  %86 = load float, float* %85, align 4, !tbaa !712
  %87 = insertelement <32 x float> undef, float %86, i32 0
  %88 = getelementptr inbounds float, float* %26, i64 %54
  %89 = load float, float* %88, align 4, !tbaa !712
  %90 = insertelement <32 x float> %87, float %89, i32 1
  %91 = getelementptr inbounds float, float* %26, i64 %55
  %92 = load float, float* %91, align 4, !tbaa !712
  %93 = insertelement <32 x float> %90, float %92, i32 2
  %94 = getelementptr inbounds float, float* %26, i64 %56
  %95 = load float, float* %94, align 4, !tbaa !712
  %96 = insertelement <32 x float> %93, float %95, i32 3
  %97 = getelementptr inbounds float, float* %26, i64 %57
  %98 = load float, float* %97, align 4, !tbaa !712
  %99 = insertelement <32 x float> %96, float %98, i32 4
  %100 = getelementptr inbounds float, float* %26, i64 %58
  %101 = load float, float* %100, align 4, !tbaa !712
  %102 = insertelement <32 x float> %99, float %101, i32 5
  %103 = getelementptr inbounds float, float* %26, i64 %59
  %104 = load float, float* %103, align 4, !tbaa !712
  %105 = insertelement <32 x float> %102, float %104, i32 6
  %106 = getelementptr inbounds float, float* %26, i64 %60
  %107 = load float, float* %106, align 4, !tbaa !712
  %108 = insertelement <32 x float> %105, float %107, i32 7
  %109 = getelementptr inbounds float, float* %26, i64 %61
  %110 = load float, float* %109, align 4, !tbaa !712
  %111 = insertelement <32 x float> %108, float %110, i32 8
  %112 = getelementptr inbounds float, float* %26, i64 %62
  %113 = load float, float* %112, align 4, !tbaa !712
  %114 = insertelement <32 x float> %111, float %113, i32 9
  %115 = getelementptr inbounds float, float* %26, i64 %63
  %116 = load float, float* %115, align 4, !tbaa !712
  %117 = insertelement <32 x float> %114, float %116, i32 10
  %118 = getelementptr inbounds float, float* %26, i64 %64
  %119 = load float, float* %118, align 4, !tbaa !712
  %120 = insertelement <32 x float> %117, float %119, i32 11
  %121 = getelementptr inbounds float, float* %26, i64 %65
  %122 = load float, float* %121, align 4, !tbaa !712
  %123 = insertelement <32 x float> %120, float %122, i32 12
  %124 = getelementptr inbounds float, float* %26, i64 %66
  %125 = load float, float* %124, align 4, !tbaa !712
  %126 = insertelement <32 x float> %123, float %125, i32 13
  %127 = getelementptr inbounds float, float* %26, i64 %67
  %128 = load float, float* %127, align 4, !tbaa !712
  %129 = insertelement <32 x float> %126, float %128, i32 14
  %130 = getelementptr inbounds float, float* %26, i64 %68
  %131 = load float, float* %130, align 4, !tbaa !712
  %132 = insertelement <32 x float> %129, float %131, i32 15
  %133 = getelementptr inbounds float, float* %26, i64 %69
  %134 = load float, float* %133, align 4, !tbaa !712
  %135 = insertelement <32 x float> %132, float %134, i32 16
  %136 = getelementptr inbounds float, float* %26, i64 %70
  %137 = load float, float* %136, align 4, !tbaa !712
  %138 = insertelement <32 x float> %135, float %137, i32 17
  %139 = getelementptr inbounds float, float* %26, i64 %71
  %140 = load float, float* %139, align 4, !tbaa !712
  %141 = insertelement <32 x float> %138, float %140, i32 18
  %142 = getelementptr inbounds float, float* %26, i64 %72
  %143 = load float, float* %142, align 4, !tbaa !712
  %144 = insertelement <32 x float> %141, float %143, i32 19
  %145 = getelementptr inbounds float, float* %26, i64 %73
  %146 = load float, float* %145, align 4, !tbaa !712
  %147 = insertelement <32 x float> %144, float %146, i32 20
  %148 = getelementptr inbounds float, float* %26, i64 %74
  %149 = load float, float* %148, align 4, !tbaa !712
  %150 = insertelement <32 x float> %147, float %149, i32 21
  %151 = getelementptr inbounds float, float* %26, i64 %75
  %152 = load float, float* %151, align 4, !tbaa !712
  %153 = insertelement <32 x float> %150, float %152, i32 22
  %154 = getelementptr inbounds float, float* %26, i64 %76
  %155 = load float, float* %154, align 4, !tbaa !712
  %156 = insertelement <32 x float> %153, float %155, i32 23
  %157 = getelementptr inbounds float, float* %26, i64 %77
  %158 = load float, float* %157, align 4, !tbaa !712
  %159 = insertelement <32 x float> %156, float %158, i32 24
  %160 = getelementptr inbounds float, float* %26, i64 %78
  %161 = load float, float* %160, align 4, !tbaa !712
  %162 = insertelement <32 x float> %159, float %161, i32 25
  %163 = getelementptr inbounds float, float* %26, i64 %79
  %164 = load float, float* %163, align 4, !tbaa !712
  %165 = insertelement <32 x float> %162, float %164, i32 26
  %166 = getelementptr inbounds float, float* %26, i64 %80
  %167 = load float, float* %166, align 4, !tbaa !712
  %168 = insertelement <32 x float> %165, float %167, i32 27
  %169 = getelementptr inbounds float, float* %26, i64 %81
  %170 = load float, float* %169, align 4, !tbaa !712
  %171 = insertelement <32 x float> %168, float %170, i32 28
  %172 = getelementptr inbounds float, float* %26, i64 %82
  %173 = load float, float* %172, align 4, !tbaa !712
  %174 = insertelement <32 x float> %171, float %173, i32 29
  %175 = getelementptr inbounds float, float* %26, i64 %83
  %176 = load float, float* %175, align 4, !tbaa !712
  %177 = insertelement <32 x float> %174, float %176, i32 30
  %178 = getelementptr inbounds float, float* %26, i64 %84
  %179 = load float, float* %178, align 4, !tbaa !712
  %180 = insertelement <32 x float> %177, float %179, i32 31
  %181 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %52
  %182 = bitcast float* %181 to <32 x float>*
  store <32 x float> %180, <32 x float>* %182, align 128, !tbaa !715
  %183 = add nuw nsw i64 %52, 32
  %184 = add nuw nsw i64 %53, 49
  %185 = add nuw nsw i64 %53, 196
  %186 = add nuw nsw i64 %53, 343
  %187 = add nuw nsw i64 %53, 490
  %188 = add nuw nsw i64 %53, 637
  %189 = add nuw nsw i64 %53, 784
  %190 = add nuw nsw i64 %53, 931
  %191 = add nuw nsw i64 %53, 1078
  %192 = add nuw nsw i64 %53, 1225
  %193 = add nuw nsw i64 %53, 1372
  %194 = add nuw nsw i64 %53, 1519
  %195 = add nuw nsw i64 %53, 1666
  %196 = add nuw nsw i64 %53, 1813
  %197 = add nuw nsw i64 %53, 1960
  %198 = add nuw nsw i64 %53, 2107
  %199 = add nuw nsw i64 %53, 2254
  %200 = add nuw nsw i64 %53, 2401
  %201 = add nuw nsw i64 %53, 2548
  %202 = add nuw nsw i64 %53, 2695
  %203 = add nuw nsw i64 %53, 2842
  %204 = add nuw nsw i64 %53, 2989
  %205 = add nuw nsw i64 %53, 3136
  %206 = add nuw nsw i64 %53, 3283
  %207 = add nuw nsw i64 %53, 3430
  %208 = add nuw nsw i64 %53, 3577
  %209 = add nuw nsw i64 %53, 3724
  %210 = add nuw nsw i64 %53, 3871
  %211 = add nuw nsw i64 %53, 4018
  %212 = add nuw nsw i64 %53, 4165
  %213 = add nuw nsw i64 %53, 4312
  %214 = add nuw nsw i64 %53, 4459
  %215 = add nuw nsw i64 %53, 4606
  %216 = getelementptr inbounds float, float* %26, i64 %184
  %217 = load float, float* %216, align 4, !tbaa !712
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = getelementptr inbounds float, float* %26, i64 %185
  %220 = load float, float* %219, align 4, !tbaa !712
  %221 = insertelement <32 x float> %218, float %220, i32 1
  %222 = getelementptr inbounds float, float* %26, i64 %186
  %223 = load float, float* %222, align 4, !tbaa !712
  %224 = insertelement <32 x float> %221, float %223, i32 2
  %225 = getelementptr inbounds float, float* %26, i64 %187
  %226 = load float, float* %225, align 4, !tbaa !712
  %227 = insertelement <32 x float> %224, float %226, i32 3
  %228 = getelementptr inbounds float, float* %26, i64 %188
  %229 = load float, float* %228, align 4, !tbaa !712
  %230 = insertelement <32 x float> %227, float %229, i32 4
  %231 = getelementptr inbounds float, float* %26, i64 %189
  %232 = load float, float* %231, align 4, !tbaa !712
  %233 = insertelement <32 x float> %230, float %232, i32 5
  %234 = getelementptr inbounds float, float* %26, i64 %190
  %235 = load float, float* %234, align 4, !tbaa !712
  %236 = insertelement <32 x float> %233, float %235, i32 6
  %237 = getelementptr inbounds float, float* %26, i64 %191
  %238 = load float, float* %237, align 4, !tbaa !712
  %239 = insertelement <32 x float> %236, float %238, i32 7
  %240 = getelementptr inbounds float, float* %26, i64 %192
  %241 = load float, float* %240, align 4, !tbaa !712
  %242 = insertelement <32 x float> %239, float %241, i32 8
  %243 = getelementptr inbounds float, float* %26, i64 %193
  %244 = load float, float* %243, align 4, !tbaa !712
  %245 = insertelement <32 x float> %242, float %244, i32 9
  %246 = getelementptr inbounds float, float* %26, i64 %194
  %247 = load float, float* %246, align 4, !tbaa !712
  %248 = insertelement <32 x float> %245, float %247, i32 10
  %249 = getelementptr inbounds float, float* %26, i64 %195
  %250 = load float, float* %249, align 4, !tbaa !712
  %251 = insertelement <32 x float> %248, float %250, i32 11
  %252 = getelementptr inbounds float, float* %26, i64 %196
  %253 = load float, float* %252, align 4, !tbaa !712
  %254 = insertelement <32 x float> %251, float %253, i32 12
  %255 = getelementptr inbounds float, float* %26, i64 %197
  %256 = load float, float* %255, align 4, !tbaa !712
  %257 = insertelement <32 x float> %254, float %256, i32 13
  %258 = getelementptr inbounds float, float* %26, i64 %198
  %259 = load float, float* %258, align 4, !tbaa !712
  %260 = insertelement <32 x float> %257, float %259, i32 14
  %261 = getelementptr inbounds float, float* %26, i64 %199
  %262 = load float, float* %261, align 4, !tbaa !712
  %263 = insertelement <32 x float> %260, float %262, i32 15
  %264 = getelementptr inbounds float, float* %26, i64 %200
  %265 = load float, float* %264, align 4, !tbaa !712
  %266 = insertelement <32 x float> %263, float %265, i32 16
  %267 = getelementptr inbounds float, float* %26, i64 %201
  %268 = load float, float* %267, align 4, !tbaa !712
  %269 = insertelement <32 x float> %266, float %268, i32 17
  %270 = getelementptr inbounds float, float* %26, i64 %202
  %271 = load float, float* %270, align 4, !tbaa !712
  %272 = insertelement <32 x float> %269, float %271, i32 18
  %273 = getelementptr inbounds float, float* %26, i64 %203
  %274 = load float, float* %273, align 4, !tbaa !712
  %275 = insertelement <32 x float> %272, float %274, i32 19
  %276 = getelementptr inbounds float, float* %26, i64 %204
  %277 = load float, float* %276, align 4, !tbaa !712
  %278 = insertelement <32 x float> %275, float %277, i32 20
  %279 = getelementptr inbounds float, float* %26, i64 %205
  %280 = load float, float* %279, align 4, !tbaa !712
  %281 = insertelement <32 x float> %278, float %280, i32 21
  %282 = getelementptr inbounds float, float* %26, i64 %206
  %283 = load float, float* %282, align 4, !tbaa !712
  %284 = insertelement <32 x float> %281, float %283, i32 22
  %285 = getelementptr inbounds float, float* %26, i64 %207
  %286 = load float, float* %285, align 4, !tbaa !712
  %287 = insertelement <32 x float> %284, float %286, i32 23
  %288 = getelementptr inbounds float, float* %26, i64 %208
  %289 = load float, float* %288, align 4, !tbaa !712
  %290 = insertelement <32 x float> %287, float %289, i32 24
  %291 = getelementptr inbounds float, float* %26, i64 %209
  %292 = load float, float* %291, align 4, !tbaa !712
  %293 = insertelement <32 x float> %290, float %292, i32 25
  %294 = getelementptr inbounds float, float* %26, i64 %210
  %295 = load float, float* %294, align 4, !tbaa !712
  %296 = insertelement <32 x float> %293, float %295, i32 26
  %297 = getelementptr inbounds float, float* %26, i64 %211
  %298 = load float, float* %297, align 4, !tbaa !712
  %299 = insertelement <32 x float> %296, float %298, i32 27
  %300 = getelementptr inbounds float, float* %26, i64 %212
  %301 = load float, float* %300, align 4, !tbaa !712
  %302 = insertelement <32 x float> %299, float %301, i32 28
  %303 = getelementptr inbounds float, float* %26, i64 %213
  %304 = load float, float* %303, align 4, !tbaa !712
  %305 = insertelement <32 x float> %302, float %304, i32 29
  %306 = getelementptr inbounds float, float* %26, i64 %214
  %307 = load float, float* %306, align 4, !tbaa !712
  %308 = insertelement <32 x float> %305, float %307, i32 30
  %309 = getelementptr inbounds float, float* %26, i64 %215
  %310 = load float, float* %309, align 4, !tbaa !712
  %311 = insertelement <32 x float> %308, float %310, i32 31
  %312 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %183
  %313 = bitcast float* %312 to <32 x float>*
  store <32 x float> %311, <32 x float>* %313, align 128, !tbaa !715
  %314 = add nuw nsw i64 %52, 64
  %315 = add nuw nsw i64 %53, 98
  %316 = add nuw nsw i64 %53, 245
  %317 = add nuw nsw i64 %53, 392
  %318 = add nuw nsw i64 %53, 539
  %319 = add nuw nsw i64 %53, 686
  %320 = add nuw nsw i64 %53, 833
  %321 = add nuw nsw i64 %53, 980
  %322 = add nuw nsw i64 %53, 1127
  %323 = add nuw nsw i64 %53, 1274
  %324 = add nuw nsw i64 %53, 1421
  %325 = add nuw nsw i64 %53, 1568
  %326 = add nuw nsw i64 %53, 1715
  %327 = add nuw nsw i64 %53, 1862
  %328 = add nuw nsw i64 %53, 2009
  %329 = add nuw nsw i64 %53, 2156
  %330 = add nuw nsw i64 %53, 2303
  %331 = add nuw nsw i64 %53, 2450
  %332 = add nuw nsw i64 %53, 2597
  %333 = add nuw nsw i64 %53, 2744
  %334 = add nuw nsw i64 %53, 2891
  %335 = add nuw nsw i64 %53, 3038
  %336 = add nuw nsw i64 %53, 3185
  %337 = add nuw nsw i64 %53, 3332
  %338 = add nuw nsw i64 %53, 3479
  %339 = add nuw nsw i64 %53, 3626
  %340 = add nuw nsw i64 %53, 3773
  %341 = add nuw nsw i64 %53, 3920
  %342 = add nuw nsw i64 %53, 4067
  %343 = add nuw nsw i64 %53, 4214
  %344 = add nuw nsw i64 %53, 4361
  %345 = add nuw nsw i64 %53, 4508
  %346 = add nuw nsw i64 %53, 4655
  %347 = getelementptr inbounds float, float* %26, i64 %315
  %348 = load float, float* %347, align 4, !tbaa !712
  %349 = insertelement <32 x float> undef, float %348, i32 0
  %350 = getelementptr inbounds float, float* %26, i64 %316
  %351 = load float, float* %350, align 4, !tbaa !712
  %352 = insertelement <32 x float> %349, float %351, i32 1
  %353 = getelementptr inbounds float, float* %26, i64 %317
  %354 = load float, float* %353, align 4, !tbaa !712
  %355 = insertelement <32 x float> %352, float %354, i32 2
  %356 = getelementptr inbounds float, float* %26, i64 %318
  %357 = load float, float* %356, align 4, !tbaa !712
  %358 = insertelement <32 x float> %355, float %357, i32 3
  %359 = getelementptr inbounds float, float* %26, i64 %319
  %360 = load float, float* %359, align 4, !tbaa !712
  %361 = insertelement <32 x float> %358, float %360, i32 4
  %362 = getelementptr inbounds float, float* %26, i64 %320
  %363 = load float, float* %362, align 4, !tbaa !712
  %364 = insertelement <32 x float> %361, float %363, i32 5
  %365 = getelementptr inbounds float, float* %26, i64 %321
  %366 = load float, float* %365, align 4, !tbaa !712
  %367 = insertelement <32 x float> %364, float %366, i32 6
  %368 = getelementptr inbounds float, float* %26, i64 %322
  %369 = load float, float* %368, align 4, !tbaa !712
  %370 = insertelement <32 x float> %367, float %369, i32 7
  %371 = getelementptr inbounds float, float* %26, i64 %323
  %372 = load float, float* %371, align 4, !tbaa !712
  %373 = insertelement <32 x float> %370, float %372, i32 8
  %374 = getelementptr inbounds float, float* %26, i64 %324
  %375 = load float, float* %374, align 4, !tbaa !712
  %376 = insertelement <32 x float> %373, float %375, i32 9
  %377 = getelementptr inbounds float, float* %26, i64 %325
  %378 = load float, float* %377, align 4, !tbaa !712
  %379 = insertelement <32 x float> %376, float %378, i32 10
  %380 = getelementptr inbounds float, float* %26, i64 %326
  %381 = load float, float* %380, align 4, !tbaa !712
  %382 = insertelement <32 x float> %379, float %381, i32 11
  %383 = getelementptr inbounds float, float* %26, i64 %327
  %384 = load float, float* %383, align 4, !tbaa !712
  %385 = insertelement <32 x float> %382, float %384, i32 12
  %386 = getelementptr inbounds float, float* %26, i64 %328
  %387 = load float, float* %386, align 4, !tbaa !712
  %388 = insertelement <32 x float> %385, float %387, i32 13
  %389 = getelementptr inbounds float, float* %26, i64 %329
  %390 = load float, float* %389, align 4, !tbaa !712
  %391 = insertelement <32 x float> %388, float %390, i32 14
  %392 = getelementptr inbounds float, float* %26, i64 %330
  %393 = load float, float* %392, align 4, !tbaa !712
  %394 = insertelement <32 x float> %391, float %393, i32 15
  %395 = getelementptr inbounds float, float* %26, i64 %331
  %396 = load float, float* %395, align 4, !tbaa !712
  %397 = insertelement <32 x float> %394, float %396, i32 16
  %398 = getelementptr inbounds float, float* %26, i64 %332
  %399 = load float, float* %398, align 4, !tbaa !712
  %400 = insertelement <32 x float> %397, float %399, i32 17
  %401 = getelementptr inbounds float, float* %26, i64 %333
  %402 = load float, float* %401, align 4, !tbaa !712
  %403 = insertelement <32 x float> %400, float %402, i32 18
  %404 = getelementptr inbounds float, float* %26, i64 %334
  %405 = load float, float* %404, align 4, !tbaa !712
  %406 = insertelement <32 x float> %403, float %405, i32 19
  %407 = getelementptr inbounds float, float* %26, i64 %335
  %408 = load float, float* %407, align 4, !tbaa !712
  %409 = insertelement <32 x float> %406, float %408, i32 20
  %410 = getelementptr inbounds float, float* %26, i64 %336
  %411 = load float, float* %410, align 4, !tbaa !712
  %412 = insertelement <32 x float> %409, float %411, i32 21
  %413 = getelementptr inbounds float, float* %26, i64 %337
  %414 = load float, float* %413, align 4, !tbaa !712
  %415 = insertelement <32 x float> %412, float %414, i32 22
  %416 = getelementptr inbounds float, float* %26, i64 %338
  %417 = load float, float* %416, align 4, !tbaa !712
  %418 = insertelement <32 x float> %415, float %417, i32 23
  %419 = getelementptr inbounds float, float* %26, i64 %339
  %420 = load float, float* %419, align 4, !tbaa !712
  %421 = insertelement <32 x float> %418, float %420, i32 24
  %422 = getelementptr inbounds float, float* %26, i64 %340
  %423 = load float, float* %422, align 4, !tbaa !712
  %424 = insertelement <32 x float> %421, float %423, i32 25
  %425 = getelementptr inbounds float, float* %26, i64 %341
  %426 = load float, float* %425, align 4, !tbaa !712
  %427 = insertelement <32 x float> %424, float %426, i32 26
  %428 = getelementptr inbounds float, float* %26, i64 %342
  %429 = load float, float* %428, align 4, !tbaa !712
  %430 = insertelement <32 x float> %427, float %429, i32 27
  %431 = getelementptr inbounds float, float* %26, i64 %343
  %432 = load float, float* %431, align 4, !tbaa !712
  %433 = insertelement <32 x float> %430, float %432, i32 28
  %434 = getelementptr inbounds float, float* %26, i64 %344
  %435 = load float, float* %434, align 4, !tbaa !712
  %436 = insertelement <32 x float> %433, float %435, i32 29
  %437 = getelementptr inbounds float, float* %26, i64 %345
  %438 = load float, float* %437, align 4, !tbaa !712
  %439 = insertelement <32 x float> %436, float %438, i32 30
  %440 = getelementptr inbounds float, float* %26, i64 %346
  %441 = load float, float* %440, align 4, !tbaa !712
  %442 = insertelement <32 x float> %439, float %441, i32 31
  %443 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %314
  %444 = bitcast float* %443 to <32 x float>*
  store <32 x float> %442, <32 x float>* %444, align 128, !tbaa !715
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %exitcond80 = icmp eq i64 %indvars.iv.next79, 7
  br i1 %exitcond80, label %for_end12, label %for_begin13.preheader, !prof !5

for_end12:                                        ; preds = %for_begin13.preheader
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %exitcond83 = icmp eq i64 %indvars.iv.next82, 14
  br i1 %exitcond83, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end36, %for_begin16.preheader
  %445 = phi i32 [ 0, %for_begin16.preheader ], [ %626, %for_end36 ]
  %446 = urem i32 %445, 112
  %447 = mul nuw nsw i32 %446, 1374
  %448 = udiv i32 %445, 112
  %449 = mul nsw i32 %448, 4704
  %450 = zext i32 %449 to i64
  %451 = zext i32 %447 to i64
  br label %for_body20

for_end18:                                        ; preds = %for_end36
  ret void

for_begin34.preheader:                            ; preds = %for_begin31.preheader
  %452 = mul nuw nsw i32 %446, 112
  %453 = mul nsw i32 %448, 401408
  %454 = add nuw nsw i32 %453, %452
  %455 = zext i32 %454 to i64
  br label %for_begin37.preheader

for_body20:                                       ; preds = %for_begin31.preheader, %for_begin19.preheader
  %indvar = phi i64 [ 0, %for_begin19.preheader ], [ %indvar.next, %for_begin31.preheader ]
  %456 = shl i64 %indvar, 3
  %scevgep = getelementptr [112 x <32 x float>], [112 x <32 x float>]* %4, i64 0, i64 %456
  %scevgep66 = bitcast <32 x float>* %scevgep to i8*
  %457 = shl i64 %indvar, 4
  %458 = add nsw i64 %457, %451
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 0, i64 1024, i1 false)
  br label %for_begin25.preheader

for_begin31.preheader:                            ; preds = %for_end27
  store <32 x float> %580, <32 x float>* %.sub, align 16, !tbaa !718
  store <32 x float> %586, <32 x float>* %36, align 16, !tbaa !718
  store <32 x float> %592, <32 x float>* %38, align 16, !tbaa !718
  store <32 x float> %598, <32 x float>* %40, align 16, !tbaa !718
  store <32 x float> %604, <32 x float>* %42, align 16, !tbaa !718
  store <32 x float> %610, <32 x float>* %44, align 16, !tbaa !718
  store <32 x float> %616, <32 x float>* %46, align 16, !tbaa !718
  store <32 x float> %622, <32 x float>* %48, align 16, !tbaa !718
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep66, i8* nonnull align 16 %25, i64 1024, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond67 = icmp eq i64 %indvar.next, 14
  br i1 %exitcond67, label %for_begin34.preheader, label %for_body20, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_body20
  %indvars.iv60 = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next61, %for_end27 ]
  %.lcssa17.lcssa46 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %622, %for_end27 ]
  %.lcssa15.lcssa44 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %616, %for_end27 ]
  %.lcssa13.lcssa42 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %610, %for_end27 ]
  %.lcssa11.lcssa40 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %604, %for_end27 ]
  %.lcssa9.lcssa38 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %598, %for_end27 ]
  %.lcssa7.lcssa37 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %592, %for_end27 ]
  %.lcssa5.lcssa35 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %586, %for_end27 ]
  %.lcssa.lcssa33 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %580, %for_end27 ]
  %459 = mul nuw nsw i64 %indvars.iv60, 687
  %460 = add nsw i64 %458, %459
  %461 = mul nuw nsw i64 %indvars.iv60, 672
  %462 = add nuw nsw i64 %461, %450
  br label %for_begin28.preheader

for_begin28.preheader:                            ; preds = %for_begin28.preheader, %for_begin25.preheader
  %indvars.iv = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next, %for_begin28.preheader ]
  %.lcssa1732 = phi <32 x float> [ %.lcssa17.lcssa46, %for_begin25.preheader ], [ %622, %for_begin28.preheader ]
  %.lcssa1530 = phi <32 x float> [ %.lcssa15.lcssa44, %for_begin25.preheader ], [ %616, %for_begin28.preheader ]
  %.lcssa1328 = phi <32 x float> [ %.lcssa13.lcssa42, %for_begin25.preheader ], [ %610, %for_begin28.preheader ]
  %.lcssa1126 = phi <32 x float> [ %.lcssa11.lcssa40, %for_begin25.preheader ], [ %604, %for_begin28.preheader ]
  %.lcssa924 = phi <32 x float> [ %.lcssa9.lcssa38, %for_begin25.preheader ], [ %598, %for_begin28.preheader ]
  %.lcssa722 = phi <32 x float> [ %.lcssa7.lcssa37, %for_begin25.preheader ], [ %592, %for_begin28.preheader ]
  %.lcssa521 = phi <32 x float> [ %.lcssa5.lcssa35, %for_begin25.preheader ], [ %586, %for_begin28.preheader ]
  %.lcssa19 = phi <32 x float> [ %.lcssa.lcssa33, %for_begin25.preheader ], [ %580, %for_begin28.preheader ]
  %463 = add nsw i64 %460, %indvars.iv
  %464 = mul nuw nsw i64 %indvars.iv, 96
  %465 = add nuw nsw i64 %462, %464
  %466 = and i64 %463, 4294967295
  %467 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %466
  %468 = load float, float* %467, align 4, !tbaa !709
  %469 = insertelement <32 x float> undef, float %468, i32 0
  %470 = shufflevector <32 x float> %469, <32 x float> undef, <32 x i32> zeroinitializer
  %471 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %465
  %472 = bitcast float* %471 to <32 x float>*
  %473 = load <32 x float>, <32 x float>* %472, align 128, !tbaa !715
  %474 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %470, <32 x float> %473, <32 x float> %.lcssa19)
  %475 = add nuw nsw i64 %463, 2
  %476 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %475
  %477 = load float, float* %476, align 4, !tbaa !709
  %478 = insertelement <32 x float> undef, float %477, i32 0
  %479 = shufflevector <32 x float> %478, <32 x float> undef, <32 x i32> zeroinitializer
  %480 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %479, <32 x float> %473, <32 x float> %.lcssa521)
  %481 = add nuw nsw i64 %463, 4
  %482 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %481
  %483 = load float, float* %482, align 4, !tbaa !709
  %484 = insertelement <32 x float> undef, float %483, i32 0
  %485 = shufflevector <32 x float> %484, <32 x float> undef, <32 x i32> zeroinitializer
  %486 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %485, <32 x float> %473, <32 x float> %.lcssa722)
  %487 = add nuw nsw i64 %463, 6
  %488 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %487
  %489 = load float, float* %488, align 4, !tbaa !709
  %490 = insertelement <32 x float> undef, float %489, i32 0
  %491 = shufflevector <32 x float> %490, <32 x float> undef, <32 x i32> zeroinitializer
  %492 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %491, <32 x float> %473, <32 x float> %.lcssa924)
  %493 = add nuw nsw i64 %463, 8
  %494 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %493
  %495 = load float, float* %494, align 4, !tbaa !709
  %496 = insertelement <32 x float> undef, float %495, i32 0
  %497 = shufflevector <32 x float> %496, <32 x float> undef, <32 x i32> zeroinitializer
  %498 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %497, <32 x float> %473, <32 x float> %.lcssa1126)
  %499 = add nuw nsw i64 %463, 10
  %500 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %499
  %501 = load float, float* %500, align 4, !tbaa !709
  %502 = insertelement <32 x float> undef, float %501, i32 0
  %503 = shufflevector <32 x float> %502, <32 x float> undef, <32 x i32> zeroinitializer
  %504 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %503, <32 x float> %473, <32 x float> %.lcssa1328)
  %505 = add nuw nsw i64 %463, 12
  %506 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %505
  %507 = load float, float* %506, align 4, !tbaa !709
  %508 = insertelement <32 x float> undef, float %507, i32 0
  %509 = shufflevector <32 x float> %508, <32 x float> undef, <32 x i32> zeroinitializer
  %510 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %509, <32 x float> %473, <32 x float> %.lcssa1530)
  %511 = add nuw nsw i64 %463, 14
  %512 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %511
  %513 = load float, float* %512, align 4, !tbaa !709
  %514 = insertelement <32 x float> undef, float %513, i32 0
  %515 = shufflevector <32 x float> %514, <32 x float> undef, <32 x i32> zeroinitializer
  %516 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %515, <32 x float> %473, <32 x float> %.lcssa1732)
  %517 = add nsw i64 %463, 229
  %518 = and i64 %517, 4294967295
  %519 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %518
  %520 = load float, float* %519, align 4, !tbaa !709
  %521 = insertelement <32 x float> undef, float %520, i32 0
  %522 = shufflevector <32 x float> %521, <32 x float> undef, <32 x i32> zeroinitializer
  %523 = add nuw nsw i64 %465, 32
  %524 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %523
  %525 = bitcast float* %524 to <32 x float>*
  %526 = load <32 x float>, <32 x float>* %525, align 4, !tbaa !715
  %527 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %522, <32 x float> %526, <32 x float> %474)
  %528 = add nsw i64 %463, 231
  %529 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %528
  %530 = load float, float* %529, align 4, !tbaa !709
  %531 = insertelement <32 x float> undef, float %530, i32 0
  %532 = shufflevector <32 x float> %531, <32 x float> undef, <32 x i32> zeroinitializer
  %533 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %532, <32 x float> %526, <32 x float> %480)
  %534 = add nsw i64 %463, 233
  %535 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %534
  %536 = load float, float* %535, align 4, !tbaa !709
  %537 = insertelement <32 x float> undef, float %536, i32 0
  %538 = shufflevector <32 x float> %537, <32 x float> undef, <32 x i32> zeroinitializer
  %539 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %538, <32 x float> %526, <32 x float> %486)
  %540 = add nsw i64 %463, 235
  %541 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %540
  %542 = load float, float* %541, align 4, !tbaa !709
  %543 = insertelement <32 x float> undef, float %542, i32 0
  %544 = shufflevector <32 x float> %543, <32 x float> undef, <32 x i32> zeroinitializer
  %545 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %544, <32 x float> %526, <32 x float> %492)
  %546 = add nsw i64 %463, 237
  %547 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %546
  %548 = load float, float* %547, align 4, !tbaa !709
  %549 = insertelement <32 x float> undef, float %548, i32 0
  %550 = shufflevector <32 x float> %549, <32 x float> undef, <32 x i32> zeroinitializer
  %551 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %550, <32 x float> %526, <32 x float> %498)
  %552 = add nsw i64 %463, 239
  %553 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %552
  %554 = load float, float* %553, align 4, !tbaa !709
  %555 = insertelement <32 x float> undef, float %554, i32 0
  %556 = shufflevector <32 x float> %555, <32 x float> undef, <32 x i32> zeroinitializer
  %557 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %556, <32 x float> %526, <32 x float> %504)
  %558 = add nsw i64 %463, 241
  %559 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %558
  %560 = load float, float* %559, align 4, !tbaa !709
  %561 = insertelement <32 x float> undef, float %560, i32 0
  %562 = shufflevector <32 x float> %561, <32 x float> undef, <32 x i32> zeroinitializer
  %563 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %562, <32 x float> %526, <32 x float> %510)
  %564 = add nsw i64 %463, 243
  %565 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %564
  %566 = load float, float* %565, align 4, !tbaa !709
  %567 = insertelement <32 x float> undef, float %566, i32 0
  %568 = shufflevector <32 x float> %567, <32 x float> undef, <32 x i32> zeroinitializer
  %569 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %568, <32 x float> %526, <32 x float> %516)
  %570 = add nsw i64 %463, 458
  %571 = and i64 %570, 4294967295
  %572 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %571
  %573 = load float, float* %572, align 4, !tbaa !709
  %574 = insertelement <32 x float> undef, float %573, i32 0
  %575 = shufflevector <32 x float> %574, <32 x float> undef, <32 x i32> zeroinitializer
  %576 = add nuw nsw i64 %465, 64
  %577 = getelementptr inbounds [294 x <32 x float>], [294 x <32 x float>]* %5, i64 0, i64 0, i64 %576
  %578 = bitcast float* %577 to <32 x float>*
  %579 = load <32 x float>, <32 x float>* %578, align 4, !tbaa !715
  %580 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %575, <32 x float> %579, <32 x float> %527)
  %581 = add nsw i64 %463, 460
  %582 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %581
  %583 = load float, float* %582, align 4, !tbaa !709
  %584 = insertelement <32 x float> undef, float %583, i32 0
  %585 = shufflevector <32 x float> %584, <32 x float> undef, <32 x i32> zeroinitializer
  %586 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %585, <32 x float> %579, <32 x float> %533)
  %587 = add nsw i64 %463, 462
  %588 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %587
  %589 = load float, float* %588, align 4, !tbaa !709
  %590 = insertelement <32 x float> undef, float %589, i32 0
  %591 = shufflevector <32 x float> %590, <32 x float> undef, <32 x i32> zeroinitializer
  %592 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %591, <32 x float> %579, <32 x float> %539)
  %593 = add nsw i64 %463, 464
  %594 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %593
  %595 = load float, float* %594, align 4, !tbaa !709
  %596 = insertelement <32 x float> undef, float %595, i32 0
  %597 = shufflevector <32 x float> %596, <32 x float> undef, <32 x i32> zeroinitializer
  %598 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %597, <32 x float> %579, <32 x float> %545)
  %599 = add nsw i64 %463, 466
  %600 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %599
  %601 = load float, float* %600, align 4, !tbaa !709
  %602 = insertelement <32 x float> undef, float %601, i32 0
  %603 = shufflevector <32 x float> %602, <32 x float> undef, <32 x i32> zeroinitializer
  %604 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %603, <32 x float> %579, <32 x float> %551)
  %605 = add nsw i64 %463, 468
  %606 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %605
  %607 = load float, float* %606, align 4, !tbaa !709
  %608 = insertelement <32 x float> undef, float %607, i32 0
  %609 = shufflevector <32 x float> %608, <32 x float> undef, <32 x i32> zeroinitializer
  %610 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %609, <32 x float> %579, <32 x float> %557)
  %611 = add nsw i64 %463, 470
  %612 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %611
  %613 = load float, float* %612, align 4, !tbaa !709
  %614 = insertelement <32 x float> undef, float %613, i32 0
  %615 = shufflevector <32 x float> %614, <32 x float> undef, <32 x i32> zeroinitializer
  %616 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %615, <32 x float> %579, <32 x float> %563)
  %617 = add nsw i64 %463, 472
  %618 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %617
  %619 = load float, float* %618, align 4, !tbaa !709
  %620 = insertelement <32 x float> undef, float %619, i32 0
  %621 = shufflevector <32 x float> %620, <32 x float> undef, <32 x i32> zeroinitializer
  %622 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %621, <32 x float> %579, <32 x float> %569)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 7
  br i1 %exitcond, label %for_end27, label %for_begin28.preheader, !prof !5

for_end27:                                        ; preds = %for_begin28.preheader
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %exitcond62 = icmp eq i64 %indvars.iv.next61, 7
  br i1 %exitcond62, label %for_begin31.preheader, label %for_begin25.preheader, !prof !5

for_begin37.preheader:                            ; preds = %for_end39, %for_begin34.preheader
  %indvars.iv71 = phi i64 [ 0, %for_begin34.preheader ], [ %indvars.iv.next72, %for_end39 ]
  %623 = shl i64 %indvars.iv71, 3
  %624 = add nuw nsw i64 %623, %455
  %625 = shl i64 %indvars.iv71, 8
  br label %for_body38

for_end36:                                        ; preds = %for_end39
  %626 = add nuw nsw i32 %445, 1
  %exitcond74 = icmp eq i32 %626, 224
  br i1 %exitcond74, label %for_end18, label %for_begin19.preheader, !prof !5

for_body38:                                       ; preds = %for_body38, %for_begin37.preheader
  %indvars.iv68 = phi i64 [ 0, %for_begin37.preheader ], [ %indvars.iv.next69, %for_body38 ]
  %627 = add nuw nsw i64 %624, %indvars.iv68
  %628 = add nuw nsw i64 %627, 12544
  %629 = add nuw nsw i64 %627, 25088
  %630 = add nuw nsw i64 %627, 37632
  %631 = add nuw nsw i64 %627, 50176
  %632 = add nuw nsw i64 %627, 62720
  %633 = add nuw nsw i64 %627, 75264
  %634 = add nuw nsw i64 %627, 87808
  %635 = add nuw nsw i64 %627, 100352
  %636 = add nuw nsw i64 %627, 112896
  %637 = add nuw nsw i64 %627, 125440
  %638 = add nuw nsw i64 %627, 137984
  %639 = add nuw nsw i64 %627, 150528
  %640 = add nuw nsw i64 %627, 163072
  %641 = add nuw nsw i64 %627, 175616
  %642 = add nuw nsw i64 %627, 188160
  %643 = add nuw nsw i64 %627, 200704
  %644 = add nuw nsw i64 %627, 213248
  %645 = add nuw nsw i64 %627, 225792
  %646 = add nuw nsw i64 %627, 238336
  %647 = add nuw nsw i64 %627, 250880
  %648 = add nuw nsw i64 %627, 263424
  %649 = add nuw nsw i64 %627, 275968
  %650 = add nuw nsw i64 %627, 288512
  %651 = add nuw nsw i64 %627, 301056
  %652 = add nuw nsw i64 %627, 313600
  %653 = add nuw nsw i64 %627, 326144
  %654 = add nuw nsw i64 %627, 338688
  %655 = add nuw nsw i64 %627, 351232
  %656 = add nuw nsw i64 %627, 363776
  %657 = add nuw nsw i64 %627, 376320
  %658 = add nuw nsw i64 %627, 388864
  %659 = shl i64 %indvars.iv68, 5
  %660 = add nuw nsw i64 %659, %625
  %661 = getelementptr inbounds [112 x <32 x float>], [112 x <32 x float>]* %4, i64 0, i64 0, i64 %660
  %662 = bitcast float* %661 to <32 x float>*
  %663 = load <32 x float>, <32 x float>* %662, align 16, !tbaa !727
  %664 = getelementptr inbounds float, float* %49, i64 %627
  %665 = extractelement <32 x float> %663, i64 0
  store float %665, float* %664, align 4, !tbaa !730
  %666 = getelementptr inbounds float, float* %49, i64 %628
  %667 = extractelement <32 x float> %663, i64 1
  store float %667, float* %666, align 4, !tbaa !730
  %668 = getelementptr inbounds float, float* %49, i64 %629
  %669 = extractelement <32 x float> %663, i64 2
  store float %669, float* %668, align 4, !tbaa !730
  %670 = getelementptr inbounds float, float* %49, i64 %630
  %671 = extractelement <32 x float> %663, i64 3
  store float %671, float* %670, align 4, !tbaa !730
  %672 = getelementptr inbounds float, float* %49, i64 %631
  %673 = extractelement <32 x float> %663, i64 4
  store float %673, float* %672, align 4, !tbaa !730
  %674 = getelementptr inbounds float, float* %49, i64 %632
  %675 = extractelement <32 x float> %663, i64 5
  store float %675, float* %674, align 4, !tbaa !730
  %676 = getelementptr inbounds float, float* %49, i64 %633
  %677 = extractelement <32 x float> %663, i64 6
  store float %677, float* %676, align 4, !tbaa !730
  %678 = getelementptr inbounds float, float* %49, i64 %634
  %679 = extractelement <32 x float> %663, i64 7
  store float %679, float* %678, align 4, !tbaa !730
  %680 = getelementptr inbounds float, float* %49, i64 %635
  %681 = extractelement <32 x float> %663, i64 8
  store float %681, float* %680, align 4, !tbaa !730
  %682 = getelementptr inbounds float, float* %49, i64 %636
  %683 = extractelement <32 x float> %663, i64 9
  store float %683, float* %682, align 4, !tbaa !730
  %684 = getelementptr inbounds float, float* %49, i64 %637
  %685 = extractelement <32 x float> %663, i64 10
  store float %685, float* %684, align 4, !tbaa !730
  %686 = getelementptr inbounds float, float* %49, i64 %638
  %687 = extractelement <32 x float> %663, i64 11
  store float %687, float* %686, align 4, !tbaa !730
  %688 = getelementptr inbounds float, float* %49, i64 %639
  %689 = extractelement <32 x float> %663, i64 12
  store float %689, float* %688, align 4, !tbaa !730
  %690 = getelementptr inbounds float, float* %49, i64 %640
  %691 = extractelement <32 x float> %663, i64 13
  store float %691, float* %690, align 4, !tbaa !730
  %692 = getelementptr inbounds float, float* %49, i64 %641
  %693 = extractelement <32 x float> %663, i64 14
  store float %693, float* %692, align 4, !tbaa !730
  %694 = getelementptr inbounds float, float* %49, i64 %642
  %695 = extractelement <32 x float> %663, i64 15
  store float %695, float* %694, align 4, !tbaa !730
  %696 = getelementptr inbounds float, float* %49, i64 %643
  %697 = extractelement <32 x float> %663, i64 16
  store float %697, float* %696, align 4, !tbaa !730
  %698 = getelementptr inbounds float, float* %49, i64 %644
  %699 = extractelement <32 x float> %663, i64 17
  store float %699, float* %698, align 4, !tbaa !730
  %700 = getelementptr inbounds float, float* %49, i64 %645
  %701 = extractelement <32 x float> %663, i64 18
  store float %701, float* %700, align 4, !tbaa !730
  %702 = getelementptr inbounds float, float* %49, i64 %646
  %703 = extractelement <32 x float> %663, i64 19
  store float %703, float* %702, align 4, !tbaa !730
  %704 = getelementptr inbounds float, float* %49, i64 %647
  %705 = extractelement <32 x float> %663, i64 20
  store float %705, float* %704, align 4, !tbaa !730
  %706 = getelementptr inbounds float, float* %49, i64 %648
  %707 = extractelement <32 x float> %663, i64 21
  store float %707, float* %706, align 4, !tbaa !730
  %708 = getelementptr inbounds float, float* %49, i64 %649
  %709 = extractelement <32 x float> %663, i64 22
  store float %709, float* %708, align 4, !tbaa !730
  %710 = getelementptr inbounds float, float* %49, i64 %650
  %711 = extractelement <32 x float> %663, i64 23
  store float %711, float* %710, align 4, !tbaa !730
  %712 = getelementptr inbounds float, float* %49, i64 %651
  %713 = extractelement <32 x float> %663, i64 24
  store float %713, float* %712, align 4, !tbaa !730
  %714 = getelementptr inbounds float, float* %49, i64 %652
  %715 = extractelement <32 x float> %663, i64 25
  store float %715, float* %714, align 4, !tbaa !730
  %716 = getelementptr inbounds float, float* %49, i64 %653
  %717 = extractelement <32 x float> %663, i64 26
  store float %717, float* %716, align 4, !tbaa !730
  %718 = getelementptr inbounds float, float* %49, i64 %654
  %719 = extractelement <32 x float> %663, i64 27
  store float %719, float* %718, align 4, !tbaa !730
  %720 = getelementptr inbounds float, float* %49, i64 %655
  %721 = extractelement <32 x float> %663, i64 28
  store float %721, float* %720, align 4, !tbaa !730
  %722 = getelementptr inbounds float, float* %49, i64 %656
  %723 = extractelement <32 x float> %663, i64 29
  store float %723, float* %722, align 4, !tbaa !730
  %724 = getelementptr inbounds float, float* %49, i64 %657
  %725 = extractelement <32 x float> %663, i64 30
  store float %725, float* %724, align 4, !tbaa !730
  %726 = getelementptr inbounds float, float* %49, i64 %658
  %727 = extractelement <32 x float> %663, i64 31
  store float %727, float* %726, align 4, !tbaa !730
  %indvars.iv.next69 = add nuw nsw i64 %indvars.iv68, 1
  %exitcond70 = icmp eq i64 %indvars.iv.next69, 8
  br i1 %exitcond70, label %for_end39, label %for_body38, !prof !5

for_end39:                                        ; preds = %for_body38
  %indvars.iv.next72 = add nuw nsw i64 %indvars.iv71, 1
  %exitcond73 = icmp eq i64 %indvars.iv.next72, 14
  br i1 %exitcond73, label %for_end36, label %for_begin37.preheader, !prof !5

for_body5.us.us.1:                                ; preds = %if_end.us.us.1, %for_end6.us-lcssa.us.us
  %indvars.iv96.1 = phi i64 [ 0, %for_end6.us-lcssa.us.us ], [ %indvars.iv.next97.1, %if_end.us.us.1 ]
  %728 = add nuw nsw i64 %23, %indvars.iv96.1
  %729 = trunc i64 %indvars.iv96.1 to i32
  %730 = add i32 %729, -3
  %731 = icmp ult i32 %730, 224
  br i1 %731, label %if_then.us.us.1, label %if_end.us.us.1

if_then.us.us.1:                                  ; preds = %for_body5.us.us.1
  %732 = add nuw nsw i64 %24, %indvars.iv96.1
  %733 = getelementptr inbounds float, float* %7, i64 %732
  %734 = load float, float* %733, align 4, !tbaa !706
  br label %if_end.us.us.1

if_end.us.us.1:                                   ; preds = %if_then.us.us.1, %for_body5.us.us.1
  %735 = phi float [ %734, %if_then.us.us.1 ], [ 0.000000e+00, %for_body5.us.us.1 ]
  %736 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %728
  store float %735, float* %736, align 4, !tbaa !709
  %indvars.iv.next97.1 = add nuw nsw i64 %indvars.iv96.1, 1
  %exitcond99.1 = icmp eq i64 %indvars.iv.next97.1, 229
  br i1 %exitcond99.1, label %for_end6.us-lcssa.us.us.1, label %for_body5.us.us.1, !prof !5

for_end6.us-lcssa.us.us.1:                        ; preds = %if_end.us.us.1
  %737 = add nuw nsw i64 %8, 458
  %738 = add nuw nsw i64 %12, 99677
  br label %for_body5.us.us.2

for_body5.us.us.2:                                ; preds = %if_end.us.us.2, %for_end6.us-lcssa.us.us.1
  %indvars.iv96.2 = phi i64 [ 0, %for_end6.us-lcssa.us.us.1 ], [ %indvars.iv.next97.2, %if_end.us.us.2 ]
  %739 = add nuw nsw i64 %737, %indvars.iv96.2
  %740 = trunc i64 %indvars.iv96.2 to i32
  %741 = add i32 %740, -3
  %742 = icmp ult i32 %741, 224
  br i1 %742, label %if_then.us.us.2, label %if_end.us.us.2

if_then.us.us.2:                                  ; preds = %for_body5.us.us.2
  %743 = add nuw nsw i64 %738, %indvars.iv96.2
  %744 = getelementptr inbounds float, float* %7, i64 %743
  %745 = load float, float* %744, align 4, !tbaa !706
  br label %if_end.us.us.2

if_end.us.us.2:                                   ; preds = %if_then.us.us.2, %for_body5.us.us.2
  %746 = phi float [ %745, %if_then.us.us.2 ], [ 0.000000e+00, %for_body5.us.us.2 ]
  %747 = getelementptr inbounds [157323 x float], [157323 x float]* %6, i64 0, i64 %739
  store float %746, float* %747, align 4, !tbaa !709
  %indvars.iv.next97.2 = add nuw nsw i64 %indvars.iv96.2, 1
  %exitcond99.2 = icmp eq i64 %indvars.iv.next97.2, 229
  br i1 %exitcond99.2, label %for_end3, label %for_body5.us.us.2, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_21(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_21_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_21_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !733
  %5 = bitcast i8* %1 to float*
  %6 = bitcast i8* %0 to float*
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %5, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !747
  %9 = getelementptr inbounds float, float* %7, i64 4
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !747
  %11 = fadd <4 x float> %broadcast.splat4, %wide.load
  %12 = fadd <4 x float> %broadcast.splat6, %wide.load2
  %13 = getelementptr inbounds float, float* %6, i64 %index
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> %11, <4 x float>* %14, align 4, !tbaa !750
  %15 = getelementptr inbounds float, float* %13, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> %12, <4 x float>* %16, align 4, !tbaa !750
  %index.next = add i64 %index, 8
  %17 = icmp eq i64 %index.next, 1024
  br i1 %17, label %for_end, label %vector.body, !llvm.loop !753

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_batch_flatten_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_batch_flatten_1_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_batch_flatten_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 8192, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_1_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !754
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !757
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fadd <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !760
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !757
  %22 = fadd <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !760
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !757
  %29 = fadd <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !760
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !757
  %36 = fadd <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !760
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !757
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !760
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !757
  %50 = fadd <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !760
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !757
  %57 = fadd <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !760
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !757
  %64 = fadd <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !760
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !757
  %71 = fadd <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !760
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !757
  %78 = fadd <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !760
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !757
  %85 = fadd <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !760
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !757
  %92 = fadd <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !760
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !757
  %97 = fadd float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !760
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2048
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [32768 x <32 x float>], align 16
  %5 = alloca [25088 x float], align 16
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_begin1.preheader ]
  %6 = trunc i64 %indvar to i32
  %7 = mul nuw nsw i64 %indvar, 28
  %8 = trunc i64 %indvar to i32
  %9 = mul i32 %8, 7
  %10 = udiv i32 %6, 7
  %11 = mul i32 %10, 147
  %12 = add i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %scevgep = getelementptr [25088 x float], [25088 x float]* %5, i64 0, i64 %7
  %scevgep51 = bitcast float* %scevgep to i8*
  %scevgep52 = getelementptr i8, i8* %0, i64 %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep51, i8* align 4 %scevgep52, i64 28, i1 false)
  %15 = add nuw nsw i64 %7, 7
  %scevgep.1 = getelementptr [25088 x float], [25088 x float]* %5, i64 0, i64 %15
  %scevgep51.1 = bitcast float* %scevgep.1 to i8*
  %16 = add nuw nsw i64 %14, 196
  %scevgep52.1 = getelementptr i8, i8* %0, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep51.1, i8* align 4 %scevgep52.1, i64 28, i1 false)
  %17 = add nuw nsw i64 %7, 14
  %scevgep.2 = getelementptr [25088 x float], [25088 x float]* %5, i64 0, i64 %17
  %scevgep51.2 = bitcast float* %scevgep.2 to i8*
  %18 = add nuw nsw i64 %14, 392
  %scevgep52.2 = getelementptr i8, i8* %0, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep51.2, i8* align 4 %scevgep52.2, i64 28, i1 false)
  %19 = add nuw nsw i64 %7, 21
  %scevgep.3 = getelementptr [25088 x float], [25088 x float]* %5, i64 0, i64 %19
  %scevgep51.3 = bitcast float* %scevgep.3 to i8*
  %20 = add nuw nsw i64 %14, 588
  %scevgep52.3 = getelementptr i8, i8* %0, i64 %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep51.3, i8* align 4 %scevgep52.3, i64 28, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond54 = icmp eq i64 %indvar.next, 896
  br i1 %exitcond54, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin7.preheader:                             ; preds = %for_begin1.preheader
  %21 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv43 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next44, %for_end12 ]
  %22 = shl nsw i64 %indvars.iv43, 14
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %23 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %24 = bitcast float* %23 to <32 x float>*
  %25 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %26 = bitcast float* %25 to <32 x float>*
  %27 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %28 = bitcast float* %27 to <32 x float>*
  %29 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %30 = bitcast float* %29 to <32 x float>*
  %31 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %32 = bitcast float* %31 to <32 x float>*
  %33 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %34 = bitcast float* %33 to <32 x float>*
  %35 = bitcast i8* %2 to float*
  %36 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body17

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv40 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next41, %for_end15 ]
  %37 = shl i64 %indvars.iv40, 7
  %38 = add nuw nsw i64 %37, %22
  %39 = shl i64 %indvars.iv40, 2
  %40 = add nuw nsw i64 %39, %22
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 64
  br i1 %exitcond45, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv37 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next38, %for_body14 ]
  %41 = shl i64 %indvars.iv37, 5
  %42 = add nuw nsw i64 %38, %41
  %43 = add nuw nsw i64 %40, %indvars.iv37
  %44 = add nuw nsw i64 %43, 512
  %45 = add nuw nsw i64 %43, 1024
  %46 = add nuw nsw i64 %43, 1536
  %47 = add nuw nsw i64 %43, 2048
  %48 = add nuw nsw i64 %43, 2560
  %49 = add nuw nsw i64 %43, 3072
  %50 = add nuw nsw i64 %43, 3584
  %51 = add nuw nsw i64 %43, 4096
  %52 = add nuw nsw i64 %43, 4608
  %53 = add nuw nsw i64 %43, 5120
  %54 = add nuw nsw i64 %43, 5632
  %55 = add nuw nsw i64 %43, 6144
  %56 = add nuw nsw i64 %43, 6656
  %57 = add nuw nsw i64 %43, 7168
  %58 = add nuw nsw i64 %43, 7680
  %59 = add nuw nsw i64 %43, 8192
  %60 = add nuw nsw i64 %43, 8704
  %61 = add nuw nsw i64 %43, 9216
  %62 = add nuw nsw i64 %43, 9728
  %63 = add nuw nsw i64 %43, 10240
  %64 = add nuw nsw i64 %43, 10752
  %65 = add nuw nsw i64 %43, 11264
  %66 = add nuw nsw i64 %43, 11776
  %67 = add nuw nsw i64 %43, 12288
  %68 = add nuw nsw i64 %43, 12800
  %69 = add nuw nsw i64 %43, 13312
  %70 = add nuw nsw i64 %43, 13824
  %71 = add nuw nsw i64 %43, 14336
  %72 = add nuw nsw i64 %43, 14848
  %73 = add nuw nsw i64 %43, 15360
  %74 = add nuw nsw i64 %43, 15872
  %75 = getelementptr inbounds float, float* %21, i64 %43
  %76 = load float, float* %75, align 4, !tbaa !763
  %77 = insertelement <32 x float> undef, float %76, i32 0
  %78 = getelementptr inbounds float, float* %21, i64 %44
  %79 = load float, float* %78, align 4, !tbaa !763
  %80 = insertelement <32 x float> %77, float %79, i32 1
  %81 = getelementptr inbounds float, float* %21, i64 %45
  %82 = load float, float* %81, align 4, !tbaa !763
  %83 = insertelement <32 x float> %80, float %82, i32 2
  %84 = getelementptr inbounds float, float* %21, i64 %46
  %85 = load float, float* %84, align 4, !tbaa !763
  %86 = insertelement <32 x float> %83, float %85, i32 3
  %87 = getelementptr inbounds float, float* %21, i64 %47
  %88 = load float, float* %87, align 4, !tbaa !763
  %89 = insertelement <32 x float> %86, float %88, i32 4
  %90 = getelementptr inbounds float, float* %21, i64 %48
  %91 = load float, float* %90, align 4, !tbaa !763
  %92 = insertelement <32 x float> %89, float %91, i32 5
  %93 = getelementptr inbounds float, float* %21, i64 %49
  %94 = load float, float* %93, align 4, !tbaa !763
  %95 = insertelement <32 x float> %92, float %94, i32 6
  %96 = getelementptr inbounds float, float* %21, i64 %50
  %97 = load float, float* %96, align 4, !tbaa !763
  %98 = insertelement <32 x float> %95, float %97, i32 7
  %99 = getelementptr inbounds float, float* %21, i64 %51
  %100 = load float, float* %99, align 4, !tbaa !763
  %101 = insertelement <32 x float> %98, float %100, i32 8
  %102 = getelementptr inbounds float, float* %21, i64 %52
  %103 = load float, float* %102, align 4, !tbaa !763
  %104 = insertelement <32 x float> %101, float %103, i32 9
  %105 = getelementptr inbounds float, float* %21, i64 %53
  %106 = load float, float* %105, align 4, !tbaa !763
  %107 = insertelement <32 x float> %104, float %106, i32 10
  %108 = getelementptr inbounds float, float* %21, i64 %54
  %109 = load float, float* %108, align 4, !tbaa !763
  %110 = insertelement <32 x float> %107, float %109, i32 11
  %111 = getelementptr inbounds float, float* %21, i64 %55
  %112 = load float, float* %111, align 4, !tbaa !763
  %113 = insertelement <32 x float> %110, float %112, i32 12
  %114 = getelementptr inbounds float, float* %21, i64 %56
  %115 = load float, float* %114, align 4, !tbaa !763
  %116 = insertelement <32 x float> %113, float %115, i32 13
  %117 = getelementptr inbounds float, float* %21, i64 %57
  %118 = load float, float* %117, align 4, !tbaa !763
  %119 = insertelement <32 x float> %116, float %118, i32 14
  %120 = getelementptr inbounds float, float* %21, i64 %58
  %121 = load float, float* %120, align 4, !tbaa !763
  %122 = insertelement <32 x float> %119, float %121, i32 15
  %123 = getelementptr inbounds float, float* %21, i64 %59
  %124 = load float, float* %123, align 4, !tbaa !763
  %125 = insertelement <32 x float> %122, float %124, i32 16
  %126 = getelementptr inbounds float, float* %21, i64 %60
  %127 = load float, float* %126, align 4, !tbaa !763
  %128 = insertelement <32 x float> %125, float %127, i32 17
  %129 = getelementptr inbounds float, float* %21, i64 %61
  %130 = load float, float* %129, align 4, !tbaa !763
  %131 = insertelement <32 x float> %128, float %130, i32 18
  %132 = getelementptr inbounds float, float* %21, i64 %62
  %133 = load float, float* %132, align 4, !tbaa !763
  %134 = insertelement <32 x float> %131, float %133, i32 19
  %135 = getelementptr inbounds float, float* %21, i64 %63
  %136 = load float, float* %135, align 4, !tbaa !763
  %137 = insertelement <32 x float> %134, float %136, i32 20
  %138 = getelementptr inbounds float, float* %21, i64 %64
  %139 = load float, float* %138, align 4, !tbaa !763
  %140 = insertelement <32 x float> %137, float %139, i32 21
  %141 = getelementptr inbounds float, float* %21, i64 %65
  %142 = load float, float* %141, align 4, !tbaa !763
  %143 = insertelement <32 x float> %140, float %142, i32 22
  %144 = getelementptr inbounds float, float* %21, i64 %66
  %145 = load float, float* %144, align 4, !tbaa !763
  %146 = insertelement <32 x float> %143, float %145, i32 23
  %147 = getelementptr inbounds float, float* %21, i64 %67
  %148 = load float, float* %147, align 4, !tbaa !763
  %149 = insertelement <32 x float> %146, float %148, i32 24
  %150 = getelementptr inbounds float, float* %21, i64 %68
  %151 = load float, float* %150, align 4, !tbaa !763
  %152 = insertelement <32 x float> %149, float %151, i32 25
  %153 = getelementptr inbounds float, float* %21, i64 %69
  %154 = load float, float* %153, align 4, !tbaa !763
  %155 = insertelement <32 x float> %152, float %154, i32 26
  %156 = getelementptr inbounds float, float* %21, i64 %70
  %157 = load float, float* %156, align 4, !tbaa !763
  %158 = insertelement <32 x float> %155, float %157, i32 27
  %159 = getelementptr inbounds float, float* %21, i64 %71
  %160 = load float, float* %159, align 4, !tbaa !763
  %161 = insertelement <32 x float> %158, float %160, i32 28
  %162 = getelementptr inbounds float, float* %21, i64 %72
  %163 = load float, float* %162, align 4, !tbaa !763
  %164 = insertelement <32 x float> %161, float %163, i32 29
  %165 = getelementptr inbounds float, float* %21, i64 %73
  %166 = load float, float* %165, align 4, !tbaa !763
  %167 = insertelement <32 x float> %164, float %166, i32 30
  %168 = getelementptr inbounds float, float* %21, i64 %74
  %169 = load float, float* %168, align 4, !tbaa !763
  %170 = insertelement <32 x float> %167, float %169, i32 31
  %171 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %42
  %172 = bitcast float* %171 to <32 x float>*
  store <32 x float> %170, <32 x float>* %172, align 16, !tbaa !766
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond39 = icmp eq i64 %indvars.iv.next38, 4
  br i1 %exitcond39, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 128
  br i1 %exitcond42, label %for_end12, label %for_begin13.preheader, !prof !5

for_body17:                                       ; preds = %for_end27, %for_begin16.preheader
  %173 = phi i32 [ 0, %for_begin16.preheader ], [ %470, %for_end27 ]
  %174 = urem i32 %173, 7
  %175 = mul nuw nsw i32 %174, 28
  %176 = udiv i32 %173, 7
  %177 = shl i32 %176, 14
  %178 = zext i32 %175 to i64
  %179 = sext i32 %177 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %36, i8 0, i64 896, i1 false)
  br label %for_begin22.preheader

for_end18:                                        ; preds = %for_end27
  ret void

for_begin25.preheader:                            ; preds = %for_begin22.preheader
  store <32 x float> %333, <32 x float>* %.sub, align 128, !tbaa !769
  store <32 x float> %339, <32 x float>* %24, align 128, !tbaa !769
  store <32 x float> %345, <32 x float>* %26, align 128, !tbaa !769
  store <32 x float> %351, <32 x float>* %28, align 128, !tbaa !769
  store <32 x float> %357, <32 x float>* %30, align 128, !tbaa !769
  store <32 x float> %363, <32 x float>* %32, align 128, !tbaa !769
  store <32 x float> %369, <32 x float>* %34, align 128, !tbaa !769
  %180 = mul nuw nsw i32 %174, 7
  %181 = mul nsw i32 %176, 1568
  %182 = add nuw nsw i32 %181, %180
  %183 = zext i32 %182 to i64
  br label %for_body26

for_begin22.preheader:                            ; preds = %for_begin22.preheader, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_begin22.preheader ]
  %.lcssa1326 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %369, %for_begin22.preheader ]
  %.lcssa1124 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %363, %for_begin22.preheader ]
  %.lcssa922 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %357, %for_begin22.preheader ]
  %.lcssa720 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %351, %for_begin22.preheader ]
  %.lcssa518 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %345, %for_begin22.preheader ]
  %.lcssa317 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %339, %for_begin22.preheader ]
  %.lcssa15 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %333, %for_begin22.preheader ]
  %184 = mul nuw nsw i64 %indvars.iv, 196
  %185 = add nuw nsw i64 %184, %178
  %186 = shl i64 %indvars.iv, 7
  %187 = add nuw nsw i64 %186, %179
  %188 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %185
  %189 = load float, float* %188, align 16, !tbaa !778
  %190 = insertelement <32 x float> undef, float %189, i32 0
  %191 = shufflevector <32 x float> %190, <32 x float> undef, <32 x i32> zeroinitializer
  %192 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %187
  %193 = bitcast float* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 16, !tbaa !766
  %195 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %191, <32 x float> %194, <32 x float> %.lcssa15)
  %196 = or i64 %185, 1
  %197 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !778
  %199 = insertelement <32 x float> undef, float %198, i32 0
  %200 = shufflevector <32 x float> %199, <32 x float> undef, <32 x i32> zeroinitializer
  %201 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %200, <32 x float> %194, <32 x float> %.lcssa317)
  %202 = or i64 %185, 2
  %203 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %202
  %204 = load float, float* %203, align 8, !tbaa !778
  %205 = insertelement <32 x float> undef, float %204, i32 0
  %206 = shufflevector <32 x float> %205, <32 x float> undef, <32 x i32> zeroinitializer
  %207 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %206, <32 x float> %194, <32 x float> %.lcssa518)
  %208 = or i64 %185, 3
  %209 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !778
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %194, <32 x float> %.lcssa720)
  %214 = add nuw nsw i64 %185, 4
  %215 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %214
  %216 = load float, float* %215, align 16, !tbaa !778
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %194, <32 x float> %.lcssa922)
  %220 = add nuw nsw i64 %185, 5
  %221 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !778
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %194, <32 x float> %.lcssa1124)
  %226 = add nuw nsw i64 %185, 6
  %227 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %226
  %228 = load float, float* %227, align 8, !tbaa !778
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %194, <32 x float> %.lcssa1326)
  %232 = add nuw nsw i64 %185, 7
  %233 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !778
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = or i64 %187, 32
  %238 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %237
  %239 = bitcast float* %238 to <32 x float>*
  %240 = load <32 x float>, <32 x float>* %239, align 16, !tbaa !766
  %241 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %240, <32 x float> %195)
  %242 = add nuw nsw i64 %185, 8
  %243 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %242
  %244 = load float, float* %243, align 16, !tbaa !778
  %245 = insertelement <32 x float> undef, float %244, i32 0
  %246 = shufflevector <32 x float> %245, <32 x float> undef, <32 x i32> zeroinitializer
  %247 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %246, <32 x float> %240, <32 x float> %201)
  %248 = add nuw nsw i64 %185, 9
  %249 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %248
  %250 = load float, float* %249, align 4, !tbaa !778
  %251 = insertelement <32 x float> undef, float %250, i32 0
  %252 = shufflevector <32 x float> %251, <32 x float> undef, <32 x i32> zeroinitializer
  %253 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %252, <32 x float> %240, <32 x float> %207)
  %254 = add nuw nsw i64 %185, 10
  %255 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %254
  %256 = load float, float* %255, align 8, !tbaa !778
  %257 = insertelement <32 x float> undef, float %256, i32 0
  %258 = shufflevector <32 x float> %257, <32 x float> undef, <32 x i32> zeroinitializer
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %258, <32 x float> %240, <32 x float> %213)
  %260 = add nuw nsw i64 %185, 11
  %261 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !778
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %240, <32 x float> %219)
  %266 = add nuw nsw i64 %185, 12
  %267 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %266
  %268 = load float, float* %267, align 16, !tbaa !778
  %269 = insertelement <32 x float> undef, float %268, i32 0
  %270 = shufflevector <32 x float> %269, <32 x float> undef, <32 x i32> zeroinitializer
  %271 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %270, <32 x float> %240, <32 x float> %225)
  %272 = add nuw nsw i64 %185, 13
  %273 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !778
  %275 = insertelement <32 x float> undef, float %274, i32 0
  %276 = shufflevector <32 x float> %275, <32 x float> undef, <32 x i32> zeroinitializer
  %277 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %240, <32 x float> %231)
  %278 = add nuw nsw i64 %185, 14
  %279 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %278
  %280 = load float, float* %279, align 8, !tbaa !778
  %281 = insertelement <32 x float> undef, float %280, i32 0
  %282 = shufflevector <32 x float> %281, <32 x float> undef, <32 x i32> zeroinitializer
  %283 = or i64 %187, 64
  %284 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %283
  %285 = bitcast float* %284 to <32 x float>*
  %286 = load <32 x float>, <32 x float>* %285, align 16, !tbaa !766
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %282, <32 x float> %286, <32 x float> %241)
  %288 = add nuw nsw i64 %185, 15
  %289 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %288
  %290 = load float, float* %289, align 4, !tbaa !778
  %291 = insertelement <32 x float> undef, float %290, i32 0
  %292 = shufflevector <32 x float> %291, <32 x float> undef, <32 x i32> zeroinitializer
  %293 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %292, <32 x float> %286, <32 x float> %247)
  %294 = add nuw nsw i64 %185, 16
  %295 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %294
  %296 = load float, float* %295, align 16, !tbaa !778
  %297 = insertelement <32 x float> undef, float %296, i32 0
  %298 = shufflevector <32 x float> %297, <32 x float> undef, <32 x i32> zeroinitializer
  %299 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %298, <32 x float> %286, <32 x float> %253)
  %300 = add nuw nsw i64 %185, 17
  %301 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %300
  %302 = load float, float* %301, align 4, !tbaa !778
  %303 = insertelement <32 x float> undef, float %302, i32 0
  %304 = shufflevector <32 x float> %303, <32 x float> undef, <32 x i32> zeroinitializer
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %304, <32 x float> %286, <32 x float> %259)
  %306 = add nuw nsw i64 %185, 18
  %307 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %306
  %308 = load float, float* %307, align 8, !tbaa !778
  %309 = insertelement <32 x float> undef, float %308, i32 0
  %310 = shufflevector <32 x float> %309, <32 x float> undef, <32 x i32> zeroinitializer
  %311 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %310, <32 x float> %286, <32 x float> %265)
  %312 = add nuw nsw i64 %185, 19
  %313 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %312
  %314 = load float, float* %313, align 4, !tbaa !778
  %315 = insertelement <32 x float> undef, float %314, i32 0
  %316 = shufflevector <32 x float> %315, <32 x float> undef, <32 x i32> zeroinitializer
  %317 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %316, <32 x float> %286, <32 x float> %271)
  %318 = add nuw nsw i64 %185, 20
  %319 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %318
  %320 = load float, float* %319, align 16, !tbaa !778
  %321 = insertelement <32 x float> undef, float %320, i32 0
  %322 = shufflevector <32 x float> %321, <32 x float> undef, <32 x i32> zeroinitializer
  %323 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %322, <32 x float> %286, <32 x float> %277)
  %324 = add nuw nsw i64 %185, 21
  %325 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %324
  %326 = load float, float* %325, align 4, !tbaa !778
  %327 = insertelement <32 x float> undef, float %326, i32 0
  %328 = shufflevector <32 x float> %327, <32 x float> undef, <32 x i32> zeroinitializer
  %329 = or i64 %187, 96
  %330 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %329
  %331 = bitcast float* %330 to <32 x float>*
  %332 = load <32 x float>, <32 x float>* %331, align 16, !tbaa !766
  %333 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %328, <32 x float> %332, <32 x float> %287)
  %334 = add nuw nsw i64 %185, 22
  %335 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %334
  %336 = load float, float* %335, align 8, !tbaa !778
  %337 = insertelement <32 x float> undef, float %336, i32 0
  %338 = shufflevector <32 x float> %337, <32 x float> undef, <32 x i32> zeroinitializer
  %339 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %338, <32 x float> %332, <32 x float> %293)
  %340 = add nuw nsw i64 %185, 23
  %341 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %340
  %342 = load float, float* %341, align 4, !tbaa !778
  %343 = insertelement <32 x float> undef, float %342, i32 0
  %344 = shufflevector <32 x float> %343, <32 x float> undef, <32 x i32> zeroinitializer
  %345 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %344, <32 x float> %332, <32 x float> %299)
  %346 = add nuw nsw i64 %185, 24
  %347 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %346
  %348 = load float, float* %347, align 16, !tbaa !778
  %349 = insertelement <32 x float> undef, float %348, i32 0
  %350 = shufflevector <32 x float> %349, <32 x float> undef, <32 x i32> zeroinitializer
  %351 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %350, <32 x float> %332, <32 x float> %305)
  %352 = add nuw nsw i64 %185, 25
  %353 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %352
  %354 = load float, float* %353, align 4, !tbaa !778
  %355 = insertelement <32 x float> undef, float %354, i32 0
  %356 = shufflevector <32 x float> %355, <32 x float> undef, <32 x i32> zeroinitializer
  %357 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %356, <32 x float> %332, <32 x float> %311)
  %358 = add nuw nsw i64 %185, 26
  %359 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %358
  %360 = load float, float* %359, align 8, !tbaa !778
  %361 = insertelement <32 x float> undef, float %360, i32 0
  %362 = shufflevector <32 x float> %361, <32 x float> undef, <32 x i32> zeroinitializer
  %363 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %362, <32 x float> %332, <32 x float> %317)
  %364 = add nuw nsw i64 %185, 27
  %365 = getelementptr inbounds [25088 x float], [25088 x float]* %5, i64 0, i64 %364
  %366 = load float, float* %365, align 4, !tbaa !778
  %367 = insertelement <32 x float> undef, float %366, i32 0
  %368 = shufflevector <32 x float> %367, <32 x float> undef, <32 x i32> zeroinitializer
  %369 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %368, <32 x float> %332, <32 x float> %323)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_begin25.preheader, label %for_begin22.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv33 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next34, %for_body26 ]
  %370 = add nuw nsw i64 %indvars.iv33, %183
  %371 = add nuw nsw i64 %370, 49
  %372 = add nuw nsw i64 %370, 98
  %373 = add nuw nsw i64 %370, 147
  %374 = add nuw nsw i64 %370, 196
  %375 = add nuw nsw i64 %370, 245
  %376 = add nuw nsw i64 %370, 294
  %377 = add nuw nsw i64 %370, 343
  %378 = add nuw nsw i64 %370, 392
  %379 = add nuw nsw i64 %370, 441
  %380 = add nuw nsw i64 %370, 490
  %381 = add nuw nsw i64 %370, 539
  %382 = add nuw nsw i64 %370, 588
  %383 = add nuw nsw i64 %370, 637
  %384 = add nuw nsw i64 %370, 686
  %385 = add nuw nsw i64 %370, 735
  %386 = add nuw nsw i64 %370, 784
  %387 = add nuw nsw i64 %370, 833
  %388 = add nuw nsw i64 %370, 882
  %389 = add nuw nsw i64 %370, 931
  %390 = add nuw nsw i64 %370, 980
  %391 = add nuw nsw i64 %370, 1029
  %392 = add nuw nsw i64 %370, 1078
  %393 = add nuw nsw i64 %370, 1127
  %394 = add nuw nsw i64 %370, 1176
  %395 = add nuw nsw i64 %370, 1225
  %396 = add nuw nsw i64 %370, 1274
  %397 = add nuw nsw i64 %370, 1323
  %398 = add nuw nsw i64 %370, 1372
  %399 = add nuw nsw i64 %370, 1421
  %400 = add nuw nsw i64 %370, 1470
  %401 = add nuw nsw i64 %370, 1519
  %402 = shl nsw i64 %indvars.iv33, 5
  %403 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 %402
  %404 = bitcast float* %403 to <32 x float>*
  %405 = load <32 x float>, <32 x float>* %404, align 128, !tbaa !781
  %406 = getelementptr inbounds float, float* %35, i64 %370
  %407 = extractelement <32 x float> %405, i64 0
  store float %407, float* %406, align 4, !tbaa !782
  %408 = getelementptr inbounds float, float* %35, i64 %371
  %409 = extractelement <32 x float> %405, i64 1
  store float %409, float* %408, align 4, !tbaa !782
  %410 = getelementptr inbounds float, float* %35, i64 %372
  %411 = extractelement <32 x float> %405, i64 2
  store float %411, float* %410, align 4, !tbaa !782
  %412 = getelementptr inbounds float, float* %35, i64 %373
  %413 = extractelement <32 x float> %405, i64 3
  store float %413, float* %412, align 4, !tbaa !782
  %414 = getelementptr inbounds float, float* %35, i64 %374
  %415 = extractelement <32 x float> %405, i64 4
  store float %415, float* %414, align 4, !tbaa !782
  %416 = getelementptr inbounds float, float* %35, i64 %375
  %417 = extractelement <32 x float> %405, i64 5
  store float %417, float* %416, align 4, !tbaa !782
  %418 = getelementptr inbounds float, float* %35, i64 %376
  %419 = extractelement <32 x float> %405, i64 6
  store float %419, float* %418, align 4, !tbaa !782
  %420 = getelementptr inbounds float, float* %35, i64 %377
  %421 = extractelement <32 x float> %405, i64 7
  store float %421, float* %420, align 4, !tbaa !782
  %422 = getelementptr inbounds float, float* %35, i64 %378
  %423 = extractelement <32 x float> %405, i64 8
  store float %423, float* %422, align 4, !tbaa !782
  %424 = getelementptr inbounds float, float* %35, i64 %379
  %425 = extractelement <32 x float> %405, i64 9
  store float %425, float* %424, align 4, !tbaa !782
  %426 = getelementptr inbounds float, float* %35, i64 %380
  %427 = extractelement <32 x float> %405, i64 10
  store float %427, float* %426, align 4, !tbaa !782
  %428 = getelementptr inbounds float, float* %35, i64 %381
  %429 = extractelement <32 x float> %405, i64 11
  store float %429, float* %428, align 4, !tbaa !782
  %430 = getelementptr inbounds float, float* %35, i64 %382
  %431 = extractelement <32 x float> %405, i64 12
  store float %431, float* %430, align 4, !tbaa !782
  %432 = getelementptr inbounds float, float* %35, i64 %383
  %433 = extractelement <32 x float> %405, i64 13
  store float %433, float* %432, align 4, !tbaa !782
  %434 = getelementptr inbounds float, float* %35, i64 %384
  %435 = extractelement <32 x float> %405, i64 14
  store float %435, float* %434, align 4, !tbaa !782
  %436 = getelementptr inbounds float, float* %35, i64 %385
  %437 = extractelement <32 x float> %405, i64 15
  store float %437, float* %436, align 4, !tbaa !782
  %438 = getelementptr inbounds float, float* %35, i64 %386
  %439 = extractelement <32 x float> %405, i64 16
  store float %439, float* %438, align 4, !tbaa !782
  %440 = getelementptr inbounds float, float* %35, i64 %387
  %441 = extractelement <32 x float> %405, i64 17
  store float %441, float* %440, align 4, !tbaa !782
  %442 = getelementptr inbounds float, float* %35, i64 %388
  %443 = extractelement <32 x float> %405, i64 18
  store float %443, float* %442, align 4, !tbaa !782
  %444 = getelementptr inbounds float, float* %35, i64 %389
  %445 = extractelement <32 x float> %405, i64 19
  store float %445, float* %444, align 4, !tbaa !782
  %446 = getelementptr inbounds float, float* %35, i64 %390
  %447 = extractelement <32 x float> %405, i64 20
  store float %447, float* %446, align 4, !tbaa !782
  %448 = getelementptr inbounds float, float* %35, i64 %391
  %449 = extractelement <32 x float> %405, i64 21
  store float %449, float* %448, align 4, !tbaa !782
  %450 = getelementptr inbounds float, float* %35, i64 %392
  %451 = extractelement <32 x float> %405, i64 22
  store float %451, float* %450, align 4, !tbaa !782
  %452 = getelementptr inbounds float, float* %35, i64 %393
  %453 = extractelement <32 x float> %405, i64 23
  store float %453, float* %452, align 4, !tbaa !782
  %454 = getelementptr inbounds float, float* %35, i64 %394
  %455 = extractelement <32 x float> %405, i64 24
  store float %455, float* %454, align 4, !tbaa !782
  %456 = getelementptr inbounds float, float* %35, i64 %395
  %457 = extractelement <32 x float> %405, i64 25
  store float %457, float* %456, align 4, !tbaa !782
  %458 = getelementptr inbounds float, float* %35, i64 %396
  %459 = extractelement <32 x float> %405, i64 26
  store float %459, float* %458, align 4, !tbaa !782
  %460 = getelementptr inbounds float, float* %35, i64 %397
  %461 = extractelement <32 x float> %405, i64 27
  store float %461, float* %460, align 4, !tbaa !782
  %462 = getelementptr inbounds float, float* %35, i64 %398
  %463 = extractelement <32 x float> %405, i64 28
  store float %463, float* %462, align 4, !tbaa !782
  %464 = getelementptr inbounds float, float* %35, i64 %399
  %465 = extractelement <32 x float> %405, i64 29
  store float %465, float* %464, align 4, !tbaa !782
  %466 = getelementptr inbounds float, float* %35, i64 %400
  %467 = extractelement <32 x float> %405, i64 30
  store float %467, float* %466, align 4, !tbaa !782
  %468 = getelementptr inbounds float, float* %35, i64 %401
  %469 = extractelement <32 x float> %405, i64 31
  store float %469, float* %468, align 4, !tbaa !782
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond35 = icmp eq i64 %indvars.iv.next34, 7
  br i1 %exitcond35, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %470 = add nuw nsw i32 %173, 1
  %exitcond36 = icmp eq i32 %470, 448
  br i1 %exitcond36, label %for_end18, label %for_body17, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_11(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_11_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_11_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !785
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %5, align 4, !tbaa !785
  %6 = bitcast i8* %1 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !788
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !788
  %9 = fmul <4 x float> %wide.load, %wide.load3
  %10 = fmul <4 x float> %wide.load2, %wide.load4
  %11 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !791
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %10, <4 x float>* %13, align 4, !tbaa !791
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !785
  %16 = getelementptr inbounds i8, i8* %2, i64 48
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !785
  %18 = getelementptr inbounds i8, i8* %1, i64 32
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load3.1 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !788
  %20 = getelementptr inbounds i8, i8* %1, i64 48
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load4.1 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !788
  %22 = fmul <4 x float> %wide.load.1, %wide.load3.1
  %23 = fmul <4 x float> %wide.load2.1, %wide.load4.1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <4 x float>*
  store <4 x float> %22, <4 x float>* %25, align 4, !tbaa !791
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %23, <4 x float>* %27, align 4, !tbaa !791
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !785
  %30 = getelementptr inbounds i8, i8* %2, i64 80
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !785
  %32 = getelementptr inbounds i8, i8* %1, i64 64
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load3.2 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !788
  %34 = getelementptr inbounds i8, i8* %1, i64 80
  %35 = bitcast i8* %34 to <4 x float>*
  %wide.load4.2 = load <4 x float>, <4 x float>* %35, align 4, !tbaa !788
  %36 = fmul <4 x float> %wide.load.2, %wide.load3.2
  %37 = fmul <4 x float> %wide.load2.2, %wide.load4.2
  %38 = getelementptr inbounds i8, i8* %0, i64 64
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4, !tbaa !791
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4, !tbaa !791
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !785
  %44 = getelementptr inbounds i8, i8* %2, i64 112
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !785
  %46 = getelementptr inbounds i8, i8* %1, i64 96
  %47 = bitcast i8* %46 to <4 x float>*
  %wide.load3.3 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !788
  %48 = getelementptr inbounds i8, i8* %1, i64 112
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load4.3 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !788
  %50 = fmul <4 x float> %wide.load.3, %wide.load3.3
  %51 = fmul <4 x float> %wide.load2.3, %wide.load4.3
  %52 = getelementptr inbounds i8, i8* %0, i64 96
  %53 = bitcast i8* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !tbaa !791
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !tbaa !791
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !785
  %58 = getelementptr inbounds i8, i8* %2, i64 144
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !785
  %60 = getelementptr inbounds i8, i8* %1, i64 128
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load3.4 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !788
  %62 = getelementptr inbounds i8, i8* %1, i64 144
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load4.4 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !788
  %64 = fmul <4 x float> %wide.load.4, %wide.load3.4
  %65 = fmul <4 x float> %wide.load2.4, %wide.load4.4
  %66 = getelementptr inbounds i8, i8* %0, i64 128
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !791
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !791
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !785
  %72 = getelementptr inbounds i8, i8* %2, i64 176
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !785
  %74 = getelementptr inbounds i8, i8* %1, i64 160
  %75 = bitcast i8* %74 to <4 x float>*
  %wide.load3.5 = load <4 x float>, <4 x float>* %75, align 4, !tbaa !788
  %76 = getelementptr inbounds i8, i8* %1, i64 176
  %77 = bitcast i8* %76 to <4 x float>*
  %wide.load4.5 = load <4 x float>, <4 x float>* %77, align 4, !tbaa !788
  %78 = fmul <4 x float> %wide.load.5, %wide.load3.5
  %79 = fmul <4 x float> %wide.load2.5, %wide.load4.5
  %80 = getelementptr inbounds i8, i8* %0, i64 160
  %81 = bitcast i8* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !tbaa !791
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %79, <4 x float>* %83, align 4, !tbaa !791
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !785
  %86 = getelementptr inbounds i8, i8* %2, i64 208
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !785
  %88 = getelementptr inbounds i8, i8* %1, i64 192
  %89 = bitcast i8* %88 to <4 x float>*
  %wide.load3.6 = load <4 x float>, <4 x float>* %89, align 4, !tbaa !788
  %90 = getelementptr inbounds i8, i8* %1, i64 208
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load4.6 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !788
  %92 = fmul <4 x float> %wide.load.6, %wide.load3.6
  %93 = fmul <4 x float> %wide.load2.6, %wide.load4.6
  %94 = getelementptr inbounds i8, i8* %0, i64 192
  %95 = bitcast i8* %94 to <4 x float>*
  store <4 x float> %92, <4 x float>* %95, align 4, !tbaa !791
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %93, <4 x float>* %97, align 4, !tbaa !791
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !785
  %100 = getelementptr inbounds i8, i8* %2, i64 240
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !785
  %102 = getelementptr inbounds i8, i8* %1, i64 224
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load3.7 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !788
  %104 = getelementptr inbounds i8, i8* %1, i64 240
  %105 = bitcast i8* %104 to <4 x float>*
  %wide.load4.7 = load <4 x float>, <4 x float>* %105, align 4, !tbaa !788
  %106 = fmul <4 x float> %wide.load.7, %wide.load3.7
  %107 = fmul <4 x float> %wide.load2.7, %wide.load4.7
  %108 = getelementptr inbounds i8, i8* %0, i64 224
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %106, <4 x float>* %109, align 4, !tbaa !791
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %107, <4 x float>* %111, align 4, !tbaa !791
  %112 = getelementptr inbounds i8, i8* %2, i64 256
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !785
  %114 = getelementptr inbounds i8, i8* %2, i64 272
  %115 = bitcast i8* %114 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %115, align 4, !tbaa !785
  %116 = getelementptr inbounds i8, i8* %1, i64 256
  %117 = bitcast i8* %116 to <4 x float>*
  %wide.load3.8 = load <4 x float>, <4 x float>* %117, align 4, !tbaa !788
  %118 = getelementptr inbounds i8, i8* %1, i64 272
  %119 = bitcast i8* %118 to <4 x float>*
  %wide.load4.8 = load <4 x float>, <4 x float>* %119, align 4, !tbaa !788
  %120 = fmul <4 x float> %wide.load.8, %wide.load3.8
  %121 = fmul <4 x float> %wide.load2.8, %wide.load4.8
  %122 = getelementptr inbounds i8, i8* %0, i64 256
  %123 = bitcast i8* %122 to <4 x float>*
  store <4 x float> %120, <4 x float>* %123, align 4, !tbaa !791
  %124 = getelementptr inbounds i8, i8* %0, i64 272
  %125 = bitcast i8* %124 to <4 x float>*
  store <4 x float> %121, <4 x float>* %125, align 4, !tbaa !791
  %126 = getelementptr inbounds i8, i8* %2, i64 288
  %127 = bitcast i8* %126 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %127, align 4, !tbaa !785
  %128 = getelementptr inbounds i8, i8* %2, i64 304
  %129 = bitcast i8* %128 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %129, align 4, !tbaa !785
  %130 = getelementptr inbounds i8, i8* %1, i64 288
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load3.9 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !788
  %132 = getelementptr inbounds i8, i8* %1, i64 304
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load4.9 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !788
  %134 = fmul <4 x float> %wide.load.9, %wide.load3.9
  %135 = fmul <4 x float> %wide.load2.9, %wide.load4.9
  %136 = getelementptr inbounds i8, i8* %0, i64 288
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !791
  %138 = getelementptr inbounds i8, i8* %0, i64 304
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !791
  %140 = getelementptr inbounds i8, i8* %2, i64 320
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !785
  %142 = getelementptr inbounds i8, i8* %2, i64 336
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !785
  %144 = getelementptr inbounds i8, i8* %1, i64 320
  %145 = bitcast i8* %144 to <4 x float>*
  %wide.load3.10 = load <4 x float>, <4 x float>* %145, align 4, !tbaa !788
  %146 = getelementptr inbounds i8, i8* %1, i64 336
  %147 = bitcast i8* %146 to <4 x float>*
  %wide.load4.10 = load <4 x float>, <4 x float>* %147, align 4, !tbaa !788
  %148 = fmul <4 x float> %wide.load.10, %wide.load3.10
  %149 = fmul <4 x float> %wide.load2.10, %wide.load4.10
  %150 = getelementptr inbounds i8, i8* %0, i64 320
  %151 = bitcast i8* %150 to <4 x float>*
  store <4 x float> %148, <4 x float>* %151, align 4, !tbaa !791
  %152 = getelementptr inbounds i8, i8* %0, i64 336
  %153 = bitcast i8* %152 to <4 x float>*
  store <4 x float> %149, <4 x float>* %153, align 4, !tbaa !791
  %154 = getelementptr inbounds i8, i8* %2, i64 352
  %155 = bitcast i8* %154 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %155, align 4, !tbaa !785
  %156 = getelementptr inbounds i8, i8* %2, i64 368
  %157 = bitcast i8* %156 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %157, align 4, !tbaa !785
  %158 = getelementptr inbounds i8, i8* %1, i64 352
  %159 = bitcast i8* %158 to <4 x float>*
  %wide.load3.11 = load <4 x float>, <4 x float>* %159, align 4, !tbaa !788
  %160 = getelementptr inbounds i8, i8* %1, i64 368
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load4.11 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !788
  %162 = fmul <4 x float> %wide.load.11, %wide.load3.11
  %163 = fmul <4 x float> %wide.load2.11, %wide.load4.11
  %164 = getelementptr inbounds i8, i8* %0, i64 352
  %165 = bitcast i8* %164 to <4 x float>*
  store <4 x float> %162, <4 x float>* %165, align 4, !tbaa !791
  %166 = getelementptr inbounds i8, i8* %0, i64 368
  %167 = bitcast i8* %166 to <4 x float>*
  store <4 x float> %163, <4 x float>* %167, align 4, !tbaa !791
  %168 = getelementptr inbounds i8, i8* %2, i64 384
  %169 = bitcast i8* %168 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %169, align 4, !tbaa !785
  %170 = getelementptr inbounds i8, i8* %2, i64 400
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !785
  %172 = getelementptr inbounds i8, i8* %1, i64 384
  %173 = bitcast i8* %172 to <4 x float>*
  %wide.load3.12 = load <4 x float>, <4 x float>* %173, align 4, !tbaa !788
  %174 = getelementptr inbounds i8, i8* %1, i64 400
  %175 = bitcast i8* %174 to <4 x float>*
  %wide.load4.12 = load <4 x float>, <4 x float>* %175, align 4, !tbaa !788
  %176 = fmul <4 x float> %wide.load.12, %wide.load3.12
  %177 = fmul <4 x float> %wide.load2.12, %wide.load4.12
  %178 = getelementptr inbounds i8, i8* %0, i64 384
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !tbaa !791
  %180 = getelementptr inbounds i8, i8* %0, i64 400
  %181 = bitcast i8* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !tbaa !791
  %182 = getelementptr inbounds i8, i8* %2, i64 416
  %183 = bitcast i8* %182 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !785
  %184 = getelementptr inbounds i8, i8* %2, i64 432
  %185 = bitcast i8* %184 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %185, align 4, !tbaa !785
  %186 = getelementptr inbounds i8, i8* %1, i64 416
  %187 = bitcast i8* %186 to <4 x float>*
  %wide.load3.13 = load <4 x float>, <4 x float>* %187, align 4, !tbaa !788
  %188 = getelementptr inbounds i8, i8* %1, i64 432
  %189 = bitcast i8* %188 to <4 x float>*
  %wide.load4.13 = load <4 x float>, <4 x float>* %189, align 4, !tbaa !788
  %190 = fmul <4 x float> %wide.load.13, %wide.load3.13
  %191 = fmul <4 x float> %wide.load2.13, %wide.load4.13
  %192 = getelementptr inbounds i8, i8* %0, i64 416
  %193 = bitcast i8* %192 to <4 x float>*
  store <4 x float> %190, <4 x float>* %193, align 4, !tbaa !791
  %194 = getelementptr inbounds i8, i8* %0, i64 432
  %195 = bitcast i8* %194 to <4 x float>*
  store <4 x float> %191, <4 x float>* %195, align 4, !tbaa !791
  %196 = getelementptr inbounds i8, i8* %2, i64 448
  %197 = bitcast i8* %196 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %197, align 4, !tbaa !785
  %198 = getelementptr inbounds i8, i8* %2, i64 464
  %199 = bitcast i8* %198 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %199, align 4, !tbaa !785
  %200 = getelementptr inbounds i8, i8* %1, i64 448
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load3.14 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !788
  %202 = getelementptr inbounds i8, i8* %1, i64 464
  %203 = bitcast i8* %202 to <4 x float>*
  %wide.load4.14 = load <4 x float>, <4 x float>* %203, align 4, !tbaa !788
  %204 = fmul <4 x float> %wide.load.14, %wide.load3.14
  %205 = fmul <4 x float> %wide.load2.14, %wide.load4.14
  %206 = getelementptr inbounds i8, i8* %0, i64 448
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> %204, <4 x float>* %207, align 4, !tbaa !791
  %208 = getelementptr inbounds i8, i8* %0, i64 464
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %205, <4 x float>* %209, align 4, !tbaa !791
  %210 = getelementptr inbounds i8, i8* %2, i64 480
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !785
  %212 = getelementptr inbounds i8, i8* %2, i64 496
  %213 = bitcast i8* %212 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %213, align 4, !tbaa !785
  %214 = getelementptr inbounds i8, i8* %1, i64 480
  %215 = bitcast i8* %214 to <4 x float>*
  %wide.load3.15 = load <4 x float>, <4 x float>* %215, align 4, !tbaa !788
  %216 = getelementptr inbounds i8, i8* %1, i64 496
  %217 = bitcast i8* %216 to <4 x float>*
  %wide.load4.15 = load <4 x float>, <4 x float>* %217, align 4, !tbaa !788
  %218 = fmul <4 x float> %wide.load.15, %wide.load3.15
  %219 = fmul <4 x float> %wide.load2.15, %wide.load4.15
  %220 = getelementptr inbounds i8, i8* %0, i64 480
  %221 = bitcast i8* %220 to <4 x float>*
  store <4 x float> %218, <4 x float>* %221, align 4, !tbaa !791
  %222 = getelementptr inbounds i8, i8* %0, i64 496
  %223 = bitcast i8* %222 to <4 x float>*
  store <4 x float> %219, <4 x float>* %223, align 4, !tbaa !791
  %224 = getelementptr inbounds i8, i8* %2, i64 512
  %225 = bitcast i8* %224 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %225, align 4, !tbaa !785
  %226 = getelementptr inbounds i8, i8* %2, i64 528
  %227 = bitcast i8* %226 to <4 x float>*
  %wide.load2.16 = load <4 x float>, <4 x float>* %227, align 4, !tbaa !785
  %228 = getelementptr inbounds i8, i8* %1, i64 512
  %229 = bitcast i8* %228 to <4 x float>*
  %wide.load3.16 = load <4 x float>, <4 x float>* %229, align 4, !tbaa !788
  %230 = getelementptr inbounds i8, i8* %1, i64 528
  %231 = bitcast i8* %230 to <4 x float>*
  %wide.load4.16 = load <4 x float>, <4 x float>* %231, align 4, !tbaa !788
  %232 = fmul <4 x float> %wide.load.16, %wide.load3.16
  %233 = fmul <4 x float> %wide.load2.16, %wide.load4.16
  %234 = getelementptr inbounds i8, i8* %0, i64 512
  %235 = bitcast i8* %234 to <4 x float>*
  store <4 x float> %232, <4 x float>* %235, align 4, !tbaa !791
  %236 = getelementptr inbounds i8, i8* %0, i64 528
  %237 = bitcast i8* %236 to <4 x float>*
  store <4 x float> %233, <4 x float>* %237, align 4, !tbaa !791
  %238 = getelementptr inbounds i8, i8* %2, i64 544
  %239 = bitcast i8* %238 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %239, align 4, !tbaa !785
  %240 = getelementptr inbounds i8, i8* %2, i64 560
  %241 = bitcast i8* %240 to <4 x float>*
  %wide.load2.17 = load <4 x float>, <4 x float>* %241, align 4, !tbaa !785
  %242 = getelementptr inbounds i8, i8* %1, i64 544
  %243 = bitcast i8* %242 to <4 x float>*
  %wide.load3.17 = load <4 x float>, <4 x float>* %243, align 4, !tbaa !788
  %244 = getelementptr inbounds i8, i8* %1, i64 560
  %245 = bitcast i8* %244 to <4 x float>*
  %wide.load4.17 = load <4 x float>, <4 x float>* %245, align 4, !tbaa !788
  %246 = fmul <4 x float> %wide.load.17, %wide.load3.17
  %247 = fmul <4 x float> %wide.load2.17, %wide.load4.17
  %248 = getelementptr inbounds i8, i8* %0, i64 544
  %249 = bitcast i8* %248 to <4 x float>*
  store <4 x float> %246, <4 x float>* %249, align 4, !tbaa !791
  %250 = getelementptr inbounds i8, i8* %0, i64 560
  %251 = bitcast i8* %250 to <4 x float>*
  store <4 x float> %247, <4 x float>* %251, align 4, !tbaa !791
  %252 = getelementptr inbounds i8, i8* %2, i64 576
  %253 = bitcast i8* %252 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %253, align 4, !tbaa !785
  %254 = getelementptr inbounds i8, i8* %2, i64 592
  %255 = bitcast i8* %254 to <4 x float>*
  %wide.load2.18 = load <4 x float>, <4 x float>* %255, align 4, !tbaa !785
  %256 = getelementptr inbounds i8, i8* %1, i64 576
  %257 = bitcast i8* %256 to <4 x float>*
  %wide.load3.18 = load <4 x float>, <4 x float>* %257, align 4, !tbaa !788
  %258 = getelementptr inbounds i8, i8* %1, i64 592
  %259 = bitcast i8* %258 to <4 x float>*
  %wide.load4.18 = load <4 x float>, <4 x float>* %259, align 4, !tbaa !788
  %260 = fmul <4 x float> %wide.load.18, %wide.load3.18
  %261 = fmul <4 x float> %wide.load2.18, %wide.load4.18
  %262 = getelementptr inbounds i8, i8* %0, i64 576
  %263 = bitcast i8* %262 to <4 x float>*
  store <4 x float> %260, <4 x float>* %263, align 4, !tbaa !791
  %264 = getelementptr inbounds i8, i8* %0, i64 592
  %265 = bitcast i8* %264 to <4 x float>*
  store <4 x float> %261, <4 x float>* %265, align 4, !tbaa !791
  %266 = getelementptr inbounds i8, i8* %2, i64 608
  %267 = bitcast i8* %266 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %267, align 4, !tbaa !785
  %268 = getelementptr inbounds i8, i8* %2, i64 624
  %269 = bitcast i8* %268 to <4 x float>*
  %wide.load2.19 = load <4 x float>, <4 x float>* %269, align 4, !tbaa !785
  %270 = getelementptr inbounds i8, i8* %1, i64 608
  %271 = bitcast i8* %270 to <4 x float>*
  %wide.load3.19 = load <4 x float>, <4 x float>* %271, align 4, !tbaa !788
  %272 = getelementptr inbounds i8, i8* %1, i64 624
  %273 = bitcast i8* %272 to <4 x float>*
  %wide.load4.19 = load <4 x float>, <4 x float>* %273, align 4, !tbaa !788
  %274 = fmul <4 x float> %wide.load.19, %wide.load3.19
  %275 = fmul <4 x float> %wide.load2.19, %wide.load4.19
  %276 = getelementptr inbounds i8, i8* %0, i64 608
  %277 = bitcast i8* %276 to <4 x float>*
  store <4 x float> %274, <4 x float>* %277, align 4, !tbaa !791
  %278 = getelementptr inbounds i8, i8* %0, i64 624
  %279 = bitcast i8* %278 to <4 x float>*
  store <4 x float> %275, <4 x float>* %279, align 4, !tbaa !791
  %280 = getelementptr inbounds i8, i8* %2, i64 640
  %281 = bitcast i8* %280 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %281, align 4, !tbaa !785
  %282 = getelementptr inbounds i8, i8* %2, i64 656
  %283 = bitcast i8* %282 to <4 x float>*
  %wide.load2.20 = load <4 x float>, <4 x float>* %283, align 4, !tbaa !785
  %284 = getelementptr inbounds i8, i8* %1, i64 640
  %285 = bitcast i8* %284 to <4 x float>*
  %wide.load3.20 = load <4 x float>, <4 x float>* %285, align 4, !tbaa !788
  %286 = getelementptr inbounds i8, i8* %1, i64 656
  %287 = bitcast i8* %286 to <4 x float>*
  %wide.load4.20 = load <4 x float>, <4 x float>* %287, align 4, !tbaa !788
  %288 = fmul <4 x float> %wide.load.20, %wide.load3.20
  %289 = fmul <4 x float> %wide.load2.20, %wide.load4.20
  %290 = getelementptr inbounds i8, i8* %0, i64 640
  %291 = bitcast i8* %290 to <4 x float>*
  store <4 x float> %288, <4 x float>* %291, align 4, !tbaa !791
  %292 = getelementptr inbounds i8, i8* %0, i64 656
  %293 = bitcast i8* %292 to <4 x float>*
  store <4 x float> %289, <4 x float>* %293, align 4, !tbaa !791
  %294 = getelementptr inbounds i8, i8* %2, i64 672
  %295 = bitcast i8* %294 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %295, align 4, !tbaa !785
  %296 = getelementptr inbounds i8, i8* %2, i64 688
  %297 = bitcast i8* %296 to <4 x float>*
  %wide.load2.21 = load <4 x float>, <4 x float>* %297, align 4, !tbaa !785
  %298 = getelementptr inbounds i8, i8* %1, i64 672
  %299 = bitcast i8* %298 to <4 x float>*
  %wide.load3.21 = load <4 x float>, <4 x float>* %299, align 4, !tbaa !788
  %300 = getelementptr inbounds i8, i8* %1, i64 688
  %301 = bitcast i8* %300 to <4 x float>*
  %wide.load4.21 = load <4 x float>, <4 x float>* %301, align 4, !tbaa !788
  %302 = fmul <4 x float> %wide.load.21, %wide.load3.21
  %303 = fmul <4 x float> %wide.load2.21, %wide.load4.21
  %304 = getelementptr inbounds i8, i8* %0, i64 672
  %305 = bitcast i8* %304 to <4 x float>*
  store <4 x float> %302, <4 x float>* %305, align 4, !tbaa !791
  %306 = getelementptr inbounds i8, i8* %0, i64 688
  %307 = bitcast i8* %306 to <4 x float>*
  store <4 x float> %303, <4 x float>* %307, align 4, !tbaa !791
  %308 = getelementptr inbounds i8, i8* %2, i64 704
  %309 = bitcast i8* %308 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %309, align 4, !tbaa !785
  %310 = getelementptr inbounds i8, i8* %2, i64 720
  %311 = bitcast i8* %310 to <4 x float>*
  %wide.load2.22 = load <4 x float>, <4 x float>* %311, align 4, !tbaa !785
  %312 = getelementptr inbounds i8, i8* %1, i64 704
  %313 = bitcast i8* %312 to <4 x float>*
  %wide.load3.22 = load <4 x float>, <4 x float>* %313, align 4, !tbaa !788
  %314 = getelementptr inbounds i8, i8* %1, i64 720
  %315 = bitcast i8* %314 to <4 x float>*
  %wide.load4.22 = load <4 x float>, <4 x float>* %315, align 4, !tbaa !788
  %316 = fmul <4 x float> %wide.load.22, %wide.load3.22
  %317 = fmul <4 x float> %wide.load2.22, %wide.load4.22
  %318 = getelementptr inbounds i8, i8* %0, i64 704
  %319 = bitcast i8* %318 to <4 x float>*
  store <4 x float> %316, <4 x float>* %319, align 4, !tbaa !791
  %320 = getelementptr inbounds i8, i8* %0, i64 720
  %321 = bitcast i8* %320 to <4 x float>*
  store <4 x float> %317, <4 x float>* %321, align 4, !tbaa !791
  %322 = getelementptr inbounds i8, i8* %2, i64 736
  %323 = bitcast i8* %322 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %323, align 4, !tbaa !785
  %324 = getelementptr inbounds i8, i8* %2, i64 752
  %325 = bitcast i8* %324 to <4 x float>*
  %wide.load2.23 = load <4 x float>, <4 x float>* %325, align 4, !tbaa !785
  %326 = getelementptr inbounds i8, i8* %1, i64 736
  %327 = bitcast i8* %326 to <4 x float>*
  %wide.load3.23 = load <4 x float>, <4 x float>* %327, align 4, !tbaa !788
  %328 = getelementptr inbounds i8, i8* %1, i64 752
  %329 = bitcast i8* %328 to <4 x float>*
  %wide.load4.23 = load <4 x float>, <4 x float>* %329, align 4, !tbaa !788
  %330 = fmul <4 x float> %wide.load.23, %wide.load3.23
  %331 = fmul <4 x float> %wide.load2.23, %wide.load4.23
  %332 = getelementptr inbounds i8, i8* %0, i64 736
  %333 = bitcast i8* %332 to <4 x float>*
  store <4 x float> %330, <4 x float>* %333, align 4, !tbaa !791
  %334 = getelementptr inbounds i8, i8* %0, i64 752
  %335 = bitcast i8* %334 to <4 x float>*
  store <4 x float> %331, <4 x float>* %335, align 4, !tbaa !791
  %336 = getelementptr inbounds i8, i8* %2, i64 768
  %337 = bitcast i8* %336 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %337, align 4, !tbaa !785
  %338 = getelementptr inbounds i8, i8* %2, i64 784
  %339 = bitcast i8* %338 to <4 x float>*
  %wide.load2.24 = load <4 x float>, <4 x float>* %339, align 4, !tbaa !785
  %340 = getelementptr inbounds i8, i8* %1, i64 768
  %341 = bitcast i8* %340 to <4 x float>*
  %wide.load3.24 = load <4 x float>, <4 x float>* %341, align 4, !tbaa !788
  %342 = getelementptr inbounds i8, i8* %1, i64 784
  %343 = bitcast i8* %342 to <4 x float>*
  %wide.load4.24 = load <4 x float>, <4 x float>* %343, align 4, !tbaa !788
  %344 = fmul <4 x float> %wide.load.24, %wide.load3.24
  %345 = fmul <4 x float> %wide.load2.24, %wide.load4.24
  %346 = getelementptr inbounds i8, i8* %0, i64 768
  %347 = bitcast i8* %346 to <4 x float>*
  store <4 x float> %344, <4 x float>* %347, align 4, !tbaa !791
  %348 = getelementptr inbounds i8, i8* %0, i64 784
  %349 = bitcast i8* %348 to <4 x float>*
  store <4 x float> %345, <4 x float>* %349, align 4, !tbaa !791
  %350 = getelementptr inbounds i8, i8* %2, i64 800
  %351 = bitcast i8* %350 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %351, align 4, !tbaa !785
  %352 = getelementptr inbounds i8, i8* %2, i64 816
  %353 = bitcast i8* %352 to <4 x float>*
  %wide.load2.25 = load <4 x float>, <4 x float>* %353, align 4, !tbaa !785
  %354 = getelementptr inbounds i8, i8* %1, i64 800
  %355 = bitcast i8* %354 to <4 x float>*
  %wide.load3.25 = load <4 x float>, <4 x float>* %355, align 4, !tbaa !788
  %356 = getelementptr inbounds i8, i8* %1, i64 816
  %357 = bitcast i8* %356 to <4 x float>*
  %wide.load4.25 = load <4 x float>, <4 x float>* %357, align 4, !tbaa !788
  %358 = fmul <4 x float> %wide.load.25, %wide.load3.25
  %359 = fmul <4 x float> %wide.load2.25, %wide.load4.25
  %360 = getelementptr inbounds i8, i8* %0, i64 800
  %361 = bitcast i8* %360 to <4 x float>*
  store <4 x float> %358, <4 x float>* %361, align 4, !tbaa !791
  %362 = getelementptr inbounds i8, i8* %0, i64 816
  %363 = bitcast i8* %362 to <4 x float>*
  store <4 x float> %359, <4 x float>* %363, align 4, !tbaa !791
  %364 = getelementptr inbounds i8, i8* %2, i64 832
  %365 = bitcast i8* %364 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %365, align 4, !tbaa !785
  %366 = getelementptr inbounds i8, i8* %2, i64 848
  %367 = bitcast i8* %366 to <4 x float>*
  %wide.load2.26 = load <4 x float>, <4 x float>* %367, align 4, !tbaa !785
  %368 = getelementptr inbounds i8, i8* %1, i64 832
  %369 = bitcast i8* %368 to <4 x float>*
  %wide.load3.26 = load <4 x float>, <4 x float>* %369, align 4, !tbaa !788
  %370 = getelementptr inbounds i8, i8* %1, i64 848
  %371 = bitcast i8* %370 to <4 x float>*
  %wide.load4.26 = load <4 x float>, <4 x float>* %371, align 4, !tbaa !788
  %372 = fmul <4 x float> %wide.load.26, %wide.load3.26
  %373 = fmul <4 x float> %wide.load2.26, %wide.load4.26
  %374 = getelementptr inbounds i8, i8* %0, i64 832
  %375 = bitcast i8* %374 to <4 x float>*
  store <4 x float> %372, <4 x float>* %375, align 4, !tbaa !791
  %376 = getelementptr inbounds i8, i8* %0, i64 848
  %377 = bitcast i8* %376 to <4 x float>*
  store <4 x float> %373, <4 x float>* %377, align 4, !tbaa !791
  %378 = getelementptr inbounds i8, i8* %2, i64 864
  %379 = bitcast i8* %378 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %379, align 4, !tbaa !785
  %380 = getelementptr inbounds i8, i8* %2, i64 880
  %381 = bitcast i8* %380 to <4 x float>*
  %wide.load2.27 = load <4 x float>, <4 x float>* %381, align 4, !tbaa !785
  %382 = getelementptr inbounds i8, i8* %1, i64 864
  %383 = bitcast i8* %382 to <4 x float>*
  %wide.load3.27 = load <4 x float>, <4 x float>* %383, align 4, !tbaa !788
  %384 = getelementptr inbounds i8, i8* %1, i64 880
  %385 = bitcast i8* %384 to <4 x float>*
  %wide.load4.27 = load <4 x float>, <4 x float>* %385, align 4, !tbaa !788
  %386 = fmul <4 x float> %wide.load.27, %wide.load3.27
  %387 = fmul <4 x float> %wide.load2.27, %wide.load4.27
  %388 = getelementptr inbounds i8, i8* %0, i64 864
  %389 = bitcast i8* %388 to <4 x float>*
  store <4 x float> %386, <4 x float>* %389, align 4, !tbaa !791
  %390 = getelementptr inbounds i8, i8* %0, i64 880
  %391 = bitcast i8* %390 to <4 x float>*
  store <4 x float> %387, <4 x float>* %391, align 4, !tbaa !791
  %392 = getelementptr inbounds i8, i8* %2, i64 896
  %393 = bitcast i8* %392 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %393, align 4, !tbaa !785
  %394 = getelementptr inbounds i8, i8* %2, i64 912
  %395 = bitcast i8* %394 to <4 x float>*
  %wide.load2.28 = load <4 x float>, <4 x float>* %395, align 4, !tbaa !785
  %396 = getelementptr inbounds i8, i8* %1, i64 896
  %397 = bitcast i8* %396 to <4 x float>*
  %wide.load3.28 = load <4 x float>, <4 x float>* %397, align 4, !tbaa !788
  %398 = getelementptr inbounds i8, i8* %1, i64 912
  %399 = bitcast i8* %398 to <4 x float>*
  %wide.load4.28 = load <4 x float>, <4 x float>* %399, align 4, !tbaa !788
  %400 = fmul <4 x float> %wide.load.28, %wide.load3.28
  %401 = fmul <4 x float> %wide.load2.28, %wide.load4.28
  %402 = getelementptr inbounds i8, i8* %0, i64 896
  %403 = bitcast i8* %402 to <4 x float>*
  store <4 x float> %400, <4 x float>* %403, align 4, !tbaa !791
  %404 = getelementptr inbounds i8, i8* %0, i64 912
  %405 = bitcast i8* %404 to <4 x float>*
  store <4 x float> %401, <4 x float>* %405, align 4, !tbaa !791
  %406 = getelementptr inbounds i8, i8* %2, i64 928
  %407 = bitcast i8* %406 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %407, align 4, !tbaa !785
  %408 = getelementptr inbounds i8, i8* %2, i64 944
  %409 = bitcast i8* %408 to <4 x float>*
  %wide.load2.29 = load <4 x float>, <4 x float>* %409, align 4, !tbaa !785
  %410 = getelementptr inbounds i8, i8* %1, i64 928
  %411 = bitcast i8* %410 to <4 x float>*
  %wide.load3.29 = load <4 x float>, <4 x float>* %411, align 4, !tbaa !788
  %412 = getelementptr inbounds i8, i8* %1, i64 944
  %413 = bitcast i8* %412 to <4 x float>*
  %wide.load4.29 = load <4 x float>, <4 x float>* %413, align 4, !tbaa !788
  %414 = fmul <4 x float> %wide.load.29, %wide.load3.29
  %415 = fmul <4 x float> %wide.load2.29, %wide.load4.29
  %416 = getelementptr inbounds i8, i8* %0, i64 928
  %417 = bitcast i8* %416 to <4 x float>*
  store <4 x float> %414, <4 x float>* %417, align 4, !tbaa !791
  %418 = getelementptr inbounds i8, i8* %0, i64 944
  %419 = bitcast i8* %418 to <4 x float>*
  store <4 x float> %415, <4 x float>* %419, align 4, !tbaa !791
  %420 = getelementptr inbounds i8, i8* %2, i64 960
  %421 = bitcast i8* %420 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %421, align 4, !tbaa !785
  %422 = getelementptr inbounds i8, i8* %2, i64 976
  %423 = bitcast i8* %422 to <4 x float>*
  %wide.load2.30 = load <4 x float>, <4 x float>* %423, align 4, !tbaa !785
  %424 = getelementptr inbounds i8, i8* %1, i64 960
  %425 = bitcast i8* %424 to <4 x float>*
  %wide.load3.30 = load <4 x float>, <4 x float>* %425, align 4, !tbaa !788
  %426 = getelementptr inbounds i8, i8* %1, i64 976
  %427 = bitcast i8* %426 to <4 x float>*
  %wide.load4.30 = load <4 x float>, <4 x float>* %427, align 4, !tbaa !788
  %428 = fmul <4 x float> %wide.load.30, %wide.load3.30
  %429 = fmul <4 x float> %wide.load2.30, %wide.load4.30
  %430 = getelementptr inbounds i8, i8* %0, i64 960
  %431 = bitcast i8* %430 to <4 x float>*
  store <4 x float> %428, <4 x float>* %431, align 4, !tbaa !791
  %432 = getelementptr inbounds i8, i8* %0, i64 976
  %433 = bitcast i8* %432 to <4 x float>*
  store <4 x float> %429, <4 x float>* %433, align 4, !tbaa !791
  %434 = getelementptr inbounds i8, i8* %2, i64 992
  %435 = bitcast i8* %434 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %435, align 4, !tbaa !785
  %436 = getelementptr inbounds i8, i8* %2, i64 1008
  %437 = bitcast i8* %436 to <4 x float>*
  %wide.load2.31 = load <4 x float>, <4 x float>* %437, align 4, !tbaa !785
  %438 = getelementptr inbounds i8, i8* %1, i64 992
  %439 = bitcast i8* %438 to <4 x float>*
  %wide.load3.31 = load <4 x float>, <4 x float>* %439, align 4, !tbaa !788
  %440 = getelementptr inbounds i8, i8* %1, i64 1008
  %441 = bitcast i8* %440 to <4 x float>*
  %wide.load4.31 = load <4 x float>, <4 x float>* %441, align 4, !tbaa !788
  %442 = fmul <4 x float> %wide.load.31, %wide.load3.31
  %443 = fmul <4 x float> %wide.load2.31, %wide.load4.31
  %444 = getelementptr inbounds i8, i8* %0, i64 992
  %445 = bitcast i8* %444 to <4 x float>*
  store <4 x float> %442, <4 x float>* %445, align 4, !tbaa !791
  %446 = getelementptr inbounds i8, i8* %0, i64 1008
  %447 = bitcast i8* %446 to <4 x float>*
  store <4 x float> %443, <4 x float>* %447, align 4, !tbaa !791
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_4_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 4096, i1 false)
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !794
  %3 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %4 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4, !tbaa !797
  %5 = getelementptr inbounds i8, i8* %1, i64 16
  %6 = bitcast i8* %5 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !794
  %7 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.1)
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %7, <4 x float>* %9, align 4, !tbaa !797
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !794
  %12 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.2)
  %13 = getelementptr inbounds i8, i8* %0, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  store <4 x float> %12, <4 x float>* %14, align 4, !tbaa !797
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !794
  %17 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.3)
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !797
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !794
  %22 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.4)
  %23 = getelementptr inbounds i8, i8* %0, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4, !tbaa !797
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !794
  %27 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.5)
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4, !tbaa !797
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !794
  %32 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.6)
  %33 = getelementptr inbounds i8, i8* %0, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !797
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !794
  %37 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.7)
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !797
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !794
  %42 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.8)
  %43 = getelementptr inbounds i8, i8* %0, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  store <4 x float> %42, <4 x float>* %44, align 4, !tbaa !797
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !794
  %47 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.9)
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4, !tbaa !797
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !794
  %52 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.10)
  %53 = getelementptr inbounds i8, i8* %0, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !797
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !794
  %57 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.11)
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %57, <4 x float>* %59, align 4, !tbaa !797
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !794
  %62 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.12)
  %63 = getelementptr inbounds i8, i8* %0, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !tbaa !797
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !794
  %67 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.13)
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !797
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !794
  %72 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.14)
  %73 = getelementptr inbounds i8, i8* %0, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4, !tbaa !797
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !794
  %77 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.15)
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !tbaa !797
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_9(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_9_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_9_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 12544
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !800
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 112
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !803
  %13 = fmul <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !806
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !803
  %19 = fmul <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !806
  %22 = or i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !803
  %25 = fmul <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !806
  %28 = or i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !803
  %31 = fmul <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !806
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !803
  %37 = fmul <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !806
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !803
  %43 = fmul <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !806
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !803
  %49 = fmul <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !806
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !803
  %55 = fmul <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !806
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !803
  %61 = fmul <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !806
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !803
  %67 = fmul <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !806
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !803
  %73 = fmul <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !806
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !803
  %79 = fmul <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !806
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !803
  %85 = fmul <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !806
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !803
  %91 = fmul <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !806
  %94 = add nuw nsw i64 %10, 56
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = bitcast float* %95 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !803
  %97 = fmul <4 x float> %broadcast.splat8, %wide.load.14
  %98 = getelementptr inbounds float, float* %5, i64 %94
  %99 = bitcast float* %98 to <4 x float>*
  store <4 x float> %97, <4 x float>* %99, align 4, !tbaa !806
  %100 = add nuw nsw i64 %10, 60
  %101 = getelementptr inbounds float, float* %4, i64 %100
  %102 = bitcast float* %101 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %102, align 4, !tbaa !803
  %103 = fmul <4 x float> %broadcast.splat8, %wide.load.15
  %104 = getelementptr inbounds float, float* %5, i64 %100
  %105 = bitcast float* %104 to <4 x float>*
  store <4 x float> %103, <4 x float>* %105, align 4, !tbaa !806
  %106 = add nuw nsw i64 %10, 64
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = bitcast float* %107 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %108, align 4, !tbaa !803
  %109 = fmul <4 x float> %broadcast.splat8, %wide.load.16
  %110 = getelementptr inbounds float, float* %5, i64 %106
  %111 = bitcast float* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 4, !tbaa !806
  %112 = add nuw nsw i64 %10, 68
  %113 = getelementptr inbounds float, float* %4, i64 %112
  %114 = bitcast float* %113 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !803
  %115 = fmul <4 x float> %broadcast.splat8, %wide.load.17
  %116 = getelementptr inbounds float, float* %5, i64 %112
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %115, <4 x float>* %117, align 4, !tbaa !806
  %118 = add nuw nsw i64 %10, 72
  %119 = getelementptr inbounds float, float* %4, i64 %118
  %120 = bitcast float* %119 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %120, align 4, !tbaa !803
  %121 = fmul <4 x float> %broadcast.splat8, %wide.load.18
  %122 = getelementptr inbounds float, float* %5, i64 %118
  %123 = bitcast float* %122 to <4 x float>*
  store <4 x float> %121, <4 x float>* %123, align 4, !tbaa !806
  %124 = add nuw nsw i64 %10, 76
  %125 = getelementptr inbounds float, float* %4, i64 %124
  %126 = bitcast float* %125 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !803
  %127 = fmul <4 x float> %broadcast.splat8, %wide.load.19
  %128 = getelementptr inbounds float, float* %5, i64 %124
  %129 = bitcast float* %128 to <4 x float>*
  store <4 x float> %127, <4 x float>* %129, align 4, !tbaa !806
  %130 = add nuw nsw i64 %10, 80
  %131 = getelementptr inbounds float, float* %4, i64 %130
  %132 = bitcast float* %131 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %132, align 4, !tbaa !803
  %133 = fmul <4 x float> %broadcast.splat8, %wide.load.20
  %134 = getelementptr inbounds float, float* %5, i64 %130
  %135 = bitcast float* %134 to <4 x float>*
  store <4 x float> %133, <4 x float>* %135, align 4, !tbaa !806
  %136 = add nuw nsw i64 %10, 84
  %137 = getelementptr inbounds float, float* %4, i64 %136
  %138 = bitcast float* %137 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %138, align 4, !tbaa !803
  %139 = fmul <4 x float> %broadcast.splat8, %wide.load.21
  %140 = getelementptr inbounds float, float* %5, i64 %136
  %141 = bitcast float* %140 to <4 x float>*
  store <4 x float> %139, <4 x float>* %141, align 4, !tbaa !806
  %142 = add nuw nsw i64 %10, 88
  %143 = getelementptr inbounds float, float* %4, i64 %142
  %144 = bitcast float* %143 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %144, align 4, !tbaa !803
  %145 = fmul <4 x float> %broadcast.splat8, %wide.load.22
  %146 = getelementptr inbounds float, float* %5, i64 %142
  %147 = bitcast float* %146 to <4 x float>*
  store <4 x float> %145, <4 x float>* %147, align 4, !tbaa !806
  %148 = add nuw nsw i64 %10, 92
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = bitcast float* %149 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %150, align 4, !tbaa !803
  %151 = fmul <4 x float> %broadcast.splat8, %wide.load.23
  %152 = getelementptr inbounds float, float* %5, i64 %148
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %151, <4 x float>* %153, align 4, !tbaa !806
  %154 = add nuw nsw i64 %10, 96
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = bitcast float* %155 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !803
  %157 = fmul <4 x float> %broadcast.splat8, %wide.load.24
  %158 = getelementptr inbounds float, float* %5, i64 %154
  %159 = bitcast float* %158 to <4 x float>*
  store <4 x float> %157, <4 x float>* %159, align 4, !tbaa !806
  %160 = add nuw nsw i64 %10, 100
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = bitcast float* %161 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %162, align 4, !tbaa !803
  %163 = fmul <4 x float> %broadcast.splat8, %wide.load.25
  %164 = getelementptr inbounds float, float* %5, i64 %160
  %165 = bitcast float* %164 to <4 x float>*
  store <4 x float> %163, <4 x float>* %165, align 4, !tbaa !806
  %166 = add nuw nsw i64 %10, 104
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = bitcast float* %167 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %168, align 4, !tbaa !803
  %169 = fmul <4 x float> %broadcast.splat8, %wide.load.26
  %170 = getelementptr inbounds float, float* %5, i64 %166
  %171 = bitcast float* %170 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 4, !tbaa !806
  %172 = add nuw nsw i64 %10, 108
  %173 = getelementptr inbounds float, float* %4, i64 %172
  %174 = bitcast float* %173 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %174, align 4, !tbaa !803
  %175 = fmul <4 x float> %broadcast.splat8, %wide.load.27
  %176 = getelementptr inbounds float, float* %5, i64 %172
  %177 = bitcast float* %176 to <4 x float>*
  store <4 x float> %175, <4 x float>* %177, align 4, !tbaa !806
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 112
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_1_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %4 = mul nuw nsw i64 %indvars.iv, 49
  %5 = getelementptr inbounds float, float* %2, i64 %4
  %6 = getelementptr inbounds float, float* %3, i64 %4
  %7 = bitcast float* %5 to <4 x float>*
  %8 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !809
  %9 = fcmp ogt <4 x float> %8, zeroinitializer
  %10 = select <4 x i1> %9, <4 x float> %8, <4 x float> zeroinitializer
  %11 = bitcast float* %6 to <4 x float>*
  store <4 x float> %10, <4 x float>* %11, align 4, !tbaa !812
  %12 = add nuw nsw i64 %4, 4
  %13 = getelementptr inbounds float, float* %2, i64 %12
  %14 = getelementptr inbounds float, float* %3, i64 %12
  %15 = bitcast float* %13 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !809
  %17 = fcmp ogt <4 x float> %16, zeroinitializer
  %18 = select <4 x i1> %17, <4 x float> %16, <4 x float> zeroinitializer
  %19 = bitcast float* %14 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 4, !tbaa !812
  %20 = add nuw nsw i64 %4, 8
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = getelementptr inbounds float, float* %3, i64 %20
  %23 = bitcast float* %21 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !809
  %25 = fcmp ogt <4 x float> %24, zeroinitializer
  %26 = select <4 x i1> %25, <4 x float> %24, <4 x float> zeroinitializer
  %27 = bitcast float* %22 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4, !tbaa !812
  %28 = add nuw nsw i64 %4, 12
  %29 = getelementptr inbounds float, float* %2, i64 %28
  %30 = getelementptr inbounds float, float* %3, i64 %28
  %31 = bitcast float* %29 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !809
  %33 = fcmp ogt <4 x float> %32, zeroinitializer
  %34 = select <4 x i1> %33, <4 x float> %32, <4 x float> zeroinitializer
  %35 = bitcast float* %30 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 4, !tbaa !812
  %36 = add nuw nsw i64 %4, 16
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = getelementptr inbounds float, float* %3, i64 %36
  %39 = bitcast float* %37 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4, !tbaa !809
  %41 = fcmp ogt <4 x float> %40, zeroinitializer
  %42 = select <4 x i1> %41, <4 x float> %40, <4 x float> zeroinitializer
  %43 = bitcast float* %38 to <4 x float>*
  store <4 x float> %42, <4 x float>* %43, align 4, !tbaa !812
  %44 = add nuw nsw i64 %4, 20
  %45 = getelementptr inbounds float, float* %2, i64 %44
  %46 = getelementptr inbounds float, float* %3, i64 %44
  %47 = bitcast float* %45 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !809
  %49 = fcmp ogt <4 x float> %48, zeroinitializer
  %50 = select <4 x i1> %49, <4 x float> %48, <4 x float> zeroinitializer
  %51 = bitcast float* %46 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !812
  %52 = add nuw nsw i64 %4, 24
  %53 = getelementptr inbounds float, float* %2, i64 %52
  %54 = getelementptr inbounds float, float* %3, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !809
  %57 = fcmp ogt <4 x float> %56, zeroinitializer
  %58 = select <4 x i1> %57, <4 x float> %56, <4 x float> zeroinitializer
  %59 = bitcast float* %54 to <4 x float>*
  store <4 x float> %58, <4 x float>* %59, align 4, !tbaa !812
  %60 = add nuw nsw i64 %4, 28
  %61 = getelementptr inbounds float, float* %2, i64 %60
  %62 = getelementptr inbounds float, float* %3, i64 %60
  %63 = bitcast float* %61 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !809
  %65 = fcmp ogt <4 x float> %64, zeroinitializer
  %66 = select <4 x i1> %65, <4 x float> %64, <4 x float> zeroinitializer
  %67 = bitcast float* %62 to <4 x float>*
  store <4 x float> %66, <4 x float>* %67, align 4, !tbaa !812
  %68 = add nuw nsw i64 %4, 32
  %69 = getelementptr inbounds float, float* %2, i64 %68
  %70 = getelementptr inbounds float, float* %3, i64 %68
  %71 = bitcast float* %69 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !809
  %73 = fcmp ogt <4 x float> %72, zeroinitializer
  %74 = select <4 x i1> %73, <4 x float> %72, <4 x float> zeroinitializer
  %75 = bitcast float* %70 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !812
  %76 = add nuw nsw i64 %4, 36
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = getelementptr inbounds float, float* %3, i64 %76
  %79 = bitcast float* %77 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4, !tbaa !809
  %81 = fcmp ogt <4 x float> %80, zeroinitializer
  %82 = select <4 x i1> %81, <4 x float> %80, <4 x float> zeroinitializer
  %83 = bitcast float* %78 to <4 x float>*
  store <4 x float> %82, <4 x float>* %83, align 4, !tbaa !812
  %84 = add nuw nsw i64 %4, 40
  %85 = getelementptr inbounds float, float* %2, i64 %84
  %86 = getelementptr inbounds float, float* %3, i64 %84
  %87 = bitcast float* %85 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !809
  %89 = fcmp ogt <4 x float> %88, zeroinitializer
  %90 = select <4 x i1> %89, <4 x float> %88, <4 x float> zeroinitializer
  %91 = bitcast float* %86 to <4 x float>*
  store <4 x float> %90, <4 x float>* %91, align 4, !tbaa !812
  %92 = add nuw nsw i64 %4, 44
  %93 = getelementptr inbounds float, float* %2, i64 %92
  %94 = getelementptr inbounds float, float* %3, i64 %92
  %95 = bitcast float* %93 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 4, !tbaa !809
  %97 = fcmp ogt <4 x float> %96, zeroinitializer
  %98 = select <4 x i1> %97, <4 x float> %96, <4 x float> zeroinitializer
  %99 = bitcast float* %94 to <4 x float>*
  store <4 x float> %98, <4 x float>* %99, align 4, !tbaa !812
  %100 = add nuw nsw i64 %4, 48
  %101 = getelementptr inbounds float, float* %2, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !809
  %103 = fcmp ogt float %102, 0.000000e+00
  %104 = select i1 %103, float %102, float 0.000000e+00
  %105 = getelementptr inbounds float, float* %3, i64 %100
  store float %104, float* %105, align 4, !tbaa !812
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_5_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv1, 784
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv, 28
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = getelementptr inbounds float, float* %3, i64 %6
  %9 = bitcast float* %7 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !815
  %11 = fcmp ogt <4 x float> %10, zeroinitializer
  %12 = select <4 x i1> %11, <4 x float> %10, <4 x float> zeroinitializer
  %13 = bitcast float* %8 to <4 x float>*
  store <4 x float> %12, <4 x float>* %13, align 4, !tbaa !818
  %14 = add nuw nsw i64 %6, 4
  %15 = getelementptr inbounds float, float* %2, i64 %14
  %16 = getelementptr inbounds float, float* %3, i64 %14
  %17 = bitcast float* %15 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !815
  %19 = fcmp ogt <4 x float> %18, zeroinitializer
  %20 = select <4 x i1> %19, <4 x float> %18, <4 x float> zeroinitializer
  %21 = bitcast float* %16 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 4, !tbaa !818
  %22 = add nuw nsw i64 %6, 8
  %23 = getelementptr inbounds float, float* %2, i64 %22
  %24 = getelementptr inbounds float, float* %3, i64 %22
  %25 = bitcast float* %23 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !815
  %27 = fcmp ogt <4 x float> %26, zeroinitializer
  %28 = select <4 x i1> %27, <4 x float> %26, <4 x float> zeroinitializer
  %29 = bitcast float* %24 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !818
  %30 = add nuw nsw i64 %6, 12
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = getelementptr inbounds float, float* %3, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !815
  %35 = fcmp ogt <4 x float> %34, zeroinitializer
  %36 = select <4 x i1> %35, <4 x float> %34, <4 x float> zeroinitializer
  %37 = bitcast float* %32 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !818
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %2, i64 %38
  %40 = getelementptr inbounds float, float* %3, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !815
  %43 = fcmp ogt <4 x float> %42, zeroinitializer
  %44 = select <4 x i1> %43, <4 x float> %42, <4 x float> zeroinitializer
  %45 = bitcast float* %40 to <4 x float>*
  store <4 x float> %44, <4 x float>* %45, align 4, !tbaa !818
  %46 = add nuw nsw i64 %6, 20
  %47 = getelementptr inbounds float, float* %2, i64 %46
  %48 = getelementptr inbounds float, float* %3, i64 %46
  %49 = bitcast float* %47 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !815
  %51 = fcmp ogt <4 x float> %50, zeroinitializer
  %52 = select <4 x i1> %51, <4 x float> %50, <4 x float> zeroinitializer
  %53 = bitcast float* %48 to <4 x float>*
  store <4 x float> %52, <4 x float>* %53, align 4, !tbaa !818
  %54 = add nuw nsw i64 %6, 24
  %55 = getelementptr inbounds float, float* %2, i64 %54
  %56 = getelementptr inbounds float, float* %3, i64 %54
  %57 = bitcast float* %55 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !815
  %59 = fcmp ogt <4 x float> %58, zeroinitializer
  %60 = select <4 x i1> %59, <4 x float> %58, <4 x float> zeroinitializer
  %61 = bitcast float* %56 to <4 x float>*
  store <4 x float> %60, <4 x float>* %61, align 4, !tbaa !818
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 128
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_2_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_2_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [32768 x <32 x float>], align 16
  %5 = alloca [100352 x float], align 16
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_begin1.preheader ]
  %6 = trunc i64 %indvar to i32
  %7 = mul nuw nsw i64 %indvar, 28
  %8 = trunc i64 %indvar to i32
  %9 = mul i32 %8, 7
  %10 = udiv i32 %6, 7
  %11 = mul i32 %10, 147
  %12 = add i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %scevgep = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %7
  %scevgep51 = bitcast float* %scevgep to i8*
  %scevgep52 = getelementptr i8, i8* %0, i64 %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep51, i8* align 4 %scevgep52, i64 28, i1 false)
  %15 = add nuw nsw i64 %7, 7
  %scevgep.1 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %15
  %scevgep51.1 = bitcast float* %scevgep.1 to i8*
  %16 = add nuw nsw i64 %14, 196
  %scevgep52.1 = getelementptr i8, i8* %0, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep51.1, i8* align 4 %scevgep52.1, i64 28, i1 false)
  %17 = add nuw nsw i64 %7, 14
  %scevgep.2 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %17
  %scevgep51.2 = bitcast float* %scevgep.2 to i8*
  %18 = add nuw nsw i64 %14, 392
  %scevgep52.2 = getelementptr i8, i8* %0, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep51.2, i8* align 4 %scevgep52.2, i64 28, i1 false)
  %19 = add nuw nsw i64 %7, 21
  %scevgep.3 = getelementptr [100352 x float], [100352 x float]* %5, i64 0, i64 %19
  %scevgep51.3 = bitcast float* %scevgep.3 to i8*
  %20 = add nuw nsw i64 %14, 588
  %scevgep52.3 = getelementptr i8, i8* %0, i64 %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep51.3, i8* align 4 %scevgep52.3, i64 28, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond54 = icmp eq i64 %indvar.next, 3584
  br i1 %exitcond54, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin7.preheader:                             ; preds = %for_begin1.preheader
  %21 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv43 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next44, %for_end12 ]
  %22 = shl nsw i64 %indvars.iv43, 16
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %23 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %24 = bitcast float* %23 to <32 x float>*
  %25 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %26 = bitcast float* %25 to <32 x float>*
  %27 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %28 = bitcast float* %27 to <32 x float>*
  %29 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %30 = bitcast float* %29 to <32 x float>*
  %31 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %32 = bitcast float* %31 to <32 x float>*
  %33 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %34 = bitcast float* %33 to <32 x float>*
  %35 = bitcast i8* %2 to float*
  %36 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body17

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv40 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next41, %for_end15 ]
  %37 = shl i64 %indvars.iv40, 7
  %38 = add nuw nsw i64 %37, %22
  %39 = shl i64 %indvars.iv40, 2
  %40 = add nuw nsw i64 %39, %22
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 16
  br i1 %exitcond45, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv37 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next38, %for_body14 ]
  %41 = shl i64 %indvars.iv37, 5
  %42 = add nuw nsw i64 %38, %41
  %43 = add nuw nsw i64 %40, %indvars.iv37
  %44 = add nuw nsw i64 %43, 2048
  %45 = add nuw nsw i64 %43, 4096
  %46 = add nuw nsw i64 %43, 6144
  %47 = add nuw nsw i64 %43, 8192
  %48 = add nuw nsw i64 %43, 10240
  %49 = add nuw nsw i64 %43, 12288
  %50 = add nuw nsw i64 %43, 14336
  %51 = add nuw nsw i64 %43, 16384
  %52 = add nuw nsw i64 %43, 18432
  %53 = add nuw nsw i64 %43, 20480
  %54 = add nuw nsw i64 %43, 22528
  %55 = add nuw nsw i64 %43, 24576
  %56 = add nuw nsw i64 %43, 26624
  %57 = add nuw nsw i64 %43, 28672
  %58 = add nuw nsw i64 %43, 30720
  %59 = add nuw nsw i64 %43, 32768
  %60 = add nuw nsw i64 %43, 34816
  %61 = add nuw nsw i64 %43, 36864
  %62 = add nuw nsw i64 %43, 38912
  %63 = add nuw nsw i64 %43, 40960
  %64 = add nuw nsw i64 %43, 43008
  %65 = add nuw nsw i64 %43, 45056
  %66 = add nuw nsw i64 %43, 47104
  %67 = add nuw nsw i64 %43, 49152
  %68 = add nuw nsw i64 %43, 51200
  %69 = add nuw nsw i64 %43, 53248
  %70 = add nuw nsw i64 %43, 55296
  %71 = add nuw nsw i64 %43, 57344
  %72 = add nuw nsw i64 %43, 59392
  %73 = add nuw nsw i64 %43, 61440
  %74 = add nuw nsw i64 %43, 63488
  %75 = getelementptr inbounds float, float* %21, i64 %43
  %76 = load float, float* %75, align 4, !tbaa !821
  %77 = insertelement <32 x float> undef, float %76, i32 0
  %78 = getelementptr inbounds float, float* %21, i64 %44
  %79 = load float, float* %78, align 4, !tbaa !821
  %80 = insertelement <32 x float> %77, float %79, i32 1
  %81 = getelementptr inbounds float, float* %21, i64 %45
  %82 = load float, float* %81, align 4, !tbaa !821
  %83 = insertelement <32 x float> %80, float %82, i32 2
  %84 = getelementptr inbounds float, float* %21, i64 %46
  %85 = load float, float* %84, align 4, !tbaa !821
  %86 = insertelement <32 x float> %83, float %85, i32 3
  %87 = getelementptr inbounds float, float* %21, i64 %47
  %88 = load float, float* %87, align 4, !tbaa !821
  %89 = insertelement <32 x float> %86, float %88, i32 4
  %90 = getelementptr inbounds float, float* %21, i64 %48
  %91 = load float, float* %90, align 4, !tbaa !821
  %92 = insertelement <32 x float> %89, float %91, i32 5
  %93 = getelementptr inbounds float, float* %21, i64 %49
  %94 = load float, float* %93, align 4, !tbaa !821
  %95 = insertelement <32 x float> %92, float %94, i32 6
  %96 = getelementptr inbounds float, float* %21, i64 %50
  %97 = load float, float* %96, align 4, !tbaa !821
  %98 = insertelement <32 x float> %95, float %97, i32 7
  %99 = getelementptr inbounds float, float* %21, i64 %51
  %100 = load float, float* %99, align 4, !tbaa !821
  %101 = insertelement <32 x float> %98, float %100, i32 8
  %102 = getelementptr inbounds float, float* %21, i64 %52
  %103 = load float, float* %102, align 4, !tbaa !821
  %104 = insertelement <32 x float> %101, float %103, i32 9
  %105 = getelementptr inbounds float, float* %21, i64 %53
  %106 = load float, float* %105, align 4, !tbaa !821
  %107 = insertelement <32 x float> %104, float %106, i32 10
  %108 = getelementptr inbounds float, float* %21, i64 %54
  %109 = load float, float* %108, align 4, !tbaa !821
  %110 = insertelement <32 x float> %107, float %109, i32 11
  %111 = getelementptr inbounds float, float* %21, i64 %55
  %112 = load float, float* %111, align 4, !tbaa !821
  %113 = insertelement <32 x float> %110, float %112, i32 12
  %114 = getelementptr inbounds float, float* %21, i64 %56
  %115 = load float, float* %114, align 4, !tbaa !821
  %116 = insertelement <32 x float> %113, float %115, i32 13
  %117 = getelementptr inbounds float, float* %21, i64 %57
  %118 = load float, float* %117, align 4, !tbaa !821
  %119 = insertelement <32 x float> %116, float %118, i32 14
  %120 = getelementptr inbounds float, float* %21, i64 %58
  %121 = load float, float* %120, align 4, !tbaa !821
  %122 = insertelement <32 x float> %119, float %121, i32 15
  %123 = getelementptr inbounds float, float* %21, i64 %59
  %124 = load float, float* %123, align 4, !tbaa !821
  %125 = insertelement <32 x float> %122, float %124, i32 16
  %126 = getelementptr inbounds float, float* %21, i64 %60
  %127 = load float, float* %126, align 4, !tbaa !821
  %128 = insertelement <32 x float> %125, float %127, i32 17
  %129 = getelementptr inbounds float, float* %21, i64 %61
  %130 = load float, float* %129, align 4, !tbaa !821
  %131 = insertelement <32 x float> %128, float %130, i32 18
  %132 = getelementptr inbounds float, float* %21, i64 %62
  %133 = load float, float* %132, align 4, !tbaa !821
  %134 = insertelement <32 x float> %131, float %133, i32 19
  %135 = getelementptr inbounds float, float* %21, i64 %63
  %136 = load float, float* %135, align 4, !tbaa !821
  %137 = insertelement <32 x float> %134, float %136, i32 20
  %138 = getelementptr inbounds float, float* %21, i64 %64
  %139 = load float, float* %138, align 4, !tbaa !821
  %140 = insertelement <32 x float> %137, float %139, i32 21
  %141 = getelementptr inbounds float, float* %21, i64 %65
  %142 = load float, float* %141, align 4, !tbaa !821
  %143 = insertelement <32 x float> %140, float %142, i32 22
  %144 = getelementptr inbounds float, float* %21, i64 %66
  %145 = load float, float* %144, align 4, !tbaa !821
  %146 = insertelement <32 x float> %143, float %145, i32 23
  %147 = getelementptr inbounds float, float* %21, i64 %67
  %148 = load float, float* %147, align 4, !tbaa !821
  %149 = insertelement <32 x float> %146, float %148, i32 24
  %150 = getelementptr inbounds float, float* %21, i64 %68
  %151 = load float, float* %150, align 4, !tbaa !821
  %152 = insertelement <32 x float> %149, float %151, i32 25
  %153 = getelementptr inbounds float, float* %21, i64 %69
  %154 = load float, float* %153, align 4, !tbaa !821
  %155 = insertelement <32 x float> %152, float %154, i32 26
  %156 = getelementptr inbounds float, float* %21, i64 %70
  %157 = load float, float* %156, align 4, !tbaa !821
  %158 = insertelement <32 x float> %155, float %157, i32 27
  %159 = getelementptr inbounds float, float* %21, i64 %71
  %160 = load float, float* %159, align 4, !tbaa !821
  %161 = insertelement <32 x float> %158, float %160, i32 28
  %162 = getelementptr inbounds float, float* %21, i64 %72
  %163 = load float, float* %162, align 4, !tbaa !821
  %164 = insertelement <32 x float> %161, float %163, i32 29
  %165 = getelementptr inbounds float, float* %21, i64 %73
  %166 = load float, float* %165, align 4, !tbaa !821
  %167 = insertelement <32 x float> %164, float %166, i32 30
  %168 = getelementptr inbounds float, float* %21, i64 %74
  %169 = load float, float* %168, align 4, !tbaa !821
  %170 = insertelement <32 x float> %167, float %169, i32 31
  %171 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %42
  %172 = bitcast float* %171 to <32 x float>*
  store <32 x float> %170, <32 x float>* %172, align 16, !tbaa !824
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond39 = icmp eq i64 %indvars.iv.next38, 4
  br i1 %exitcond39, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 512
  br i1 %exitcond42, label %for_end12, label %for_begin13.preheader, !prof !5

for_body17:                                       ; preds = %for_end27, %for_begin16.preheader
  %173 = phi i32 [ 0, %for_begin16.preheader ], [ %470, %for_end27 ]
  %174 = urem i32 %173, 7
  %175 = mul nuw nsw i32 %174, 28
  %176 = udiv i32 %173, 7
  %177 = shl i32 %176, 16
  %178 = zext i32 %175 to i64
  %179 = sext i32 %177 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %36, i8 0, i64 896, i1 false)
  br label %for_begin22.preheader

for_end18:                                        ; preds = %for_end27
  ret void

for_begin25.preheader:                            ; preds = %for_begin22.preheader
  store <32 x float> %333, <32 x float>* %.sub, align 128, !tbaa !827
  store <32 x float> %339, <32 x float>* %24, align 128, !tbaa !827
  store <32 x float> %345, <32 x float>* %26, align 128, !tbaa !827
  store <32 x float> %351, <32 x float>* %28, align 128, !tbaa !827
  store <32 x float> %357, <32 x float>* %30, align 128, !tbaa !827
  store <32 x float> %363, <32 x float>* %32, align 128, !tbaa !827
  store <32 x float> %369, <32 x float>* %34, align 128, !tbaa !827
  %180 = mul nuw nsw i32 %174, 7
  %181 = mul nsw i32 %176, 1568
  %182 = add nuw nsw i32 %181, %180
  %183 = zext i32 %182 to i64
  br label %for_body26

for_begin22.preheader:                            ; preds = %for_begin22.preheader, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_begin22.preheader ]
  %.lcssa1326 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %369, %for_begin22.preheader ]
  %.lcssa1124 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %363, %for_begin22.preheader ]
  %.lcssa922 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %357, %for_begin22.preheader ]
  %.lcssa720 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %351, %for_begin22.preheader ]
  %.lcssa518 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %345, %for_begin22.preheader ]
  %.lcssa317 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %339, %for_begin22.preheader ]
  %.lcssa15 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %333, %for_begin22.preheader ]
  %184 = mul nuw nsw i64 %indvars.iv, 196
  %185 = add nuw nsw i64 %184, %178
  %186 = shl i64 %indvars.iv, 7
  %187 = add nuw nsw i64 %186, %179
  %188 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %185
  %189 = load float, float* %188, align 16, !tbaa !836
  %190 = insertelement <32 x float> undef, float %189, i32 0
  %191 = shufflevector <32 x float> %190, <32 x float> undef, <32 x i32> zeroinitializer
  %192 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %187
  %193 = bitcast float* %192 to <32 x float>*
  %194 = load <32 x float>, <32 x float>* %193, align 16, !tbaa !824
  %195 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %191, <32 x float> %194, <32 x float> %.lcssa15)
  %196 = or i64 %185, 1
  %197 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !836
  %199 = insertelement <32 x float> undef, float %198, i32 0
  %200 = shufflevector <32 x float> %199, <32 x float> undef, <32 x i32> zeroinitializer
  %201 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %200, <32 x float> %194, <32 x float> %.lcssa317)
  %202 = or i64 %185, 2
  %203 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %202
  %204 = load float, float* %203, align 8, !tbaa !836
  %205 = insertelement <32 x float> undef, float %204, i32 0
  %206 = shufflevector <32 x float> %205, <32 x float> undef, <32 x i32> zeroinitializer
  %207 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %206, <32 x float> %194, <32 x float> %.lcssa518)
  %208 = or i64 %185, 3
  %209 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !836
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %194, <32 x float> %.lcssa720)
  %214 = add nuw nsw i64 %185, 4
  %215 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %214
  %216 = load float, float* %215, align 16, !tbaa !836
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %194, <32 x float> %.lcssa922)
  %220 = add nuw nsw i64 %185, 5
  %221 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !836
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %194, <32 x float> %.lcssa1124)
  %226 = add nuw nsw i64 %185, 6
  %227 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %226
  %228 = load float, float* %227, align 8, !tbaa !836
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %194, <32 x float> %.lcssa1326)
  %232 = add nuw nsw i64 %185, 7
  %233 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !836
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = or i64 %187, 32
  %238 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %237
  %239 = bitcast float* %238 to <32 x float>*
  %240 = load <32 x float>, <32 x float>* %239, align 16, !tbaa !824
  %241 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %240, <32 x float> %195)
  %242 = add nuw nsw i64 %185, 8
  %243 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %242
  %244 = load float, float* %243, align 16, !tbaa !836
  %245 = insertelement <32 x float> undef, float %244, i32 0
  %246 = shufflevector <32 x float> %245, <32 x float> undef, <32 x i32> zeroinitializer
  %247 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %246, <32 x float> %240, <32 x float> %201)
  %248 = add nuw nsw i64 %185, 9
  %249 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %248
  %250 = load float, float* %249, align 4, !tbaa !836
  %251 = insertelement <32 x float> undef, float %250, i32 0
  %252 = shufflevector <32 x float> %251, <32 x float> undef, <32 x i32> zeroinitializer
  %253 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %252, <32 x float> %240, <32 x float> %207)
  %254 = add nuw nsw i64 %185, 10
  %255 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %254
  %256 = load float, float* %255, align 8, !tbaa !836
  %257 = insertelement <32 x float> undef, float %256, i32 0
  %258 = shufflevector <32 x float> %257, <32 x float> undef, <32 x i32> zeroinitializer
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %258, <32 x float> %240, <32 x float> %213)
  %260 = add nuw nsw i64 %185, 11
  %261 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !836
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %240, <32 x float> %219)
  %266 = add nuw nsw i64 %185, 12
  %267 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %266
  %268 = load float, float* %267, align 16, !tbaa !836
  %269 = insertelement <32 x float> undef, float %268, i32 0
  %270 = shufflevector <32 x float> %269, <32 x float> undef, <32 x i32> zeroinitializer
  %271 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %270, <32 x float> %240, <32 x float> %225)
  %272 = add nuw nsw i64 %185, 13
  %273 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !836
  %275 = insertelement <32 x float> undef, float %274, i32 0
  %276 = shufflevector <32 x float> %275, <32 x float> undef, <32 x i32> zeroinitializer
  %277 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %240, <32 x float> %231)
  %278 = add nuw nsw i64 %185, 14
  %279 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %278
  %280 = load float, float* %279, align 8, !tbaa !836
  %281 = insertelement <32 x float> undef, float %280, i32 0
  %282 = shufflevector <32 x float> %281, <32 x float> undef, <32 x i32> zeroinitializer
  %283 = or i64 %187, 64
  %284 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %283
  %285 = bitcast float* %284 to <32 x float>*
  %286 = load <32 x float>, <32 x float>* %285, align 16, !tbaa !824
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %282, <32 x float> %286, <32 x float> %241)
  %288 = add nuw nsw i64 %185, 15
  %289 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %288
  %290 = load float, float* %289, align 4, !tbaa !836
  %291 = insertelement <32 x float> undef, float %290, i32 0
  %292 = shufflevector <32 x float> %291, <32 x float> undef, <32 x i32> zeroinitializer
  %293 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %292, <32 x float> %286, <32 x float> %247)
  %294 = add nuw nsw i64 %185, 16
  %295 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %294
  %296 = load float, float* %295, align 16, !tbaa !836
  %297 = insertelement <32 x float> undef, float %296, i32 0
  %298 = shufflevector <32 x float> %297, <32 x float> undef, <32 x i32> zeroinitializer
  %299 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %298, <32 x float> %286, <32 x float> %253)
  %300 = add nuw nsw i64 %185, 17
  %301 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %300
  %302 = load float, float* %301, align 4, !tbaa !836
  %303 = insertelement <32 x float> undef, float %302, i32 0
  %304 = shufflevector <32 x float> %303, <32 x float> undef, <32 x i32> zeroinitializer
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %304, <32 x float> %286, <32 x float> %259)
  %306 = add nuw nsw i64 %185, 18
  %307 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %306
  %308 = load float, float* %307, align 8, !tbaa !836
  %309 = insertelement <32 x float> undef, float %308, i32 0
  %310 = shufflevector <32 x float> %309, <32 x float> undef, <32 x i32> zeroinitializer
  %311 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %310, <32 x float> %286, <32 x float> %265)
  %312 = add nuw nsw i64 %185, 19
  %313 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %312
  %314 = load float, float* %313, align 4, !tbaa !836
  %315 = insertelement <32 x float> undef, float %314, i32 0
  %316 = shufflevector <32 x float> %315, <32 x float> undef, <32 x i32> zeroinitializer
  %317 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %316, <32 x float> %286, <32 x float> %271)
  %318 = add nuw nsw i64 %185, 20
  %319 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %318
  %320 = load float, float* %319, align 16, !tbaa !836
  %321 = insertelement <32 x float> undef, float %320, i32 0
  %322 = shufflevector <32 x float> %321, <32 x float> undef, <32 x i32> zeroinitializer
  %323 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %322, <32 x float> %286, <32 x float> %277)
  %324 = add nuw nsw i64 %185, 21
  %325 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %324
  %326 = load float, float* %325, align 4, !tbaa !836
  %327 = insertelement <32 x float> undef, float %326, i32 0
  %328 = shufflevector <32 x float> %327, <32 x float> undef, <32 x i32> zeroinitializer
  %329 = or i64 %187, 96
  %330 = getelementptr inbounds [32768 x <32 x float>], [32768 x <32 x float>]* %4, i64 0, i64 0, i64 %329
  %331 = bitcast float* %330 to <32 x float>*
  %332 = load <32 x float>, <32 x float>* %331, align 16, !tbaa !824
  %333 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %328, <32 x float> %332, <32 x float> %287)
  %334 = add nuw nsw i64 %185, 22
  %335 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %334
  %336 = load float, float* %335, align 8, !tbaa !836
  %337 = insertelement <32 x float> undef, float %336, i32 0
  %338 = shufflevector <32 x float> %337, <32 x float> undef, <32 x i32> zeroinitializer
  %339 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %338, <32 x float> %332, <32 x float> %293)
  %340 = add nuw nsw i64 %185, 23
  %341 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %340
  %342 = load float, float* %341, align 4, !tbaa !836
  %343 = insertelement <32 x float> undef, float %342, i32 0
  %344 = shufflevector <32 x float> %343, <32 x float> undef, <32 x i32> zeroinitializer
  %345 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %344, <32 x float> %332, <32 x float> %299)
  %346 = add nuw nsw i64 %185, 24
  %347 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %346
  %348 = load float, float* %347, align 16, !tbaa !836
  %349 = insertelement <32 x float> undef, float %348, i32 0
  %350 = shufflevector <32 x float> %349, <32 x float> undef, <32 x i32> zeroinitializer
  %351 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %350, <32 x float> %332, <32 x float> %305)
  %352 = add nuw nsw i64 %185, 25
  %353 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %352
  %354 = load float, float* %353, align 4, !tbaa !836
  %355 = insertelement <32 x float> undef, float %354, i32 0
  %356 = shufflevector <32 x float> %355, <32 x float> undef, <32 x i32> zeroinitializer
  %357 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %356, <32 x float> %332, <32 x float> %311)
  %358 = add nuw nsw i64 %185, 26
  %359 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %358
  %360 = load float, float* %359, align 8, !tbaa !836
  %361 = insertelement <32 x float> undef, float %360, i32 0
  %362 = shufflevector <32 x float> %361, <32 x float> undef, <32 x i32> zeroinitializer
  %363 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %362, <32 x float> %332, <32 x float> %317)
  %364 = add nuw nsw i64 %185, 27
  %365 = getelementptr inbounds [100352 x float], [100352 x float]* %5, i64 0, i64 %364
  %366 = load float, float* %365, align 4, !tbaa !836
  %367 = insertelement <32 x float> undef, float %366, i32 0
  %368 = shufflevector <32 x float> %367, <32 x float> undef, <32 x i32> zeroinitializer
  %369 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %368, <32 x float> %332, <32 x float> %323)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_begin25.preheader, label %for_begin22.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv33 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next34, %for_body26 ]
  %370 = add nuw nsw i64 %indvars.iv33, %183
  %371 = add nuw nsw i64 %370, 49
  %372 = add nuw nsw i64 %370, 98
  %373 = add nuw nsw i64 %370, 147
  %374 = add nuw nsw i64 %370, 196
  %375 = add nuw nsw i64 %370, 245
  %376 = add nuw nsw i64 %370, 294
  %377 = add nuw nsw i64 %370, 343
  %378 = add nuw nsw i64 %370, 392
  %379 = add nuw nsw i64 %370, 441
  %380 = add nuw nsw i64 %370, 490
  %381 = add nuw nsw i64 %370, 539
  %382 = add nuw nsw i64 %370, 588
  %383 = add nuw nsw i64 %370, 637
  %384 = add nuw nsw i64 %370, 686
  %385 = add nuw nsw i64 %370, 735
  %386 = add nuw nsw i64 %370, 784
  %387 = add nuw nsw i64 %370, 833
  %388 = add nuw nsw i64 %370, 882
  %389 = add nuw nsw i64 %370, 931
  %390 = add nuw nsw i64 %370, 980
  %391 = add nuw nsw i64 %370, 1029
  %392 = add nuw nsw i64 %370, 1078
  %393 = add nuw nsw i64 %370, 1127
  %394 = add nuw nsw i64 %370, 1176
  %395 = add nuw nsw i64 %370, 1225
  %396 = add nuw nsw i64 %370, 1274
  %397 = add nuw nsw i64 %370, 1323
  %398 = add nuw nsw i64 %370, 1372
  %399 = add nuw nsw i64 %370, 1421
  %400 = add nuw nsw i64 %370, 1470
  %401 = add nuw nsw i64 %370, 1519
  %402 = shl nsw i64 %indvars.iv33, 5
  %403 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 %402
  %404 = bitcast float* %403 to <32 x float>*
  %405 = load <32 x float>, <32 x float>* %404, align 128, !tbaa !839
  %406 = getelementptr inbounds float, float* %35, i64 %370
  %407 = extractelement <32 x float> %405, i64 0
  store float %407, float* %406, align 4, !tbaa !840
  %408 = getelementptr inbounds float, float* %35, i64 %371
  %409 = extractelement <32 x float> %405, i64 1
  store float %409, float* %408, align 4, !tbaa !840
  %410 = getelementptr inbounds float, float* %35, i64 %372
  %411 = extractelement <32 x float> %405, i64 2
  store float %411, float* %410, align 4, !tbaa !840
  %412 = getelementptr inbounds float, float* %35, i64 %373
  %413 = extractelement <32 x float> %405, i64 3
  store float %413, float* %412, align 4, !tbaa !840
  %414 = getelementptr inbounds float, float* %35, i64 %374
  %415 = extractelement <32 x float> %405, i64 4
  store float %415, float* %414, align 4, !tbaa !840
  %416 = getelementptr inbounds float, float* %35, i64 %375
  %417 = extractelement <32 x float> %405, i64 5
  store float %417, float* %416, align 4, !tbaa !840
  %418 = getelementptr inbounds float, float* %35, i64 %376
  %419 = extractelement <32 x float> %405, i64 6
  store float %419, float* %418, align 4, !tbaa !840
  %420 = getelementptr inbounds float, float* %35, i64 %377
  %421 = extractelement <32 x float> %405, i64 7
  store float %421, float* %420, align 4, !tbaa !840
  %422 = getelementptr inbounds float, float* %35, i64 %378
  %423 = extractelement <32 x float> %405, i64 8
  store float %423, float* %422, align 4, !tbaa !840
  %424 = getelementptr inbounds float, float* %35, i64 %379
  %425 = extractelement <32 x float> %405, i64 9
  store float %425, float* %424, align 4, !tbaa !840
  %426 = getelementptr inbounds float, float* %35, i64 %380
  %427 = extractelement <32 x float> %405, i64 10
  store float %427, float* %426, align 4, !tbaa !840
  %428 = getelementptr inbounds float, float* %35, i64 %381
  %429 = extractelement <32 x float> %405, i64 11
  store float %429, float* %428, align 4, !tbaa !840
  %430 = getelementptr inbounds float, float* %35, i64 %382
  %431 = extractelement <32 x float> %405, i64 12
  store float %431, float* %430, align 4, !tbaa !840
  %432 = getelementptr inbounds float, float* %35, i64 %383
  %433 = extractelement <32 x float> %405, i64 13
  store float %433, float* %432, align 4, !tbaa !840
  %434 = getelementptr inbounds float, float* %35, i64 %384
  %435 = extractelement <32 x float> %405, i64 14
  store float %435, float* %434, align 4, !tbaa !840
  %436 = getelementptr inbounds float, float* %35, i64 %385
  %437 = extractelement <32 x float> %405, i64 15
  store float %437, float* %436, align 4, !tbaa !840
  %438 = getelementptr inbounds float, float* %35, i64 %386
  %439 = extractelement <32 x float> %405, i64 16
  store float %439, float* %438, align 4, !tbaa !840
  %440 = getelementptr inbounds float, float* %35, i64 %387
  %441 = extractelement <32 x float> %405, i64 17
  store float %441, float* %440, align 4, !tbaa !840
  %442 = getelementptr inbounds float, float* %35, i64 %388
  %443 = extractelement <32 x float> %405, i64 18
  store float %443, float* %442, align 4, !tbaa !840
  %444 = getelementptr inbounds float, float* %35, i64 %389
  %445 = extractelement <32 x float> %405, i64 19
  store float %445, float* %444, align 4, !tbaa !840
  %446 = getelementptr inbounds float, float* %35, i64 %390
  %447 = extractelement <32 x float> %405, i64 20
  store float %447, float* %446, align 4, !tbaa !840
  %448 = getelementptr inbounds float, float* %35, i64 %391
  %449 = extractelement <32 x float> %405, i64 21
  store float %449, float* %448, align 4, !tbaa !840
  %450 = getelementptr inbounds float, float* %35, i64 %392
  %451 = extractelement <32 x float> %405, i64 22
  store float %451, float* %450, align 4, !tbaa !840
  %452 = getelementptr inbounds float, float* %35, i64 %393
  %453 = extractelement <32 x float> %405, i64 23
  store float %453, float* %452, align 4, !tbaa !840
  %454 = getelementptr inbounds float, float* %35, i64 %394
  %455 = extractelement <32 x float> %405, i64 24
  store float %455, float* %454, align 4, !tbaa !840
  %456 = getelementptr inbounds float, float* %35, i64 %395
  %457 = extractelement <32 x float> %405, i64 25
  store float %457, float* %456, align 4, !tbaa !840
  %458 = getelementptr inbounds float, float* %35, i64 %396
  %459 = extractelement <32 x float> %405, i64 26
  store float %459, float* %458, align 4, !tbaa !840
  %460 = getelementptr inbounds float, float* %35, i64 %397
  %461 = extractelement <32 x float> %405, i64 27
  store float %461, float* %460, align 4, !tbaa !840
  %462 = getelementptr inbounds float, float* %35, i64 %398
  %463 = extractelement <32 x float> %405, i64 28
  store float %463, float* %462, align 4, !tbaa !840
  %464 = getelementptr inbounds float, float* %35, i64 %399
  %465 = extractelement <32 x float> %405, i64 29
  store float %465, float* %464, align 4, !tbaa !840
  %466 = getelementptr inbounds float, float* %35, i64 %400
  %467 = extractelement <32 x float> %405, i64 30
  store float %467, float* %466, align 4, !tbaa !840
  %468 = getelementptr inbounds float, float* %35, i64 %401
  %469 = extractelement <32 x float> %405, i64 31
  store float %469, float* %468, align 4, !tbaa !840
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond35 = icmp eq i64 %indvars.iv.next34, 7
  br i1 %exitcond35, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %470 = add nuw nsw i32 %173, 1
  %exitcond36 = icmp eq i32 %470, 112
  br i1 %exitcond36, label %for_end18, label %for_body17, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_10(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_10_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_10_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [1024 x <64 x float>], align 16
  %5 = alloca [401408 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = mul nuw nsw i64 %indvar, 14336
  %7 = mul nuw nsw i64 %indvar, 112
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %8 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar31 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next32, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvar31, 28
  %10 = add nuw nsw i64 %6, %9
  %scevgep = getelementptr [401408 x float], [401408 x float]* %5, i64 0, i64 %10
  %scevgep33 = bitcast float* %scevgep to i8*
  %11 = mul nuw nsw i64 %indvar31, 3136
  %12 = add nuw nsw i64 %7, %11
  %scevgep34 = getelementptr i8, i8* %0, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep33, i8* align 4 %scevgep34, i64 112, i1 false)
  %indvar.next32 = add nuw nsw i64 %indvar31, 1
  %exitcond35 = icmp eq i64 %indvar.next32, 512
  br i1 %exitcond35, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond36 = icmp eq i64 %indvar.next, 28
  br i1 %exitcond36, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv25 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next26, %for_end12 ]
  %13 = shl nsw i64 %indvars.iv25, 15
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %14 = bitcast i8* %2 to float*
  br label %for_begin16.preheader

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next23, %for_body11 ]
  %15 = shl i64 %indvars.iv22, 6
  %16 = add nuw nsw i64 %15, %13
  %17 = add nuw nsw i64 %indvars.iv22, %13
  %18 = add nuw nsw i64 %17, 512
  %19 = add nuw nsw i64 %17, 1024
  %20 = add nuw nsw i64 %17, 1536
  %21 = add nuw nsw i64 %17, 2048
  %22 = add nuw nsw i64 %17, 2560
  %23 = add nuw nsw i64 %17, 3072
  %24 = add nuw nsw i64 %17, 3584
  %25 = add nuw nsw i64 %17, 4096
  %26 = add nuw nsw i64 %17, 4608
  %27 = add nuw nsw i64 %17, 5120
  %28 = add nuw nsw i64 %17, 5632
  %29 = add nuw nsw i64 %17, 6144
  %30 = add nuw nsw i64 %17, 6656
  %31 = add nuw nsw i64 %17, 7168
  %32 = add nuw nsw i64 %17, 7680
  %33 = add nuw nsw i64 %17, 8192
  %34 = add nuw nsw i64 %17, 8704
  %35 = add nuw nsw i64 %17, 9216
  %36 = add nuw nsw i64 %17, 9728
  %37 = add nuw nsw i64 %17, 10240
  %38 = add nuw nsw i64 %17, 10752
  %39 = add nuw nsw i64 %17, 11264
  %40 = add nuw nsw i64 %17, 11776
  %41 = add nuw nsw i64 %17, 12288
  %42 = add nuw nsw i64 %17, 12800
  %43 = add nuw nsw i64 %17, 13312
  %44 = add nuw nsw i64 %17, 13824
  %45 = add nuw nsw i64 %17, 14336
  %46 = add nuw nsw i64 %17, 14848
  %47 = add nuw nsw i64 %17, 15360
  %48 = add nuw nsw i64 %17, 15872
  %49 = add nuw nsw i64 %17, 16384
  %50 = add nuw nsw i64 %17, 16896
  %51 = add nuw nsw i64 %17, 17408
  %52 = add nuw nsw i64 %17, 17920
  %53 = add nuw nsw i64 %17, 18432
  %54 = add nuw nsw i64 %17, 18944
  %55 = add nuw nsw i64 %17, 19456
  %56 = add nuw nsw i64 %17, 19968
  %57 = add nuw nsw i64 %17, 20480
  %58 = add nuw nsw i64 %17, 20992
  %59 = add nuw nsw i64 %17, 21504
  %60 = add nuw nsw i64 %17, 22016
  %61 = add nuw nsw i64 %17, 22528
  %62 = add nuw nsw i64 %17, 23040
  %63 = add nuw nsw i64 %17, 23552
  %64 = add nuw nsw i64 %17, 24064
  %65 = add nuw nsw i64 %17, 24576
  %66 = add nuw nsw i64 %17, 25088
  %67 = add nuw nsw i64 %17, 25600
  %68 = add nuw nsw i64 %17, 26112
  %69 = add nuw nsw i64 %17, 26624
  %70 = add nuw nsw i64 %17, 27136
  %71 = add nuw nsw i64 %17, 27648
  %72 = add nuw nsw i64 %17, 28160
  %73 = add nuw nsw i64 %17, 28672
  %74 = add nuw nsw i64 %17, 29184
  %75 = add nuw nsw i64 %17, 29696
  %76 = add nuw nsw i64 %17, 30208
  %77 = add nuw nsw i64 %17, 30720
  %78 = add nuw nsw i64 %17, 31232
  %79 = add nuw nsw i64 %17, 31744
  %80 = add nuw nsw i64 %17, 32256
  %81 = getelementptr inbounds float, float* %8, i64 %17
  %82 = load float, float* %81, align 4, !tbaa !843
  %83 = insertelement <64 x float> undef, float %82, i32 0
  %84 = getelementptr inbounds float, float* %8, i64 %18
  %85 = load float, float* %84, align 4, !tbaa !843
  %86 = insertelement <64 x float> %83, float %85, i32 1
  %87 = getelementptr inbounds float, float* %8, i64 %19
  %88 = load float, float* %87, align 4, !tbaa !843
  %89 = insertelement <64 x float> %86, float %88, i32 2
  %90 = getelementptr inbounds float, float* %8, i64 %20
  %91 = load float, float* %90, align 4, !tbaa !843
  %92 = insertelement <64 x float> %89, float %91, i32 3
  %93 = getelementptr inbounds float, float* %8, i64 %21
  %94 = load float, float* %93, align 4, !tbaa !843
  %95 = insertelement <64 x float> %92, float %94, i32 4
  %96 = getelementptr inbounds float, float* %8, i64 %22
  %97 = load float, float* %96, align 4, !tbaa !843
  %98 = insertelement <64 x float> %95, float %97, i32 5
  %99 = getelementptr inbounds float, float* %8, i64 %23
  %100 = load float, float* %99, align 4, !tbaa !843
  %101 = insertelement <64 x float> %98, float %100, i32 6
  %102 = getelementptr inbounds float, float* %8, i64 %24
  %103 = load float, float* %102, align 4, !tbaa !843
  %104 = insertelement <64 x float> %101, float %103, i32 7
  %105 = getelementptr inbounds float, float* %8, i64 %25
  %106 = load float, float* %105, align 4, !tbaa !843
  %107 = insertelement <64 x float> %104, float %106, i32 8
  %108 = getelementptr inbounds float, float* %8, i64 %26
  %109 = load float, float* %108, align 4, !tbaa !843
  %110 = insertelement <64 x float> %107, float %109, i32 9
  %111 = getelementptr inbounds float, float* %8, i64 %27
  %112 = load float, float* %111, align 4, !tbaa !843
  %113 = insertelement <64 x float> %110, float %112, i32 10
  %114 = getelementptr inbounds float, float* %8, i64 %28
  %115 = load float, float* %114, align 4, !tbaa !843
  %116 = insertelement <64 x float> %113, float %115, i32 11
  %117 = getelementptr inbounds float, float* %8, i64 %29
  %118 = load float, float* %117, align 4, !tbaa !843
  %119 = insertelement <64 x float> %116, float %118, i32 12
  %120 = getelementptr inbounds float, float* %8, i64 %30
  %121 = load float, float* %120, align 4, !tbaa !843
  %122 = insertelement <64 x float> %119, float %121, i32 13
  %123 = getelementptr inbounds float, float* %8, i64 %31
  %124 = load float, float* %123, align 4, !tbaa !843
  %125 = insertelement <64 x float> %122, float %124, i32 14
  %126 = getelementptr inbounds float, float* %8, i64 %32
  %127 = load float, float* %126, align 4, !tbaa !843
  %128 = insertelement <64 x float> %125, float %127, i32 15
  %129 = getelementptr inbounds float, float* %8, i64 %33
  %130 = load float, float* %129, align 4, !tbaa !843
  %131 = insertelement <64 x float> %128, float %130, i32 16
  %132 = getelementptr inbounds float, float* %8, i64 %34
  %133 = load float, float* %132, align 4, !tbaa !843
  %134 = insertelement <64 x float> %131, float %133, i32 17
  %135 = getelementptr inbounds float, float* %8, i64 %35
  %136 = load float, float* %135, align 4, !tbaa !843
  %137 = insertelement <64 x float> %134, float %136, i32 18
  %138 = getelementptr inbounds float, float* %8, i64 %36
  %139 = load float, float* %138, align 4, !tbaa !843
  %140 = insertelement <64 x float> %137, float %139, i32 19
  %141 = getelementptr inbounds float, float* %8, i64 %37
  %142 = load float, float* %141, align 4, !tbaa !843
  %143 = insertelement <64 x float> %140, float %142, i32 20
  %144 = getelementptr inbounds float, float* %8, i64 %38
  %145 = load float, float* %144, align 4, !tbaa !843
  %146 = insertelement <64 x float> %143, float %145, i32 21
  %147 = getelementptr inbounds float, float* %8, i64 %39
  %148 = load float, float* %147, align 4, !tbaa !843
  %149 = insertelement <64 x float> %146, float %148, i32 22
  %150 = getelementptr inbounds float, float* %8, i64 %40
  %151 = load float, float* %150, align 4, !tbaa !843
  %152 = insertelement <64 x float> %149, float %151, i32 23
  %153 = getelementptr inbounds float, float* %8, i64 %41
  %154 = load float, float* %153, align 4, !tbaa !843
  %155 = insertelement <64 x float> %152, float %154, i32 24
  %156 = getelementptr inbounds float, float* %8, i64 %42
  %157 = load float, float* %156, align 4, !tbaa !843
  %158 = insertelement <64 x float> %155, float %157, i32 25
  %159 = getelementptr inbounds float, float* %8, i64 %43
  %160 = load float, float* %159, align 4, !tbaa !843
  %161 = insertelement <64 x float> %158, float %160, i32 26
  %162 = getelementptr inbounds float, float* %8, i64 %44
  %163 = load float, float* %162, align 4, !tbaa !843
  %164 = insertelement <64 x float> %161, float %163, i32 27
  %165 = getelementptr inbounds float, float* %8, i64 %45
  %166 = load float, float* %165, align 4, !tbaa !843
  %167 = insertelement <64 x float> %164, float %166, i32 28
  %168 = getelementptr inbounds float, float* %8, i64 %46
  %169 = load float, float* %168, align 4, !tbaa !843
  %170 = insertelement <64 x float> %167, float %169, i32 29
  %171 = getelementptr inbounds float, float* %8, i64 %47
  %172 = load float, float* %171, align 4, !tbaa !843
  %173 = insertelement <64 x float> %170, float %172, i32 30
  %174 = getelementptr inbounds float, float* %8, i64 %48
  %175 = load float, float* %174, align 4, !tbaa !843
  %176 = insertelement <64 x float> %173, float %175, i32 31
  %177 = getelementptr inbounds float, float* %8, i64 %49
  %178 = load float, float* %177, align 4, !tbaa !843
  %179 = insertelement <64 x float> %176, float %178, i32 32
  %180 = getelementptr inbounds float, float* %8, i64 %50
  %181 = load float, float* %180, align 4, !tbaa !843
  %182 = insertelement <64 x float> %179, float %181, i32 33
  %183 = getelementptr inbounds float, float* %8, i64 %51
  %184 = load float, float* %183, align 4, !tbaa !843
  %185 = insertelement <64 x float> %182, float %184, i32 34
  %186 = getelementptr inbounds float, float* %8, i64 %52
  %187 = load float, float* %186, align 4, !tbaa !843
  %188 = insertelement <64 x float> %185, float %187, i32 35
  %189 = getelementptr inbounds float, float* %8, i64 %53
  %190 = load float, float* %189, align 4, !tbaa !843
  %191 = insertelement <64 x float> %188, float %190, i32 36
  %192 = getelementptr inbounds float, float* %8, i64 %54
  %193 = load float, float* %192, align 4, !tbaa !843
  %194 = insertelement <64 x float> %191, float %193, i32 37
  %195 = getelementptr inbounds float, float* %8, i64 %55
  %196 = load float, float* %195, align 4, !tbaa !843
  %197 = insertelement <64 x float> %194, float %196, i32 38
  %198 = getelementptr inbounds float, float* %8, i64 %56
  %199 = load float, float* %198, align 4, !tbaa !843
  %200 = insertelement <64 x float> %197, float %199, i32 39
  %201 = getelementptr inbounds float, float* %8, i64 %57
  %202 = load float, float* %201, align 4, !tbaa !843
  %203 = insertelement <64 x float> %200, float %202, i32 40
  %204 = getelementptr inbounds float, float* %8, i64 %58
  %205 = load float, float* %204, align 4, !tbaa !843
  %206 = insertelement <64 x float> %203, float %205, i32 41
  %207 = getelementptr inbounds float, float* %8, i64 %59
  %208 = load float, float* %207, align 4, !tbaa !843
  %209 = insertelement <64 x float> %206, float %208, i32 42
  %210 = getelementptr inbounds float, float* %8, i64 %60
  %211 = load float, float* %210, align 4, !tbaa !843
  %212 = insertelement <64 x float> %209, float %211, i32 43
  %213 = getelementptr inbounds float, float* %8, i64 %61
  %214 = load float, float* %213, align 4, !tbaa !843
  %215 = insertelement <64 x float> %212, float %214, i32 44
  %216 = getelementptr inbounds float, float* %8, i64 %62
  %217 = load float, float* %216, align 4, !tbaa !843
  %218 = insertelement <64 x float> %215, float %217, i32 45
  %219 = getelementptr inbounds float, float* %8, i64 %63
  %220 = load float, float* %219, align 4, !tbaa !843
  %221 = insertelement <64 x float> %218, float %220, i32 46
  %222 = getelementptr inbounds float, float* %8, i64 %64
  %223 = load float, float* %222, align 4, !tbaa !843
  %224 = insertelement <64 x float> %221, float %223, i32 47
  %225 = getelementptr inbounds float, float* %8, i64 %65
  %226 = load float, float* %225, align 4, !tbaa !843
  %227 = insertelement <64 x float> %224, float %226, i32 48
  %228 = getelementptr inbounds float, float* %8, i64 %66
  %229 = load float, float* %228, align 4, !tbaa !843
  %230 = insertelement <64 x float> %227, float %229, i32 49
  %231 = getelementptr inbounds float, float* %8, i64 %67
  %232 = load float, float* %231, align 4, !tbaa !843
  %233 = insertelement <64 x float> %230, float %232, i32 50
  %234 = getelementptr inbounds float, float* %8, i64 %68
  %235 = load float, float* %234, align 4, !tbaa !843
  %236 = insertelement <64 x float> %233, float %235, i32 51
  %237 = getelementptr inbounds float, float* %8, i64 %69
  %238 = load float, float* %237, align 4, !tbaa !843
  %239 = insertelement <64 x float> %236, float %238, i32 52
  %240 = getelementptr inbounds float, float* %8, i64 %70
  %241 = load float, float* %240, align 4, !tbaa !843
  %242 = insertelement <64 x float> %239, float %241, i32 53
  %243 = getelementptr inbounds float, float* %8, i64 %71
  %244 = load float, float* %243, align 4, !tbaa !843
  %245 = insertelement <64 x float> %242, float %244, i32 54
  %246 = getelementptr inbounds float, float* %8, i64 %72
  %247 = load float, float* %246, align 4, !tbaa !843
  %248 = insertelement <64 x float> %245, float %247, i32 55
  %249 = getelementptr inbounds float, float* %8, i64 %73
  %250 = load float, float* %249, align 4, !tbaa !843
  %251 = insertelement <64 x float> %248, float %250, i32 56
  %252 = getelementptr inbounds float, float* %8, i64 %74
  %253 = load float, float* %252, align 4, !tbaa !843
  %254 = insertelement <64 x float> %251, float %253, i32 57
  %255 = getelementptr inbounds float, float* %8, i64 %75
  %256 = load float, float* %255, align 4, !tbaa !843
  %257 = insertelement <64 x float> %254, float %256, i32 58
  %258 = getelementptr inbounds float, float* %8, i64 %76
  %259 = load float, float* %258, align 4, !tbaa !843
  %260 = insertelement <64 x float> %257, float %259, i32 59
  %261 = getelementptr inbounds float, float* %8, i64 %77
  %262 = load float, float* %261, align 4, !tbaa !843
  %263 = insertelement <64 x float> %260, float %262, i32 60
  %264 = getelementptr inbounds float, float* %8, i64 %78
  %265 = load float, float* %264, align 4, !tbaa !843
  %266 = insertelement <64 x float> %263, float %265, i32 61
  %267 = getelementptr inbounds float, float* %8, i64 %79
  %268 = load float, float* %267, align 4, !tbaa !843
  %269 = insertelement <64 x float> %266, float %268, i32 62
  %270 = getelementptr inbounds float, float* %8, i64 %80
  %271 = load float, float* %270, align 4, !tbaa !843
  %272 = insertelement <64 x float> %269, float %271, i32 63
  %273 = getelementptr inbounds [1024 x <64 x float>], [1024 x <64 x float>]* %4, i64 0, i64 0, i64 %16
  %274 = bitcast float* %273 to <64 x float>*
  store <64 x float> %272, <64 x float>* %274, align 16, !tbaa !846
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 512
  br i1 %exitcond24, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %exitcond27 = icmp eq i64 %indvars.iv.next26, 2
  br i1 %exitcond27, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_begin13.preheader
  %275 = phi i32 [ 0, %for_begin13.preheader ], [ %346, %for_end24 ]
  %276 = urem i32 %275, 28
  %277 = mul nuw nsw i32 %276, 14336
  %278 = udiv i32 %275, 28
  %279 = shl i32 %278, 15
  %280 = sext i32 %279 to i64
  %281 = zext i32 %277 to i64
  br label %for_body17

for_end15:                                        ; preds = %for_end24
  ret void

for_begin22.preheader:                            ; preds = %for_end21
  %282 = mul nuw nsw i32 %276, 28
  %283 = mul nsw i32 %278, 50176
  %284 = or i32 %283, %282
  br label %for_begin25.preheader

for_body17:                                       ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv12 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next13, %for_end21 ]
  %285 = shl nsw i64 %indvars.iv12, 8
  %286 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %285
  %287 = bitcast float* %286 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %287, align 16, !tbaa !849
  %288 = or i64 %285, 64
  %289 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %288
  %290 = bitcast float* %289 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %290, align 16, !tbaa !849
  %291 = or i64 %285, 128
  %292 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %291
  %293 = bitcast float* %292 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %293, align 16, !tbaa !849
  %294 = or i64 %285, 192
  %295 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %294
  %296 = bitcast float* %295 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %296, align 16, !tbaa !849
  %297 = shl nsw i64 %indvars.iv12, 2
  %298 = add nuw nsw i64 %297, %281
  %299 = trunc i64 %298 to i32
  br label %for_body20

for_body20:                                       ; preds = %for_body20, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body20 ]
  %300 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %340, %for_body20 ]
  %301 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %333, %for_body20 ]
  %302 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %326, %for_body20 ]
  %303 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %319, %for_body20 ]
  %304 = phi i32 [ 0, %for_body17 ], [ %341, %for_body20 ]
  %305 = mul nuw nsw i64 %indvars.iv, 28
  %306 = mul nuw nsw i32 %304, 28
  %307 = add nuw nsw i64 %298, %305
  %308 = add nsw i32 %306, %299
  %309 = and i64 %307, 4294967292
  %310 = getelementptr inbounds [401408 x float], [401408 x float]* %5, i64 0, i64 %309
  %311 = load float, float* %310, align 16, !tbaa !852
  %312 = insertelement <64 x float> undef, float %311, i32 0
  %313 = shufflevector <64 x float> %312, <64 x float> undef, <64 x i32> zeroinitializer
  %314 = shl i64 %indvars.iv, 6
  %315 = add nuw nsw i64 %314, %280
  %316 = getelementptr inbounds [1024 x <64 x float>], [1024 x <64 x float>]* %4, i64 0, i64 0, i64 %315
  %317 = bitcast float* %316 to <64 x float>*
  %318 = load <64 x float>, <64 x float>* %317, align 16, !tbaa !846
  %319 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %313, <64 x float> %318, <64 x float> %303)
  %320 = or i32 %308, 1
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds [401408 x float], [401408 x float]* %5, i64 0, i64 %321
  %323 = load float, float* %322, align 4, !tbaa !852
  %324 = insertelement <64 x float> undef, float %323, i32 0
  %325 = shufflevector <64 x float> %324, <64 x float> undef, <64 x i32> zeroinitializer
  %326 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %325, <64 x float> %318, <64 x float> %302)
  %327 = or i32 %308, 2
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds [401408 x float], [401408 x float]* %5, i64 0, i64 %328
  %330 = load float, float* %329, align 8, !tbaa !852
  %331 = insertelement <64 x float> undef, float %330, i32 0
  %332 = shufflevector <64 x float> %331, <64 x float> undef, <64 x i32> zeroinitializer
  %333 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %332, <64 x float> %318, <64 x float> %301)
  %334 = or i32 %308, 3
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds [401408 x float], [401408 x float]* %5, i64 0, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !852
  %338 = insertelement <64 x float> undef, float %337, i32 0
  %339 = shufflevector <64 x float> %338, <64 x float> undef, <64 x i32> zeroinitializer
  %340 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %339, <64 x float> %318, <64 x float> %300)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %341 = add nuw nsw i32 %304, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <64 x float> %319, <64 x float>* %287, align 16, !tbaa !849
  store <64 x float> %326, <64 x float>* %290, align 16, !tbaa !849
  store <64 x float> %333, <64 x float>* %293, align 16, !tbaa !849
  store <64 x float> %340, <64 x float>* %296, align 16, !tbaa !849
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp eq i64 %indvars.iv.next13, 7
  br i1 %exitcond14, label %for_begin22.preheader, label %for_body17, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_begin22.preheader
  %indvars.iv18 = phi i64 [ 0, %for_begin22.preheader ], [ %indvars.iv.next19, %for_end27 ]
  %342 = shl i64 %indvars.iv18, 8
  %indvars.iv18.tr = trunc i64 %indvars.iv18 to i32
  %343 = shl i32 %indvars.iv18.tr, 2
  %344 = add i32 %284, %343
  %345 = zext i32 %344 to i64
  br label %for_body26

for_end24:                                        ; preds = %for_end27
  %346 = add nuw nsw i32 %275, 1
  %exitcond21 = icmp eq i32 %346, 56
  br i1 %exitcond21, label %for_end15, label %for_begin16.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv15 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next16, %for_body26 ]
  %347 = add nuw nsw i64 %indvars.iv15, %345
  %348 = add nuw nsw i64 %347, 784
  %349 = add nuw nsw i64 %347, 1568
  %350 = add nuw nsw i64 %347, 2352
  %351 = add nuw nsw i64 %347, 3136
  %352 = add nuw nsw i64 %347, 3920
  %353 = add nuw nsw i64 %347, 4704
  %354 = add nuw nsw i64 %347, 5488
  %355 = add nuw nsw i64 %347, 6272
  %356 = add nuw nsw i64 %347, 7056
  %357 = add nuw nsw i64 %347, 7840
  %358 = add nuw nsw i64 %347, 8624
  %359 = add nuw nsw i64 %347, 9408
  %360 = add nuw nsw i64 %347, 10192
  %361 = add nuw nsw i64 %347, 10976
  %362 = add nuw nsw i64 %347, 11760
  %363 = add nuw nsw i64 %347, 12544
  %364 = add nuw nsw i64 %347, 13328
  %365 = add nuw nsw i64 %347, 14112
  %366 = add nuw nsw i64 %347, 14896
  %367 = add nuw nsw i64 %347, 15680
  %368 = add nuw nsw i64 %347, 16464
  %369 = add nuw nsw i64 %347, 17248
  %370 = add nuw nsw i64 %347, 18032
  %371 = add nuw nsw i64 %347, 18816
  %372 = add nuw nsw i64 %347, 19600
  %373 = add nuw nsw i64 %347, 20384
  %374 = add nuw nsw i64 %347, 21168
  %375 = add nuw nsw i64 %347, 21952
  %376 = add nuw nsw i64 %347, 22736
  %377 = add nuw nsw i64 %347, 23520
  %378 = add nuw nsw i64 %347, 24304
  %379 = add nuw nsw i64 %347, 25088
  %380 = add nuw nsw i64 %347, 25872
  %381 = add nuw nsw i64 %347, 26656
  %382 = add nuw nsw i64 %347, 27440
  %383 = add nuw nsw i64 %347, 28224
  %384 = add nuw nsw i64 %347, 29008
  %385 = add nuw nsw i64 %347, 29792
  %386 = add nuw nsw i64 %347, 30576
  %387 = add nuw nsw i64 %347, 31360
  %388 = add nuw nsw i64 %347, 32144
  %389 = add nuw nsw i64 %347, 32928
  %390 = add nuw nsw i64 %347, 33712
  %391 = add nuw nsw i64 %347, 34496
  %392 = add nuw nsw i64 %347, 35280
  %393 = add nuw nsw i64 %347, 36064
  %394 = add nuw nsw i64 %347, 36848
  %395 = add nuw nsw i64 %347, 37632
  %396 = add nuw nsw i64 %347, 38416
  %397 = add nuw nsw i64 %347, 39200
  %398 = add nuw nsw i64 %347, 39984
  %399 = add nuw nsw i64 %347, 40768
  %400 = add nuw nsw i64 %347, 41552
  %401 = add nuw nsw i64 %347, 42336
  %402 = add nuw nsw i64 %347, 43120
  %403 = add nuw nsw i64 %347, 43904
  %404 = add nuw nsw i64 %347, 44688
  %405 = add nuw nsw i64 %347, 45472
  %406 = add nuw nsw i64 %347, 46256
  %407 = add nuw nsw i64 %347, 47040
  %408 = add nuw nsw i64 %347, 47824
  %409 = add nuw nsw i64 %347, 48608
  %410 = add nuw nsw i64 %347, 49392
  %411 = shl i64 %indvars.iv15, 6
  %412 = add nuw nsw i64 %411, %342
  %413 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %412
  %414 = bitcast float* %413 to <64 x float>*
  %415 = load <64 x float>, <64 x float>* %414, align 16, !tbaa !849
  %416 = getelementptr inbounds float, float* %14, i64 %347
  %417 = extractelement <64 x float> %415, i64 0
  store float %417, float* %416, align 4, !tbaa !855
  %418 = getelementptr inbounds float, float* %14, i64 %348
  %419 = extractelement <64 x float> %415, i64 1
  store float %419, float* %418, align 4, !tbaa !855
  %420 = getelementptr inbounds float, float* %14, i64 %349
  %421 = extractelement <64 x float> %415, i64 2
  store float %421, float* %420, align 4, !tbaa !855
  %422 = getelementptr inbounds float, float* %14, i64 %350
  %423 = extractelement <64 x float> %415, i64 3
  store float %423, float* %422, align 4, !tbaa !855
  %424 = getelementptr inbounds float, float* %14, i64 %351
  %425 = extractelement <64 x float> %415, i64 4
  store float %425, float* %424, align 4, !tbaa !855
  %426 = getelementptr inbounds float, float* %14, i64 %352
  %427 = extractelement <64 x float> %415, i64 5
  store float %427, float* %426, align 4, !tbaa !855
  %428 = getelementptr inbounds float, float* %14, i64 %353
  %429 = extractelement <64 x float> %415, i64 6
  store float %429, float* %428, align 4, !tbaa !855
  %430 = getelementptr inbounds float, float* %14, i64 %354
  %431 = extractelement <64 x float> %415, i64 7
  store float %431, float* %430, align 4, !tbaa !855
  %432 = getelementptr inbounds float, float* %14, i64 %355
  %433 = extractelement <64 x float> %415, i64 8
  store float %433, float* %432, align 4, !tbaa !855
  %434 = getelementptr inbounds float, float* %14, i64 %356
  %435 = extractelement <64 x float> %415, i64 9
  store float %435, float* %434, align 4, !tbaa !855
  %436 = getelementptr inbounds float, float* %14, i64 %357
  %437 = extractelement <64 x float> %415, i64 10
  store float %437, float* %436, align 4, !tbaa !855
  %438 = getelementptr inbounds float, float* %14, i64 %358
  %439 = extractelement <64 x float> %415, i64 11
  store float %439, float* %438, align 4, !tbaa !855
  %440 = getelementptr inbounds float, float* %14, i64 %359
  %441 = extractelement <64 x float> %415, i64 12
  store float %441, float* %440, align 4, !tbaa !855
  %442 = getelementptr inbounds float, float* %14, i64 %360
  %443 = extractelement <64 x float> %415, i64 13
  store float %443, float* %442, align 4, !tbaa !855
  %444 = getelementptr inbounds float, float* %14, i64 %361
  %445 = extractelement <64 x float> %415, i64 14
  store float %445, float* %444, align 4, !tbaa !855
  %446 = getelementptr inbounds float, float* %14, i64 %362
  %447 = extractelement <64 x float> %415, i64 15
  store float %447, float* %446, align 4, !tbaa !855
  %448 = getelementptr inbounds float, float* %14, i64 %363
  %449 = extractelement <64 x float> %415, i64 16
  store float %449, float* %448, align 4, !tbaa !855
  %450 = getelementptr inbounds float, float* %14, i64 %364
  %451 = extractelement <64 x float> %415, i64 17
  store float %451, float* %450, align 4, !tbaa !855
  %452 = getelementptr inbounds float, float* %14, i64 %365
  %453 = extractelement <64 x float> %415, i64 18
  store float %453, float* %452, align 4, !tbaa !855
  %454 = getelementptr inbounds float, float* %14, i64 %366
  %455 = extractelement <64 x float> %415, i64 19
  store float %455, float* %454, align 4, !tbaa !855
  %456 = getelementptr inbounds float, float* %14, i64 %367
  %457 = extractelement <64 x float> %415, i64 20
  store float %457, float* %456, align 4, !tbaa !855
  %458 = getelementptr inbounds float, float* %14, i64 %368
  %459 = extractelement <64 x float> %415, i64 21
  store float %459, float* %458, align 4, !tbaa !855
  %460 = getelementptr inbounds float, float* %14, i64 %369
  %461 = extractelement <64 x float> %415, i64 22
  store float %461, float* %460, align 4, !tbaa !855
  %462 = getelementptr inbounds float, float* %14, i64 %370
  %463 = extractelement <64 x float> %415, i64 23
  store float %463, float* %462, align 4, !tbaa !855
  %464 = getelementptr inbounds float, float* %14, i64 %371
  %465 = extractelement <64 x float> %415, i64 24
  store float %465, float* %464, align 4, !tbaa !855
  %466 = getelementptr inbounds float, float* %14, i64 %372
  %467 = extractelement <64 x float> %415, i64 25
  store float %467, float* %466, align 4, !tbaa !855
  %468 = getelementptr inbounds float, float* %14, i64 %373
  %469 = extractelement <64 x float> %415, i64 26
  store float %469, float* %468, align 4, !tbaa !855
  %470 = getelementptr inbounds float, float* %14, i64 %374
  %471 = extractelement <64 x float> %415, i64 27
  store float %471, float* %470, align 4, !tbaa !855
  %472 = getelementptr inbounds float, float* %14, i64 %375
  %473 = extractelement <64 x float> %415, i64 28
  store float %473, float* %472, align 4, !tbaa !855
  %474 = getelementptr inbounds float, float* %14, i64 %376
  %475 = extractelement <64 x float> %415, i64 29
  store float %475, float* %474, align 4, !tbaa !855
  %476 = getelementptr inbounds float, float* %14, i64 %377
  %477 = extractelement <64 x float> %415, i64 30
  store float %477, float* %476, align 4, !tbaa !855
  %478 = getelementptr inbounds float, float* %14, i64 %378
  %479 = extractelement <64 x float> %415, i64 31
  store float %479, float* %478, align 4, !tbaa !855
  %480 = getelementptr inbounds float, float* %14, i64 %379
  %481 = extractelement <64 x float> %415, i64 32
  store float %481, float* %480, align 4, !tbaa !855
  %482 = getelementptr inbounds float, float* %14, i64 %380
  %483 = extractelement <64 x float> %415, i64 33
  store float %483, float* %482, align 4, !tbaa !855
  %484 = getelementptr inbounds float, float* %14, i64 %381
  %485 = extractelement <64 x float> %415, i64 34
  store float %485, float* %484, align 4, !tbaa !855
  %486 = getelementptr inbounds float, float* %14, i64 %382
  %487 = extractelement <64 x float> %415, i64 35
  store float %487, float* %486, align 4, !tbaa !855
  %488 = getelementptr inbounds float, float* %14, i64 %383
  %489 = extractelement <64 x float> %415, i64 36
  store float %489, float* %488, align 4, !tbaa !855
  %490 = getelementptr inbounds float, float* %14, i64 %384
  %491 = extractelement <64 x float> %415, i64 37
  store float %491, float* %490, align 4, !tbaa !855
  %492 = getelementptr inbounds float, float* %14, i64 %385
  %493 = extractelement <64 x float> %415, i64 38
  store float %493, float* %492, align 4, !tbaa !855
  %494 = getelementptr inbounds float, float* %14, i64 %386
  %495 = extractelement <64 x float> %415, i64 39
  store float %495, float* %494, align 4, !tbaa !855
  %496 = getelementptr inbounds float, float* %14, i64 %387
  %497 = extractelement <64 x float> %415, i64 40
  store float %497, float* %496, align 4, !tbaa !855
  %498 = getelementptr inbounds float, float* %14, i64 %388
  %499 = extractelement <64 x float> %415, i64 41
  store float %499, float* %498, align 4, !tbaa !855
  %500 = getelementptr inbounds float, float* %14, i64 %389
  %501 = extractelement <64 x float> %415, i64 42
  store float %501, float* %500, align 4, !tbaa !855
  %502 = getelementptr inbounds float, float* %14, i64 %390
  %503 = extractelement <64 x float> %415, i64 43
  store float %503, float* %502, align 4, !tbaa !855
  %504 = getelementptr inbounds float, float* %14, i64 %391
  %505 = extractelement <64 x float> %415, i64 44
  store float %505, float* %504, align 4, !tbaa !855
  %506 = getelementptr inbounds float, float* %14, i64 %392
  %507 = extractelement <64 x float> %415, i64 45
  store float %507, float* %506, align 4, !tbaa !855
  %508 = getelementptr inbounds float, float* %14, i64 %393
  %509 = extractelement <64 x float> %415, i64 46
  store float %509, float* %508, align 4, !tbaa !855
  %510 = getelementptr inbounds float, float* %14, i64 %394
  %511 = extractelement <64 x float> %415, i64 47
  store float %511, float* %510, align 4, !tbaa !855
  %512 = getelementptr inbounds float, float* %14, i64 %395
  %513 = extractelement <64 x float> %415, i64 48
  store float %513, float* %512, align 4, !tbaa !855
  %514 = getelementptr inbounds float, float* %14, i64 %396
  %515 = extractelement <64 x float> %415, i64 49
  store float %515, float* %514, align 4, !tbaa !855
  %516 = getelementptr inbounds float, float* %14, i64 %397
  %517 = extractelement <64 x float> %415, i64 50
  store float %517, float* %516, align 4, !tbaa !855
  %518 = getelementptr inbounds float, float* %14, i64 %398
  %519 = extractelement <64 x float> %415, i64 51
  store float %519, float* %518, align 4, !tbaa !855
  %520 = getelementptr inbounds float, float* %14, i64 %399
  %521 = extractelement <64 x float> %415, i64 52
  store float %521, float* %520, align 4, !tbaa !855
  %522 = getelementptr inbounds float, float* %14, i64 %400
  %523 = extractelement <64 x float> %415, i64 53
  store float %523, float* %522, align 4, !tbaa !855
  %524 = getelementptr inbounds float, float* %14, i64 %401
  %525 = extractelement <64 x float> %415, i64 54
  store float %525, float* %524, align 4, !tbaa !855
  %526 = getelementptr inbounds float, float* %14, i64 %402
  %527 = extractelement <64 x float> %415, i64 55
  store float %527, float* %526, align 4, !tbaa !855
  %528 = getelementptr inbounds float, float* %14, i64 %403
  %529 = extractelement <64 x float> %415, i64 56
  store float %529, float* %528, align 4, !tbaa !855
  %530 = getelementptr inbounds float, float* %14, i64 %404
  %531 = extractelement <64 x float> %415, i64 57
  store float %531, float* %530, align 4, !tbaa !855
  %532 = getelementptr inbounds float, float* %14, i64 %405
  %533 = extractelement <64 x float> %415, i64 58
  store float %533, float* %532, align 4, !tbaa !855
  %534 = getelementptr inbounds float, float* %14, i64 %406
  %535 = extractelement <64 x float> %415, i64 59
  store float %535, float* %534, align 4, !tbaa !855
  %536 = getelementptr inbounds float, float* %14, i64 %407
  %537 = extractelement <64 x float> %415, i64 60
  store float %537, float* %536, align 4, !tbaa !855
  %538 = getelementptr inbounds float, float* %14, i64 %408
  %539 = extractelement <64 x float> %415, i64 61
  store float %539, float* %538, align 4, !tbaa !855
  %540 = getelementptr inbounds float, float* %14, i64 %409
  %541 = extractelement <64 x float> %415, i64 62
  store float %541, float* %540, align 4, !tbaa !855
  %542 = getelementptr inbounds float, float* %14, i64 %410
  %543 = extractelement <64 x float> %415, i64 63
  store float %543, float* %542, align 4, !tbaa !855
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond17 = icmp eq i64 %indvars.iv.next16, 4
  br i1 %exitcond17, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %exitcond20 = icmp eq i64 %indvars.iv.next19, 7
  br i1 %exitcond20, label %for_end24, label %for_begin25.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_bias_add_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_bias_add_5_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_bias_add_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !858
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !861
  %29 = fadd <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !864
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !861
  %36 = fadd <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !864
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !861
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !864
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !861
  %50 = fadd <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !864
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !861
  %57 = fadd <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !864
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !861
  %64 = fadd <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !864
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !861
  %71 = fadd <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !864
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 512
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_11(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_11_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_11_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <32 x float>], align 16
  %4 = alloca [1024 x <32 x float>], align 16
  %5 = alloca [774400 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = mul nuw nsw i64 %indvar, 14080
  %7 = mul nuw nsw i64 %indvar, 224
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %8 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar40 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next41, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvar40, 55
  %10 = add nuw nsw i64 %6, %9
  %scevgep = getelementptr [774400 x float], [774400 x float]* %5, i64 0, i64 %10
  %scevgep42 = bitcast float* %scevgep to i8*
  %11 = mul nuw nsw i64 %indvar40, 12544
  %12 = add nuw nsw i64 %7, %11
  %scevgep43 = getelementptr i8, i8* %0, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep42, i8* align 4 %scevgep43, i64 220, i1 false)
  %indvar.next41 = add nuw nsw i64 %indvar40, 1
  %exitcond44 = icmp eq i64 %indvar.next41, 256
  br i1 %exitcond44, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond45 = icmp eq i64 %indvar.next, 55
  br i1 %exitcond45, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv34 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next35, %for_end12 ]
  %13 = shl nsw i64 %indvars.iv34, 13
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %14 = bitcast i8* %2 to float*
  %15 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0
  %16 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %17 = bitcast float* %16 to <32 x float>*
  %18 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %19 = bitcast float* %18 to <32 x float>*
  %20 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %21 = bitcast float* %20 to <32 x float>*
  %22 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %23 = bitcast float* %22 to <32 x float>*
  %24 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %25 = bitcast float* %24 to <32 x float>*
  %26 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %27 = bitcast float* %26 to <32 x float>*
  %28 = bitcast [28 x <32 x float>]* %3 to i8*
  %29 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 224
  %30 = bitcast float* %29 to <32 x float>*
  %31 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 256
  %32 = bitcast float* %31 to <32 x float>*
  %33 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 288
  %34 = bitcast float* %33 to <32 x float>*
  %35 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 320
  %36 = bitcast float* %35 to <32 x float>*
  %37 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 352
  %38 = bitcast float* %37 to <32 x float>*
  %39 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 384
  %40 = bitcast float* %39 to <32 x float>*
  %41 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 416
  %42 = bitcast float* %41 to <32 x float>*
  %43 = bitcast float* %29 to i8*
  %44 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 448
  %45 = bitcast float* %44 to <32 x float>*
  %46 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 480
  %47 = bitcast float* %46 to <32 x float>*
  %48 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 512
  %49 = bitcast float* %48 to <32 x float>*
  %50 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 544
  %51 = bitcast float* %50 to <32 x float>*
  %52 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 576
  %53 = bitcast float* %52 to <32 x float>*
  %54 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 608
  %55 = bitcast float* %54 to <32 x float>*
  %56 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 640
  %57 = bitcast float* %56 to <32 x float>*
  %58 = bitcast float* %44 to i8*
  %59 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 672
  %60 = bitcast float* %59 to <32 x float>*
  %61 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 704
  %62 = bitcast float* %61 to <32 x float>*
  %63 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 736
  %64 = bitcast float* %63 to <32 x float>*
  %65 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 768
  %66 = bitcast float* %65 to <32 x float>*
  %67 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 800
  %68 = bitcast float* %67 to <32 x float>*
  %69 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 832
  %70 = bitcast float* %69 to <32 x float>*
  %71 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 864
  %72 = bitcast float* %71 to <32 x float>*
  %73 = bitcast float* %59 to i8*
  br label %for_begin16.preheader

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv31 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next32, %for_body11 ]
  %74 = shl i64 %indvars.iv31, 5
  %75 = add nuw nsw i64 %74, %13
  %76 = add nuw nsw i64 %indvars.iv31, %13
  %77 = add nuw nsw i64 %76, 256
  %78 = add nuw nsw i64 %76, 512
  %79 = add nuw nsw i64 %76, 768
  %80 = add nuw nsw i64 %76, 1024
  %81 = add nuw nsw i64 %76, 1280
  %82 = add nuw nsw i64 %76, 1536
  %83 = add nuw nsw i64 %76, 1792
  %84 = add nuw nsw i64 %76, 2048
  %85 = add nuw nsw i64 %76, 2304
  %86 = add nuw nsw i64 %76, 2560
  %87 = add nuw nsw i64 %76, 2816
  %88 = add nuw nsw i64 %76, 3072
  %89 = add nuw nsw i64 %76, 3328
  %90 = add nuw nsw i64 %76, 3584
  %91 = add nuw nsw i64 %76, 3840
  %92 = add nuw nsw i64 %76, 4096
  %93 = add nuw nsw i64 %76, 4352
  %94 = add nuw nsw i64 %76, 4608
  %95 = add nuw nsw i64 %76, 4864
  %96 = add nuw nsw i64 %76, 5120
  %97 = add nuw nsw i64 %76, 5376
  %98 = add nuw nsw i64 %76, 5632
  %99 = add nuw nsw i64 %76, 5888
  %100 = add nuw nsw i64 %76, 6144
  %101 = add nuw nsw i64 %76, 6400
  %102 = add nuw nsw i64 %76, 6656
  %103 = add nuw nsw i64 %76, 6912
  %104 = add nuw nsw i64 %76, 7168
  %105 = add nuw nsw i64 %76, 7424
  %106 = add nuw nsw i64 %76, 7680
  %107 = add nuw nsw i64 %76, 7936
  %108 = getelementptr inbounds float, float* %8, i64 %76
  %109 = load float, float* %108, align 4, !tbaa !867
  %110 = insertelement <32 x float> undef, float %109, i32 0
  %111 = getelementptr inbounds float, float* %8, i64 %77
  %112 = load float, float* %111, align 4, !tbaa !867
  %113 = insertelement <32 x float> %110, float %112, i32 1
  %114 = getelementptr inbounds float, float* %8, i64 %78
  %115 = load float, float* %114, align 4, !tbaa !867
  %116 = insertelement <32 x float> %113, float %115, i32 2
  %117 = getelementptr inbounds float, float* %8, i64 %79
  %118 = load float, float* %117, align 4, !tbaa !867
  %119 = insertelement <32 x float> %116, float %118, i32 3
  %120 = getelementptr inbounds float, float* %8, i64 %80
  %121 = load float, float* %120, align 4, !tbaa !867
  %122 = insertelement <32 x float> %119, float %121, i32 4
  %123 = getelementptr inbounds float, float* %8, i64 %81
  %124 = load float, float* %123, align 4, !tbaa !867
  %125 = insertelement <32 x float> %122, float %124, i32 5
  %126 = getelementptr inbounds float, float* %8, i64 %82
  %127 = load float, float* %126, align 4, !tbaa !867
  %128 = insertelement <32 x float> %125, float %127, i32 6
  %129 = getelementptr inbounds float, float* %8, i64 %83
  %130 = load float, float* %129, align 4, !tbaa !867
  %131 = insertelement <32 x float> %128, float %130, i32 7
  %132 = getelementptr inbounds float, float* %8, i64 %84
  %133 = load float, float* %132, align 4, !tbaa !867
  %134 = insertelement <32 x float> %131, float %133, i32 8
  %135 = getelementptr inbounds float, float* %8, i64 %85
  %136 = load float, float* %135, align 4, !tbaa !867
  %137 = insertelement <32 x float> %134, float %136, i32 9
  %138 = getelementptr inbounds float, float* %8, i64 %86
  %139 = load float, float* %138, align 4, !tbaa !867
  %140 = insertelement <32 x float> %137, float %139, i32 10
  %141 = getelementptr inbounds float, float* %8, i64 %87
  %142 = load float, float* %141, align 4, !tbaa !867
  %143 = insertelement <32 x float> %140, float %142, i32 11
  %144 = getelementptr inbounds float, float* %8, i64 %88
  %145 = load float, float* %144, align 4, !tbaa !867
  %146 = insertelement <32 x float> %143, float %145, i32 12
  %147 = getelementptr inbounds float, float* %8, i64 %89
  %148 = load float, float* %147, align 4, !tbaa !867
  %149 = insertelement <32 x float> %146, float %148, i32 13
  %150 = getelementptr inbounds float, float* %8, i64 %90
  %151 = load float, float* %150, align 4, !tbaa !867
  %152 = insertelement <32 x float> %149, float %151, i32 14
  %153 = getelementptr inbounds float, float* %8, i64 %91
  %154 = load float, float* %153, align 4, !tbaa !867
  %155 = insertelement <32 x float> %152, float %154, i32 15
  %156 = getelementptr inbounds float, float* %8, i64 %92
  %157 = load float, float* %156, align 4, !tbaa !867
  %158 = insertelement <32 x float> %155, float %157, i32 16
  %159 = getelementptr inbounds float, float* %8, i64 %93
  %160 = load float, float* %159, align 4, !tbaa !867
  %161 = insertelement <32 x float> %158, float %160, i32 17
  %162 = getelementptr inbounds float, float* %8, i64 %94
  %163 = load float, float* %162, align 4, !tbaa !867
  %164 = insertelement <32 x float> %161, float %163, i32 18
  %165 = getelementptr inbounds float, float* %8, i64 %95
  %166 = load float, float* %165, align 4, !tbaa !867
  %167 = insertelement <32 x float> %164, float %166, i32 19
  %168 = getelementptr inbounds float, float* %8, i64 %96
  %169 = load float, float* %168, align 4, !tbaa !867
  %170 = insertelement <32 x float> %167, float %169, i32 20
  %171 = getelementptr inbounds float, float* %8, i64 %97
  %172 = load float, float* %171, align 4, !tbaa !867
  %173 = insertelement <32 x float> %170, float %172, i32 21
  %174 = getelementptr inbounds float, float* %8, i64 %98
  %175 = load float, float* %174, align 4, !tbaa !867
  %176 = insertelement <32 x float> %173, float %175, i32 22
  %177 = getelementptr inbounds float, float* %8, i64 %99
  %178 = load float, float* %177, align 4, !tbaa !867
  %179 = insertelement <32 x float> %176, float %178, i32 23
  %180 = getelementptr inbounds float, float* %8, i64 %100
  %181 = load float, float* %180, align 4, !tbaa !867
  %182 = insertelement <32 x float> %179, float %181, i32 24
  %183 = getelementptr inbounds float, float* %8, i64 %101
  %184 = load float, float* %183, align 4, !tbaa !867
  %185 = insertelement <32 x float> %182, float %184, i32 25
  %186 = getelementptr inbounds float, float* %8, i64 %102
  %187 = load float, float* %186, align 4, !tbaa !867
  %188 = insertelement <32 x float> %185, float %187, i32 26
  %189 = getelementptr inbounds float, float* %8, i64 %103
  %190 = load float, float* %189, align 4, !tbaa !867
  %191 = insertelement <32 x float> %188, float %190, i32 27
  %192 = getelementptr inbounds float, float* %8, i64 %104
  %193 = load float, float* %192, align 4, !tbaa !867
  %194 = insertelement <32 x float> %191, float %193, i32 28
  %195 = getelementptr inbounds float, float* %8, i64 %105
  %196 = load float, float* %195, align 4, !tbaa !867
  %197 = insertelement <32 x float> %194, float %196, i32 29
  %198 = getelementptr inbounds float, float* %8, i64 %106
  %199 = load float, float* %198, align 4, !tbaa !867
  %200 = insertelement <32 x float> %197, float %199, i32 30
  %201 = getelementptr inbounds float, float* %8, i64 %107
  %202 = load float, float* %201, align 4, !tbaa !867
  %203 = insertelement <32 x float> %200, float %202, i32 31
  %204 = getelementptr inbounds [1024 x <32 x float>], [1024 x <32 x float>]* %4, i64 0, i64 0, i64 %75
  %205 = bitcast float* %204 to <32 x float>*
  store <32 x float> %203, <32 x float>* %205, align 16, !tbaa !870
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %exitcond33 = icmp eq i64 %indvars.iv.next32, 256
  br i1 %exitcond33, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %exitcond36 = icmp eq i64 %indvars.iv.next35, 4
  br i1 %exitcond36, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_begin13.preheader
  %206 = phi i32 [ 0, %for_begin13.preheader ], [ %279, %for_end24 ]
  %207 = urem i32 %206, 28
  %208 = mul nuw nsw i32 %207, 28160
  %209 = udiv i32 %206, 28
  %210 = shl i32 %209, 13
  %211 = sext i32 %210 to i64
  %212 = zext i32 %208 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 896, i1 false)
  br label %for_body20

for_end15:                                        ; preds = %for_end24
  ret void

for_body20:                                       ; preds = %for_body20, %for_begin16.preheader
  %indvars.iv = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next, %for_body20 ]
  %213 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %274, %for_body20 ]
  %214 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %267, %for_body20 ]
  %215 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %260, %for_body20 ]
  %216 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %253, %for_body20 ]
  %217 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %246, %for_body20 ]
  %218 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %239, %for_body20 ]
  %219 = phi <32 x float> [ zeroinitializer, %for_begin16.preheader ], [ %232, %for_body20 ]
  %220 = mul nuw nsw i64 %indvars.iv, 55
  %221 = add nuw nsw i64 %220, %212
  %222 = and i64 %221, 4294967295
  %223 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %222
  %224 = load float, float* %223, align 4, !tbaa !873
  %225 = insertelement <32 x float> undef, float %224, i32 0
  %226 = shufflevector <32 x float> %225, <32 x float> undef, <32 x i32> zeroinitializer
  %227 = shl i64 %indvars.iv, 5
  %228 = add nuw nsw i64 %227, %211
  %229 = getelementptr inbounds [1024 x <32 x float>], [1024 x <32 x float>]* %4, i64 0, i64 0, i64 %228
  %230 = bitcast float* %229 to <32 x float>*
  %231 = load <32 x float>, <32 x float>* %230, align 16, !tbaa !870
  %232 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %231, <32 x float> %219)
  %233 = add nuw i64 %221, 2
  %234 = and i64 %233, 4294967295
  %235 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %234
  %236 = load float, float* %235, align 4, !tbaa !873
  %237 = insertelement <32 x float> undef, float %236, i32 0
  %238 = shufflevector <32 x float> %237, <32 x float> undef, <32 x i32> zeroinitializer
  %239 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %238, <32 x float> %231, <32 x float> %218)
  %240 = add nuw i64 %221, 4
  %241 = and i64 %240, 4294967295
  %242 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !873
  %244 = insertelement <32 x float> undef, float %243, i32 0
  %245 = shufflevector <32 x float> %244, <32 x float> undef, <32 x i32> zeroinitializer
  %246 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %245, <32 x float> %231, <32 x float> %217)
  %247 = add nuw i64 %221, 6
  %248 = and i64 %247, 4294967295
  %249 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %248
  %250 = load float, float* %249, align 4, !tbaa !873
  %251 = insertelement <32 x float> undef, float %250, i32 0
  %252 = shufflevector <32 x float> %251, <32 x float> undef, <32 x i32> zeroinitializer
  %253 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %252, <32 x float> %231, <32 x float> %216)
  %254 = add nuw i64 %221, 8
  %255 = and i64 %254, 4294967295
  %256 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %255
  %257 = load float, float* %256, align 4, !tbaa !873
  %258 = insertelement <32 x float> undef, float %257, i32 0
  %259 = shufflevector <32 x float> %258, <32 x float> undef, <32 x i32> zeroinitializer
  %260 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %259, <32 x float> %231, <32 x float> %215)
  %261 = add nuw i64 %221, 10
  %262 = and i64 %261, 4294967295
  %263 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !873
  %265 = insertelement <32 x float> undef, float %264, i32 0
  %266 = shufflevector <32 x float> %265, <32 x float> undef, <32 x i32> zeroinitializer
  %267 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %266, <32 x float> %231, <32 x float> %214)
  %268 = add nuw i64 %221, 12
  %269 = and i64 %268, 4294967295
  %270 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %269
  %271 = load float, float* %270, align 4, !tbaa !873
  %272 = insertelement <32 x float> undef, float %271, i32 0
  %273 = shufflevector <32 x float> %272, <32 x float> undef, <32 x i32> zeroinitializer
  %274 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %273, <32 x float> %231, <32 x float> %213)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <32 x float> %232, <32 x float>* %15, align 16, !tbaa !876
  store <32 x float> %239, <32 x float>* %17, align 16, !tbaa !876
  store <32 x float> %246, <32 x float>* %19, align 16, !tbaa !876
  store <32 x float> %253, <32 x float>* %21, align 16, !tbaa !876
  store <32 x float> %260, <32 x float>* %23, align 16, !tbaa !876
  store <32 x float> %267, <32 x float>* %25, align 16, !tbaa !876
  store <32 x float> %274, <32 x float>* %27, align 16, !tbaa !876
  %275 = or i64 %212, 14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 0, i64 896, i1 false)
  br label %for_body20.1

for_begin25.preheader:                            ; preds = %for_end27, %for_end21.3
  %indvars.iv27 = phi i64 [ 0, %for_end21.3 ], [ %indvars.iv.next28, %for_end27 ]
  %276 = mul nuw nsw i64 %indvars.iv27, 7
  %277 = add nuw nsw i64 %276, %572
  %278 = mul nuw nsw i64 %indvars.iv27, 224
  br label %for_body26

for_end24:                                        ; preds = %for_end27
  %279 = add nuw nsw i32 %206, 1
  %exitcond30 = icmp eq i32 %279, 112
  br i1 %exitcond30, label %for_end15, label %for_begin16.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv24 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next25, %for_body26 ]
  %280 = add nuw nsw i64 %277, %indvars.iv24
  %281 = add nuw nsw i64 %280, 784
  %282 = add nuw nsw i64 %280, 1568
  %283 = add nuw nsw i64 %280, 2352
  %284 = add nuw nsw i64 %280, 3136
  %285 = add nuw nsw i64 %280, 3920
  %286 = add nuw nsw i64 %280, 4704
  %287 = add nuw nsw i64 %280, 5488
  %288 = add nuw nsw i64 %280, 6272
  %289 = add nuw nsw i64 %280, 7056
  %290 = add nuw nsw i64 %280, 7840
  %291 = add nuw nsw i64 %280, 8624
  %292 = add nuw nsw i64 %280, 9408
  %293 = add nuw nsw i64 %280, 10192
  %294 = add nuw nsw i64 %280, 10976
  %295 = add nuw nsw i64 %280, 11760
  %296 = add nuw nsw i64 %280, 12544
  %297 = add nuw nsw i64 %280, 13328
  %298 = add nuw nsw i64 %280, 14112
  %299 = add nuw nsw i64 %280, 14896
  %300 = add nuw nsw i64 %280, 15680
  %301 = add nuw nsw i64 %280, 16464
  %302 = add nuw nsw i64 %280, 17248
  %303 = add nuw nsw i64 %280, 18032
  %304 = add nuw nsw i64 %280, 18816
  %305 = add nuw nsw i64 %280, 19600
  %306 = add nuw nsw i64 %280, 20384
  %307 = add nuw nsw i64 %280, 21168
  %308 = add nuw nsw i64 %280, 21952
  %309 = add nuw nsw i64 %280, 22736
  %310 = add nuw nsw i64 %280, 23520
  %311 = add nuw nsw i64 %280, 24304
  %312 = shl i64 %indvars.iv24, 5
  %313 = add nuw nsw i64 %312, %278
  %314 = getelementptr inbounds [28 x <32 x float>], [28 x <32 x float>]* %3, i64 0, i64 0, i64 %313
  %315 = bitcast float* %314 to <32 x float>*
  %316 = load <32 x float>, <32 x float>* %315, align 16, !tbaa !876
  %317 = getelementptr inbounds float, float* %14, i64 %280
  %318 = extractelement <32 x float> %316, i64 0
  store float %318, float* %317, align 4, !tbaa !879
  %319 = getelementptr inbounds float, float* %14, i64 %281
  %320 = extractelement <32 x float> %316, i64 1
  store float %320, float* %319, align 4, !tbaa !879
  %321 = getelementptr inbounds float, float* %14, i64 %282
  %322 = extractelement <32 x float> %316, i64 2
  store float %322, float* %321, align 4, !tbaa !879
  %323 = getelementptr inbounds float, float* %14, i64 %283
  %324 = extractelement <32 x float> %316, i64 3
  store float %324, float* %323, align 4, !tbaa !879
  %325 = getelementptr inbounds float, float* %14, i64 %284
  %326 = extractelement <32 x float> %316, i64 4
  store float %326, float* %325, align 4, !tbaa !879
  %327 = getelementptr inbounds float, float* %14, i64 %285
  %328 = extractelement <32 x float> %316, i64 5
  store float %328, float* %327, align 4, !tbaa !879
  %329 = getelementptr inbounds float, float* %14, i64 %286
  %330 = extractelement <32 x float> %316, i64 6
  store float %330, float* %329, align 4, !tbaa !879
  %331 = getelementptr inbounds float, float* %14, i64 %287
  %332 = extractelement <32 x float> %316, i64 7
  store float %332, float* %331, align 4, !tbaa !879
  %333 = getelementptr inbounds float, float* %14, i64 %288
  %334 = extractelement <32 x float> %316, i64 8
  store float %334, float* %333, align 4, !tbaa !879
  %335 = getelementptr inbounds float, float* %14, i64 %289
  %336 = extractelement <32 x float> %316, i64 9
  store float %336, float* %335, align 4, !tbaa !879
  %337 = getelementptr inbounds float, float* %14, i64 %290
  %338 = extractelement <32 x float> %316, i64 10
  store float %338, float* %337, align 4, !tbaa !879
  %339 = getelementptr inbounds float, float* %14, i64 %291
  %340 = extractelement <32 x float> %316, i64 11
  store float %340, float* %339, align 4, !tbaa !879
  %341 = getelementptr inbounds float, float* %14, i64 %292
  %342 = extractelement <32 x float> %316, i64 12
  store float %342, float* %341, align 4, !tbaa !879
  %343 = getelementptr inbounds float, float* %14, i64 %293
  %344 = extractelement <32 x float> %316, i64 13
  store float %344, float* %343, align 4, !tbaa !879
  %345 = getelementptr inbounds float, float* %14, i64 %294
  %346 = extractelement <32 x float> %316, i64 14
  store float %346, float* %345, align 4, !tbaa !879
  %347 = getelementptr inbounds float, float* %14, i64 %295
  %348 = extractelement <32 x float> %316, i64 15
  store float %348, float* %347, align 4, !tbaa !879
  %349 = getelementptr inbounds float, float* %14, i64 %296
  %350 = extractelement <32 x float> %316, i64 16
  store float %350, float* %349, align 4, !tbaa !879
  %351 = getelementptr inbounds float, float* %14, i64 %297
  %352 = extractelement <32 x float> %316, i64 17
  store float %352, float* %351, align 4, !tbaa !879
  %353 = getelementptr inbounds float, float* %14, i64 %298
  %354 = extractelement <32 x float> %316, i64 18
  store float %354, float* %353, align 4, !tbaa !879
  %355 = getelementptr inbounds float, float* %14, i64 %299
  %356 = extractelement <32 x float> %316, i64 19
  store float %356, float* %355, align 4, !tbaa !879
  %357 = getelementptr inbounds float, float* %14, i64 %300
  %358 = extractelement <32 x float> %316, i64 20
  store float %358, float* %357, align 4, !tbaa !879
  %359 = getelementptr inbounds float, float* %14, i64 %301
  %360 = extractelement <32 x float> %316, i64 21
  store float %360, float* %359, align 4, !tbaa !879
  %361 = getelementptr inbounds float, float* %14, i64 %302
  %362 = extractelement <32 x float> %316, i64 22
  store float %362, float* %361, align 4, !tbaa !879
  %363 = getelementptr inbounds float, float* %14, i64 %303
  %364 = extractelement <32 x float> %316, i64 23
  store float %364, float* %363, align 4, !tbaa !879
  %365 = getelementptr inbounds float, float* %14, i64 %304
  %366 = extractelement <32 x float> %316, i64 24
  store float %366, float* %365, align 4, !tbaa !879
  %367 = getelementptr inbounds float, float* %14, i64 %305
  %368 = extractelement <32 x float> %316, i64 25
  store float %368, float* %367, align 4, !tbaa !879
  %369 = getelementptr inbounds float, float* %14, i64 %306
  %370 = extractelement <32 x float> %316, i64 26
  store float %370, float* %369, align 4, !tbaa !879
  %371 = getelementptr inbounds float, float* %14, i64 %307
  %372 = extractelement <32 x float> %316, i64 27
  store float %372, float* %371, align 4, !tbaa !879
  %373 = getelementptr inbounds float, float* %14, i64 %308
  %374 = extractelement <32 x float> %316, i64 28
  store float %374, float* %373, align 4, !tbaa !879
  %375 = getelementptr inbounds float, float* %14, i64 %309
  %376 = extractelement <32 x float> %316, i64 29
  store float %376, float* %375, align 4, !tbaa !879
  %377 = getelementptr inbounds float, float* %14, i64 %310
  %378 = extractelement <32 x float> %316, i64 30
  store float %378, float* %377, align 4, !tbaa !879
  %379 = getelementptr inbounds float, float* %14, i64 %311
  %380 = extractelement <32 x float> %316, i64 31
  store float %380, float* %379, align 4, !tbaa !879
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond26 = icmp eq i64 %indvars.iv.next25, 7
  br i1 %exitcond26, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 4
  br i1 %exitcond29, label %for_end24, label %for_begin25.preheader, !prof !5

for_body20.1:                                     ; preds = %for_body20.1, %for_end21
  %indvars.iv.1 = phi i64 [ 0, %for_end21 ], [ %indvars.iv.next.1, %for_body20.1 ]
  %381 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %442, %for_body20.1 ]
  %382 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %435, %for_body20.1 ]
  %383 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %428, %for_body20.1 ]
  %384 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %421, %for_body20.1 ]
  %385 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %414, %for_body20.1 ]
  %386 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %407, %for_body20.1 ]
  %387 = phi <32 x float> [ zeroinitializer, %for_end21 ], [ %400, %for_body20.1 ]
  %388 = mul nuw nsw i64 %indvars.iv.1, 55
  %389 = add nuw nsw i64 %275, %388
  %390 = and i64 %389, 4294967295
  %391 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %390
  %392 = load float, float* %391, align 4, !tbaa !873
  %393 = insertelement <32 x float> undef, float %392, i32 0
  %394 = shufflevector <32 x float> %393, <32 x float> undef, <32 x i32> zeroinitializer
  %395 = shl i64 %indvars.iv.1, 5
  %396 = add nuw nsw i64 %395, %211
  %397 = getelementptr inbounds [1024 x <32 x float>], [1024 x <32 x float>]* %4, i64 0, i64 0, i64 %396
  %398 = bitcast float* %397 to <32 x float>*
  %399 = load <32 x float>, <32 x float>* %398, align 16, !tbaa !870
  %400 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %394, <32 x float> %399, <32 x float> %387)
  %401 = add nuw i64 %389, 2
  %402 = and i64 %401, 4294967295
  %403 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !873
  %405 = insertelement <32 x float> undef, float %404, i32 0
  %406 = shufflevector <32 x float> %405, <32 x float> undef, <32 x i32> zeroinitializer
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %399, <32 x float> %386)
  %408 = add nuw i64 %389, 4
  %409 = and i64 %408, 4294967295
  %410 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %409
  %411 = load float, float* %410, align 4, !tbaa !873
  %412 = insertelement <32 x float> undef, float %411, i32 0
  %413 = shufflevector <32 x float> %412, <32 x float> undef, <32 x i32> zeroinitializer
  %414 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %413, <32 x float> %399, <32 x float> %385)
  %415 = add nuw i64 %389, 6
  %416 = and i64 %415, 4294967295
  %417 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %416
  %418 = load float, float* %417, align 4, !tbaa !873
  %419 = insertelement <32 x float> undef, float %418, i32 0
  %420 = shufflevector <32 x float> %419, <32 x float> undef, <32 x i32> zeroinitializer
  %421 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %420, <32 x float> %399, <32 x float> %384)
  %422 = add nuw i64 %389, 8
  %423 = and i64 %422, 4294967295
  %424 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %423
  %425 = load float, float* %424, align 4, !tbaa !873
  %426 = insertelement <32 x float> undef, float %425, i32 0
  %427 = shufflevector <32 x float> %426, <32 x float> undef, <32 x i32> zeroinitializer
  %428 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %427, <32 x float> %399, <32 x float> %383)
  %429 = add nuw i64 %389, 10
  %430 = and i64 %429, 4294967295
  %431 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %430
  %432 = load float, float* %431, align 4, !tbaa !873
  %433 = insertelement <32 x float> undef, float %432, i32 0
  %434 = shufflevector <32 x float> %433, <32 x float> undef, <32 x i32> zeroinitializer
  %435 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %434, <32 x float> %399, <32 x float> %382)
  %436 = add nuw i64 %389, 12
  %437 = and i64 %436, 4294967295
  %438 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %437
  %439 = load float, float* %438, align 4, !tbaa !873
  %440 = insertelement <32 x float> undef, float %439, i32 0
  %441 = shufflevector <32 x float> %440, <32 x float> undef, <32 x i32> zeroinitializer
  %442 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %399, <32 x float> %381)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1, label %for_end21.1, label %for_body20.1, !prof !5

for_end21.1:                                      ; preds = %for_body20.1
  store <32 x float> %400, <32 x float>* %30, align 16, !tbaa !876
  store <32 x float> %407, <32 x float>* %32, align 16, !tbaa !876
  store <32 x float> %414, <32 x float>* %34, align 16, !tbaa !876
  store <32 x float> %421, <32 x float>* %36, align 16, !tbaa !876
  store <32 x float> %428, <32 x float>* %38, align 16, !tbaa !876
  store <32 x float> %435, <32 x float>* %40, align 16, !tbaa !876
  store <32 x float> %442, <32 x float>* %42, align 16, !tbaa !876
  %443 = or i64 %212, 28
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 0, i64 896, i1 false)
  br label %for_body20.2

for_body20.2:                                     ; preds = %for_body20.2, %for_end21.1
  %indvars.iv.2 = phi i64 [ 0, %for_end21.1 ], [ %indvars.iv.next.2, %for_body20.2 ]
  %444 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %505, %for_body20.2 ]
  %445 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %498, %for_body20.2 ]
  %446 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %491, %for_body20.2 ]
  %447 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %484, %for_body20.2 ]
  %448 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %477, %for_body20.2 ]
  %449 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %470, %for_body20.2 ]
  %450 = phi <32 x float> [ zeroinitializer, %for_end21.1 ], [ %463, %for_body20.2 ]
  %451 = mul nuw nsw i64 %indvars.iv.2, 55
  %452 = add nuw nsw i64 %443, %451
  %453 = and i64 %452, 4294967295
  %454 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %453
  %455 = load float, float* %454, align 4, !tbaa !873
  %456 = insertelement <32 x float> undef, float %455, i32 0
  %457 = shufflevector <32 x float> %456, <32 x float> undef, <32 x i32> zeroinitializer
  %458 = shl i64 %indvars.iv.2, 5
  %459 = add nuw nsw i64 %458, %211
  %460 = getelementptr inbounds [1024 x <32 x float>], [1024 x <32 x float>]* %4, i64 0, i64 0, i64 %459
  %461 = bitcast float* %460 to <32 x float>*
  %462 = load <32 x float>, <32 x float>* %461, align 16, !tbaa !870
  %463 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %457, <32 x float> %462, <32 x float> %450)
  %464 = add nuw i64 %452, 2
  %465 = and i64 %464, 4294967295
  %466 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %465
  %467 = load float, float* %466, align 4, !tbaa !873
  %468 = insertelement <32 x float> undef, float %467, i32 0
  %469 = shufflevector <32 x float> %468, <32 x float> undef, <32 x i32> zeroinitializer
  %470 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %469, <32 x float> %462, <32 x float> %449)
  %471 = add nuw i64 %452, 4
  %472 = and i64 %471, 4294967295
  %473 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %472
  %474 = load float, float* %473, align 4, !tbaa !873
  %475 = insertelement <32 x float> undef, float %474, i32 0
  %476 = shufflevector <32 x float> %475, <32 x float> undef, <32 x i32> zeroinitializer
  %477 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %476, <32 x float> %462, <32 x float> %448)
  %478 = add nuw i64 %452, 6
  %479 = and i64 %478, 4294967295
  %480 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %479
  %481 = load float, float* %480, align 4, !tbaa !873
  %482 = insertelement <32 x float> undef, float %481, i32 0
  %483 = shufflevector <32 x float> %482, <32 x float> undef, <32 x i32> zeroinitializer
  %484 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %483, <32 x float> %462, <32 x float> %447)
  %485 = add nuw i64 %452, 8
  %486 = and i64 %485, 4294967295
  %487 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %486
  %488 = load float, float* %487, align 4, !tbaa !873
  %489 = insertelement <32 x float> undef, float %488, i32 0
  %490 = shufflevector <32 x float> %489, <32 x float> undef, <32 x i32> zeroinitializer
  %491 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %490, <32 x float> %462, <32 x float> %446)
  %492 = add nuw i64 %452, 10
  %493 = and i64 %492, 4294967295
  %494 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %493
  %495 = load float, float* %494, align 4, !tbaa !873
  %496 = insertelement <32 x float> undef, float %495, i32 0
  %497 = shufflevector <32 x float> %496, <32 x float> undef, <32 x i32> zeroinitializer
  %498 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %497, <32 x float> %462, <32 x float> %445)
  %499 = add nuw i64 %452, 12
  %500 = and i64 %499, 4294967295
  %501 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %500
  %502 = load float, float* %501, align 4, !tbaa !873
  %503 = insertelement <32 x float> undef, float %502, i32 0
  %504 = shufflevector <32 x float> %503, <32 x float> undef, <32 x i32> zeroinitializer
  %505 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %504, <32 x float> %462, <32 x float> %444)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 256
  br i1 %exitcond.2, label %for_end21.2, label %for_body20.2, !prof !5

for_end21.2:                                      ; preds = %for_body20.2
  store <32 x float> %463, <32 x float>* %45, align 16, !tbaa !876
  store <32 x float> %470, <32 x float>* %47, align 16, !tbaa !876
  store <32 x float> %477, <32 x float>* %49, align 16, !tbaa !876
  store <32 x float> %484, <32 x float>* %51, align 16, !tbaa !876
  store <32 x float> %491, <32 x float>* %53, align 16, !tbaa !876
  store <32 x float> %498, <32 x float>* %55, align 16, !tbaa !876
  store <32 x float> %505, <32 x float>* %57, align 16, !tbaa !876
  %506 = or i64 %212, 42
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %73, i8 0, i64 896, i1 false)
  br label %for_body20.3

for_body20.3:                                     ; preds = %for_body20.3, %for_end21.2
  %indvars.iv.3 = phi i64 [ 0, %for_end21.2 ], [ %indvars.iv.next.3, %for_body20.3 ]
  %507 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %568, %for_body20.3 ]
  %508 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %561, %for_body20.3 ]
  %509 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %554, %for_body20.3 ]
  %510 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %547, %for_body20.3 ]
  %511 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %540, %for_body20.3 ]
  %512 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %533, %for_body20.3 ]
  %513 = phi <32 x float> [ zeroinitializer, %for_end21.2 ], [ %526, %for_body20.3 ]
  %514 = mul nuw nsw i64 %indvars.iv.3, 55
  %515 = add nuw nsw i64 %506, %514
  %516 = and i64 %515, 4294967295
  %517 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %516
  %518 = load float, float* %517, align 4, !tbaa !873
  %519 = insertelement <32 x float> undef, float %518, i32 0
  %520 = shufflevector <32 x float> %519, <32 x float> undef, <32 x i32> zeroinitializer
  %521 = shl i64 %indvars.iv.3, 5
  %522 = add nuw nsw i64 %521, %211
  %523 = getelementptr inbounds [1024 x <32 x float>], [1024 x <32 x float>]* %4, i64 0, i64 0, i64 %522
  %524 = bitcast float* %523 to <32 x float>*
  %525 = load <32 x float>, <32 x float>* %524, align 16, !tbaa !870
  %526 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %525, <32 x float> %513)
  %527 = add nuw i64 %515, 2
  %528 = and i64 %527, 4294967295
  %529 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %528
  %530 = load float, float* %529, align 4, !tbaa !873
  %531 = insertelement <32 x float> undef, float %530, i32 0
  %532 = shufflevector <32 x float> %531, <32 x float> undef, <32 x i32> zeroinitializer
  %533 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %532, <32 x float> %525, <32 x float> %512)
  %534 = add nuw i64 %515, 4
  %535 = and i64 %534, 4294967295
  %536 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %535
  %537 = load float, float* %536, align 4, !tbaa !873
  %538 = insertelement <32 x float> undef, float %537, i32 0
  %539 = shufflevector <32 x float> %538, <32 x float> undef, <32 x i32> zeroinitializer
  %540 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %539, <32 x float> %525, <32 x float> %511)
  %541 = add nuw i64 %515, 6
  %542 = and i64 %541, 4294967295
  %543 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %542
  %544 = load float, float* %543, align 4, !tbaa !873
  %545 = insertelement <32 x float> undef, float %544, i32 0
  %546 = shufflevector <32 x float> %545, <32 x float> undef, <32 x i32> zeroinitializer
  %547 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %546, <32 x float> %525, <32 x float> %510)
  %548 = add nuw i64 %515, 8
  %549 = and i64 %548, 4294967295
  %550 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %549
  %551 = load float, float* %550, align 4, !tbaa !873
  %552 = insertelement <32 x float> undef, float %551, i32 0
  %553 = shufflevector <32 x float> %552, <32 x float> undef, <32 x i32> zeroinitializer
  %554 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %553, <32 x float> %525, <32 x float> %509)
  %555 = add nuw i64 %515, 10
  %556 = and i64 %555, 4294967295
  %557 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %556
  %558 = load float, float* %557, align 4, !tbaa !873
  %559 = insertelement <32 x float> undef, float %558, i32 0
  %560 = shufflevector <32 x float> %559, <32 x float> undef, <32 x i32> zeroinitializer
  %561 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %560, <32 x float> %525, <32 x float> %508)
  %562 = add nuw i64 %515, 12
  %563 = and i64 %562, 4294967295
  %564 = getelementptr inbounds [774400 x float], [774400 x float]* %5, i64 0, i64 %563
  %565 = load float, float* %564, align 4, !tbaa !873
  %566 = insertelement <32 x float> undef, float %565, i32 0
  %567 = shufflevector <32 x float> %566, <32 x float> undef, <32 x i32> zeroinitializer
  %568 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %567, <32 x float> %525, <32 x float> %507)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3, label %for_end21.3, label %for_body20.3, !prof !5

for_end21.3:                                      ; preds = %for_body20.3
  store <32 x float> %526, <32 x float>* %60, align 16, !tbaa !876
  store <32 x float> %533, <32 x float>* %62, align 16, !tbaa !876
  store <32 x float> %540, <32 x float>* %64, align 16, !tbaa !876
  store <32 x float> %547, <32 x float>* %66, align 16, !tbaa !876
  store <32 x float> %554, <32 x float>* %68, align 16, !tbaa !876
  store <32 x float> %561, <32 x float>* %70, align 16, !tbaa !876
  store <32 x float> %568, <32 x float>* %72, align 16, !tbaa !876
  %569 = mul nuw nsw i32 %207, 28
  %570 = mul nsw i32 %209, 25088
  %571 = add nuw nsw i32 %570, %569
  %572 = zext i32 %571 to i64
  br label %for_begin25.preheader
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_6(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_6_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_6_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv4, 3136
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv1, 56
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !882
  %9 = fcmp ogt <4 x float> %wide.load, zeroinitializer
  %10 = select <4 x i1> %9, <4 x float> %wide.load, <4 x float> zeroinitializer
  %11 = getelementptr inbounds float, float* %3, i64 %6
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !885
  %13 = or i64 %6, 4
  %14 = getelementptr inbounds float, float* %2, i64 %13
  %15 = bitcast float* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !882
  %16 = fcmp ogt <4 x float> %wide.load.1, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> %wide.load.1, <4 x float> zeroinitializer
  %18 = getelementptr inbounds float, float* %3, i64 %13
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !885
  %20 = add nuw nsw i64 %6, 8
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = bitcast float* %21 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !882
  %23 = fcmp ogt <4 x float> %wide.load.2, zeroinitializer
  %24 = select <4 x i1> %23, <4 x float> %wide.load.2, <4 x float> zeroinitializer
  %25 = getelementptr inbounds float, float* %3, i64 %20
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> %24, <4 x float>* %26, align 4, !tbaa !885
  %27 = add nuw nsw i64 %6, 12
  %28 = getelementptr inbounds float, float* %2, i64 %27
  %29 = bitcast float* %28 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !882
  %30 = fcmp ogt <4 x float> %wide.load.3, zeroinitializer
  %31 = select <4 x i1> %30, <4 x float> %wide.load.3, <4 x float> zeroinitializer
  %32 = getelementptr inbounds float, float* %3, i64 %27
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !885
  %34 = add nuw nsw i64 %6, 16
  %35 = getelementptr inbounds float, float* %2, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !882
  %37 = fcmp ogt <4 x float> %wide.load.4, zeroinitializer
  %38 = select <4 x i1> %37, <4 x float> %wide.load.4, <4 x float> zeroinitializer
  %39 = getelementptr inbounds float, float* %3, i64 %34
  %40 = bitcast float* %39 to <4 x float>*
  store <4 x float> %38, <4 x float>* %40, align 4, !tbaa !885
  %41 = add nuw nsw i64 %6, 20
  %42 = getelementptr inbounds float, float* %2, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !882
  %44 = fcmp ogt <4 x float> %wide.load.5, zeroinitializer
  %45 = select <4 x i1> %44, <4 x float> %wide.load.5, <4 x float> zeroinitializer
  %46 = getelementptr inbounds float, float* %3, i64 %41
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !885
  %48 = add nuw nsw i64 %6, 24
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !882
  %51 = fcmp ogt <4 x float> %wide.load.6, zeroinitializer
  %52 = select <4 x i1> %51, <4 x float> %wide.load.6, <4 x float> zeroinitializer
  %53 = getelementptr inbounds float, float* %3, i64 %48
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !885
  %55 = add nuw nsw i64 %6, 28
  %56 = getelementptr inbounds float, float* %2, i64 %55
  %57 = bitcast float* %56 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !882
  %58 = fcmp ogt <4 x float> %wide.load.7, zeroinitializer
  %59 = select <4 x i1> %58, <4 x float> %wide.load.7, <4 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %3, i64 %55
  %61 = bitcast float* %60 to <4 x float>*
  store <4 x float> %59, <4 x float>* %61, align 4, !tbaa !885
  %62 = add nuw nsw i64 %6, 32
  %63 = getelementptr inbounds float, float* %2, i64 %62
  %64 = bitcast float* %63 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !882
  %65 = fcmp ogt <4 x float> %wide.load.8, zeroinitializer
  %66 = select <4 x i1> %65, <4 x float> %wide.load.8, <4 x float> zeroinitializer
  %67 = getelementptr inbounds float, float* %3, i64 %62
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %66, <4 x float>* %68, align 4, !tbaa !885
  %69 = add nuw nsw i64 %6, 36
  %70 = getelementptr inbounds float, float* %2, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !882
  %72 = fcmp ogt <4 x float> %wide.load.9, zeroinitializer
  %73 = select <4 x i1> %72, <4 x float> %wide.load.9, <4 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %3, i64 %69
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !885
  %76 = add nuw nsw i64 %6, 40
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !882
  %79 = fcmp ogt <4 x float> %wide.load.10, zeroinitializer
  %80 = select <4 x i1> %79, <4 x float> %wide.load.10, <4 x float> zeroinitializer
  %81 = getelementptr inbounds float, float* %3, i64 %76
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !885
  %83 = add nuw nsw i64 %6, 44
  %84 = getelementptr inbounds float, float* %2, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !882
  %86 = fcmp ogt <4 x float> %wide.load.11, zeroinitializer
  %87 = select <4 x i1> %86, <4 x float> %wide.load.11, <4 x float> zeroinitializer
  %88 = getelementptr inbounds float, float* %3, i64 %83
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4, !tbaa !885
  %90 = add nuw nsw i64 %6, 48
  %91 = getelementptr inbounds float, float* %2, i64 %90
  %92 = bitcast float* %91 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !882
  %93 = fcmp ogt <4 x float> %wide.load.12, zeroinitializer
  %94 = select <4 x i1> %93, <4 x float> %wide.load.12, <4 x float> zeroinitializer
  %95 = getelementptr inbounds float, float* %3, i64 %90
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %94, <4 x float>* %96, align 4, !tbaa !885
  %97 = add nuw nsw i64 %6, 52
  %98 = getelementptr inbounds float, float* %2, i64 %97
  %99 = bitcast float* %98 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !882
  %100 = fcmp ogt <4 x float> %wide.load.13, zeroinitializer
  %101 = select <4 x i1> %100, <4 x float> %wide.load.13, <4 x float> zeroinitializer
  %102 = getelementptr inbounds float, float* %3, i64 %97
  %103 = bitcast float* %102 to <4 x float>*
  store <4 x float> %101, <4 x float>* %103, align 4, !tbaa !885
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_4_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_4_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [4096 x <64 x float>], align 16
  %5 = alloca [50176 x float], align 16
  br label %for_begin4.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %entry
  %indvar35 = phi i64 [ 0, %entry ], [ %indvar.next36, %for_begin4.preheader ]
  %6 = mul nuw nsw i64 %indvar35, 14
  %scevgep = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %6
  %scevgep37 = bitcast float* %scevgep to i8*
  %7 = mul nuw nsw i64 %indvar35, 784
  %scevgep38 = getelementptr i8, i8* %0, i64 %7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37, i8* align 4 %scevgep38, i64 56, i1 false)
  %indvar.next36 = add nuw nsw i64 %indvar35, 1
  %exitcond39 = icmp eq i64 %indvar.next36, 256
  br i1 %exitcond39, label %for_begin4.preheader.1, label %for_begin4.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_end3.13
  %indvars.iv29 = phi i64 [ 0, %for_end3.13 ], [ %indvars.iv.next30, %for_end12 ]
  %8 = shl nsw i64 %indvars.iv29, 14
  br label %for_body11

for_begin13.preheader:                            ; preds = %for_end12
  %9 = bitcast i8* %2 to float*
  br label %for_begin16.preheader

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv26 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next27, %for_body11 ]
  %10 = shl i64 %indvars.iv26, 6
  %11 = add nuw nsw i64 %10, %8
  %12 = add nuw nsw i64 %indvars.iv26, %8
  %13 = add nuw nsw i64 %12, 256
  %14 = add nuw nsw i64 %12, 512
  %15 = add nuw nsw i64 %12, 768
  %16 = add nuw nsw i64 %12, 1024
  %17 = add nuw nsw i64 %12, 1280
  %18 = add nuw nsw i64 %12, 1536
  %19 = add nuw nsw i64 %12, 1792
  %20 = add nuw nsw i64 %12, 2048
  %21 = add nuw nsw i64 %12, 2304
  %22 = add nuw nsw i64 %12, 2560
  %23 = add nuw nsw i64 %12, 2816
  %24 = add nuw nsw i64 %12, 3072
  %25 = add nuw nsw i64 %12, 3328
  %26 = add nuw nsw i64 %12, 3584
  %27 = add nuw nsw i64 %12, 3840
  %28 = add nuw nsw i64 %12, 4096
  %29 = add nuw nsw i64 %12, 4352
  %30 = add nuw nsw i64 %12, 4608
  %31 = add nuw nsw i64 %12, 4864
  %32 = add nuw nsw i64 %12, 5120
  %33 = add nuw nsw i64 %12, 5376
  %34 = add nuw nsw i64 %12, 5632
  %35 = add nuw nsw i64 %12, 5888
  %36 = add nuw nsw i64 %12, 6144
  %37 = add nuw nsw i64 %12, 6400
  %38 = add nuw nsw i64 %12, 6656
  %39 = add nuw nsw i64 %12, 6912
  %40 = add nuw nsw i64 %12, 7168
  %41 = add nuw nsw i64 %12, 7424
  %42 = add nuw nsw i64 %12, 7680
  %43 = add nuw nsw i64 %12, 7936
  %44 = add nuw nsw i64 %12, 8192
  %45 = add nuw nsw i64 %12, 8448
  %46 = add nuw nsw i64 %12, 8704
  %47 = add nuw nsw i64 %12, 8960
  %48 = add nuw nsw i64 %12, 9216
  %49 = add nuw nsw i64 %12, 9472
  %50 = add nuw nsw i64 %12, 9728
  %51 = add nuw nsw i64 %12, 9984
  %52 = add nuw nsw i64 %12, 10240
  %53 = add nuw nsw i64 %12, 10496
  %54 = add nuw nsw i64 %12, 10752
  %55 = add nuw nsw i64 %12, 11008
  %56 = add nuw nsw i64 %12, 11264
  %57 = add nuw nsw i64 %12, 11520
  %58 = add nuw nsw i64 %12, 11776
  %59 = add nuw nsw i64 %12, 12032
  %60 = add nuw nsw i64 %12, 12288
  %61 = add nuw nsw i64 %12, 12544
  %62 = add nuw nsw i64 %12, 12800
  %63 = add nuw nsw i64 %12, 13056
  %64 = add nuw nsw i64 %12, 13312
  %65 = add nuw nsw i64 %12, 13568
  %66 = add nuw nsw i64 %12, 13824
  %67 = add nuw nsw i64 %12, 14080
  %68 = add nuw nsw i64 %12, 14336
  %69 = add nuw nsw i64 %12, 14592
  %70 = add nuw nsw i64 %12, 14848
  %71 = add nuw nsw i64 %12, 15104
  %72 = add nuw nsw i64 %12, 15360
  %73 = add nuw nsw i64 %12, 15616
  %74 = add nuw nsw i64 %12, 15872
  %75 = add nuw nsw i64 %12, 16128
  %76 = getelementptr inbounds float, float* %658, i64 %12
  %77 = load float, float* %76, align 4, !tbaa !888
  %78 = insertelement <64 x float> undef, float %77, i32 0
  %79 = getelementptr inbounds float, float* %658, i64 %13
  %80 = load float, float* %79, align 4, !tbaa !888
  %81 = insertelement <64 x float> %78, float %80, i32 1
  %82 = getelementptr inbounds float, float* %658, i64 %14
  %83 = load float, float* %82, align 4, !tbaa !888
  %84 = insertelement <64 x float> %81, float %83, i32 2
  %85 = getelementptr inbounds float, float* %658, i64 %15
  %86 = load float, float* %85, align 4, !tbaa !888
  %87 = insertelement <64 x float> %84, float %86, i32 3
  %88 = getelementptr inbounds float, float* %658, i64 %16
  %89 = load float, float* %88, align 4, !tbaa !888
  %90 = insertelement <64 x float> %87, float %89, i32 4
  %91 = getelementptr inbounds float, float* %658, i64 %17
  %92 = load float, float* %91, align 4, !tbaa !888
  %93 = insertelement <64 x float> %90, float %92, i32 5
  %94 = getelementptr inbounds float, float* %658, i64 %18
  %95 = load float, float* %94, align 4, !tbaa !888
  %96 = insertelement <64 x float> %93, float %95, i32 6
  %97 = getelementptr inbounds float, float* %658, i64 %19
  %98 = load float, float* %97, align 4, !tbaa !888
  %99 = insertelement <64 x float> %96, float %98, i32 7
  %100 = getelementptr inbounds float, float* %658, i64 %20
  %101 = load float, float* %100, align 4, !tbaa !888
  %102 = insertelement <64 x float> %99, float %101, i32 8
  %103 = getelementptr inbounds float, float* %658, i64 %21
  %104 = load float, float* %103, align 4, !tbaa !888
  %105 = insertelement <64 x float> %102, float %104, i32 9
  %106 = getelementptr inbounds float, float* %658, i64 %22
  %107 = load float, float* %106, align 4, !tbaa !888
  %108 = insertelement <64 x float> %105, float %107, i32 10
  %109 = getelementptr inbounds float, float* %658, i64 %23
  %110 = load float, float* %109, align 4, !tbaa !888
  %111 = insertelement <64 x float> %108, float %110, i32 11
  %112 = getelementptr inbounds float, float* %658, i64 %24
  %113 = load float, float* %112, align 4, !tbaa !888
  %114 = insertelement <64 x float> %111, float %113, i32 12
  %115 = getelementptr inbounds float, float* %658, i64 %25
  %116 = load float, float* %115, align 4, !tbaa !888
  %117 = insertelement <64 x float> %114, float %116, i32 13
  %118 = getelementptr inbounds float, float* %658, i64 %26
  %119 = load float, float* %118, align 4, !tbaa !888
  %120 = insertelement <64 x float> %117, float %119, i32 14
  %121 = getelementptr inbounds float, float* %658, i64 %27
  %122 = load float, float* %121, align 4, !tbaa !888
  %123 = insertelement <64 x float> %120, float %122, i32 15
  %124 = getelementptr inbounds float, float* %658, i64 %28
  %125 = load float, float* %124, align 4, !tbaa !888
  %126 = insertelement <64 x float> %123, float %125, i32 16
  %127 = getelementptr inbounds float, float* %658, i64 %29
  %128 = load float, float* %127, align 4, !tbaa !888
  %129 = insertelement <64 x float> %126, float %128, i32 17
  %130 = getelementptr inbounds float, float* %658, i64 %30
  %131 = load float, float* %130, align 4, !tbaa !888
  %132 = insertelement <64 x float> %129, float %131, i32 18
  %133 = getelementptr inbounds float, float* %658, i64 %31
  %134 = load float, float* %133, align 4, !tbaa !888
  %135 = insertelement <64 x float> %132, float %134, i32 19
  %136 = getelementptr inbounds float, float* %658, i64 %32
  %137 = load float, float* %136, align 4, !tbaa !888
  %138 = insertelement <64 x float> %135, float %137, i32 20
  %139 = getelementptr inbounds float, float* %658, i64 %33
  %140 = load float, float* %139, align 4, !tbaa !888
  %141 = insertelement <64 x float> %138, float %140, i32 21
  %142 = getelementptr inbounds float, float* %658, i64 %34
  %143 = load float, float* %142, align 4, !tbaa !888
  %144 = insertelement <64 x float> %141, float %143, i32 22
  %145 = getelementptr inbounds float, float* %658, i64 %35
  %146 = load float, float* %145, align 4, !tbaa !888
  %147 = insertelement <64 x float> %144, float %146, i32 23
  %148 = getelementptr inbounds float, float* %658, i64 %36
  %149 = load float, float* %148, align 4, !tbaa !888
  %150 = insertelement <64 x float> %147, float %149, i32 24
  %151 = getelementptr inbounds float, float* %658, i64 %37
  %152 = load float, float* %151, align 4, !tbaa !888
  %153 = insertelement <64 x float> %150, float %152, i32 25
  %154 = getelementptr inbounds float, float* %658, i64 %38
  %155 = load float, float* %154, align 4, !tbaa !888
  %156 = insertelement <64 x float> %153, float %155, i32 26
  %157 = getelementptr inbounds float, float* %658, i64 %39
  %158 = load float, float* %157, align 4, !tbaa !888
  %159 = insertelement <64 x float> %156, float %158, i32 27
  %160 = getelementptr inbounds float, float* %658, i64 %40
  %161 = load float, float* %160, align 4, !tbaa !888
  %162 = insertelement <64 x float> %159, float %161, i32 28
  %163 = getelementptr inbounds float, float* %658, i64 %41
  %164 = load float, float* %163, align 4, !tbaa !888
  %165 = insertelement <64 x float> %162, float %164, i32 29
  %166 = getelementptr inbounds float, float* %658, i64 %42
  %167 = load float, float* %166, align 4, !tbaa !888
  %168 = insertelement <64 x float> %165, float %167, i32 30
  %169 = getelementptr inbounds float, float* %658, i64 %43
  %170 = load float, float* %169, align 4, !tbaa !888
  %171 = insertelement <64 x float> %168, float %170, i32 31
  %172 = getelementptr inbounds float, float* %658, i64 %44
  %173 = load float, float* %172, align 4, !tbaa !888
  %174 = insertelement <64 x float> %171, float %173, i32 32
  %175 = getelementptr inbounds float, float* %658, i64 %45
  %176 = load float, float* %175, align 4, !tbaa !888
  %177 = insertelement <64 x float> %174, float %176, i32 33
  %178 = getelementptr inbounds float, float* %658, i64 %46
  %179 = load float, float* %178, align 4, !tbaa !888
  %180 = insertelement <64 x float> %177, float %179, i32 34
  %181 = getelementptr inbounds float, float* %658, i64 %47
  %182 = load float, float* %181, align 4, !tbaa !888
  %183 = insertelement <64 x float> %180, float %182, i32 35
  %184 = getelementptr inbounds float, float* %658, i64 %48
  %185 = load float, float* %184, align 4, !tbaa !888
  %186 = insertelement <64 x float> %183, float %185, i32 36
  %187 = getelementptr inbounds float, float* %658, i64 %49
  %188 = load float, float* %187, align 4, !tbaa !888
  %189 = insertelement <64 x float> %186, float %188, i32 37
  %190 = getelementptr inbounds float, float* %658, i64 %50
  %191 = load float, float* %190, align 4, !tbaa !888
  %192 = insertelement <64 x float> %189, float %191, i32 38
  %193 = getelementptr inbounds float, float* %658, i64 %51
  %194 = load float, float* %193, align 4, !tbaa !888
  %195 = insertelement <64 x float> %192, float %194, i32 39
  %196 = getelementptr inbounds float, float* %658, i64 %52
  %197 = load float, float* %196, align 4, !tbaa !888
  %198 = insertelement <64 x float> %195, float %197, i32 40
  %199 = getelementptr inbounds float, float* %658, i64 %53
  %200 = load float, float* %199, align 4, !tbaa !888
  %201 = insertelement <64 x float> %198, float %200, i32 41
  %202 = getelementptr inbounds float, float* %658, i64 %54
  %203 = load float, float* %202, align 4, !tbaa !888
  %204 = insertelement <64 x float> %201, float %203, i32 42
  %205 = getelementptr inbounds float, float* %658, i64 %55
  %206 = load float, float* %205, align 4, !tbaa !888
  %207 = insertelement <64 x float> %204, float %206, i32 43
  %208 = getelementptr inbounds float, float* %658, i64 %56
  %209 = load float, float* %208, align 4, !tbaa !888
  %210 = insertelement <64 x float> %207, float %209, i32 44
  %211 = getelementptr inbounds float, float* %658, i64 %57
  %212 = load float, float* %211, align 4, !tbaa !888
  %213 = insertelement <64 x float> %210, float %212, i32 45
  %214 = getelementptr inbounds float, float* %658, i64 %58
  %215 = load float, float* %214, align 4, !tbaa !888
  %216 = insertelement <64 x float> %213, float %215, i32 46
  %217 = getelementptr inbounds float, float* %658, i64 %59
  %218 = load float, float* %217, align 4, !tbaa !888
  %219 = insertelement <64 x float> %216, float %218, i32 47
  %220 = getelementptr inbounds float, float* %658, i64 %60
  %221 = load float, float* %220, align 4, !tbaa !888
  %222 = insertelement <64 x float> %219, float %221, i32 48
  %223 = getelementptr inbounds float, float* %658, i64 %61
  %224 = load float, float* %223, align 4, !tbaa !888
  %225 = insertelement <64 x float> %222, float %224, i32 49
  %226 = getelementptr inbounds float, float* %658, i64 %62
  %227 = load float, float* %226, align 4, !tbaa !888
  %228 = insertelement <64 x float> %225, float %227, i32 50
  %229 = getelementptr inbounds float, float* %658, i64 %63
  %230 = load float, float* %229, align 4, !tbaa !888
  %231 = insertelement <64 x float> %228, float %230, i32 51
  %232 = getelementptr inbounds float, float* %658, i64 %64
  %233 = load float, float* %232, align 4, !tbaa !888
  %234 = insertelement <64 x float> %231, float %233, i32 52
  %235 = getelementptr inbounds float, float* %658, i64 %65
  %236 = load float, float* %235, align 4, !tbaa !888
  %237 = insertelement <64 x float> %234, float %236, i32 53
  %238 = getelementptr inbounds float, float* %658, i64 %66
  %239 = load float, float* %238, align 4, !tbaa !888
  %240 = insertelement <64 x float> %237, float %239, i32 54
  %241 = getelementptr inbounds float, float* %658, i64 %67
  %242 = load float, float* %241, align 4, !tbaa !888
  %243 = insertelement <64 x float> %240, float %242, i32 55
  %244 = getelementptr inbounds float, float* %658, i64 %68
  %245 = load float, float* %244, align 4, !tbaa !888
  %246 = insertelement <64 x float> %243, float %245, i32 56
  %247 = getelementptr inbounds float, float* %658, i64 %69
  %248 = load float, float* %247, align 4, !tbaa !888
  %249 = insertelement <64 x float> %246, float %248, i32 57
  %250 = getelementptr inbounds float, float* %658, i64 %70
  %251 = load float, float* %250, align 4, !tbaa !888
  %252 = insertelement <64 x float> %249, float %251, i32 58
  %253 = getelementptr inbounds float, float* %658, i64 %71
  %254 = load float, float* %253, align 4, !tbaa !888
  %255 = insertelement <64 x float> %252, float %254, i32 59
  %256 = getelementptr inbounds float, float* %658, i64 %72
  %257 = load float, float* %256, align 4, !tbaa !888
  %258 = insertelement <64 x float> %255, float %257, i32 60
  %259 = getelementptr inbounds float, float* %658, i64 %73
  %260 = load float, float* %259, align 4, !tbaa !888
  %261 = insertelement <64 x float> %258, float %260, i32 61
  %262 = getelementptr inbounds float, float* %658, i64 %74
  %263 = load float, float* %262, align 4, !tbaa !888
  %264 = insertelement <64 x float> %261, float %263, i32 62
  %265 = getelementptr inbounds float, float* %658, i64 %75
  %266 = load float, float* %265, align 4, !tbaa !888
  %267 = insertelement <64 x float> %264, float %266, i32 63
  %268 = getelementptr inbounds [4096 x <64 x float>], [4096 x <64 x float>]* %4, i64 0, i64 0, i64 %11
  %269 = bitcast float* %268 to <64 x float>*
  store <64 x float> %267, <64 x float>* %269, align 16, !tbaa !891
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %exitcond28 = icmp eq i64 %indvars.iv.next27, 256
  br i1 %exitcond28, label %for_end12, label %for_body11, !prof !5

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp eq i64 %indvars.iv.next30, 16
  br i1 %exitcond31, label %for_begin13.preheader, label %for_begin10.preheader, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_begin13.preheader
  %270 = phi i32 [ 0, %for_begin13.preheader ], [ %341, %for_end24 ]
  %271 = urem i32 %270, 7
  %272 = mul nuw nsw i32 %271, 7168
  %273 = udiv i32 %270, 7
  %274 = shl i32 %273, 14
  %275 = sext i32 %274 to i64
  %276 = zext i32 %272 to i64
  br label %for_body17

for_end15:                                        ; preds = %for_end24
  ret void

for_begin22.preheader:                            ; preds = %for_end21
  %277 = mul nuw nsw i32 %271, 28
  %278 = mul nsw i32 %273, 12544
  %279 = or i32 %278, %277
  %280 = zext i32 %279 to i64
  br label %for_begin25.preheader

for_body17:                                       ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv12 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next13, %for_end21 ]
  %281 = shl nsw i64 %indvars.iv12, 7
  %282 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %281
  %283 = bitcast float* %282 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %283, align 16, !tbaa !894
  %284 = or i64 %281, 64
  %285 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %284
  %286 = bitcast float* %285 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %286, align 16, !tbaa !894
  %287 = add nuw nsw i64 %281, 896
  %288 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %287
  %289 = bitcast float* %288 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %289, align 16, !tbaa !894
  %290 = add nuw nsw i64 %281, 960
  %291 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %290
  %292 = bitcast float* %291 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %292, align 16, !tbaa !894
  %293 = shl nuw nsw i64 %indvars.iv12, 1
  %294 = add nuw nsw i64 %293, %276
  %295 = trunc i64 %294 to i32
  br label %for_body20

for_body20:                                       ; preds = %for_body20, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body20 ]
  %296 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %336, %for_body20 ]
  %297 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %329, %for_body20 ]
  %298 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %322, %for_body20 ]
  %299 = phi <64 x float> [ zeroinitializer, %for_body17 ], [ %315, %for_body20 ]
  %300 = phi i32 [ 0, %for_body17 ], [ %337, %for_body20 ]
  %301 = mul nuw nsw i64 %indvars.iv, 14
  %302 = mul nuw nsw i32 %300, 14
  %303 = add nuw nsw i64 %294, %301
  %304 = add nsw i32 %302, %295
  %305 = and i64 %303, 4294967294
  %306 = getelementptr inbounds [50176 x float], [50176 x float]* %5, i64 0, i64 %305
  %307 = load float, float* %306, align 8, !tbaa !897
  %308 = insertelement <64 x float> undef, float %307, i32 0
  %309 = shufflevector <64 x float> %308, <64 x float> undef, <64 x i32> zeroinitializer
  %310 = shl i64 %indvars.iv, 6
  %311 = add nuw nsw i64 %310, %275
  %312 = getelementptr inbounds [4096 x <64 x float>], [4096 x <64 x float>]* %4, i64 0, i64 0, i64 %311
  %313 = bitcast float* %312 to <64 x float>*
  %314 = load <64 x float>, <64 x float>* %313, align 16, !tbaa !891
  %315 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %309, <64 x float> %314, <64 x float> %299)
  %316 = or i32 %304, 1
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [50176 x float], [50176 x float]* %5, i64 0, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !897
  %320 = insertelement <64 x float> undef, float %319, i32 0
  %321 = shufflevector <64 x float> %320, <64 x float> undef, <64 x i32> zeroinitializer
  %322 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %321, <64 x float> %314, <64 x float> %298)
  %323 = add nuw i64 %303, 3584
  %324 = and i64 %323, 4294967294
  %325 = getelementptr inbounds [50176 x float], [50176 x float]* %5, i64 0, i64 %324
  %326 = load float, float* %325, align 8, !tbaa !897
  %327 = insertelement <64 x float> undef, float %326, i32 0
  %328 = shufflevector <64 x float> %327, <64 x float> undef, <64 x i32> zeroinitializer
  %329 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %328, <64 x float> %314, <64 x float> %297)
  %330 = add nuw i64 %303, 3585
  %331 = and i64 %330, 4294967295
  %332 = getelementptr inbounds [50176 x float], [50176 x float]* %5, i64 0, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !897
  %334 = insertelement <64 x float> undef, float %333, i32 0
  %335 = shufflevector <64 x float> %334, <64 x float> undef, <64 x i32> zeroinitializer
  %336 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %335, <64 x float> %314, <64 x float> %296)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %337 = add nuw nsw i32 %300, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <64 x float> %315, <64 x float>* %283, align 16, !tbaa !894
  store <64 x float> %322, <64 x float>* %286, align 16, !tbaa !894
  store <64 x float> %329, <64 x float>* %289, align 16, !tbaa !894
  store <64 x float> %336, <64 x float>* %292, align 16, !tbaa !894
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp eq i64 %indvars.iv.next13, 7
  br i1 %exitcond14, label %for_begin22.preheader, label %for_body17, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_begin22.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin22.preheader ], [ %indvars.iv.next23, %for_end27 ]
  %338 = shl nuw nsw i64 %indvars.iv22, 1
  %339 = add nuw nsw i64 %338, %280
  %340 = shl i64 %indvars.iv22, 7
  br label %for_begin28.preheader

for_end24:                                        ; preds = %for_end27
  %341 = add nuw nsw i32 %270, 1
  %exitcond25 = icmp eq i32 %341, 112
  br i1 %exitcond25, label %for_end15, label %for_begin16.preheader, !prof !5

for_begin28.preheader:                            ; preds = %for_end30, %for_begin25.preheader
  %indvars.iv19 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next20, %for_end30 ]
  %342 = mul nuw nsw i64 %indvars.iv19, 14
  %343 = add nuw nsw i64 %339, %342
  %344 = mul nuw nsw i64 %indvars.iv19, 896
  %345 = add nuw nsw i64 %344, %340
  br label %for_body29

for_end27:                                        ; preds = %for_end30
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 7
  br i1 %exitcond24, label %for_end24, label %for_begin25.preheader, !prof !5

for_body29:                                       ; preds = %for_body29, %for_begin28.preheader
  %indvars.iv16 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next17, %for_body29 ]
  %346 = add nuw nsw i64 %343, %indvars.iv16
  %347 = shl i64 %indvars.iv16, 6
  %348 = add nuw nsw i64 %345, %347
  %349 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %348
  %350 = bitcast float* %349 to <64 x float>*
  %351 = load <64 x float>, <64 x float>* %350, align 16, !tbaa !894
  %352 = getelementptr inbounds float, float* %9, i64 %346
  %353 = extractelement <64 x float> %351, i64 0
  store float %353, float* %352, align 4, !tbaa !900
  %354 = shl i64 %346, 32
  %sext = add i64 %354, 841813590016
  %355 = ashr exact i64 %sext, 32
  %356 = getelementptr inbounds float, float* %9, i64 %355
  %357 = extractelement <64 x float> %351, i64 1
  store float %357, float* %356, align 4, !tbaa !900
  %358 = shl i64 %346, 32
  %sext41 = add i64 %358, 1683627180032
  %359 = ashr exact i64 %sext41, 32
  %360 = getelementptr inbounds float, float* %9, i64 %359
  %361 = extractelement <64 x float> %351, i64 2
  store float %361, float* %360, align 4, !tbaa !900
  %362 = shl i64 %346, 32
  %sext42 = add i64 %362, 2525440770048
  %363 = ashr exact i64 %sext42, 32
  %364 = getelementptr inbounds float, float* %9, i64 %363
  %365 = extractelement <64 x float> %351, i64 3
  store float %365, float* %364, align 4, !tbaa !900
  %366 = shl i64 %346, 32
  %sext43 = add i64 %366, 3367254360064
  %367 = ashr exact i64 %sext43, 32
  %368 = getelementptr inbounds float, float* %9, i64 %367
  %369 = extractelement <64 x float> %351, i64 4
  store float %369, float* %368, align 4, !tbaa !900
  %370 = shl i64 %346, 32
  %sext44 = add i64 %370, 4209067950080
  %371 = ashr exact i64 %sext44, 32
  %372 = getelementptr inbounds float, float* %9, i64 %371
  %373 = extractelement <64 x float> %351, i64 5
  store float %373, float* %372, align 4, !tbaa !900
  %374 = shl i64 %346, 32
  %sext45 = add i64 %374, 5050881540096
  %375 = ashr exact i64 %sext45, 32
  %376 = getelementptr inbounds float, float* %9, i64 %375
  %377 = extractelement <64 x float> %351, i64 6
  store float %377, float* %376, align 4, !tbaa !900
  %378 = shl i64 %346, 32
  %sext46 = add i64 %378, 5892695130112
  %379 = ashr exact i64 %sext46, 32
  %380 = getelementptr inbounds float, float* %9, i64 %379
  %381 = extractelement <64 x float> %351, i64 7
  store float %381, float* %380, align 4, !tbaa !900
  %382 = shl i64 %346, 32
  %sext47 = add i64 %382, 6734508720128
  %383 = ashr exact i64 %sext47, 32
  %384 = getelementptr inbounds float, float* %9, i64 %383
  %385 = extractelement <64 x float> %351, i64 8
  store float %385, float* %384, align 4, !tbaa !900
  %386 = shl i64 %346, 32
  %sext48 = add i64 %386, 7576322310144
  %387 = ashr exact i64 %sext48, 32
  %388 = getelementptr inbounds float, float* %9, i64 %387
  %389 = extractelement <64 x float> %351, i64 9
  store float %389, float* %388, align 4, !tbaa !900
  %390 = shl i64 %346, 32
  %sext49 = add i64 %390, 8418135900160
  %391 = ashr exact i64 %sext49, 32
  %392 = getelementptr inbounds float, float* %9, i64 %391
  %393 = extractelement <64 x float> %351, i64 10
  store float %393, float* %392, align 4, !tbaa !900
  %394 = shl i64 %346, 32
  %sext50 = add i64 %394, 9259949490176
  %395 = ashr exact i64 %sext50, 32
  %396 = getelementptr inbounds float, float* %9, i64 %395
  %397 = extractelement <64 x float> %351, i64 11
  store float %397, float* %396, align 4, !tbaa !900
  %398 = shl i64 %346, 32
  %sext51 = add i64 %398, 10101763080192
  %399 = ashr exact i64 %sext51, 32
  %400 = getelementptr inbounds float, float* %9, i64 %399
  %401 = extractelement <64 x float> %351, i64 12
  store float %401, float* %400, align 4, !tbaa !900
  %402 = shl i64 %346, 32
  %sext52 = add i64 %402, 10943576670208
  %403 = ashr exact i64 %sext52, 32
  %404 = getelementptr inbounds float, float* %9, i64 %403
  %405 = extractelement <64 x float> %351, i64 13
  store float %405, float* %404, align 4, !tbaa !900
  %406 = shl i64 %346, 32
  %sext53 = add i64 %406, 11785390260224
  %407 = ashr exact i64 %sext53, 32
  %408 = getelementptr inbounds float, float* %9, i64 %407
  %409 = extractelement <64 x float> %351, i64 14
  store float %409, float* %408, align 4, !tbaa !900
  %410 = shl i64 %346, 32
  %sext54 = add i64 %410, 12627203850240
  %411 = ashr exact i64 %sext54, 32
  %412 = getelementptr inbounds float, float* %9, i64 %411
  %413 = extractelement <64 x float> %351, i64 15
  store float %413, float* %412, align 4, !tbaa !900
  %414 = shl i64 %346, 32
  %sext55 = add i64 %414, 13469017440256
  %415 = ashr exact i64 %sext55, 32
  %416 = getelementptr inbounds float, float* %9, i64 %415
  %417 = extractelement <64 x float> %351, i64 16
  store float %417, float* %416, align 4, !tbaa !900
  %418 = shl i64 %346, 32
  %sext56 = add i64 %418, 14310831030272
  %419 = ashr exact i64 %sext56, 32
  %420 = getelementptr inbounds float, float* %9, i64 %419
  %421 = extractelement <64 x float> %351, i64 17
  store float %421, float* %420, align 4, !tbaa !900
  %422 = shl i64 %346, 32
  %sext57 = add i64 %422, 15152644620288
  %423 = ashr exact i64 %sext57, 32
  %424 = getelementptr inbounds float, float* %9, i64 %423
  %425 = extractelement <64 x float> %351, i64 18
  store float %425, float* %424, align 4, !tbaa !900
  %426 = shl i64 %346, 32
  %sext58 = add i64 %426, 15994458210304
  %427 = ashr exact i64 %sext58, 32
  %428 = getelementptr inbounds float, float* %9, i64 %427
  %429 = extractelement <64 x float> %351, i64 19
  store float %429, float* %428, align 4, !tbaa !900
  %430 = shl i64 %346, 32
  %sext59 = add i64 %430, 16836271800320
  %431 = ashr exact i64 %sext59, 32
  %432 = getelementptr inbounds float, float* %9, i64 %431
  %433 = extractelement <64 x float> %351, i64 20
  store float %433, float* %432, align 4, !tbaa !900
  %434 = shl i64 %346, 32
  %sext60 = add i64 %434, 17678085390336
  %435 = ashr exact i64 %sext60, 32
  %436 = getelementptr inbounds float, float* %9, i64 %435
  %437 = extractelement <64 x float> %351, i64 21
  store float %437, float* %436, align 4, !tbaa !900
  %438 = shl i64 %346, 32
  %sext61 = add i64 %438, 18519898980352
  %439 = ashr exact i64 %sext61, 32
  %440 = getelementptr inbounds float, float* %9, i64 %439
  %441 = extractelement <64 x float> %351, i64 22
  store float %441, float* %440, align 4, !tbaa !900
  %442 = shl i64 %346, 32
  %sext62 = add i64 %442, 19361712570368
  %443 = ashr exact i64 %sext62, 32
  %444 = getelementptr inbounds float, float* %9, i64 %443
  %445 = extractelement <64 x float> %351, i64 23
  store float %445, float* %444, align 4, !tbaa !900
  %446 = shl i64 %346, 32
  %sext63 = add i64 %446, 20203526160384
  %447 = ashr exact i64 %sext63, 32
  %448 = getelementptr inbounds float, float* %9, i64 %447
  %449 = extractelement <64 x float> %351, i64 24
  store float %449, float* %448, align 4, !tbaa !900
  %450 = shl i64 %346, 32
  %sext64 = add i64 %450, 21045339750400
  %451 = ashr exact i64 %sext64, 32
  %452 = getelementptr inbounds float, float* %9, i64 %451
  %453 = extractelement <64 x float> %351, i64 25
  store float %453, float* %452, align 4, !tbaa !900
  %454 = shl i64 %346, 32
  %sext65 = add i64 %454, 21887153340416
  %455 = ashr exact i64 %sext65, 32
  %456 = getelementptr inbounds float, float* %9, i64 %455
  %457 = extractelement <64 x float> %351, i64 26
  store float %457, float* %456, align 4, !tbaa !900
  %458 = shl i64 %346, 32
  %sext66 = add i64 %458, 22728966930432
  %459 = ashr exact i64 %sext66, 32
  %460 = getelementptr inbounds float, float* %9, i64 %459
  %461 = extractelement <64 x float> %351, i64 27
  store float %461, float* %460, align 4, !tbaa !900
  %462 = shl i64 %346, 32
  %sext67 = add i64 %462, 23570780520448
  %463 = ashr exact i64 %sext67, 32
  %464 = getelementptr inbounds float, float* %9, i64 %463
  %465 = extractelement <64 x float> %351, i64 28
  store float %465, float* %464, align 4, !tbaa !900
  %466 = shl i64 %346, 32
  %sext68 = add i64 %466, 24412594110464
  %467 = ashr exact i64 %sext68, 32
  %468 = getelementptr inbounds float, float* %9, i64 %467
  %469 = extractelement <64 x float> %351, i64 29
  store float %469, float* %468, align 4, !tbaa !900
  %470 = shl i64 %346, 32
  %sext69 = add i64 %470, 25254407700480
  %471 = ashr exact i64 %sext69, 32
  %472 = getelementptr inbounds float, float* %9, i64 %471
  %473 = extractelement <64 x float> %351, i64 30
  store float %473, float* %472, align 4, !tbaa !900
  %474 = shl i64 %346, 32
  %sext70 = add i64 %474, 26096221290496
  %475 = ashr exact i64 %sext70, 32
  %476 = getelementptr inbounds float, float* %9, i64 %475
  %477 = extractelement <64 x float> %351, i64 31
  store float %477, float* %476, align 4, !tbaa !900
  %478 = shl i64 %346, 32
  %sext71 = add i64 %478, 26938034880512
  %479 = ashr exact i64 %sext71, 32
  %480 = getelementptr inbounds float, float* %9, i64 %479
  %481 = extractelement <64 x float> %351, i64 32
  store float %481, float* %480, align 4, !tbaa !900
  %482 = shl i64 %346, 32
  %sext72 = add i64 %482, 27779848470528
  %483 = ashr exact i64 %sext72, 32
  %484 = getelementptr inbounds float, float* %9, i64 %483
  %485 = extractelement <64 x float> %351, i64 33
  store float %485, float* %484, align 4, !tbaa !900
  %486 = shl i64 %346, 32
  %sext73 = add i64 %486, 28621662060544
  %487 = ashr exact i64 %sext73, 32
  %488 = getelementptr inbounds float, float* %9, i64 %487
  %489 = extractelement <64 x float> %351, i64 34
  store float %489, float* %488, align 4, !tbaa !900
  %490 = shl i64 %346, 32
  %sext74 = add i64 %490, 29463475650560
  %491 = ashr exact i64 %sext74, 32
  %492 = getelementptr inbounds float, float* %9, i64 %491
  %493 = extractelement <64 x float> %351, i64 35
  store float %493, float* %492, align 4, !tbaa !900
  %494 = shl i64 %346, 32
  %sext75 = add i64 %494, 30305289240576
  %495 = ashr exact i64 %sext75, 32
  %496 = getelementptr inbounds float, float* %9, i64 %495
  %497 = extractelement <64 x float> %351, i64 36
  store float %497, float* %496, align 4, !tbaa !900
  %498 = shl i64 %346, 32
  %sext76 = add i64 %498, 31147102830592
  %499 = ashr exact i64 %sext76, 32
  %500 = getelementptr inbounds float, float* %9, i64 %499
  %501 = extractelement <64 x float> %351, i64 37
  store float %501, float* %500, align 4, !tbaa !900
  %502 = shl i64 %346, 32
  %sext77 = add i64 %502, 31988916420608
  %503 = ashr exact i64 %sext77, 32
  %504 = getelementptr inbounds float, float* %9, i64 %503
  %505 = extractelement <64 x float> %351, i64 38
  store float %505, float* %504, align 4, !tbaa !900
  %506 = shl i64 %346, 32
  %sext78 = add i64 %506, 32830730010624
  %507 = ashr exact i64 %sext78, 32
  %508 = getelementptr inbounds float, float* %9, i64 %507
  %509 = extractelement <64 x float> %351, i64 39
  store float %509, float* %508, align 4, !tbaa !900
  %510 = shl i64 %346, 32
  %sext79 = add i64 %510, 33672543600640
  %511 = ashr exact i64 %sext79, 32
  %512 = getelementptr inbounds float, float* %9, i64 %511
  %513 = extractelement <64 x float> %351, i64 40
  store float %513, float* %512, align 4, !tbaa !900
  %514 = shl i64 %346, 32
  %sext80 = add i64 %514, 34514357190656
  %515 = ashr exact i64 %sext80, 32
  %516 = getelementptr inbounds float, float* %9, i64 %515
  %517 = extractelement <64 x float> %351, i64 41
  store float %517, float* %516, align 4, !tbaa !900
  %518 = shl i64 %346, 32
  %sext81 = add i64 %518, 35356170780672
  %519 = ashr exact i64 %sext81, 32
  %520 = getelementptr inbounds float, float* %9, i64 %519
  %521 = extractelement <64 x float> %351, i64 42
  store float %521, float* %520, align 4, !tbaa !900
  %522 = shl i64 %346, 32
  %sext82 = add i64 %522, 36197984370688
  %523 = ashr exact i64 %sext82, 32
  %524 = getelementptr inbounds float, float* %9, i64 %523
  %525 = extractelement <64 x float> %351, i64 43
  store float %525, float* %524, align 4, !tbaa !900
  %526 = shl i64 %346, 32
  %sext83 = add i64 %526, 37039797960704
  %527 = ashr exact i64 %sext83, 32
  %528 = getelementptr inbounds float, float* %9, i64 %527
  %529 = extractelement <64 x float> %351, i64 44
  store float %529, float* %528, align 4, !tbaa !900
  %530 = shl i64 %346, 32
  %sext84 = add i64 %530, 37881611550720
  %531 = ashr exact i64 %sext84, 32
  %532 = getelementptr inbounds float, float* %9, i64 %531
  %533 = extractelement <64 x float> %351, i64 45
  store float %533, float* %532, align 4, !tbaa !900
  %534 = shl i64 %346, 32
  %sext85 = add i64 %534, 38723425140736
  %535 = ashr exact i64 %sext85, 32
  %536 = getelementptr inbounds float, float* %9, i64 %535
  %537 = extractelement <64 x float> %351, i64 46
  store float %537, float* %536, align 4, !tbaa !900
  %538 = shl i64 %346, 32
  %sext86 = add i64 %538, 39565238730752
  %539 = ashr exact i64 %sext86, 32
  %540 = getelementptr inbounds float, float* %9, i64 %539
  %541 = extractelement <64 x float> %351, i64 47
  store float %541, float* %540, align 4, !tbaa !900
  %542 = shl i64 %346, 32
  %sext87 = add i64 %542, 40407052320768
  %543 = ashr exact i64 %sext87, 32
  %544 = getelementptr inbounds float, float* %9, i64 %543
  %545 = extractelement <64 x float> %351, i64 48
  store float %545, float* %544, align 4, !tbaa !900
  %546 = shl i64 %346, 32
  %sext88 = add i64 %546, 41248865910784
  %547 = ashr exact i64 %sext88, 32
  %548 = getelementptr inbounds float, float* %9, i64 %547
  %549 = extractelement <64 x float> %351, i64 49
  store float %549, float* %548, align 4, !tbaa !900
  %550 = shl i64 %346, 32
  %sext89 = add i64 %550, 42090679500800
  %551 = ashr exact i64 %sext89, 32
  %552 = getelementptr inbounds float, float* %9, i64 %551
  %553 = extractelement <64 x float> %351, i64 50
  store float %553, float* %552, align 4, !tbaa !900
  %554 = shl i64 %346, 32
  %sext90 = add i64 %554, 42932493090816
  %555 = ashr exact i64 %sext90, 32
  %556 = getelementptr inbounds float, float* %9, i64 %555
  %557 = extractelement <64 x float> %351, i64 51
  store float %557, float* %556, align 4, !tbaa !900
  %558 = shl i64 %346, 32
  %sext91 = add i64 %558, 43774306680832
  %559 = ashr exact i64 %sext91, 32
  %560 = getelementptr inbounds float, float* %9, i64 %559
  %561 = extractelement <64 x float> %351, i64 52
  store float %561, float* %560, align 4, !tbaa !900
  %562 = shl i64 %346, 32
  %sext92 = add i64 %562, 44616120270848
  %563 = ashr exact i64 %sext92, 32
  %564 = getelementptr inbounds float, float* %9, i64 %563
  %565 = extractelement <64 x float> %351, i64 53
  store float %565, float* %564, align 4, !tbaa !900
  %566 = shl i64 %346, 32
  %sext93 = add i64 %566, 45457933860864
  %567 = ashr exact i64 %sext93, 32
  %568 = getelementptr inbounds float, float* %9, i64 %567
  %569 = extractelement <64 x float> %351, i64 54
  store float %569, float* %568, align 4, !tbaa !900
  %570 = shl i64 %346, 32
  %sext94 = add i64 %570, 46299747450880
  %571 = ashr exact i64 %sext94, 32
  %572 = getelementptr inbounds float, float* %9, i64 %571
  %573 = extractelement <64 x float> %351, i64 55
  store float %573, float* %572, align 4, !tbaa !900
  %574 = shl i64 %346, 32
  %sext95 = add i64 %574, 47141561040896
  %575 = ashr exact i64 %sext95, 32
  %576 = getelementptr inbounds float, float* %9, i64 %575
  %577 = extractelement <64 x float> %351, i64 56
  store float %577, float* %576, align 4, !tbaa !900
  %578 = shl i64 %346, 32
  %sext96 = add i64 %578, 47983374630912
  %579 = ashr exact i64 %sext96, 32
  %580 = getelementptr inbounds float, float* %9, i64 %579
  %581 = extractelement <64 x float> %351, i64 57
  store float %581, float* %580, align 4, !tbaa !900
  %582 = shl i64 %346, 32
  %sext97 = add i64 %582, 48825188220928
  %583 = ashr exact i64 %sext97, 32
  %584 = getelementptr inbounds float, float* %9, i64 %583
  %585 = extractelement <64 x float> %351, i64 58
  store float %585, float* %584, align 4, !tbaa !900
  %586 = shl i64 %346, 32
  %sext98 = add i64 %586, 49667001810944
  %587 = ashr exact i64 %sext98, 32
  %588 = getelementptr inbounds float, float* %9, i64 %587
  %589 = extractelement <64 x float> %351, i64 59
  store float %589, float* %588, align 4, !tbaa !900
  %590 = shl i64 %346, 32
  %sext99 = add i64 %590, 50508815400960
  %591 = ashr exact i64 %sext99, 32
  %592 = getelementptr inbounds float, float* %9, i64 %591
  %593 = extractelement <64 x float> %351, i64 60
  store float %593, float* %592, align 4, !tbaa !900
  %594 = shl i64 %346, 32
  %sext100 = add i64 %594, 51350628990976
  %595 = ashr exact i64 %sext100, 32
  %596 = getelementptr inbounds float, float* %9, i64 %595
  %597 = extractelement <64 x float> %351, i64 61
  store float %597, float* %596, align 4, !tbaa !900
  %598 = shl i64 %346, 32
  %sext101 = add i64 %598, 52192442580992
  %599 = ashr exact i64 %sext101, 32
  %600 = getelementptr inbounds float, float* %9, i64 %599
  %601 = extractelement <64 x float> %351, i64 62
  store float %601, float* %600, align 4, !tbaa !900
  %602 = shl i64 %346, 32
  %sext102 = add i64 %602, 53034256171008
  %603 = ashr exact i64 %sext102, 32
  %604 = getelementptr inbounds float, float* %9, i64 %603
  %605 = extractelement <64 x float> %351, i64 63
  store float %605, float* %604, align 4, !tbaa !900
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond18 = icmp eq i64 %indvars.iv.next17, 2
  br i1 %exitcond18, label %for_end30, label %for_body29, !prof !5

for_end30:                                        ; preds = %for_body29
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond21 = icmp eq i64 %indvars.iv.next20, 2
  br i1 %exitcond21, label %for_end27, label %for_begin28.preheader, !prof !5

for_begin4.preheader.1:                           ; preds = %for_begin4.preheader, %for_begin4.preheader.1
  %indvar35.1 = phi i64 [ %indvar.next36.1, %for_begin4.preheader.1 ], [ 0, %for_begin4.preheader ]
  %606 = mul nuw nsw i64 %indvar35.1, 14
  %607 = add nuw nsw i64 %606, 3584
  %scevgep.1 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %607
  %scevgep37.1 = bitcast float* %scevgep.1 to i8*
  %608 = mul nuw nsw i64 %indvar35.1, 784
  %609 = add nuw nsw i64 %608, 56
  %scevgep38.1 = getelementptr i8, i8* %0, i64 %609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.1, i8* align 4 %scevgep38.1, i64 56, i1 false)
  %indvar.next36.1 = add nuw nsw i64 %indvar35.1, 1
  %exitcond39.1 = icmp eq i64 %indvar.next36.1, 256
  br i1 %exitcond39.1, label %for_begin4.preheader.2, label %for_begin4.preheader.1, !prof !5

for_begin4.preheader.2:                           ; preds = %for_begin4.preheader.1, %for_begin4.preheader.2
  %indvar35.2 = phi i64 [ %indvar.next36.2, %for_begin4.preheader.2 ], [ 0, %for_begin4.preheader.1 ]
  %610 = mul nuw nsw i64 %indvar35.2, 14
  %611 = add nuw nsw i64 %610, 7168
  %scevgep.2 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %611
  %scevgep37.2 = bitcast float* %scevgep.2 to i8*
  %612 = mul nuw nsw i64 %indvar35.2, 784
  %613 = add nuw nsw i64 %612, 112
  %scevgep38.2 = getelementptr i8, i8* %0, i64 %613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.2, i8* align 4 %scevgep38.2, i64 56, i1 false)
  %indvar.next36.2 = add nuw nsw i64 %indvar35.2, 1
  %exitcond39.2 = icmp eq i64 %indvar.next36.2, 256
  br i1 %exitcond39.2, label %for_begin4.preheader.3, label %for_begin4.preheader.2, !prof !5

for_begin4.preheader.3:                           ; preds = %for_begin4.preheader.2, %for_begin4.preheader.3
  %indvar35.3 = phi i64 [ %indvar.next36.3, %for_begin4.preheader.3 ], [ 0, %for_begin4.preheader.2 ]
  %614 = mul nuw nsw i64 %indvar35.3, 14
  %615 = add nuw nsw i64 %614, 10752
  %scevgep.3 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %615
  %scevgep37.3 = bitcast float* %scevgep.3 to i8*
  %616 = mul nuw nsw i64 %indvar35.3, 784
  %617 = add nuw nsw i64 %616, 168
  %scevgep38.3 = getelementptr i8, i8* %0, i64 %617
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.3, i8* align 4 %scevgep38.3, i64 56, i1 false)
  %indvar.next36.3 = add nuw nsw i64 %indvar35.3, 1
  %exitcond39.3 = icmp eq i64 %indvar.next36.3, 256
  br i1 %exitcond39.3, label %for_begin4.preheader.4, label %for_begin4.preheader.3, !prof !5

for_begin4.preheader.4:                           ; preds = %for_begin4.preheader.3, %for_begin4.preheader.4
  %indvar35.4 = phi i64 [ %indvar.next36.4, %for_begin4.preheader.4 ], [ 0, %for_begin4.preheader.3 ]
  %618 = mul nuw nsw i64 %indvar35.4, 14
  %619 = add nuw nsw i64 %618, 14336
  %scevgep.4 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %619
  %scevgep37.4 = bitcast float* %scevgep.4 to i8*
  %620 = mul nuw nsw i64 %indvar35.4, 784
  %621 = add nuw nsw i64 %620, 224
  %scevgep38.4 = getelementptr i8, i8* %0, i64 %621
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.4, i8* align 4 %scevgep38.4, i64 56, i1 false)
  %indvar.next36.4 = add nuw nsw i64 %indvar35.4, 1
  %exitcond39.4 = icmp eq i64 %indvar.next36.4, 256
  br i1 %exitcond39.4, label %for_begin4.preheader.5, label %for_begin4.preheader.4, !prof !5

for_begin4.preheader.5:                           ; preds = %for_begin4.preheader.4, %for_begin4.preheader.5
  %indvar35.5 = phi i64 [ %indvar.next36.5, %for_begin4.preheader.5 ], [ 0, %for_begin4.preheader.4 ]
  %622 = mul nuw nsw i64 %indvar35.5, 14
  %623 = add nuw nsw i64 %622, 17920
  %scevgep.5 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %623
  %scevgep37.5 = bitcast float* %scevgep.5 to i8*
  %624 = mul nuw nsw i64 %indvar35.5, 784
  %625 = add nuw nsw i64 %624, 280
  %scevgep38.5 = getelementptr i8, i8* %0, i64 %625
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.5, i8* align 4 %scevgep38.5, i64 56, i1 false)
  %indvar.next36.5 = add nuw nsw i64 %indvar35.5, 1
  %exitcond39.5 = icmp eq i64 %indvar.next36.5, 256
  br i1 %exitcond39.5, label %for_begin4.preheader.6, label %for_begin4.preheader.5, !prof !5

for_begin4.preheader.6:                           ; preds = %for_begin4.preheader.5, %for_begin4.preheader.6
  %indvar35.6 = phi i64 [ %indvar.next36.6, %for_begin4.preheader.6 ], [ 0, %for_begin4.preheader.5 ]
  %626 = mul nuw nsw i64 %indvar35.6, 14
  %627 = add nuw nsw i64 %626, 21504
  %scevgep.6 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %627
  %scevgep37.6 = bitcast float* %scevgep.6 to i8*
  %628 = mul nuw nsw i64 %indvar35.6, 784
  %629 = add nuw nsw i64 %628, 336
  %scevgep38.6 = getelementptr i8, i8* %0, i64 %629
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.6, i8* align 4 %scevgep38.6, i64 56, i1 false)
  %indvar.next36.6 = add nuw nsw i64 %indvar35.6, 1
  %exitcond39.6 = icmp eq i64 %indvar.next36.6, 256
  br i1 %exitcond39.6, label %for_begin4.preheader.7, label %for_begin4.preheader.6, !prof !5

for_begin4.preheader.7:                           ; preds = %for_begin4.preheader.6, %for_begin4.preheader.7
  %indvar35.7 = phi i64 [ %indvar.next36.7, %for_begin4.preheader.7 ], [ 0, %for_begin4.preheader.6 ]
  %630 = mul nuw nsw i64 %indvar35.7, 14
  %631 = add nuw nsw i64 %630, 25088
  %scevgep.7 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %631
  %scevgep37.7 = bitcast float* %scevgep.7 to i8*
  %632 = mul nuw nsw i64 %indvar35.7, 784
  %633 = add nuw nsw i64 %632, 392
  %scevgep38.7 = getelementptr i8, i8* %0, i64 %633
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.7, i8* align 4 %scevgep38.7, i64 56, i1 false)
  %indvar.next36.7 = add nuw nsw i64 %indvar35.7, 1
  %exitcond39.7 = icmp eq i64 %indvar.next36.7, 256
  br i1 %exitcond39.7, label %for_begin4.preheader.8, label %for_begin4.preheader.7, !prof !5

for_begin4.preheader.8:                           ; preds = %for_begin4.preheader.7, %for_begin4.preheader.8
  %indvar35.8 = phi i64 [ %indvar.next36.8, %for_begin4.preheader.8 ], [ 0, %for_begin4.preheader.7 ]
  %634 = mul nuw nsw i64 %indvar35.8, 14
  %635 = add nuw nsw i64 %634, 28672
  %scevgep.8 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %635
  %scevgep37.8 = bitcast float* %scevgep.8 to i8*
  %636 = mul nuw nsw i64 %indvar35.8, 784
  %637 = add nuw nsw i64 %636, 448
  %scevgep38.8 = getelementptr i8, i8* %0, i64 %637
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.8, i8* align 4 %scevgep38.8, i64 56, i1 false)
  %indvar.next36.8 = add nuw nsw i64 %indvar35.8, 1
  %exitcond39.8 = icmp eq i64 %indvar.next36.8, 256
  br i1 %exitcond39.8, label %for_begin4.preheader.9, label %for_begin4.preheader.8, !prof !5

for_begin4.preheader.9:                           ; preds = %for_begin4.preheader.8, %for_begin4.preheader.9
  %indvar35.9 = phi i64 [ %indvar.next36.9, %for_begin4.preheader.9 ], [ 0, %for_begin4.preheader.8 ]
  %638 = mul nuw nsw i64 %indvar35.9, 14
  %639 = add nuw nsw i64 %638, 32256
  %scevgep.9 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %639
  %scevgep37.9 = bitcast float* %scevgep.9 to i8*
  %640 = mul nuw nsw i64 %indvar35.9, 784
  %641 = add nuw nsw i64 %640, 504
  %scevgep38.9 = getelementptr i8, i8* %0, i64 %641
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.9, i8* align 4 %scevgep38.9, i64 56, i1 false)
  %indvar.next36.9 = add nuw nsw i64 %indvar35.9, 1
  %exitcond39.9 = icmp eq i64 %indvar.next36.9, 256
  br i1 %exitcond39.9, label %for_begin4.preheader.10, label %for_begin4.preheader.9, !prof !5

for_begin4.preheader.10:                          ; preds = %for_begin4.preheader.9, %for_begin4.preheader.10
  %indvar35.10 = phi i64 [ %indvar.next36.10, %for_begin4.preheader.10 ], [ 0, %for_begin4.preheader.9 ]
  %642 = mul nuw nsw i64 %indvar35.10, 14
  %643 = add nuw nsw i64 %642, 35840
  %scevgep.10 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %643
  %scevgep37.10 = bitcast float* %scevgep.10 to i8*
  %644 = mul nuw nsw i64 %indvar35.10, 784
  %645 = add nuw nsw i64 %644, 560
  %scevgep38.10 = getelementptr i8, i8* %0, i64 %645
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.10, i8* align 4 %scevgep38.10, i64 56, i1 false)
  %indvar.next36.10 = add nuw nsw i64 %indvar35.10, 1
  %exitcond39.10 = icmp eq i64 %indvar.next36.10, 256
  br i1 %exitcond39.10, label %for_begin4.preheader.11, label %for_begin4.preheader.10, !prof !5

for_begin4.preheader.11:                          ; preds = %for_begin4.preheader.10, %for_begin4.preheader.11
  %indvar35.11 = phi i64 [ %indvar.next36.11, %for_begin4.preheader.11 ], [ 0, %for_begin4.preheader.10 ]
  %646 = mul nuw nsw i64 %indvar35.11, 14
  %647 = add nuw nsw i64 %646, 39424
  %scevgep.11 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %647
  %scevgep37.11 = bitcast float* %scevgep.11 to i8*
  %648 = mul nuw nsw i64 %indvar35.11, 784
  %649 = add nuw nsw i64 %648, 616
  %scevgep38.11 = getelementptr i8, i8* %0, i64 %649
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.11, i8* align 4 %scevgep38.11, i64 56, i1 false)
  %indvar.next36.11 = add nuw nsw i64 %indvar35.11, 1
  %exitcond39.11 = icmp eq i64 %indvar.next36.11, 256
  br i1 %exitcond39.11, label %for_begin4.preheader.12, label %for_begin4.preheader.11, !prof !5

for_begin4.preheader.12:                          ; preds = %for_begin4.preheader.11, %for_begin4.preheader.12
  %indvar35.12 = phi i64 [ %indvar.next36.12, %for_begin4.preheader.12 ], [ 0, %for_begin4.preheader.11 ]
  %650 = mul nuw nsw i64 %indvar35.12, 14
  %651 = add nuw nsw i64 %650, 43008
  %scevgep.12 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %651
  %scevgep37.12 = bitcast float* %scevgep.12 to i8*
  %652 = mul nuw nsw i64 %indvar35.12, 784
  %653 = add nuw nsw i64 %652, 672
  %scevgep38.12 = getelementptr i8, i8* %0, i64 %653
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.12, i8* align 4 %scevgep38.12, i64 56, i1 false)
  %indvar.next36.12 = add nuw nsw i64 %indvar35.12, 1
  %exitcond39.12 = icmp eq i64 %indvar.next36.12, 256
  br i1 %exitcond39.12, label %for_begin4.preheader.13, label %for_begin4.preheader.12, !prof !5

for_begin4.preheader.13:                          ; preds = %for_begin4.preheader.12, %for_begin4.preheader.13
  %indvar35.13 = phi i64 [ %indvar.next36.13, %for_begin4.preheader.13 ], [ 0, %for_begin4.preheader.12 ]
  %654 = mul nuw nsw i64 %indvar35.13, 14
  %655 = add nuw nsw i64 %654, 46592
  %scevgep.13 = getelementptr [50176 x float], [50176 x float]* %5, i64 0, i64 %655
  %scevgep37.13 = bitcast float* %scevgep.13 to i8*
  %656 = mul nuw nsw i64 %indvar35.13, 784
  %657 = add nuw nsw i64 %656, 728
  %scevgep38.13 = getelementptr i8, i8* %0, i64 %657
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %scevgep37.13, i8* align 4 %scevgep38.13, i64 56, i1 false)
  %indvar.next36.13 = add nuw nsw i64 %indvar35.13, 1
  %exitcond39.13 = icmp eq i64 %indvar.next36.13, 256
  br i1 %exitcond39.13, label %for_end3.13, label %for_begin4.preheader.13, !prof !5

for_end3.13:                                      ; preds = %for_begin4.preheader.13
  %658 = bitcast i8* %1 to float*
  br label %for_begin10.preheader
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_9(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_9_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_9_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %7 = mul nuw nsw i64 %indvars.iv1, 56
  %8 = add nuw nsw i64 %7, %6
  %9 = getelementptr inbounds float, float* %3, i64 %8
  %10 = bitcast float* %9 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %10, align 4, !tbaa !903
  %11 = getelementptr inbounds float, float* %4, i64 %8
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load7 = load <4 x float>, <4 x float>* %12, align 4, !tbaa !906
  %13 = fadd <4 x float> %wide.load, %wide.load7
  %14 = getelementptr inbounds float, float* %5, i64 %8
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !909
  %16 = or i64 %8, 4
  %17 = getelementptr inbounds float, float* %3, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !903
  %19 = getelementptr inbounds float, float* %4, i64 %16
  %20 = bitcast float* %19 to <4 x float>*
  %wide.load7.1 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !906
  %21 = fadd <4 x float> %wide.load.1, %wide.load7.1
  %22 = getelementptr inbounds float, float* %5, i64 %16
  %23 = bitcast float* %22 to <4 x float>*
  store <4 x float> %21, <4 x float>* %23, align 4, !tbaa !909
  %24 = add nuw nsw i64 %8, 8
  %25 = getelementptr inbounds float, float* %3, i64 %24
  %26 = bitcast float* %25 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !903
  %27 = getelementptr inbounds float, float* %4, i64 %24
  %28 = bitcast float* %27 to <4 x float>*
  %wide.load7.2 = load <4 x float>, <4 x float>* %28, align 4, !tbaa !906
  %29 = fadd <4 x float> %wide.load.2, %wide.load7.2
  %30 = getelementptr inbounds float, float* %5, i64 %24
  %31 = bitcast float* %30 to <4 x float>*
  store <4 x float> %29, <4 x float>* %31, align 4, !tbaa !909
  %32 = add nuw nsw i64 %8, 12
  %33 = getelementptr inbounds float, float* %3, i64 %32
  %34 = bitcast float* %33 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !903
  %35 = getelementptr inbounds float, float* %4, i64 %32
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load7.3 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !906
  %37 = fadd <4 x float> %wide.load.3, %wide.load7.3
  %38 = getelementptr inbounds float, float* %5, i64 %32
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !909
  %40 = add nuw nsw i64 %8, 16
  %41 = getelementptr inbounds float, float* %3, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !903
  %43 = getelementptr inbounds float, float* %4, i64 %40
  %44 = bitcast float* %43 to <4 x float>*
  %wide.load7.4 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !906
  %45 = fadd <4 x float> %wide.load.4, %wide.load7.4
  %46 = getelementptr inbounds float, float* %5, i64 %40
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !909
  %48 = add nuw nsw i64 %8, 20
  %49 = getelementptr inbounds float, float* %3, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !903
  %51 = getelementptr inbounds float, float* %4, i64 %48
  %52 = bitcast float* %51 to <4 x float>*
  %wide.load7.5 = load <4 x float>, <4 x float>* %52, align 4, !tbaa !906
  %53 = fadd <4 x float> %wide.load.5, %wide.load7.5
  %54 = getelementptr inbounds float, float* %5, i64 %48
  %55 = bitcast float* %54 to <4 x float>*
  store <4 x float> %53, <4 x float>* %55, align 4, !tbaa !909
  %56 = add nuw nsw i64 %8, 24
  %57 = getelementptr inbounds float, float* %3, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %58, align 4, !tbaa !903
  %59 = getelementptr inbounds float, float* %4, i64 %56
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load7.6 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !906
  %61 = fadd <4 x float> %wide.load.6, %wide.load7.6
  %62 = getelementptr inbounds float, float* %5, i64 %56
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !909
  %64 = add nuw nsw i64 %8, 28
  %65 = getelementptr inbounds float, float* %3, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !903
  %67 = getelementptr inbounds float, float* %4, i64 %64
  %68 = bitcast float* %67 to <4 x float>*
  %wide.load7.7 = load <4 x float>, <4 x float>* %68, align 4, !tbaa !906
  %69 = fadd <4 x float> %wide.load.7, %wide.load7.7
  %70 = getelementptr inbounds float, float* %5, i64 %64
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 4, !tbaa !909
  %72 = add nuw nsw i64 %8, 32
  %73 = getelementptr inbounds float, float* %3, i64 %72
  %74 = bitcast float* %73 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !903
  %75 = getelementptr inbounds float, float* %4, i64 %72
  %76 = bitcast float* %75 to <4 x float>*
  %wide.load7.8 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !906
  %77 = fadd <4 x float> %wide.load.8, %wide.load7.8
  %78 = getelementptr inbounds float, float* %5, i64 %72
  %79 = bitcast float* %78 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !tbaa !909
  %80 = add nuw nsw i64 %8, 36
  %81 = getelementptr inbounds float, float* %3, i64 %80
  %82 = bitcast float* %81 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %82, align 4, !tbaa !903
  %83 = getelementptr inbounds float, float* %4, i64 %80
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load7.9 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !906
  %85 = fadd <4 x float> %wide.load.9, %wide.load7.9
  %86 = getelementptr inbounds float, float* %5, i64 %80
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !909
  %88 = add nuw nsw i64 %8, 40
  %89 = getelementptr inbounds float, float* %3, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !903
  %91 = getelementptr inbounds float, float* %4, i64 %88
  %92 = bitcast float* %91 to <4 x float>*
  %wide.load7.10 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !906
  %93 = fadd <4 x float> %wide.load.10, %wide.load7.10
  %94 = getelementptr inbounds float, float* %5, i64 %88
  %95 = bitcast float* %94 to <4 x float>*
  store <4 x float> %93, <4 x float>* %95, align 4, !tbaa !909
  %96 = add nuw nsw i64 %8, 44
  %97 = getelementptr inbounds float, float* %3, i64 %96
  %98 = bitcast float* %97 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %98, align 4, !tbaa !903
  %99 = getelementptr inbounds float, float* %4, i64 %96
  %100 = bitcast float* %99 to <4 x float>*
  %wide.load7.11 = load <4 x float>, <4 x float>* %100, align 4, !tbaa !906
  %101 = fadd <4 x float> %wide.load.11, %wide.load7.11
  %102 = getelementptr inbounds float, float* %5, i64 %96
  %103 = bitcast float* %102 to <4 x float>*
  store <4 x float> %101, <4 x float>* %103, align 4, !tbaa !909
  %104 = add nuw nsw i64 %8, 48
  %105 = getelementptr inbounds float, float* %3, i64 %104
  %106 = bitcast float* %105 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !903
  %107 = getelementptr inbounds float, float* %4, i64 %104
  %108 = bitcast float* %107 to <4 x float>*
  %wide.load7.12 = load <4 x float>, <4 x float>* %108, align 4, !tbaa !906
  %109 = fadd <4 x float> %wide.load.12, %wide.load7.12
  %110 = getelementptr inbounds float, float* %5, i64 %104
  %111 = bitcast float* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 4, !tbaa !909
  %112 = add nuw nsw i64 %8, 52
  %113 = getelementptr inbounds float, float* %3, i64 %112
  %114 = bitcast float* %113 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !903
  %115 = getelementptr inbounds float, float* %4, i64 %112
  %116 = bitcast float* %115 to <4 x float>*
  %wide.load7.13 = load <4 x float>, <4 x float>* %116, align 4, !tbaa !906
  %117 = fadd <4 x float> %wide.load.13, %wide.load7.13
  %118 = getelementptr inbounds float, float* %5, i64 %112
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %117, <4 x float>* %119, align 4, !tbaa !909
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_8(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_8_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_8_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !912
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !915
  %29 = fadd <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !918
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !915
  %36 = fadd <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !918
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !915
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !918
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !915
  %50 = fadd <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !918
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !915
  %57 = fadd <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !918
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !915
  %64 = fadd <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !918
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !915
  %71 = fadd <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !918
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 128
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_10(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_10_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_10_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !921
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !924
  %13 = fadd <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !927
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !924
  %19 = fadd <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !927
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !924
  %25 = fadd <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !927
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !924
  %31 = fadd <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !927
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !924
  %37 = fadd <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !927
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !924
  %43 = fadd <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !927
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !924
  %49 = fadd <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !927
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !924
  %55 = fadd <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !927
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !924
  %61 = fadd <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !927
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !924
  %67 = fadd <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !927
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !924
  %73 = fadd <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !927
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !924
  %79 = fadd <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !927
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !924
  %85 = fadd <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !927
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !924
  %91 = fadd <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !927
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_1_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %0 to float*
  %5 = bitcast i8* %1 to float*
  %6 = load float, float* %5, align 64, !tbaa !930
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %6, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !944
  %9 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %10 = getelementptr inbounds float, float* %4, i64 %index
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !947
  %index.next = add i64 %index, 4
  %12 = icmp eq i64 %index.next, 256
  br i1 %12, label %for_end, label %vector.body, !llvm.loop !950

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_expand_dims_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_expand_dims_1_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_expand_dims_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 1024, i1 false)
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_12(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_12_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_12_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [56 x <32 x float>], align 16
  %4 = alloca [512 x <32 x float>], align 16
  %5 = alloca [200704 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_begin1.preheader ]
  %6 = trunc i64 %indvar to i32
  %7 = mul nuw nsw i64 %indvar, 224
  %8 = trunc i64 %indvar to i32
  %9 = mul i32 %8, 56
  %10 = udiv i32 %6, 56
  %11 = mul i32 %10, 9408
  %12 = add i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %scevgep = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %7
  %scevgep58 = bitcast float* %scevgep to i8*
  %scevgep59 = getelementptr i8, i8* %0, i64 %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58, i8* align 4 %scevgep59, i64 224, i1 false)
  %15 = add nuw nsw i64 %7, 56
  %scevgep.1 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %15
  %scevgep58.1 = bitcast float* %scevgep.1 to i8*
  %16 = add nuw nsw i64 %14, 12544
  %scevgep59.1 = getelementptr i8, i8* %0, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.1, i8* align 4 %scevgep59.1, i64 224, i1 false)
  %17 = add nuw nsw i64 %7, 112
  %scevgep.2 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %17
  %scevgep58.2 = bitcast float* %scevgep.2 to i8*
  %18 = add nuw nsw i64 %14, 25088
  %scevgep59.2 = getelementptr i8, i8* %0, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.2, i8* align 4 %scevgep59.2, i64 224, i1 false)
  %19 = add nuw nsw i64 %7, 168
  %scevgep.3 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %19
  %scevgep58.3 = bitcast float* %scevgep.3 to i8*
  %20 = add nuw nsw i64 %14, 37632
  %scevgep59.3 = getelementptr i8, i8* %0, i64 %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep58.3, i8* align 4 %scevgep59.3, i64 224, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond61 = icmp eq i64 %indvar.next, 896
  br i1 %exitcond61, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin7.preheader:                             ; preds = %for_begin1.preheader
  %21 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv50 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next51, %for_end12 ]
  %22 = shl nsw i64 %indvars.iv50, 11
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %23 = bitcast i8* %2 to float*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv47 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next48, %for_end15 ]
  %24 = shl i64 %indvars.iv47, 7
  %25 = add nuw nsw i64 %24, %22
  %26 = shl i64 %indvars.iv47, 2
  %27 = add nuw nsw i64 %26, %22
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond52 = icmp eq i64 %indvars.iv.next51, 8
  br i1 %exitcond52, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv44 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next45, %for_body14 ]
  %28 = shl i64 %indvars.iv44, 5
  %29 = add nuw nsw i64 %25, %28
  %30 = add nuw nsw i64 %27, %indvars.iv44
  %31 = add nuw nsw i64 %30, 64
  %32 = add nuw nsw i64 %30, 128
  %33 = add nuw nsw i64 %30, 192
  %34 = add nuw nsw i64 %30, 256
  %35 = add nuw nsw i64 %30, 320
  %36 = add nuw nsw i64 %30, 384
  %37 = add nuw nsw i64 %30, 448
  %38 = add nuw nsw i64 %30, 512
  %39 = add nuw nsw i64 %30, 576
  %40 = add nuw nsw i64 %30, 640
  %41 = add nuw nsw i64 %30, 704
  %42 = add nuw nsw i64 %30, 768
  %43 = add nuw nsw i64 %30, 832
  %44 = add nuw nsw i64 %30, 896
  %45 = add nuw nsw i64 %30, 960
  %46 = add nuw nsw i64 %30, 1024
  %47 = add nuw nsw i64 %30, 1088
  %48 = add nuw nsw i64 %30, 1152
  %49 = add nuw nsw i64 %30, 1216
  %50 = add nuw nsw i64 %30, 1280
  %51 = add nuw nsw i64 %30, 1344
  %52 = add nuw nsw i64 %30, 1408
  %53 = add nuw nsw i64 %30, 1472
  %54 = add nuw nsw i64 %30, 1536
  %55 = add nuw nsw i64 %30, 1600
  %56 = add nuw nsw i64 %30, 1664
  %57 = add nuw nsw i64 %30, 1728
  %58 = add nuw nsw i64 %30, 1792
  %59 = add nuw nsw i64 %30, 1856
  %60 = add nuw nsw i64 %30, 1920
  %61 = add nuw nsw i64 %30, 1984
  %62 = getelementptr inbounds float, float* %21, i64 %30
  %63 = load float, float* %62, align 4, !tbaa !951
  %64 = insertelement <32 x float> undef, float %63, i32 0
  %65 = getelementptr inbounds float, float* %21, i64 %31
  %66 = load float, float* %65, align 4, !tbaa !951
  %67 = insertelement <32 x float> %64, float %66, i32 1
  %68 = getelementptr inbounds float, float* %21, i64 %32
  %69 = load float, float* %68, align 4, !tbaa !951
  %70 = insertelement <32 x float> %67, float %69, i32 2
  %71 = getelementptr inbounds float, float* %21, i64 %33
  %72 = load float, float* %71, align 4, !tbaa !951
  %73 = insertelement <32 x float> %70, float %72, i32 3
  %74 = getelementptr inbounds float, float* %21, i64 %34
  %75 = load float, float* %74, align 4, !tbaa !951
  %76 = insertelement <32 x float> %73, float %75, i32 4
  %77 = getelementptr inbounds float, float* %21, i64 %35
  %78 = load float, float* %77, align 4, !tbaa !951
  %79 = insertelement <32 x float> %76, float %78, i32 5
  %80 = getelementptr inbounds float, float* %21, i64 %36
  %81 = load float, float* %80, align 4, !tbaa !951
  %82 = insertelement <32 x float> %79, float %81, i32 6
  %83 = getelementptr inbounds float, float* %21, i64 %37
  %84 = load float, float* %83, align 4, !tbaa !951
  %85 = insertelement <32 x float> %82, float %84, i32 7
  %86 = getelementptr inbounds float, float* %21, i64 %38
  %87 = load float, float* %86, align 4, !tbaa !951
  %88 = insertelement <32 x float> %85, float %87, i32 8
  %89 = getelementptr inbounds float, float* %21, i64 %39
  %90 = load float, float* %89, align 4, !tbaa !951
  %91 = insertelement <32 x float> %88, float %90, i32 9
  %92 = getelementptr inbounds float, float* %21, i64 %40
  %93 = load float, float* %92, align 4, !tbaa !951
  %94 = insertelement <32 x float> %91, float %93, i32 10
  %95 = getelementptr inbounds float, float* %21, i64 %41
  %96 = load float, float* %95, align 4, !tbaa !951
  %97 = insertelement <32 x float> %94, float %96, i32 11
  %98 = getelementptr inbounds float, float* %21, i64 %42
  %99 = load float, float* %98, align 4, !tbaa !951
  %100 = insertelement <32 x float> %97, float %99, i32 12
  %101 = getelementptr inbounds float, float* %21, i64 %43
  %102 = load float, float* %101, align 4, !tbaa !951
  %103 = insertelement <32 x float> %100, float %102, i32 13
  %104 = getelementptr inbounds float, float* %21, i64 %44
  %105 = load float, float* %104, align 4, !tbaa !951
  %106 = insertelement <32 x float> %103, float %105, i32 14
  %107 = getelementptr inbounds float, float* %21, i64 %45
  %108 = load float, float* %107, align 4, !tbaa !951
  %109 = insertelement <32 x float> %106, float %108, i32 15
  %110 = getelementptr inbounds float, float* %21, i64 %46
  %111 = load float, float* %110, align 4, !tbaa !951
  %112 = insertelement <32 x float> %109, float %111, i32 16
  %113 = getelementptr inbounds float, float* %21, i64 %47
  %114 = load float, float* %113, align 4, !tbaa !951
  %115 = insertelement <32 x float> %112, float %114, i32 17
  %116 = getelementptr inbounds float, float* %21, i64 %48
  %117 = load float, float* %116, align 4, !tbaa !951
  %118 = insertelement <32 x float> %115, float %117, i32 18
  %119 = getelementptr inbounds float, float* %21, i64 %49
  %120 = load float, float* %119, align 4, !tbaa !951
  %121 = insertelement <32 x float> %118, float %120, i32 19
  %122 = getelementptr inbounds float, float* %21, i64 %50
  %123 = load float, float* %122, align 4, !tbaa !951
  %124 = insertelement <32 x float> %121, float %123, i32 20
  %125 = getelementptr inbounds float, float* %21, i64 %51
  %126 = load float, float* %125, align 4, !tbaa !951
  %127 = insertelement <32 x float> %124, float %126, i32 21
  %128 = getelementptr inbounds float, float* %21, i64 %52
  %129 = load float, float* %128, align 4, !tbaa !951
  %130 = insertelement <32 x float> %127, float %129, i32 22
  %131 = getelementptr inbounds float, float* %21, i64 %53
  %132 = load float, float* %131, align 4, !tbaa !951
  %133 = insertelement <32 x float> %130, float %132, i32 23
  %134 = getelementptr inbounds float, float* %21, i64 %54
  %135 = load float, float* %134, align 4, !tbaa !951
  %136 = insertelement <32 x float> %133, float %135, i32 24
  %137 = getelementptr inbounds float, float* %21, i64 %55
  %138 = load float, float* %137, align 4, !tbaa !951
  %139 = insertelement <32 x float> %136, float %138, i32 25
  %140 = getelementptr inbounds float, float* %21, i64 %56
  %141 = load float, float* %140, align 4, !tbaa !951
  %142 = insertelement <32 x float> %139, float %141, i32 26
  %143 = getelementptr inbounds float, float* %21, i64 %57
  %144 = load float, float* %143, align 4, !tbaa !951
  %145 = insertelement <32 x float> %142, float %144, i32 27
  %146 = getelementptr inbounds float, float* %21, i64 %58
  %147 = load float, float* %146, align 4, !tbaa !951
  %148 = insertelement <32 x float> %145, float %147, i32 28
  %149 = getelementptr inbounds float, float* %21, i64 %59
  %150 = load float, float* %149, align 4, !tbaa !951
  %151 = insertelement <32 x float> %148, float %150, i32 29
  %152 = getelementptr inbounds float, float* %21, i64 %60
  %153 = load float, float* %152, align 4, !tbaa !951
  %154 = insertelement <32 x float> %151, float %153, i32 30
  %155 = getelementptr inbounds float, float* %21, i64 %61
  %156 = load float, float* %155, align 4, !tbaa !951
  %157 = insertelement <32 x float> %154, float %156, i32 31
  %158 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %29
  %159 = bitcast float* %158 to <32 x float>*
  store <32 x float> %157, <32 x float>* %159, align 16, !tbaa !954
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond46 = icmp eq i64 %indvars.iv.next45, 4
  br i1 %exitcond46, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond49 = icmp eq i64 %indvars.iv.next48, 16
  br i1 %exitcond49, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end30, %for_begin16.preheader
  %160 = phi i32 [ 0, %for_begin16.preheader ], [ %411, %for_end30 ]
  %161 = urem i32 %160, 56
  %162 = mul nuw nsw i32 %161, 224
  %163 = udiv i32 %160, 56
  %164 = shl i32 %163, 11
  %165 = sext i32 %164 to i64
  %166 = zext i32 %162 to i64
  br label %for_body20

for_end18:                                        ; preds = %for_end30
  ret void

for_begin28.preheader:                            ; preds = %for_end24
  %167 = mul nuw nsw i32 %161, 56
  %168 = mul nsw i32 %163, 100352
  %169 = add nuw nsw i32 %168, %167
  %170 = zext i32 %169 to i64
  br label %for_begin31.preheader

for_body20:                                       ; preds = %for_end24, %for_begin19.preheader
  %indvars.iv34 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next35, %for_end24 ]
  %171 = mul nuw nsw i64 %indvars.iv34, 224
  %172 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %171
  %173 = bitcast float* %172 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %173, align 16, !tbaa !957
  %174 = add nuw nsw i64 %171, 32
  %175 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %174
  %176 = bitcast float* %175 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %176, align 16, !tbaa !957
  %177 = add nuw nsw i64 %171, 64
  %178 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %177
  %179 = bitcast float* %178 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %179, align 16, !tbaa !957
  %180 = add nuw nsw i64 %171, 96
  %181 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %180
  %182 = bitcast float* %181 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %182, align 16, !tbaa !957
  %183 = add nuw nsw i64 %171, 128
  %184 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %183
  %185 = bitcast float* %184 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %185, align 16, !tbaa !957
  %186 = add nuw nsw i64 %171, 160
  %187 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %186
  %188 = bitcast float* %187 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %188, align 16, !tbaa !957
  %189 = add nuw nsw i64 %171, 192
  %190 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %189
  %191 = bitcast float* %190 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %191, align 16, !tbaa !957
  %192 = mul nuw nsw i64 %indvars.iv34, 7
  %193 = add nuw nsw i64 %192, %166
  br label %for_begin25.preheader

for_begin25.preheader:                            ; preds = %for_begin25.preheader, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_begin25.preheader ]
  %.lcssa1427 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %407, %for_begin25.preheader ]
  %.lcssa1225 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %400, %for_begin25.preheader ]
  %.lcssa1023 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %393, %for_begin25.preheader ]
  %.lcssa821 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %386, %for_begin25.preheader ]
  %.lcssa619 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %379, %for_begin25.preheader ]
  %.lcssa417 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %372, %for_begin25.preheader ]
  %.lcssa16 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %365, %for_begin25.preheader ]
  %194 = mul nuw nsw i64 %indvars.iv, 12544
  %195 = add nuw nsw i64 %193, %194
  %196 = shl i64 %indvars.iv, 7
  %197 = add nuw nsw i64 %196, %165
  %198 = and i64 %195, 4294967295
  %199 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !960
  %201 = insertelement <32 x float> undef, float %200, i32 0
  %202 = shufflevector <32 x float> %201, <32 x float> undef, <32 x i32> zeroinitializer
  %203 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %197
  %204 = bitcast float* %203 to <32 x float>*
  %205 = load <32 x float>, <32 x float>* %204, align 16, !tbaa !954
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %202, <32 x float> %205, <32 x float> %.lcssa16)
  %207 = add nuw i64 %195, 1
  %208 = and i64 %207, 4294967295
  %209 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !960
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %205, <32 x float> %.lcssa417)
  %214 = add nuw i64 %195, 2
  %215 = and i64 %214, 4294967295
  %216 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !960
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = shufflevector <32 x float> %218, <32 x float> undef, <32 x i32> zeroinitializer
  %220 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %219, <32 x float> %205, <32 x float> %.lcssa619)
  %221 = add nuw i64 %195, 3
  %222 = and i64 %221, 4294967295
  %223 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %222
  %224 = load float, float* %223, align 4, !tbaa !960
  %225 = insertelement <32 x float> undef, float %224, i32 0
  %226 = shufflevector <32 x float> %225, <32 x float> undef, <32 x i32> zeroinitializer
  %227 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %226, <32 x float> %205, <32 x float> %.lcssa821)
  %228 = add nuw i64 %195, 4
  %229 = and i64 %228, 4294967295
  %230 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %229
  %231 = load float, float* %230, align 4, !tbaa !960
  %232 = insertelement <32 x float> undef, float %231, i32 0
  %233 = shufflevector <32 x float> %232, <32 x float> undef, <32 x i32> zeroinitializer
  %234 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %233, <32 x float> %205, <32 x float> %.lcssa1023)
  %235 = add nuw i64 %195, 5
  %236 = and i64 %235, 4294967295
  %237 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %236
  %238 = load float, float* %237, align 4, !tbaa !960
  %239 = insertelement <32 x float> undef, float %238, i32 0
  %240 = shufflevector <32 x float> %239, <32 x float> undef, <32 x i32> zeroinitializer
  %241 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %240, <32 x float> %205, <32 x float> %.lcssa1225)
  %242 = add nuw i64 %195, 6
  %243 = and i64 %242, 4294967295
  %244 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !960
  %246 = insertelement <32 x float> undef, float %245, i32 0
  %247 = shufflevector <32 x float> %246, <32 x float> undef, <32 x i32> zeroinitializer
  %248 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %247, <32 x float> %205, <32 x float> %.lcssa1427)
  %249 = add nuw nsw i64 %195, 56
  %250 = and i64 %249, 4294967295
  %251 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !960
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = or i64 %197, 32
  %256 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %255
  %257 = bitcast float* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 16, !tbaa !954
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %258, <32 x float> %206)
  %260 = add nuw i64 %195, 57
  %261 = and i64 %260, 4294967295
  %262 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !960
  %264 = insertelement <32 x float> undef, float %263, i32 0
  %265 = shufflevector <32 x float> %264, <32 x float> undef, <32 x i32> zeroinitializer
  %266 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %265, <32 x float> %258, <32 x float> %213)
  %267 = add nuw i64 %195, 58
  %268 = and i64 %267, 4294967295
  %269 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !960
  %271 = insertelement <32 x float> undef, float %270, i32 0
  %272 = shufflevector <32 x float> %271, <32 x float> undef, <32 x i32> zeroinitializer
  %273 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %258, <32 x float> %220)
  %274 = add nuw i64 %195, 59
  %275 = and i64 %274, 4294967295
  %276 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %275
  %277 = load float, float* %276, align 4, !tbaa !960
  %278 = insertelement <32 x float> undef, float %277, i32 0
  %279 = shufflevector <32 x float> %278, <32 x float> undef, <32 x i32> zeroinitializer
  %280 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %279, <32 x float> %258, <32 x float> %227)
  %281 = add nuw i64 %195, 60
  %282 = and i64 %281, 4294967295
  %283 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %282
  %284 = load float, float* %283, align 4, !tbaa !960
  %285 = insertelement <32 x float> undef, float %284, i32 0
  %286 = shufflevector <32 x float> %285, <32 x float> undef, <32 x i32> zeroinitializer
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %286, <32 x float> %258, <32 x float> %234)
  %288 = add nuw i64 %195, 61
  %289 = and i64 %288, 4294967295
  %290 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !960
  %292 = insertelement <32 x float> undef, float %291, i32 0
  %293 = shufflevector <32 x float> %292, <32 x float> undef, <32 x i32> zeroinitializer
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %258, <32 x float> %241)
  %295 = add nuw i64 %195, 62
  %296 = and i64 %295, 4294967295
  %297 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %296
  %298 = load float, float* %297, align 4, !tbaa !960
  %299 = insertelement <32 x float> undef, float %298, i32 0
  %300 = shufflevector <32 x float> %299, <32 x float> undef, <32 x i32> zeroinitializer
  %301 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %300, <32 x float> %258, <32 x float> %248)
  %302 = add nuw nsw i64 %195, 112
  %303 = and i64 %302, 4294967295
  %304 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %303
  %305 = load float, float* %304, align 4, !tbaa !960
  %306 = insertelement <32 x float> undef, float %305, i32 0
  %307 = shufflevector <32 x float> %306, <32 x float> undef, <32 x i32> zeroinitializer
  %308 = or i64 %197, 64
  %309 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %308
  %310 = bitcast float* %309 to <32 x float>*
  %311 = load <32 x float>, <32 x float>* %310, align 16, !tbaa !954
  %312 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %307, <32 x float> %311, <32 x float> %259)
  %313 = add nuw i64 %195, 113
  %314 = and i64 %313, 4294967295
  %315 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %314
  %316 = load float, float* %315, align 4, !tbaa !960
  %317 = insertelement <32 x float> undef, float %316, i32 0
  %318 = shufflevector <32 x float> %317, <32 x float> undef, <32 x i32> zeroinitializer
  %319 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %318, <32 x float> %311, <32 x float> %266)
  %320 = add nuw i64 %195, 114
  %321 = and i64 %320, 4294967295
  %322 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %321
  %323 = load float, float* %322, align 4, !tbaa !960
  %324 = insertelement <32 x float> undef, float %323, i32 0
  %325 = shufflevector <32 x float> %324, <32 x float> undef, <32 x i32> zeroinitializer
  %326 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %325, <32 x float> %311, <32 x float> %273)
  %327 = add nuw i64 %195, 115
  %328 = and i64 %327, 4294967295
  %329 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %328
  %330 = load float, float* %329, align 4, !tbaa !960
  %331 = insertelement <32 x float> undef, float %330, i32 0
  %332 = shufflevector <32 x float> %331, <32 x float> undef, <32 x i32> zeroinitializer
  %333 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %332, <32 x float> %311, <32 x float> %280)
  %334 = add nuw i64 %195, 116
  %335 = and i64 %334, 4294967295
  %336 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !960
  %338 = insertelement <32 x float> undef, float %337, i32 0
  %339 = shufflevector <32 x float> %338, <32 x float> undef, <32 x i32> zeroinitializer
  %340 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %339, <32 x float> %311, <32 x float> %287)
  %341 = add nuw i64 %195, 117
  %342 = and i64 %341, 4294967295
  %343 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %342
  %344 = load float, float* %343, align 4, !tbaa !960
  %345 = insertelement <32 x float> undef, float %344, i32 0
  %346 = shufflevector <32 x float> %345, <32 x float> undef, <32 x i32> zeroinitializer
  %347 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %346, <32 x float> %311, <32 x float> %294)
  %348 = add nuw i64 %195, 118
  %349 = and i64 %348, 4294967295
  %350 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %349
  %351 = load float, float* %350, align 4, !tbaa !960
  %352 = insertelement <32 x float> undef, float %351, i32 0
  %353 = shufflevector <32 x float> %352, <32 x float> undef, <32 x i32> zeroinitializer
  %354 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %353, <32 x float> %311, <32 x float> %301)
  %355 = add nuw nsw i64 %195, 168
  %356 = and i64 %355, 4294967295
  %357 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %356
  %358 = load float, float* %357, align 4, !tbaa !960
  %359 = insertelement <32 x float> undef, float %358, i32 0
  %360 = shufflevector <32 x float> %359, <32 x float> undef, <32 x i32> zeroinitializer
  %361 = or i64 %197, 96
  %362 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %361
  %363 = bitcast float* %362 to <32 x float>*
  %364 = load <32 x float>, <32 x float>* %363, align 16, !tbaa !954
  %365 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %360, <32 x float> %364, <32 x float> %312)
  %366 = add nuw i64 %195, 169
  %367 = and i64 %366, 4294967295
  %368 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %367
  %369 = load float, float* %368, align 4, !tbaa !960
  %370 = insertelement <32 x float> undef, float %369, i32 0
  %371 = shufflevector <32 x float> %370, <32 x float> undef, <32 x i32> zeroinitializer
  %372 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %371, <32 x float> %364, <32 x float> %319)
  %373 = add nuw i64 %195, 170
  %374 = and i64 %373, 4294967295
  %375 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %374
  %376 = load float, float* %375, align 4, !tbaa !960
  %377 = insertelement <32 x float> undef, float %376, i32 0
  %378 = shufflevector <32 x float> %377, <32 x float> undef, <32 x i32> zeroinitializer
  %379 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %378, <32 x float> %364, <32 x float> %326)
  %380 = add nuw i64 %195, 171
  %381 = and i64 %380, 4294967295
  %382 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %381
  %383 = load float, float* %382, align 4, !tbaa !960
  %384 = insertelement <32 x float> undef, float %383, i32 0
  %385 = shufflevector <32 x float> %384, <32 x float> undef, <32 x i32> zeroinitializer
  %386 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %385, <32 x float> %364, <32 x float> %333)
  %387 = add nuw i64 %195, 172
  %388 = and i64 %387, 4294967295
  %389 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %388
  %390 = load float, float* %389, align 4, !tbaa !960
  %391 = insertelement <32 x float> undef, float %390, i32 0
  %392 = shufflevector <32 x float> %391, <32 x float> undef, <32 x i32> zeroinitializer
  %393 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %392, <32 x float> %364, <32 x float> %340)
  %394 = add nuw i64 %195, 173
  %395 = and i64 %394, 4294967295
  %396 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %395
  %397 = load float, float* %396, align 4, !tbaa !960
  %398 = insertelement <32 x float> undef, float %397, i32 0
  %399 = shufflevector <32 x float> %398, <32 x float> undef, <32 x i32> zeroinitializer
  %400 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %399, <32 x float> %364, <32 x float> %347)
  %401 = add nuw i64 %195, 174
  %402 = and i64 %401, 4294967295
  %403 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %402
  %404 = load float, float* %403, align 4, !tbaa !960
  %405 = insertelement <32 x float> undef, float %404, i32 0
  %406 = shufflevector <32 x float> %405, <32 x float> undef, <32 x i32> zeroinitializer
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %406, <32 x float> %364, <32 x float> %354)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end24, label %for_begin25.preheader, !prof !5

for_end24:                                        ; preds = %for_begin25.preheader
  store <32 x float> %365, <32 x float>* %173, align 16, !tbaa !957
  store <32 x float> %372, <32 x float>* %176, align 16, !tbaa !957
  store <32 x float> %379, <32 x float>* %179, align 16, !tbaa !957
  store <32 x float> %386, <32 x float>* %182, align 16, !tbaa !957
  store <32 x float> %393, <32 x float>* %185, align 16, !tbaa !957
  store <32 x float> %400, <32 x float>* %188, align 16, !tbaa !957
  store <32 x float> %407, <32 x float>* %191, align 16, !tbaa !957
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %exitcond36 = icmp eq i64 %indvars.iv.next35, 8
  br i1 %exitcond36, label %for_begin28.preheader, label %for_body20, !prof !5

for_begin31.preheader:                            ; preds = %for_end33, %for_begin28.preheader
  %indvars.iv40 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next41, %for_end33 ]
  %408 = mul nuw nsw i64 %indvars.iv40, 7
  %409 = add nuw nsw i64 %408, %170
  %410 = mul nuw nsw i64 %indvars.iv40, 224
  br label %for_body32

for_end30:                                        ; preds = %for_end33
  %411 = add nuw nsw i32 %160, 1
  %exitcond43 = icmp eq i32 %411, 448
  br i1 %exitcond43, label %for_end18, label %for_begin19.preheader, !prof !5

for_body32:                                       ; preds = %for_body32, %for_begin31.preheader
  %indvars.iv37 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next38, %for_body32 ]
  %412 = add nuw nsw i64 %409, %indvars.iv37
  %413 = add nuw nsw i64 %412, 3136
  %414 = add nuw nsw i64 %412, 6272
  %415 = add nuw nsw i64 %412, 9408
  %416 = add nuw nsw i64 %412, 12544
  %417 = add nuw nsw i64 %412, 15680
  %418 = add nuw nsw i64 %412, 18816
  %419 = add nuw nsw i64 %412, 21952
  %420 = add nuw nsw i64 %412, 25088
  %421 = add nuw nsw i64 %412, 28224
  %422 = add nuw nsw i64 %412, 31360
  %423 = add nuw nsw i64 %412, 34496
  %424 = add nuw nsw i64 %412, 37632
  %425 = add nuw nsw i64 %412, 40768
  %426 = add nuw nsw i64 %412, 43904
  %427 = add nuw nsw i64 %412, 47040
  %428 = add nuw nsw i64 %412, 50176
  %429 = add nuw nsw i64 %412, 53312
  %430 = add nuw nsw i64 %412, 56448
  %431 = add nuw nsw i64 %412, 59584
  %432 = add nuw nsw i64 %412, 62720
  %433 = add nuw nsw i64 %412, 65856
  %434 = add nuw nsw i64 %412, 68992
  %435 = add nuw nsw i64 %412, 72128
  %436 = add nuw nsw i64 %412, 75264
  %437 = add nuw nsw i64 %412, 78400
  %438 = add nuw nsw i64 %412, 81536
  %439 = add nuw nsw i64 %412, 84672
  %440 = add nuw nsw i64 %412, 87808
  %441 = add nuw nsw i64 %412, 90944
  %442 = add nuw nsw i64 %412, 94080
  %443 = add nuw nsw i64 %412, 97216
  %444 = shl i64 %indvars.iv37, 5
  %445 = add nuw nsw i64 %444, %410
  %446 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %445
  %447 = bitcast float* %446 to <32 x float>*
  %448 = load <32 x float>, <32 x float>* %447, align 16, !tbaa !957
  %449 = getelementptr inbounds float, float* %23, i64 %412
  %450 = extractelement <32 x float> %448, i64 0
  store float %450, float* %449, align 4, !tbaa !963
  %451 = getelementptr inbounds float, float* %23, i64 %413
  %452 = extractelement <32 x float> %448, i64 1
  store float %452, float* %451, align 4, !tbaa !963
  %453 = getelementptr inbounds float, float* %23, i64 %414
  %454 = extractelement <32 x float> %448, i64 2
  store float %454, float* %453, align 4, !tbaa !963
  %455 = getelementptr inbounds float, float* %23, i64 %415
  %456 = extractelement <32 x float> %448, i64 3
  store float %456, float* %455, align 4, !tbaa !963
  %457 = getelementptr inbounds float, float* %23, i64 %416
  %458 = extractelement <32 x float> %448, i64 4
  store float %458, float* %457, align 4, !tbaa !963
  %459 = getelementptr inbounds float, float* %23, i64 %417
  %460 = extractelement <32 x float> %448, i64 5
  store float %460, float* %459, align 4, !tbaa !963
  %461 = getelementptr inbounds float, float* %23, i64 %418
  %462 = extractelement <32 x float> %448, i64 6
  store float %462, float* %461, align 4, !tbaa !963
  %463 = getelementptr inbounds float, float* %23, i64 %419
  %464 = extractelement <32 x float> %448, i64 7
  store float %464, float* %463, align 4, !tbaa !963
  %465 = getelementptr inbounds float, float* %23, i64 %420
  %466 = extractelement <32 x float> %448, i64 8
  store float %466, float* %465, align 4, !tbaa !963
  %467 = getelementptr inbounds float, float* %23, i64 %421
  %468 = extractelement <32 x float> %448, i64 9
  store float %468, float* %467, align 4, !tbaa !963
  %469 = getelementptr inbounds float, float* %23, i64 %422
  %470 = extractelement <32 x float> %448, i64 10
  store float %470, float* %469, align 4, !tbaa !963
  %471 = getelementptr inbounds float, float* %23, i64 %423
  %472 = extractelement <32 x float> %448, i64 11
  store float %472, float* %471, align 4, !tbaa !963
  %473 = getelementptr inbounds float, float* %23, i64 %424
  %474 = extractelement <32 x float> %448, i64 12
  store float %474, float* %473, align 4, !tbaa !963
  %475 = getelementptr inbounds float, float* %23, i64 %425
  %476 = extractelement <32 x float> %448, i64 13
  store float %476, float* %475, align 4, !tbaa !963
  %477 = getelementptr inbounds float, float* %23, i64 %426
  %478 = extractelement <32 x float> %448, i64 14
  store float %478, float* %477, align 4, !tbaa !963
  %479 = getelementptr inbounds float, float* %23, i64 %427
  %480 = extractelement <32 x float> %448, i64 15
  store float %480, float* %479, align 4, !tbaa !963
  %481 = getelementptr inbounds float, float* %23, i64 %428
  %482 = extractelement <32 x float> %448, i64 16
  store float %482, float* %481, align 4, !tbaa !963
  %483 = getelementptr inbounds float, float* %23, i64 %429
  %484 = extractelement <32 x float> %448, i64 17
  store float %484, float* %483, align 4, !tbaa !963
  %485 = getelementptr inbounds float, float* %23, i64 %430
  %486 = extractelement <32 x float> %448, i64 18
  store float %486, float* %485, align 4, !tbaa !963
  %487 = getelementptr inbounds float, float* %23, i64 %431
  %488 = extractelement <32 x float> %448, i64 19
  store float %488, float* %487, align 4, !tbaa !963
  %489 = getelementptr inbounds float, float* %23, i64 %432
  %490 = extractelement <32 x float> %448, i64 20
  store float %490, float* %489, align 4, !tbaa !963
  %491 = getelementptr inbounds float, float* %23, i64 %433
  %492 = extractelement <32 x float> %448, i64 21
  store float %492, float* %491, align 4, !tbaa !963
  %493 = getelementptr inbounds float, float* %23, i64 %434
  %494 = extractelement <32 x float> %448, i64 22
  store float %494, float* %493, align 4, !tbaa !963
  %495 = getelementptr inbounds float, float* %23, i64 %435
  %496 = extractelement <32 x float> %448, i64 23
  store float %496, float* %495, align 4, !tbaa !963
  %497 = getelementptr inbounds float, float* %23, i64 %436
  %498 = extractelement <32 x float> %448, i64 24
  store float %498, float* %497, align 4, !tbaa !963
  %499 = getelementptr inbounds float, float* %23, i64 %437
  %500 = extractelement <32 x float> %448, i64 25
  store float %500, float* %499, align 4, !tbaa !963
  %501 = getelementptr inbounds float, float* %23, i64 %438
  %502 = extractelement <32 x float> %448, i64 26
  store float %502, float* %501, align 4, !tbaa !963
  %503 = getelementptr inbounds float, float* %23, i64 %439
  %504 = extractelement <32 x float> %448, i64 27
  store float %504, float* %503, align 4, !tbaa !963
  %505 = getelementptr inbounds float, float* %23, i64 %440
  %506 = extractelement <32 x float> %448, i64 28
  store float %506, float* %505, align 4, !tbaa !963
  %507 = getelementptr inbounds float, float* %23, i64 %441
  %508 = extractelement <32 x float> %448, i64 29
  store float %508, float* %507, align 4, !tbaa !963
  %509 = getelementptr inbounds float, float* %23, i64 %442
  %510 = extractelement <32 x float> %448, i64 30
  store float %510, float* %509, align 4, !tbaa !963
  %511 = getelementptr inbounds float, float* %23, i64 %443
  %512 = extractelement <32 x float> %448, i64 31
  store float %512, float* %511, align 4, !tbaa !963
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond39 = icmp eq i64 %indvars.iv.next38, 7
  br i1 %exitcond39, label %for_end33, label %for_body32, !prof !5

for_end33:                                        ; preds = %for_body32
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond42 = icmp eq i64 %indvars.iv.next41, 8
  br i1 %exitcond42, label %for_end30, label %for_begin31.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt_2(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_2_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_2_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !966
  %3 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %4 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4, !tbaa !969
  %5 = getelementptr inbounds i8, i8* %1, i64 16
  %6 = bitcast i8* %5 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !966
  %7 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.1)
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %7, <4 x float>* %9, align 4, !tbaa !969
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !966
  %12 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.2)
  %13 = getelementptr inbounds i8, i8* %0, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  store <4 x float> %12, <4 x float>* %14, align 4, !tbaa !969
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !966
  %17 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.3)
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !969
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !966
  %22 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.4)
  %23 = getelementptr inbounds i8, i8* %0, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4, !tbaa !969
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !966
  %27 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.5)
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4, !tbaa !969
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !966
  %32 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.6)
  %33 = getelementptr inbounds i8, i8* %0, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !969
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !966
  %37 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.7)
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !969
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !966
  %42 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.8)
  %43 = getelementptr inbounds i8, i8* %0, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  store <4 x float> %42, <4 x float>* %44, align 4, !tbaa !969
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !966
  %47 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.9)
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4, !tbaa !969
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !966
  %52 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.10)
  %53 = getelementptr inbounds i8, i8* %0, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !969
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !966
  %57 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.11)
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %57, <4 x float>* %59, align 4, !tbaa !969
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !966
  %62 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.12)
  %63 = getelementptr inbounds i8, i8* %0, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !tbaa !969
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !966
  %67 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.13)
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !969
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !966
  %72 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.14)
  %73 = getelementptr inbounds i8, i8* %0, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4, !tbaa !969
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !966
  %77 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.15)
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !tbaa !969
  %80 = getelementptr inbounds i8, i8* %1, i64 256
  %81 = bitcast i8* %80 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %81, align 4, !tbaa !966
  %82 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.16)
  %83 = getelementptr inbounds i8, i8* %0, i64 256
  %84 = bitcast i8* %83 to <4 x float>*
  store <4 x float> %82, <4 x float>* %84, align 4, !tbaa !969
  %85 = getelementptr inbounds i8, i8* %1, i64 272
  %86 = bitcast i8* %85 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %86, align 4, !tbaa !966
  %87 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.17)
  %88 = getelementptr inbounds i8, i8* %0, i64 272
  %89 = bitcast i8* %88 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4, !tbaa !969
  %90 = getelementptr inbounds i8, i8* %1, i64 288
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !966
  %92 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.18)
  %93 = getelementptr inbounds i8, i8* %0, i64 288
  %94 = bitcast i8* %93 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !tbaa !969
  %95 = getelementptr inbounds i8, i8* %1, i64 304
  %96 = bitcast i8* %95 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !966
  %97 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.19)
  %98 = getelementptr inbounds i8, i8* %0, i64 304
  %99 = bitcast i8* %98 to <4 x float>*
  store <4 x float> %97, <4 x float>* %99, align 4, !tbaa !969
  %100 = getelementptr inbounds i8, i8* %1, i64 320
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !966
  %102 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.20)
  %103 = getelementptr inbounds i8, i8* %0, i64 320
  %104 = bitcast i8* %103 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !tbaa !969
  %105 = getelementptr inbounds i8, i8* %1, i64 336
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !966
  %107 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.21)
  %108 = getelementptr inbounds i8, i8* %0, i64 336
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %107, <4 x float>* %109, align 4, !tbaa !969
  %110 = getelementptr inbounds i8, i8* %1, i64 352
  %111 = bitcast i8* %110 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %111, align 4, !tbaa !966
  %112 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.22)
  %113 = getelementptr inbounds i8, i8* %0, i64 352
  %114 = bitcast i8* %113 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4, !tbaa !969
  %115 = getelementptr inbounds i8, i8* %1, i64 368
  %116 = bitcast i8* %115 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %116, align 4, !tbaa !966
  %117 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.23)
  %118 = getelementptr inbounds i8, i8* %0, i64 368
  %119 = bitcast i8* %118 to <4 x float>*
  store <4 x float> %117, <4 x float>* %119, align 4, !tbaa !969
  %120 = getelementptr inbounds i8, i8* %1, i64 384
  %121 = bitcast i8* %120 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %121, align 4, !tbaa !966
  %122 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.24)
  %123 = getelementptr inbounds i8, i8* %0, i64 384
  %124 = bitcast i8* %123 to <4 x float>*
  store <4 x float> %122, <4 x float>* %124, align 4, !tbaa !969
  %125 = getelementptr inbounds i8, i8* %1, i64 400
  %126 = bitcast i8* %125 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !966
  %127 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.25)
  %128 = getelementptr inbounds i8, i8* %0, i64 400
  %129 = bitcast i8* %128 to <4 x float>*
  store <4 x float> %127, <4 x float>* %129, align 4, !tbaa !969
  %130 = getelementptr inbounds i8, i8* %1, i64 416
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !966
  %132 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.26)
  %133 = getelementptr inbounds i8, i8* %0, i64 416
  %134 = bitcast i8* %133 to <4 x float>*
  store <4 x float> %132, <4 x float>* %134, align 4, !tbaa !969
  %135 = getelementptr inbounds i8, i8* %1, i64 432
  %136 = bitcast i8* %135 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %136, align 4, !tbaa !966
  %137 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.27)
  %138 = getelementptr inbounds i8, i8* %0, i64 432
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %137, <4 x float>* %139, align 4, !tbaa !969
  %140 = getelementptr inbounds i8, i8* %1, i64 448
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !966
  %142 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.28)
  %143 = getelementptr inbounds i8, i8* %0, i64 448
  %144 = bitcast i8* %143 to <4 x float>*
  store <4 x float> %142, <4 x float>* %144, align 4, !tbaa !969
  %145 = getelementptr inbounds i8, i8* %1, i64 464
  %146 = bitcast i8* %145 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %146, align 4, !tbaa !966
  %147 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.29)
  %148 = getelementptr inbounds i8, i8* %0, i64 464
  %149 = bitcast i8* %148 to <4 x float>*
  store <4 x float> %147, <4 x float>* %149, align 4, !tbaa !969
  %150 = getelementptr inbounds i8, i8* %1, i64 480
  %151 = bitcast i8* %150 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %151, align 4, !tbaa !966
  %152 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.30)
  %153 = getelementptr inbounds i8, i8* %0, i64 480
  %154 = bitcast i8* %153 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 4, !tbaa !969
  %155 = getelementptr inbounds i8, i8* %1, i64 496
  %156 = bitcast i8* %155 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !966
  %157 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.31)
  %158 = getelementptr inbounds i8, i8* %0, i64 496
  %159 = bitcast i8* %158 to <4 x float>*
  store <4 x float> %157, <4 x float>* %159, align 4, !tbaa !969
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_7(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_7_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_7_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv4, 3136
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv1, 56
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !972
  %9 = fcmp ogt <4 x float> %wide.load, zeroinitializer
  %10 = select <4 x i1> %9, <4 x float> %wide.load, <4 x float> zeroinitializer
  %11 = getelementptr inbounds float, float* %3, i64 %6
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !975
  %13 = or i64 %6, 4
  %14 = getelementptr inbounds float, float* %2, i64 %13
  %15 = bitcast float* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !972
  %16 = fcmp ogt <4 x float> %wide.load.1, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> %wide.load.1, <4 x float> zeroinitializer
  %18 = getelementptr inbounds float, float* %3, i64 %13
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !975
  %20 = add nuw nsw i64 %6, 8
  %21 = getelementptr inbounds float, float* %2, i64 %20
  %22 = bitcast float* %21 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !972
  %23 = fcmp ogt <4 x float> %wide.load.2, zeroinitializer
  %24 = select <4 x i1> %23, <4 x float> %wide.load.2, <4 x float> zeroinitializer
  %25 = getelementptr inbounds float, float* %3, i64 %20
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> %24, <4 x float>* %26, align 4, !tbaa !975
  %27 = add nuw nsw i64 %6, 12
  %28 = getelementptr inbounds float, float* %2, i64 %27
  %29 = bitcast float* %28 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !972
  %30 = fcmp ogt <4 x float> %wide.load.3, zeroinitializer
  %31 = select <4 x i1> %30, <4 x float> %wide.load.3, <4 x float> zeroinitializer
  %32 = getelementptr inbounds float, float* %3, i64 %27
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !975
  %34 = add nuw nsw i64 %6, 16
  %35 = getelementptr inbounds float, float* %2, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !972
  %37 = fcmp ogt <4 x float> %wide.load.4, zeroinitializer
  %38 = select <4 x i1> %37, <4 x float> %wide.load.4, <4 x float> zeroinitializer
  %39 = getelementptr inbounds float, float* %3, i64 %34
  %40 = bitcast float* %39 to <4 x float>*
  store <4 x float> %38, <4 x float>* %40, align 4, !tbaa !975
  %41 = add nuw nsw i64 %6, 20
  %42 = getelementptr inbounds float, float* %2, i64 %41
  %43 = bitcast float* %42 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !972
  %44 = fcmp ogt <4 x float> %wide.load.5, zeroinitializer
  %45 = select <4 x i1> %44, <4 x float> %wide.load.5, <4 x float> zeroinitializer
  %46 = getelementptr inbounds float, float* %3, i64 %41
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !975
  %48 = add nuw nsw i64 %6, 24
  %49 = getelementptr inbounds float, float* %2, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !972
  %51 = fcmp ogt <4 x float> %wide.load.6, zeroinitializer
  %52 = select <4 x i1> %51, <4 x float> %wide.load.6, <4 x float> zeroinitializer
  %53 = getelementptr inbounds float, float* %3, i64 %48
  %54 = bitcast float* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !975
  %55 = add nuw nsw i64 %6, 28
  %56 = getelementptr inbounds float, float* %2, i64 %55
  %57 = bitcast float* %56 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !972
  %58 = fcmp ogt <4 x float> %wide.load.7, zeroinitializer
  %59 = select <4 x i1> %58, <4 x float> %wide.load.7, <4 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %3, i64 %55
  %61 = bitcast float* %60 to <4 x float>*
  store <4 x float> %59, <4 x float>* %61, align 4, !tbaa !975
  %62 = add nuw nsw i64 %6, 32
  %63 = getelementptr inbounds float, float* %2, i64 %62
  %64 = bitcast float* %63 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !972
  %65 = fcmp ogt <4 x float> %wide.load.8, zeroinitializer
  %66 = select <4 x i1> %65, <4 x float> %wide.load.8, <4 x float> zeroinitializer
  %67 = getelementptr inbounds float, float* %3, i64 %62
  %68 = bitcast float* %67 to <4 x float>*
  store <4 x float> %66, <4 x float>* %68, align 4, !tbaa !975
  %69 = add nuw nsw i64 %6, 36
  %70 = getelementptr inbounds float, float* %2, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !972
  %72 = fcmp ogt <4 x float> %wide.load.9, zeroinitializer
  %73 = select <4 x i1> %72, <4 x float> %wide.load.9, <4 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %3, i64 %69
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !975
  %76 = add nuw nsw i64 %6, 40
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !972
  %79 = fcmp ogt <4 x float> %wide.load.10, zeroinitializer
  %80 = select <4 x i1> %79, <4 x float> %wide.load.10, <4 x float> zeroinitializer
  %81 = getelementptr inbounds float, float* %3, i64 %76
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !975
  %83 = add nuw nsw i64 %6, 44
  %84 = getelementptr inbounds float, float* %2, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !972
  %86 = fcmp ogt <4 x float> %wide.load.11, zeroinitializer
  %87 = select <4 x i1> %86, <4 x float> %wide.load.11, <4 x float> zeroinitializer
  %88 = getelementptr inbounds float, float* %3, i64 %83
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4, !tbaa !975
  %90 = add nuw nsw i64 %6, 48
  %91 = getelementptr inbounds float, float* %2, i64 %90
  %92 = bitcast float* %91 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !972
  %93 = fcmp ogt <4 x float> %wide.load.12, zeroinitializer
  %94 = select <4 x i1> %93, <4 x float> %wide.load.12, <4 x float> zeroinitializer
  %95 = getelementptr inbounds float, float* %3, i64 %90
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %94, <4 x float>* %96, align 4, !tbaa !975
  %97 = add nuw nsw i64 %6, 52
  %98 = getelementptr inbounds float, float* %2, i64 %97
  %99 = bitcast float* %98 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !972
  %100 = fcmp ogt <4 x float> %wide.load.13, zeroinitializer
  %101 = select <4 x i1> %100, <4 x float> %wide.load.13, <4 x float> zeroinitializer
  %102 = getelementptr inbounds float, float* %3, i64 %97
  %103 = bitcast float* %102 to <4 x float>*
  store <4 x float> %101, <4 x float>* %103, align 4, !tbaa !975
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_11(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_11_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_11_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !978
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !981
  %13 = fadd <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !984
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !981
  %19 = fadd <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !984
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !981
  %25 = fadd <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !984
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !981
  %31 = fadd <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !984
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !981
  %37 = fadd <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !984
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !981
  %43 = fadd <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !984
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !981
  %49 = fadd <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !984
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !981
  %55 = fadd <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !984
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !981
  %61 = fadd <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !984
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !981
  %67 = fadd <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !984
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !981
  %73 = fadd <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !984
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !981
  %79 = fadd <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !984
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !981
  %85 = fadd <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !984
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !981
  %91 = fadd <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !984
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_1_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for_begin1.preheader ]
  %6 = mul nuw nsw i64 %indvars.iv, 49
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv
  %8 = load float, float* %7, align 4, !tbaa !987
  %9 = getelementptr inbounds float, float* %4, i64 %6
  %10 = getelementptr inbounds float, float* %5, i64 %6
  %11 = bitcast float* %9 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !990
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fadd <4 x float> %14, %12
  %16 = bitcast float* %10 to <4 x float>*
  store <4 x float> %15, <4 x float>* %16, align 4, !tbaa !993
  %17 = add nuw nsw i64 %6, 4
  %18 = getelementptr inbounds float, float* %4, i64 %17
  %19 = getelementptr inbounds float, float* %5, i64 %17
  %20 = bitcast float* %18 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !990
  %22 = fadd <4 x float> %14, %21
  %23 = bitcast float* %19 to <4 x float>*
  store <4 x float> %22, <4 x float>* %23, align 4, !tbaa !993
  %24 = add nuw nsw i64 %6, 8
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !990
  %29 = fadd <4 x float> %14, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !993
  %31 = add nuw nsw i64 %6, 12
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !990
  %36 = fadd <4 x float> %14, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !993
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !990
  %43 = fadd <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !993
  %45 = add nuw nsw i64 %6, 20
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !990
  %50 = fadd <4 x float> %14, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !993
  %52 = add nuw nsw i64 %6, 24
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !990
  %57 = fadd <4 x float> %14, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !993
  %59 = add nuw nsw i64 %6, 28
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !990
  %64 = fadd <4 x float> %14, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !993
  %66 = add nuw nsw i64 %6, 32
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !990
  %71 = fadd <4 x float> %14, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !993
  %73 = add nuw nsw i64 %6, 36
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = getelementptr inbounds float, float* %5, i64 %73
  %76 = bitcast float* %74 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !990
  %78 = fadd <4 x float> %14, %77
  %79 = bitcast float* %75 to <4 x float>*
  store <4 x float> %78, <4 x float>* %79, align 4, !tbaa !993
  %80 = add nuw nsw i64 %6, 40
  %81 = getelementptr inbounds float, float* %4, i64 %80
  %82 = getelementptr inbounds float, float* %5, i64 %80
  %83 = bitcast float* %81 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !990
  %85 = fadd <4 x float> %14, %84
  %86 = bitcast float* %82 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4, !tbaa !993
  %87 = add nuw nsw i64 %6, 44
  %88 = getelementptr inbounds float, float* %4, i64 %87
  %89 = getelementptr inbounds float, float* %5, i64 %87
  %90 = bitcast float* %88 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !990
  %92 = fadd <4 x float> %14, %91
  %93 = bitcast float* %89 to <4 x float>*
  store <4 x float> %92, <4 x float>* %93, align 4, !tbaa !993
  %94 = add nuw nsw i64 %6, 48
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !990
  %97 = fadd float %8, %96
  %98 = getelementptr inbounds float, float* %5, i64 %94
  store float %97, float* %98, align 4, !tbaa !993
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 2048
  br i1 %exitcond, label %for_end, label %for_begin1.preheader, !prof !5

for_end:                                          ; preds = %for_begin1.preheader
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_6(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_6_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_6_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 784
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !996
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = insertelement <4 x float> undef, float %8, i32 0
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> zeroinitializer
  %17 = insertelement <4 x float> undef, float %8, i32 0
  %18 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %19 = insertelement <4 x float> undef, float %8, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %8, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %23 = mul nuw nsw i64 %indvars.iv, 28
  %24 = add nuw nsw i64 %23, %6
  %25 = getelementptr inbounds float, float* %4, i64 %24
  %26 = getelementptr inbounds float, float* %5, i64 %24
  %27 = bitcast float* %25 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 4, !tbaa !999
  %29 = fmul <4 x float> %10, %28
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4, !tbaa !1002
  %31 = add nuw nsw i64 %24, 4
  %32 = getelementptr inbounds float, float* %4, i64 %31
  %33 = getelementptr inbounds float, float* %5, i64 %31
  %34 = bitcast float* %32 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !999
  %36 = fmul <4 x float> %12, %35
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !1002
  %38 = add nuw nsw i64 %24, 8
  %39 = getelementptr inbounds float, float* %4, i64 %38
  %40 = getelementptr inbounds float, float* %5, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !999
  %43 = fmul <4 x float> %14, %42
  %44 = bitcast float* %40 to <4 x float>*
  store <4 x float> %43, <4 x float>* %44, align 4, !tbaa !1002
  %45 = add nuw nsw i64 %24, 12
  %46 = getelementptr inbounds float, float* %4, i64 %45
  %47 = getelementptr inbounds float, float* %5, i64 %45
  %48 = bitcast float* %46 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !999
  %50 = fmul <4 x float> %16, %49
  %51 = bitcast float* %47 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !tbaa !1002
  %52 = add nuw nsw i64 %24, 16
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = getelementptr inbounds float, float* %5, i64 %52
  %55 = bitcast float* %53 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !tbaa !999
  %57 = fmul <4 x float> %18, %56
  %58 = bitcast float* %54 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4, !tbaa !1002
  %59 = add nuw nsw i64 %24, 20
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = getelementptr inbounds float, float* %5, i64 %59
  %62 = bitcast float* %60 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !tbaa !999
  %64 = fmul <4 x float> %20, %63
  %65 = bitcast float* %61 to <4 x float>*
  store <4 x float> %64, <4 x float>* %65, align 4, !tbaa !1002
  %66 = add nuw nsw i64 %24, 24
  %67 = getelementptr inbounds float, float* %4, i64 %66
  %68 = getelementptr inbounds float, float* %5, i64 %66
  %69 = bitcast float* %67 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !999
  %71 = fmul <4 x float> %22, %70
  %72 = bitcast float* %68 to <4 x float>*
  store <4 x float> %71, <4 x float>* %72, align 4, !tbaa !1002
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 128
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_8(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_8_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_8_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !1005
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !1008
  %13 = fmul <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !1011
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !1008
  %19 = fmul <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !1011
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1008
  %25 = fmul <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !1011
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !1008
  %31 = fmul <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !1011
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1008
  %37 = fmul <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !1011
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !1008
  %43 = fmul <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !1011
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !1008
  %49 = fmul <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !1011
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1008
  %55 = fmul <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !1011
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !1008
  %61 = fmul <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !1011
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1008
  %67 = fmul <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !1011
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !1008
  %73 = fmul <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !1011
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !1008
  %79 = fmul <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !1011
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !1008
  %85 = fmul <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !1011
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !1008
  %91 = fmul <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !1011
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt_5(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_5_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_5_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next, %vector.body ]
  %4 = getelementptr inbounds float, float* %2, i64 %index
  %5 = bitcast float* %4 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1014
  %6 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %7 = getelementptr inbounds float, float* %3, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  store <4 x float> %6, <4 x float>* %8, align 4, !tbaa !1017
  %index.next = add i64 %index, 4
  %9 = icmp eq i64 %index.next, 2048
  br i1 %9, label %for_end, label %vector.body, !llvm.loop !1020

for_end:                                          ; preds = %vector.body
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_13(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_13_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_13_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = alloca [56 x <32 x float>], align 16
  %5 = alloca [1152 x <32 x float>], align 16
  %6 = alloca [215296 x float], align 16
  %7 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar69 = phi i64 [ 0, %entry ], [ %indvar.next70, %for_end3 ]
  %8 = mul nuw nsw i64 %indvar69, 3712
  %9 = trunc i64 %indvar69 to i32
  %10 = add i32 %9, -1
  %11 = icmp ult i32 %10, 56
  %12 = mul nuw nsw i64 %indvar69, 56
  %13 = add nsw i64 %12, -57
  br i1 %11, label %for_begin4.preheader.us, label %for_begin4.preheader.preheader

for_begin4.preheader.preheader:                   ; preds = %for_begin1.preheader
  %scevgep76 = getelementptr [215296 x float], [215296 x float]* %6, i64 0, i64 %8
  %scevgep7677 = bitcast float* %scevgep76 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %scevgep7677, i8 0, i64 14848, i1 false)
  br label %for_end3

for_begin4.preheader.us:                          ; preds = %for_begin1.preheader, %for_end6.us-lcssa.us.us
  %indvars.iv81 = phi i64 [ %indvars.iv.next82, %for_end6.us-lcssa.us.us ], [ 0, %for_begin1.preheader ]
  %14 = mul nuw nsw i64 %indvars.iv81, 58
  %15 = add nuw nsw i64 %14, %8
  %16 = mul nuw nsw i64 %indvars.iv81, 3136
  %17 = add nsw i64 %13, %16
  br label %for_body5.us.us

for_body5.us.us:                                  ; preds = %if_end.us.us, %for_begin4.preheader.us
  %indvars.iv78 = phi i64 [ 0, %for_begin4.preheader.us ], [ %indvars.iv.next79, %if_end.us.us ]
  %18 = phi i32 [ 0, %for_begin4.preheader.us ], [ %25, %if_end.us.us ]
  %19 = add nuw nsw i64 %15, %indvars.iv78
  %trunc.us.us = trunc i32 %18 to i31
  switch i31 %trunc.us.us, label %if_then.us.us [
    i31 57, label %if_end.us.us
    i31 0, label %if_end.us.us
  ]

if_then.us.us:                                    ; preds = %for_body5.us.us
  %20 = add nsw i64 %17, %indvars.iv78
  %21 = getelementptr inbounds float, float* %7, i64 %20
  %22 = load float, float* %21, align 4, !tbaa !1021
  br label %if_end.us.us

if_end.us.us:                                     ; preds = %if_then.us.us, %for_body5.us.us, %for_body5.us.us
  %23 = phi float [ %22, %if_then.us.us ], [ 0.000000e+00, %for_body5.us.us ], [ 0.000000e+00, %for_body5.us.us ]
  %24 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %19
  store float %23, float* %24, align 4, !tbaa !1024
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %25 = add nuw nsw i32 %18, 1
  %exitcond80 = icmp eq i64 %indvars.iv.next79, 58
  br i1 %exitcond80, label %for_end6.us-lcssa.us.us, label %for_body5.us.us, !prof !5

for_end6.us-lcssa.us.us:                          ; preds = %if_end.us.us
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %exitcond83 = icmp eq i64 %indvars.iv.next82, 64
  br i1 %exitcond83, label %for_end3, label %for_begin4.preheader.us, !prof !5

for_begin7.preheader:                             ; preds = %for_end3
  %26 = bitcast [7 x <32 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  %27 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_end3:                                         ; preds = %for_end6.us-lcssa.us.us, %for_begin4.preheader.preheader
  %indvar.next70 = add nuw nsw i64 %indvar69, 1
  %exitcond85 = icmp eq i64 %indvar.next70, 58
  br i1 %exitcond85, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv63 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next64, %for_end12 ]
  %28 = mul nuw nsw i64 %indvars.iv63, 6144
  %29 = trunc i64 %indvars.iv63 to i32
  %30 = urem i32 %29, 3
  %31 = mul nuw nsw i32 %30, 3
  %32 = udiv i32 %29, 3
  %33 = mul nsw i32 %32, 18432
  %34 = or i32 %31, %33
  %35 = zext i32 %34 to i64
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %36 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %37 = bitcast float* %36 to <32 x float>*
  %38 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %39 = bitcast float* %38 to <32 x float>*
  %40 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %41 = bitcast float* %40 to <32 x float>*
  %42 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %43 = bitcast float* %42 to <32 x float>*
  %44 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %45 = bitcast float* %44 to <32 x float>*
  %46 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %47 = bitcast float* %46 to <32 x float>*
  %48 = bitcast i8* %2 to float*
  %49 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv60 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next61, %for_end15 ]
  %50 = shl i64 %indvars.iv60, 11
  %51 = add nuw nsw i64 %50, %28
  %52 = add nuw nsw i64 %indvars.iv60, %35
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %exitcond65 = icmp eq i64 %indvars.iv.next64, 6
  br i1 %exitcond65, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv57 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next58, %for_body14 ]
  %53 = shl i64 %indvars.iv57, 5
  %54 = add nuw nsw i64 %51, %53
  %55 = mul nuw nsw i64 %indvars.iv57, 9
  %56 = add nuw nsw i64 %52, %55
  %57 = add nuw nsw i64 %56, 576
  %58 = add nuw nsw i64 %56, 1152
  %59 = add nuw nsw i64 %56, 1728
  %60 = add nuw nsw i64 %56, 2304
  %61 = add nuw nsw i64 %56, 2880
  %62 = add nuw nsw i64 %56, 3456
  %63 = add nuw nsw i64 %56, 4032
  %64 = add nuw nsw i64 %56, 4608
  %65 = add nuw nsw i64 %56, 5184
  %66 = add nuw nsw i64 %56, 5760
  %67 = add nuw nsw i64 %56, 6336
  %68 = add nuw nsw i64 %56, 6912
  %69 = add nuw nsw i64 %56, 7488
  %70 = add nuw nsw i64 %56, 8064
  %71 = add nuw nsw i64 %56, 8640
  %72 = add nuw nsw i64 %56, 9216
  %73 = add nuw nsw i64 %56, 9792
  %74 = add nuw nsw i64 %56, 10368
  %75 = add nuw nsw i64 %56, 10944
  %76 = add nuw nsw i64 %56, 11520
  %77 = add nuw nsw i64 %56, 12096
  %78 = add nuw nsw i64 %56, 12672
  %79 = add nuw nsw i64 %56, 13248
  %80 = add nuw nsw i64 %56, 13824
  %81 = add nuw nsw i64 %56, 14400
  %82 = add nuw nsw i64 %56, 14976
  %83 = add nuw nsw i64 %56, 15552
  %84 = add nuw nsw i64 %56, 16128
  %85 = add nuw nsw i64 %56, 16704
  %86 = add nuw nsw i64 %56, 17280
  %87 = add nuw nsw i64 %56, 17856
  %88 = getelementptr inbounds float, float* %27, i64 %56
  %89 = load float, float* %88, align 4, !tbaa !1027
  %90 = insertelement <32 x float> undef, float %89, i32 0
  %91 = getelementptr inbounds float, float* %27, i64 %57
  %92 = load float, float* %91, align 4, !tbaa !1027
  %93 = insertelement <32 x float> %90, float %92, i32 1
  %94 = getelementptr inbounds float, float* %27, i64 %58
  %95 = load float, float* %94, align 4, !tbaa !1027
  %96 = insertelement <32 x float> %93, float %95, i32 2
  %97 = getelementptr inbounds float, float* %27, i64 %59
  %98 = load float, float* %97, align 4, !tbaa !1027
  %99 = insertelement <32 x float> %96, float %98, i32 3
  %100 = getelementptr inbounds float, float* %27, i64 %60
  %101 = load float, float* %100, align 4, !tbaa !1027
  %102 = insertelement <32 x float> %99, float %101, i32 4
  %103 = getelementptr inbounds float, float* %27, i64 %61
  %104 = load float, float* %103, align 4, !tbaa !1027
  %105 = insertelement <32 x float> %102, float %104, i32 5
  %106 = getelementptr inbounds float, float* %27, i64 %62
  %107 = load float, float* %106, align 4, !tbaa !1027
  %108 = insertelement <32 x float> %105, float %107, i32 6
  %109 = getelementptr inbounds float, float* %27, i64 %63
  %110 = load float, float* %109, align 4, !tbaa !1027
  %111 = insertelement <32 x float> %108, float %110, i32 7
  %112 = getelementptr inbounds float, float* %27, i64 %64
  %113 = load float, float* %112, align 4, !tbaa !1027
  %114 = insertelement <32 x float> %111, float %113, i32 8
  %115 = getelementptr inbounds float, float* %27, i64 %65
  %116 = load float, float* %115, align 4, !tbaa !1027
  %117 = insertelement <32 x float> %114, float %116, i32 9
  %118 = getelementptr inbounds float, float* %27, i64 %66
  %119 = load float, float* %118, align 4, !tbaa !1027
  %120 = insertelement <32 x float> %117, float %119, i32 10
  %121 = getelementptr inbounds float, float* %27, i64 %67
  %122 = load float, float* %121, align 4, !tbaa !1027
  %123 = insertelement <32 x float> %120, float %122, i32 11
  %124 = getelementptr inbounds float, float* %27, i64 %68
  %125 = load float, float* %124, align 4, !tbaa !1027
  %126 = insertelement <32 x float> %123, float %125, i32 12
  %127 = getelementptr inbounds float, float* %27, i64 %69
  %128 = load float, float* %127, align 4, !tbaa !1027
  %129 = insertelement <32 x float> %126, float %128, i32 13
  %130 = getelementptr inbounds float, float* %27, i64 %70
  %131 = load float, float* %130, align 4, !tbaa !1027
  %132 = insertelement <32 x float> %129, float %131, i32 14
  %133 = getelementptr inbounds float, float* %27, i64 %71
  %134 = load float, float* %133, align 4, !tbaa !1027
  %135 = insertelement <32 x float> %132, float %134, i32 15
  %136 = getelementptr inbounds float, float* %27, i64 %72
  %137 = load float, float* %136, align 4, !tbaa !1027
  %138 = insertelement <32 x float> %135, float %137, i32 16
  %139 = getelementptr inbounds float, float* %27, i64 %73
  %140 = load float, float* %139, align 4, !tbaa !1027
  %141 = insertelement <32 x float> %138, float %140, i32 17
  %142 = getelementptr inbounds float, float* %27, i64 %74
  %143 = load float, float* %142, align 4, !tbaa !1027
  %144 = insertelement <32 x float> %141, float %143, i32 18
  %145 = getelementptr inbounds float, float* %27, i64 %75
  %146 = load float, float* %145, align 4, !tbaa !1027
  %147 = insertelement <32 x float> %144, float %146, i32 19
  %148 = getelementptr inbounds float, float* %27, i64 %76
  %149 = load float, float* %148, align 4, !tbaa !1027
  %150 = insertelement <32 x float> %147, float %149, i32 20
  %151 = getelementptr inbounds float, float* %27, i64 %77
  %152 = load float, float* %151, align 4, !tbaa !1027
  %153 = insertelement <32 x float> %150, float %152, i32 21
  %154 = getelementptr inbounds float, float* %27, i64 %78
  %155 = load float, float* %154, align 4, !tbaa !1027
  %156 = insertelement <32 x float> %153, float %155, i32 22
  %157 = getelementptr inbounds float, float* %27, i64 %79
  %158 = load float, float* %157, align 4, !tbaa !1027
  %159 = insertelement <32 x float> %156, float %158, i32 23
  %160 = getelementptr inbounds float, float* %27, i64 %80
  %161 = load float, float* %160, align 4, !tbaa !1027
  %162 = insertelement <32 x float> %159, float %161, i32 24
  %163 = getelementptr inbounds float, float* %27, i64 %81
  %164 = load float, float* %163, align 4, !tbaa !1027
  %165 = insertelement <32 x float> %162, float %164, i32 25
  %166 = getelementptr inbounds float, float* %27, i64 %82
  %167 = load float, float* %166, align 4, !tbaa !1027
  %168 = insertelement <32 x float> %165, float %167, i32 26
  %169 = getelementptr inbounds float, float* %27, i64 %83
  %170 = load float, float* %169, align 4, !tbaa !1027
  %171 = insertelement <32 x float> %168, float %170, i32 27
  %172 = getelementptr inbounds float, float* %27, i64 %84
  %173 = load float, float* %172, align 4, !tbaa !1027
  %174 = insertelement <32 x float> %171, float %173, i32 28
  %175 = getelementptr inbounds float, float* %27, i64 %85
  %176 = load float, float* %175, align 4, !tbaa !1027
  %177 = insertelement <32 x float> %174, float %176, i32 29
  %178 = getelementptr inbounds float, float* %27, i64 %86
  %179 = load float, float* %178, align 4, !tbaa !1027
  %180 = insertelement <32 x float> %177, float %179, i32 30
  %181 = getelementptr inbounds float, float* %27, i64 %87
  %182 = load float, float* %181, align 4, !tbaa !1027
  %183 = insertelement <32 x float> %180, float %182, i32 31
  %184 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %54
  %185 = bitcast float* %184 to <32 x float>*
  store <32 x float> %183, <32 x float>* %185, align 16, !tbaa !1030
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %exitcond59 = icmp eq i64 %indvars.iv.next58, 64
  br i1 %exitcond59, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %exitcond62 = icmp eq i64 %indvars.iv.next61, 3
  br i1 %exitcond62, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end33, %for_begin16.preheader
  %186 = phi i32 [ 0, %for_begin16.preheader ], [ %298, %for_end33 ]
  %187 = urem i32 %186, 56
  %188 = udiv i32 %186, 56
  %189 = mul nsw i32 %188, 18432
  %190 = zext i32 %189 to i64
  %191 = mul nuw nsw i32 %187, 3712
  %192 = zext i32 %191 to i64
  %193 = mul nuw nsw i32 %187, 3712
  %194 = add nuw nsw i32 %193, 3712
  %195 = zext i32 %194 to i64
  %196 = add nuw nsw i64 %190, 6144
  %197 = mul nuw nsw i32 %187, 3712
  %198 = add nuw nsw i32 %197, 7424
  %199 = zext i32 %198 to i64
  %200 = add nuw nsw i64 %190, 12288
  br label %for_body20

for_end18:                                        ; preds = %for_end33
  ret void

for_begin31.preheader:                            ; preds = %for_end27.2
  %201 = mul nuw nsw i32 %187, 56
  %202 = mul nsw i32 %188, 100352
  %203 = add nuw nsw i32 %202, %201
  %204 = zext i32 %203 to i64
  br label %for_begin34.preheader

for_body20:                                       ; preds = %for_end27.2, %for_begin19.preheader
  %indvar = phi i64 [ 0, %for_begin19.preheader ], [ %indvar.next, %for_end27.2 ]
  %205 = mul nuw nsw i64 %indvar, 7
  %scevgep = getelementptr [56 x <32 x float>], [56 x <32 x float>]* %4, i64 0, i64 %205
  %scevgep48 = bitcast <32 x float>* %scevgep to i8*
  %206 = add nuw nsw i64 %205, %192
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %49, i8 0, i64 896, i1 false)
  br label %for_body26

for_body26:                                       ; preds = %for_body26, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_body26 ]
  %207 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %293, %for_body26 ]
  %208 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %287, %for_body26 ]
  %209 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %286, %for_body26 ]
  %210 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %285, %for_body26 ]
  %211 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %284, %for_body26 ]
  %212 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %283, %for_body26 ]
  %213 = phi <32 x float> [ zeroinitializer, %for_body20 ], [ %282, %for_body26 ]
  %214 = mul nuw nsw i64 %indvars.iv, 58
  %215 = add nuw nsw i64 %206, %214
  %216 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !1024
  %218 = insertelement <32 x float> undef, float %217, i32 0
  %219 = shufflevector <32 x float> %218, <32 x float> undef, <32 x i32> zeroinitializer
  %220 = shl nsw i64 %indvars.iv, 5
  %221 = add nuw nsw i64 %220, %190
  %222 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %221
  %223 = bitcast float* %222 to <32 x float>*
  %224 = load <32 x float>, <32 x float>* %223, align 16, !tbaa !1030
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %219, <32 x float> %224, <32 x float> %213)
  %226 = add nuw nsw i64 %215, 1
  %227 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !1024
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %224, <32 x float> %212)
  %232 = add nuw nsw i64 %215, 2
  %233 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !1024
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %224, <32 x float> %211)
  %238 = add nuw nsw i64 %215, 3
  %239 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !1024
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %224, <32 x float> %210)
  %244 = add nuw nsw i64 %215, 4
  %245 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !1024
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %224, <32 x float> %209)
  %250 = add nuw nsw i64 %215, 5
  %251 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !1024
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %224, <32 x float> %208)
  %256 = add nuw nsw i64 %215, 6
  %257 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !1024
  %259 = insertelement <32 x float> undef, float %258, i32 0
  %260 = shufflevector <32 x float> %259, <32 x float> undef, <32 x i32> zeroinitializer
  %261 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %224, <32 x float> %207)
  %262 = add nuw nsw i64 %221, 2048
  %263 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %262
  %264 = bitcast float* %263 to <32 x float>*
  %265 = load <32 x float>, <32 x float>* %264, align 16, !tbaa !1030
  %266 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %265, <32 x float> %225)
  %267 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %265, <32 x float> %231)
  %268 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %265, <32 x float> %237)
  %269 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %265, <32 x float> %243)
  %270 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %265, <32 x float> %249)
  %271 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %265, <32 x float> %255)
  %272 = add nuw nsw i64 %215, 7
  %273 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !1024
  %275 = insertelement <32 x float> undef, float %274, i32 0
  %276 = shufflevector <32 x float> %275, <32 x float> undef, <32 x i32> zeroinitializer
  %277 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %265, <32 x float> %261)
  %278 = add nuw nsw i64 %221, 4096
  %279 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %278
  %280 = bitcast float* %279 to <32 x float>*
  %281 = load <32 x float>, <32 x float>* %280, align 16, !tbaa !1030
  %282 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %281, <32 x float> %266)
  %283 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %281, <32 x float> %267)
  %284 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %281, <32 x float> %268)
  %285 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %281, <32 x float> %269)
  %286 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %281, <32 x float> %270)
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %281, <32 x float> %271)
  %288 = add nuw nsw i64 %215, 8
  %289 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %288
  %290 = load float, float* %289, align 4, !tbaa !1024
  %291 = insertelement <32 x float> undef, float %290, i32 0
  %292 = shufflevector <32 x float> %291, <32 x float> undef, <32 x i32> zeroinitializer
  %293 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %292, <32 x float> %281, <32 x float> %277)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %294 = add nuw nsw i64 %205, %195
  br label %for_body26.1

for_begin34.preheader:                            ; preds = %for_end36, %for_begin31.preheader
  %indvars.iv53 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next54, %for_end36 ]
  %295 = mul nuw nsw i64 %indvars.iv53, 7
  %296 = add nuw nsw i64 %295, %204
  %297 = mul nuw nsw i64 %indvars.iv53, 224
  br label %for_body35

for_end33:                                        ; preds = %for_end36
  %298 = add nuw nsw i32 %186, 1
  %exitcond56 = icmp eq i32 %298, 112
  br i1 %exitcond56, label %for_end18, label %for_begin19.preheader, !prof !5

for_body35:                                       ; preds = %for_body35, %for_begin34.preheader
  %indvars.iv50 = phi i64 [ 0, %for_begin34.preheader ], [ %indvars.iv.next51, %for_body35 ]
  %299 = add nuw nsw i64 %296, %indvars.iv50
  %300 = add nuw nsw i64 %299, 3136
  %301 = add nuw nsw i64 %299, 6272
  %302 = add nuw nsw i64 %299, 9408
  %303 = add nuw nsw i64 %299, 12544
  %304 = add nuw nsw i64 %299, 15680
  %305 = add nuw nsw i64 %299, 18816
  %306 = add nuw nsw i64 %299, 21952
  %307 = add nuw nsw i64 %299, 25088
  %308 = add nuw nsw i64 %299, 28224
  %309 = add nuw nsw i64 %299, 31360
  %310 = add nuw nsw i64 %299, 34496
  %311 = add nuw nsw i64 %299, 37632
  %312 = add nuw nsw i64 %299, 40768
  %313 = add nuw nsw i64 %299, 43904
  %314 = add nuw nsw i64 %299, 47040
  %315 = add nuw nsw i64 %299, 50176
  %316 = add nuw nsw i64 %299, 53312
  %317 = add nuw nsw i64 %299, 56448
  %318 = add nuw nsw i64 %299, 59584
  %319 = add nuw nsw i64 %299, 62720
  %320 = add nuw nsw i64 %299, 65856
  %321 = add nuw nsw i64 %299, 68992
  %322 = add nuw nsw i64 %299, 72128
  %323 = add nuw nsw i64 %299, 75264
  %324 = add nuw nsw i64 %299, 78400
  %325 = add nuw nsw i64 %299, 81536
  %326 = add nuw nsw i64 %299, 84672
  %327 = add nuw nsw i64 %299, 87808
  %328 = add nuw nsw i64 %299, 90944
  %329 = add nuw nsw i64 %299, 94080
  %330 = add nuw nsw i64 %299, 97216
  %331 = shl i64 %indvars.iv50, 5
  %332 = add nuw nsw i64 %331, %297
  %333 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %4, i64 0, i64 0, i64 %332
  %334 = bitcast float* %333 to <32 x float>*
  %335 = load <32 x float>, <32 x float>* %334, align 16, !tbaa !1033
  %336 = getelementptr inbounds float, float* %48, i64 %299
  %337 = extractelement <32 x float> %335, i64 0
  store float %337, float* %336, align 4, !tbaa !1036
  %338 = getelementptr inbounds float, float* %48, i64 %300
  %339 = extractelement <32 x float> %335, i64 1
  store float %339, float* %338, align 4, !tbaa !1036
  %340 = getelementptr inbounds float, float* %48, i64 %301
  %341 = extractelement <32 x float> %335, i64 2
  store float %341, float* %340, align 4, !tbaa !1036
  %342 = getelementptr inbounds float, float* %48, i64 %302
  %343 = extractelement <32 x float> %335, i64 3
  store float %343, float* %342, align 4, !tbaa !1036
  %344 = getelementptr inbounds float, float* %48, i64 %303
  %345 = extractelement <32 x float> %335, i64 4
  store float %345, float* %344, align 4, !tbaa !1036
  %346 = getelementptr inbounds float, float* %48, i64 %304
  %347 = extractelement <32 x float> %335, i64 5
  store float %347, float* %346, align 4, !tbaa !1036
  %348 = getelementptr inbounds float, float* %48, i64 %305
  %349 = extractelement <32 x float> %335, i64 6
  store float %349, float* %348, align 4, !tbaa !1036
  %350 = getelementptr inbounds float, float* %48, i64 %306
  %351 = extractelement <32 x float> %335, i64 7
  store float %351, float* %350, align 4, !tbaa !1036
  %352 = getelementptr inbounds float, float* %48, i64 %307
  %353 = extractelement <32 x float> %335, i64 8
  store float %353, float* %352, align 4, !tbaa !1036
  %354 = getelementptr inbounds float, float* %48, i64 %308
  %355 = extractelement <32 x float> %335, i64 9
  store float %355, float* %354, align 4, !tbaa !1036
  %356 = getelementptr inbounds float, float* %48, i64 %309
  %357 = extractelement <32 x float> %335, i64 10
  store float %357, float* %356, align 4, !tbaa !1036
  %358 = getelementptr inbounds float, float* %48, i64 %310
  %359 = extractelement <32 x float> %335, i64 11
  store float %359, float* %358, align 4, !tbaa !1036
  %360 = getelementptr inbounds float, float* %48, i64 %311
  %361 = extractelement <32 x float> %335, i64 12
  store float %361, float* %360, align 4, !tbaa !1036
  %362 = getelementptr inbounds float, float* %48, i64 %312
  %363 = extractelement <32 x float> %335, i64 13
  store float %363, float* %362, align 4, !tbaa !1036
  %364 = getelementptr inbounds float, float* %48, i64 %313
  %365 = extractelement <32 x float> %335, i64 14
  store float %365, float* %364, align 4, !tbaa !1036
  %366 = getelementptr inbounds float, float* %48, i64 %314
  %367 = extractelement <32 x float> %335, i64 15
  store float %367, float* %366, align 4, !tbaa !1036
  %368 = getelementptr inbounds float, float* %48, i64 %315
  %369 = extractelement <32 x float> %335, i64 16
  store float %369, float* %368, align 4, !tbaa !1036
  %370 = getelementptr inbounds float, float* %48, i64 %316
  %371 = extractelement <32 x float> %335, i64 17
  store float %371, float* %370, align 4, !tbaa !1036
  %372 = getelementptr inbounds float, float* %48, i64 %317
  %373 = extractelement <32 x float> %335, i64 18
  store float %373, float* %372, align 4, !tbaa !1036
  %374 = getelementptr inbounds float, float* %48, i64 %318
  %375 = extractelement <32 x float> %335, i64 19
  store float %375, float* %374, align 4, !tbaa !1036
  %376 = getelementptr inbounds float, float* %48, i64 %319
  %377 = extractelement <32 x float> %335, i64 20
  store float %377, float* %376, align 4, !tbaa !1036
  %378 = getelementptr inbounds float, float* %48, i64 %320
  %379 = extractelement <32 x float> %335, i64 21
  store float %379, float* %378, align 4, !tbaa !1036
  %380 = getelementptr inbounds float, float* %48, i64 %321
  %381 = extractelement <32 x float> %335, i64 22
  store float %381, float* %380, align 4, !tbaa !1036
  %382 = getelementptr inbounds float, float* %48, i64 %322
  %383 = extractelement <32 x float> %335, i64 23
  store float %383, float* %382, align 4, !tbaa !1036
  %384 = getelementptr inbounds float, float* %48, i64 %323
  %385 = extractelement <32 x float> %335, i64 24
  store float %385, float* %384, align 4, !tbaa !1036
  %386 = getelementptr inbounds float, float* %48, i64 %324
  %387 = extractelement <32 x float> %335, i64 25
  store float %387, float* %386, align 4, !tbaa !1036
  %388 = getelementptr inbounds float, float* %48, i64 %325
  %389 = extractelement <32 x float> %335, i64 26
  store float %389, float* %388, align 4, !tbaa !1036
  %390 = getelementptr inbounds float, float* %48, i64 %326
  %391 = extractelement <32 x float> %335, i64 27
  store float %391, float* %390, align 4, !tbaa !1036
  %392 = getelementptr inbounds float, float* %48, i64 %327
  %393 = extractelement <32 x float> %335, i64 28
  store float %393, float* %392, align 4, !tbaa !1036
  %394 = getelementptr inbounds float, float* %48, i64 %328
  %395 = extractelement <32 x float> %335, i64 29
  store float %395, float* %394, align 4, !tbaa !1036
  %396 = getelementptr inbounds float, float* %48, i64 %329
  %397 = extractelement <32 x float> %335, i64 30
  store float %397, float* %396, align 4, !tbaa !1036
  %398 = getelementptr inbounds float, float* %48, i64 %330
  %399 = extractelement <32 x float> %335, i64 31
  store float %399, float* %398, align 4, !tbaa !1036
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond52 = icmp eq i64 %indvars.iv.next51, 7
  br i1 %exitcond52, label %for_end36, label %for_body35, !prof !5

for_end36:                                        ; preds = %for_body35
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond55 = icmp eq i64 %indvars.iv.next54, 8
  br i1 %exitcond55, label %for_end33, label %for_begin34.preheader, !prof !5

for_body26.1:                                     ; preds = %for_body26.1, %for_end27
  %indvars.iv.1 = phi i64 [ 0, %for_end27 ], [ %indvars.iv.next.1, %for_body26.1 ]
  %400 = phi <32 x float> [ %293, %for_end27 ], [ %486, %for_body26.1 ]
  %401 = phi <32 x float> [ %287, %for_end27 ], [ %480, %for_body26.1 ]
  %402 = phi <32 x float> [ %286, %for_end27 ], [ %479, %for_body26.1 ]
  %403 = phi <32 x float> [ %285, %for_end27 ], [ %478, %for_body26.1 ]
  %404 = phi <32 x float> [ %284, %for_end27 ], [ %477, %for_body26.1 ]
  %405 = phi <32 x float> [ %283, %for_end27 ], [ %476, %for_body26.1 ]
  %406 = phi <32 x float> [ %282, %for_end27 ], [ %475, %for_body26.1 ]
  %407 = mul nuw nsw i64 %indvars.iv.1, 58
  %408 = add nuw nsw i64 %294, %407
  %409 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %408
  %410 = load float, float* %409, align 4, !tbaa !1024
  %411 = insertelement <32 x float> undef, float %410, i32 0
  %412 = shufflevector <32 x float> %411, <32 x float> undef, <32 x i32> zeroinitializer
  %413 = shl nsw i64 %indvars.iv.1, 5
  %414 = add nuw nsw i64 %196, %413
  %415 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %414
  %416 = bitcast float* %415 to <32 x float>*
  %417 = load <32 x float>, <32 x float>* %416, align 16, !tbaa !1030
  %418 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %417, <32 x float> %406)
  %419 = add nuw nsw i64 %408, 1
  %420 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %419
  %421 = load float, float* %420, align 4, !tbaa !1024
  %422 = insertelement <32 x float> undef, float %421, i32 0
  %423 = shufflevector <32 x float> %422, <32 x float> undef, <32 x i32> zeroinitializer
  %424 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %423, <32 x float> %417, <32 x float> %405)
  %425 = add nuw nsw i64 %408, 2
  %426 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %425
  %427 = load float, float* %426, align 4, !tbaa !1024
  %428 = insertelement <32 x float> undef, float %427, i32 0
  %429 = shufflevector <32 x float> %428, <32 x float> undef, <32 x i32> zeroinitializer
  %430 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %417, <32 x float> %404)
  %431 = add nuw nsw i64 %408, 3
  %432 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %431
  %433 = load float, float* %432, align 4, !tbaa !1024
  %434 = insertelement <32 x float> undef, float %433, i32 0
  %435 = shufflevector <32 x float> %434, <32 x float> undef, <32 x i32> zeroinitializer
  %436 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %417, <32 x float> %403)
  %437 = add nuw nsw i64 %408, 4
  %438 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %437
  %439 = load float, float* %438, align 4, !tbaa !1024
  %440 = insertelement <32 x float> undef, float %439, i32 0
  %441 = shufflevector <32 x float> %440, <32 x float> undef, <32 x i32> zeroinitializer
  %442 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %417, <32 x float> %402)
  %443 = add nuw nsw i64 %408, 5
  %444 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %443
  %445 = load float, float* %444, align 4, !tbaa !1024
  %446 = insertelement <32 x float> undef, float %445, i32 0
  %447 = shufflevector <32 x float> %446, <32 x float> undef, <32 x i32> zeroinitializer
  %448 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %447, <32 x float> %417, <32 x float> %401)
  %449 = add nuw nsw i64 %408, 6
  %450 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %449
  %451 = load float, float* %450, align 4, !tbaa !1024
  %452 = insertelement <32 x float> undef, float %451, i32 0
  %453 = shufflevector <32 x float> %452, <32 x float> undef, <32 x i32> zeroinitializer
  %454 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %453, <32 x float> %417, <32 x float> %400)
  %455 = add nuw nsw i64 %414, 2048
  %456 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %455
  %457 = bitcast float* %456 to <32 x float>*
  %458 = load <32 x float>, <32 x float>* %457, align 16, !tbaa !1030
  %459 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %423, <32 x float> %458, <32 x float> %418)
  %460 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %458, <32 x float> %424)
  %461 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %458, <32 x float> %430)
  %462 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %458, <32 x float> %436)
  %463 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %447, <32 x float> %458, <32 x float> %442)
  %464 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %453, <32 x float> %458, <32 x float> %448)
  %465 = add nuw nsw i64 %408, 7
  %466 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %465
  %467 = load float, float* %466, align 4, !tbaa !1024
  %468 = insertelement <32 x float> undef, float %467, i32 0
  %469 = shufflevector <32 x float> %468, <32 x float> undef, <32 x i32> zeroinitializer
  %470 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %469, <32 x float> %458, <32 x float> %454)
  %471 = add nuw nsw i64 %414, 4096
  %472 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %471
  %473 = bitcast float* %472 to <32 x float>*
  %474 = load <32 x float>, <32 x float>* %473, align 16, !tbaa !1030
  %475 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %429, <32 x float> %474, <32 x float> %459)
  %476 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %435, <32 x float> %474, <32 x float> %460)
  %477 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %441, <32 x float> %474, <32 x float> %461)
  %478 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %447, <32 x float> %474, <32 x float> %462)
  %479 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %453, <32 x float> %474, <32 x float> %463)
  %480 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %469, <32 x float> %474, <32 x float> %464)
  %481 = add nuw nsw i64 %408, 8
  %482 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %481
  %483 = load float, float* %482, align 4, !tbaa !1024
  %484 = insertelement <32 x float> undef, float %483, i32 0
  %485 = shufflevector <32 x float> %484, <32 x float> undef, <32 x i32> zeroinitializer
  %486 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %485, <32 x float> %474, <32 x float> %470)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end27.1, label %for_body26.1, !prof !5

for_end27.1:                                      ; preds = %for_body26.1
  %487 = add nuw nsw i64 %205, %199
  br label %for_body26.2

for_body26.2:                                     ; preds = %for_body26.2, %for_end27.1
  %indvars.iv.2 = phi i64 [ 0, %for_end27.1 ], [ %indvars.iv.next.2, %for_body26.2 ]
  %488 = phi <32 x float> [ %486, %for_end27.1 ], [ %574, %for_body26.2 ]
  %489 = phi <32 x float> [ %480, %for_end27.1 ], [ %568, %for_body26.2 ]
  %490 = phi <32 x float> [ %479, %for_end27.1 ], [ %567, %for_body26.2 ]
  %491 = phi <32 x float> [ %478, %for_end27.1 ], [ %566, %for_body26.2 ]
  %492 = phi <32 x float> [ %477, %for_end27.1 ], [ %565, %for_body26.2 ]
  %493 = phi <32 x float> [ %476, %for_end27.1 ], [ %564, %for_body26.2 ]
  %494 = phi <32 x float> [ %475, %for_end27.1 ], [ %563, %for_body26.2 ]
  %495 = mul nuw nsw i64 %indvars.iv.2, 58
  %496 = add nuw nsw i64 %487, %495
  %497 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %496
  %498 = load float, float* %497, align 4, !tbaa !1024
  %499 = insertelement <32 x float> undef, float %498, i32 0
  %500 = shufflevector <32 x float> %499, <32 x float> undef, <32 x i32> zeroinitializer
  %501 = shl nsw i64 %indvars.iv.2, 5
  %502 = add nuw nsw i64 %200, %501
  %503 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %502
  %504 = bitcast float* %503 to <32 x float>*
  %505 = load <32 x float>, <32 x float>* %504, align 16, !tbaa !1030
  %506 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %500, <32 x float> %505, <32 x float> %494)
  %507 = add nuw nsw i64 %496, 1
  %508 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %507
  %509 = load float, float* %508, align 4, !tbaa !1024
  %510 = insertelement <32 x float> undef, float %509, i32 0
  %511 = shufflevector <32 x float> %510, <32 x float> undef, <32 x i32> zeroinitializer
  %512 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %505, <32 x float> %493)
  %513 = add nuw nsw i64 %496, 2
  %514 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %513
  %515 = load float, float* %514, align 4, !tbaa !1024
  %516 = insertelement <32 x float> undef, float %515, i32 0
  %517 = shufflevector <32 x float> %516, <32 x float> undef, <32 x i32> zeroinitializer
  %518 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %505, <32 x float> %492)
  %519 = add nuw nsw i64 %496, 3
  %520 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %519
  %521 = load float, float* %520, align 4, !tbaa !1024
  %522 = insertelement <32 x float> undef, float %521, i32 0
  %523 = shufflevector <32 x float> %522, <32 x float> undef, <32 x i32> zeroinitializer
  %524 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %505, <32 x float> %491)
  %525 = add nuw nsw i64 %496, 4
  %526 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %525
  %527 = load float, float* %526, align 4, !tbaa !1024
  %528 = insertelement <32 x float> undef, float %527, i32 0
  %529 = shufflevector <32 x float> %528, <32 x float> undef, <32 x i32> zeroinitializer
  %530 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %505, <32 x float> %490)
  %531 = add nuw nsw i64 %496, 5
  %532 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %531
  %533 = load float, float* %532, align 4, !tbaa !1024
  %534 = insertelement <32 x float> undef, float %533, i32 0
  %535 = shufflevector <32 x float> %534, <32 x float> undef, <32 x i32> zeroinitializer
  %536 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %535, <32 x float> %505, <32 x float> %489)
  %537 = add nuw nsw i64 %496, 6
  %538 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %537
  %539 = load float, float* %538, align 4, !tbaa !1024
  %540 = insertelement <32 x float> undef, float %539, i32 0
  %541 = shufflevector <32 x float> %540, <32 x float> undef, <32 x i32> zeroinitializer
  %542 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %541, <32 x float> %505, <32 x float> %488)
  %543 = add nuw nsw i64 %502, 2048
  %544 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %543
  %545 = bitcast float* %544 to <32 x float>*
  %546 = load <32 x float>, <32 x float>* %545, align 16, !tbaa !1030
  %547 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %546, <32 x float> %506)
  %548 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %546, <32 x float> %512)
  %549 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %546, <32 x float> %518)
  %550 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %546, <32 x float> %524)
  %551 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %535, <32 x float> %546, <32 x float> %530)
  %552 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %541, <32 x float> %546, <32 x float> %536)
  %553 = add nuw nsw i64 %496, 7
  %554 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %553
  %555 = load float, float* %554, align 4, !tbaa !1024
  %556 = insertelement <32 x float> undef, float %555, i32 0
  %557 = shufflevector <32 x float> %556, <32 x float> undef, <32 x i32> zeroinitializer
  %558 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %557, <32 x float> %546, <32 x float> %542)
  %559 = add nuw nsw i64 %502, 4096
  %560 = getelementptr inbounds [1152 x <32 x float>], [1152 x <32 x float>]* %5, i64 0, i64 0, i64 %559
  %561 = bitcast float* %560 to <32 x float>*
  %562 = load <32 x float>, <32 x float>* %561, align 16, !tbaa !1030
  %563 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %517, <32 x float> %562, <32 x float> %547)
  %564 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %523, <32 x float> %562, <32 x float> %548)
  %565 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %562, <32 x float> %549)
  %566 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %535, <32 x float> %562, <32 x float> %550)
  %567 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %541, <32 x float> %562, <32 x float> %551)
  %568 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %557, <32 x float> %562, <32 x float> %552)
  %569 = add nuw nsw i64 %496, 8
  %570 = getelementptr inbounds [215296 x float], [215296 x float]* %6, i64 0, i64 %569
  %571 = load float, float* %570, align 4, !tbaa !1024
  %572 = insertelement <32 x float> undef, float %571, i32 0
  %573 = shufflevector <32 x float> %572, <32 x float> undef, <32 x i32> zeroinitializer
  %574 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %573, <32 x float> %562, <32 x float> %558)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end27.2, label %for_body26.2, !prof !5

for_end27.2:                                      ; preds = %for_body26.2
  store <32 x float> %563, <32 x float>* %.sub, align 128, !tbaa !1039
  store <32 x float> %564, <32 x float>* %37, align 128, !tbaa !1039
  store <32 x float> %565, <32 x float>* %39, align 128, !tbaa !1039
  store <32 x float> %566, <32 x float>* %41, align 128, !tbaa !1039
  store <32 x float> %567, <32 x float>* %43, align 128, !tbaa !1039
  store <32 x float> %568, <32 x float>* %45, align 128, !tbaa !1039
  store <32 x float> %574, <32 x float>* %47, align 128, !tbaa !1039
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep48, i8* nonnull align 128 %26, i64 896, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond49 = icmp eq i64 %indvar.next, 8
  br i1 %exitcond49, label %for_begin31.preheader, label %for_body20, !prof !5
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_14(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_14_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_14_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [56 x <32 x float>], align 16
  %4 = alloca [512 x <32 x float>], align 16
  %5 = alloca [802816 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = mul nuw nsw i64 %indvar, 14336
  %7 = mul nuw nsw i64 %indvar, 224
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %8 = bitcast i8* %1 to float*
  br label %for_body11

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar40 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next41, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvar40, 56
  %10 = add nuw nsw i64 %6, %9
  %scevgep = getelementptr [802816 x float], [802816 x float]* %5, i64 0, i64 %10
  %scevgep42 = bitcast float* %scevgep to i8*
  %11 = mul nuw nsw i64 %indvar40, 12544
  %12 = add nuw nsw i64 %7, %11
  %scevgep43 = getelementptr i8, i8* %0, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep42, i8* align 4 %scevgep43, i64 224, i1 false)
  %indvar.next41 = add nuw nsw i64 %indvar40, 1
  %exitcond44 = icmp eq i64 %indvar.next41, 256
  br i1 %exitcond44, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond45 = icmp eq i64 %indvar.next, 56
  br i1 %exitcond45, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_body11:                                       ; preds = %for_body11, %for_begin7.preheader
  %indvars.iv31 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next32, %for_body11 ]
  %13 = shl i64 %indvars.iv31, 5
  %14 = add nuw nsw i64 %indvars.iv31, 256
  %15 = add nuw nsw i64 %indvars.iv31, 512
  %16 = add nuw nsw i64 %indvars.iv31, 768
  %17 = add nuw nsw i64 %indvars.iv31, 1024
  %18 = add nuw nsw i64 %indvars.iv31, 1280
  %19 = add nuw nsw i64 %indvars.iv31, 1536
  %20 = add nuw nsw i64 %indvars.iv31, 1792
  %21 = add nuw nsw i64 %indvars.iv31, 2048
  %22 = add nuw nsw i64 %indvars.iv31, 2304
  %23 = add nuw nsw i64 %indvars.iv31, 2560
  %24 = add nuw nsw i64 %indvars.iv31, 2816
  %25 = add nuw nsw i64 %indvars.iv31, 3072
  %26 = add nuw nsw i64 %indvars.iv31, 3328
  %27 = add nuw nsw i64 %indvars.iv31, 3584
  %28 = add nuw nsw i64 %indvars.iv31, 3840
  %29 = add nuw nsw i64 %indvars.iv31, 4096
  %30 = add nuw nsw i64 %indvars.iv31, 4352
  %31 = add nuw nsw i64 %indvars.iv31, 4608
  %32 = add nuw nsw i64 %indvars.iv31, 4864
  %33 = add nuw nsw i64 %indvars.iv31, 5120
  %34 = add nuw nsw i64 %indvars.iv31, 5376
  %35 = add nuw nsw i64 %indvars.iv31, 5632
  %36 = add nuw nsw i64 %indvars.iv31, 5888
  %37 = add nuw nsw i64 %indvars.iv31, 6144
  %38 = add nuw nsw i64 %indvars.iv31, 6400
  %39 = add nuw nsw i64 %indvars.iv31, 6656
  %40 = add nuw nsw i64 %indvars.iv31, 6912
  %41 = add nuw nsw i64 %indvars.iv31, 7168
  %42 = add nuw nsw i64 %indvars.iv31, 7424
  %43 = add nuw nsw i64 %indvars.iv31, 7680
  %44 = add nuw nsw i64 %indvars.iv31, 7936
  %45 = getelementptr inbounds float, float* %8, i64 %indvars.iv31
  %46 = load float, float* %45, align 4, !tbaa !1048
  %47 = insertelement <32 x float> undef, float %46, i32 0
  %48 = getelementptr inbounds float, float* %8, i64 %14
  %49 = load float, float* %48, align 4, !tbaa !1048
  %50 = insertelement <32 x float> %47, float %49, i32 1
  %51 = getelementptr inbounds float, float* %8, i64 %15
  %52 = load float, float* %51, align 4, !tbaa !1048
  %53 = insertelement <32 x float> %50, float %52, i32 2
  %54 = getelementptr inbounds float, float* %8, i64 %16
  %55 = load float, float* %54, align 4, !tbaa !1048
  %56 = insertelement <32 x float> %53, float %55, i32 3
  %57 = getelementptr inbounds float, float* %8, i64 %17
  %58 = load float, float* %57, align 4, !tbaa !1048
  %59 = insertelement <32 x float> %56, float %58, i32 4
  %60 = getelementptr inbounds float, float* %8, i64 %18
  %61 = load float, float* %60, align 4, !tbaa !1048
  %62 = insertelement <32 x float> %59, float %61, i32 5
  %63 = getelementptr inbounds float, float* %8, i64 %19
  %64 = load float, float* %63, align 4, !tbaa !1048
  %65 = insertelement <32 x float> %62, float %64, i32 6
  %66 = getelementptr inbounds float, float* %8, i64 %20
  %67 = load float, float* %66, align 4, !tbaa !1048
  %68 = insertelement <32 x float> %65, float %67, i32 7
  %69 = getelementptr inbounds float, float* %8, i64 %21
  %70 = load float, float* %69, align 4, !tbaa !1048
  %71 = insertelement <32 x float> %68, float %70, i32 8
  %72 = getelementptr inbounds float, float* %8, i64 %22
  %73 = load float, float* %72, align 4, !tbaa !1048
  %74 = insertelement <32 x float> %71, float %73, i32 9
  %75 = getelementptr inbounds float, float* %8, i64 %23
  %76 = load float, float* %75, align 4, !tbaa !1048
  %77 = insertelement <32 x float> %74, float %76, i32 10
  %78 = getelementptr inbounds float, float* %8, i64 %24
  %79 = load float, float* %78, align 4, !tbaa !1048
  %80 = insertelement <32 x float> %77, float %79, i32 11
  %81 = getelementptr inbounds float, float* %8, i64 %25
  %82 = load float, float* %81, align 4, !tbaa !1048
  %83 = insertelement <32 x float> %80, float %82, i32 12
  %84 = getelementptr inbounds float, float* %8, i64 %26
  %85 = load float, float* %84, align 4, !tbaa !1048
  %86 = insertelement <32 x float> %83, float %85, i32 13
  %87 = getelementptr inbounds float, float* %8, i64 %27
  %88 = load float, float* %87, align 4, !tbaa !1048
  %89 = insertelement <32 x float> %86, float %88, i32 14
  %90 = getelementptr inbounds float, float* %8, i64 %28
  %91 = load float, float* %90, align 4, !tbaa !1048
  %92 = insertelement <32 x float> %89, float %91, i32 15
  %93 = getelementptr inbounds float, float* %8, i64 %29
  %94 = load float, float* %93, align 4, !tbaa !1048
  %95 = insertelement <32 x float> %92, float %94, i32 16
  %96 = getelementptr inbounds float, float* %8, i64 %30
  %97 = load float, float* %96, align 4, !tbaa !1048
  %98 = insertelement <32 x float> %95, float %97, i32 17
  %99 = getelementptr inbounds float, float* %8, i64 %31
  %100 = load float, float* %99, align 4, !tbaa !1048
  %101 = insertelement <32 x float> %98, float %100, i32 18
  %102 = getelementptr inbounds float, float* %8, i64 %32
  %103 = load float, float* %102, align 4, !tbaa !1048
  %104 = insertelement <32 x float> %101, float %103, i32 19
  %105 = getelementptr inbounds float, float* %8, i64 %33
  %106 = load float, float* %105, align 4, !tbaa !1048
  %107 = insertelement <32 x float> %104, float %106, i32 20
  %108 = getelementptr inbounds float, float* %8, i64 %34
  %109 = load float, float* %108, align 4, !tbaa !1048
  %110 = insertelement <32 x float> %107, float %109, i32 21
  %111 = getelementptr inbounds float, float* %8, i64 %35
  %112 = load float, float* %111, align 4, !tbaa !1048
  %113 = insertelement <32 x float> %110, float %112, i32 22
  %114 = getelementptr inbounds float, float* %8, i64 %36
  %115 = load float, float* %114, align 4, !tbaa !1048
  %116 = insertelement <32 x float> %113, float %115, i32 23
  %117 = getelementptr inbounds float, float* %8, i64 %37
  %118 = load float, float* %117, align 4, !tbaa !1048
  %119 = insertelement <32 x float> %116, float %118, i32 24
  %120 = getelementptr inbounds float, float* %8, i64 %38
  %121 = load float, float* %120, align 4, !tbaa !1048
  %122 = insertelement <32 x float> %119, float %121, i32 25
  %123 = getelementptr inbounds float, float* %8, i64 %39
  %124 = load float, float* %123, align 4, !tbaa !1048
  %125 = insertelement <32 x float> %122, float %124, i32 26
  %126 = getelementptr inbounds float, float* %8, i64 %40
  %127 = load float, float* %126, align 4, !tbaa !1048
  %128 = insertelement <32 x float> %125, float %127, i32 27
  %129 = getelementptr inbounds float, float* %8, i64 %41
  %130 = load float, float* %129, align 4, !tbaa !1048
  %131 = insertelement <32 x float> %128, float %130, i32 28
  %132 = getelementptr inbounds float, float* %8, i64 %42
  %133 = load float, float* %132, align 4, !tbaa !1048
  %134 = insertelement <32 x float> %131, float %133, i32 29
  %135 = getelementptr inbounds float, float* %8, i64 %43
  %136 = load float, float* %135, align 4, !tbaa !1048
  %137 = insertelement <32 x float> %134, float %136, i32 30
  %138 = getelementptr inbounds float, float* %8, i64 %44
  %139 = load float, float* %138, align 4, !tbaa !1048
  %140 = insertelement <32 x float> %137, float %139, i32 31
  %141 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %13
  %142 = bitcast float* %141 to <32 x float>*
  store <32 x float> %140, <32 x float>* %142, align 16, !tbaa !1051
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %exitcond33 = icmp eq i64 %indvars.iv.next32, 256
  br i1 %exitcond33, label %for_body11.1, label %for_body11, !prof !5

for_begin16.preheader:                            ; preds = %for_end24, %for_end12.1
  %143 = phi i32 [ 0, %for_end12.1 ], [ %242, %for_end24 ]
  %144 = urem i32 %143, 56
  %145 = mul nuw nsw i32 %144, 14336
  %146 = udiv i32 %143, 56
  %147 = shl i32 %146, 13
  %148 = sext i32 %147 to i64
  %149 = zext i32 %145 to i64
  br label %for_body17

for_end15:                                        ; preds = %for_end24
  ret void

for_begin22.preheader:                            ; preds = %for_end21
  %150 = mul nuw nsw i32 %144, 56
  %151 = mul nsw i32 %146, 100352
  %152 = add nuw nsw i32 %151, %150
  %153 = zext i32 %152 to i64
  br label %for_begin25.preheader

for_body17:                                       ; preds = %for_end21, %for_begin16.preheader
  %indvars.iv21 = phi i64 [ 0, %for_begin16.preheader ], [ %indvars.iv.next22, %for_end21 ]
  %154 = mul nuw nsw i64 %indvars.iv21, 224
  %155 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %154
  %156 = bitcast float* %155 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %156, align 16, !tbaa !1054
  %157 = add nuw nsw i64 %154, 32
  %158 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %157
  %159 = bitcast float* %158 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %159, align 16, !tbaa !1054
  %160 = add nuw nsw i64 %154, 64
  %161 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %160
  %162 = bitcast float* %161 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %162, align 16, !tbaa !1054
  %163 = add nuw nsw i64 %154, 96
  %164 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %163
  %165 = bitcast float* %164 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %165, align 16, !tbaa !1054
  %166 = add nuw nsw i64 %154, 128
  %167 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %166
  %168 = bitcast float* %167 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %168, align 16, !tbaa !1054
  %169 = add nuw nsw i64 %154, 160
  %170 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %169
  %171 = bitcast float* %170 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %171, align 16, !tbaa !1054
  %172 = add nuw nsw i64 %154, 192
  %173 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %172
  %174 = bitcast float* %173 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %174, align 16, !tbaa !1054
  %175 = mul nuw nsw i64 %indvars.iv21, 7
  %176 = add nuw nsw i64 %175, %149
  br label %for_body20

for_body20:                                       ; preds = %for_body20, %for_body17
  %indvars.iv = phi i64 [ 0, %for_body17 ], [ %indvars.iv.next, %for_body20 ]
  %177 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %238, %for_body20 ]
  %178 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %231, %for_body20 ]
  %179 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %224, %for_body20 ]
  %180 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %217, %for_body20 ]
  %181 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %210, %for_body20 ]
  %182 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %203, %for_body20 ]
  %183 = phi <32 x float> [ zeroinitializer, %for_body17 ], [ %196, %for_body20 ]
  %184 = mul nuw nsw i64 %indvars.iv, 56
  %185 = add nuw nsw i64 %176, %184
  %186 = and i64 %185, 4294967295
  %187 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !1057
  %189 = insertelement <32 x float> undef, float %188, i32 0
  %190 = shufflevector <32 x float> %189, <32 x float> undef, <32 x i32> zeroinitializer
  %191 = shl i64 %indvars.iv, 5
  %192 = add nuw nsw i64 %191, %148
  %193 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %192
  %194 = bitcast float* %193 to <32 x float>*
  %195 = load <32 x float>, <32 x float>* %194, align 16, !tbaa !1051
  %196 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %190, <32 x float> %195, <32 x float> %183)
  %197 = add nuw i64 %185, 1
  %198 = and i64 %197, 4294967295
  %199 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !1057
  %201 = insertelement <32 x float> undef, float %200, i32 0
  %202 = shufflevector <32 x float> %201, <32 x float> undef, <32 x i32> zeroinitializer
  %203 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %202, <32 x float> %195, <32 x float> %182)
  %204 = add nuw i64 %185, 2
  %205 = and i64 %204, 4294967295
  %206 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !1057
  %208 = insertelement <32 x float> undef, float %207, i32 0
  %209 = shufflevector <32 x float> %208, <32 x float> undef, <32 x i32> zeroinitializer
  %210 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %209, <32 x float> %195, <32 x float> %181)
  %211 = add nuw i64 %185, 3
  %212 = and i64 %211, 4294967295
  %213 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %212
  %214 = load float, float* %213, align 4, !tbaa !1057
  %215 = insertelement <32 x float> undef, float %214, i32 0
  %216 = shufflevector <32 x float> %215, <32 x float> undef, <32 x i32> zeroinitializer
  %217 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %216, <32 x float> %195, <32 x float> %180)
  %218 = add nuw i64 %185, 4
  %219 = and i64 %218, 4294967295
  %220 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %219
  %221 = load float, float* %220, align 4, !tbaa !1057
  %222 = insertelement <32 x float> undef, float %221, i32 0
  %223 = shufflevector <32 x float> %222, <32 x float> undef, <32 x i32> zeroinitializer
  %224 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %223, <32 x float> %195, <32 x float> %179)
  %225 = add nuw i64 %185, 5
  %226 = and i64 %225, 4294967295
  %227 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !1057
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %195, <32 x float> %178)
  %232 = add nuw i64 %185, 6
  %233 = and i64 %232, 4294967295
  %234 = getelementptr inbounds [802816 x float], [802816 x float]* %5, i64 0, i64 %233
  %235 = load float, float* %234, align 4, !tbaa !1057
  %236 = insertelement <32 x float> undef, float %235, i32 0
  %237 = shufflevector <32 x float> %236, <32 x float> undef, <32 x i32> zeroinitializer
  %238 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %237, <32 x float> %195, <32 x float> %177)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end21, label %for_body20, !prof !5

for_end21:                                        ; preds = %for_body20
  store <32 x float> %196, <32 x float>* %156, align 16, !tbaa !1054
  store <32 x float> %203, <32 x float>* %159, align 16, !tbaa !1054
  store <32 x float> %210, <32 x float>* %162, align 16, !tbaa !1054
  store <32 x float> %217, <32 x float>* %165, align 16, !tbaa !1054
  store <32 x float> %224, <32 x float>* %168, align 16, !tbaa !1054
  store <32 x float> %231, <32 x float>* %171, align 16, !tbaa !1054
  store <32 x float> %238, <32 x float>* %174, align 16, !tbaa !1054
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond23 = icmp eq i64 %indvars.iv.next22, 8
  br i1 %exitcond23, label %for_begin22.preheader, label %for_body17, !prof !5

for_begin25.preheader:                            ; preds = %for_end27, %for_begin22.preheader
  %indvars.iv27 = phi i64 [ 0, %for_begin22.preheader ], [ %indvars.iv.next28, %for_end27 ]
  %239 = mul nuw nsw i64 %indvars.iv27, 7
  %240 = add nuw nsw i64 %239, %153
  %241 = mul nuw nsw i64 %indvars.iv27, 224
  br label %for_body26

for_end24:                                        ; preds = %for_end27
  %242 = add nuw nsw i32 %143, 1
  %exitcond30 = icmp eq i32 %242, 112
  br i1 %exitcond30, label %for_end15, label %for_begin16.preheader, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv24 = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next25, %for_body26 ]
  %243 = add nuw nsw i64 %240, %indvars.iv24
  %244 = add nuw nsw i64 %243, 3136
  %245 = add nuw nsw i64 %243, 6272
  %246 = add nuw nsw i64 %243, 9408
  %247 = add nuw nsw i64 %243, 12544
  %248 = add nuw nsw i64 %243, 15680
  %249 = add nuw nsw i64 %243, 18816
  %250 = add nuw nsw i64 %243, 21952
  %251 = add nuw nsw i64 %243, 25088
  %252 = add nuw nsw i64 %243, 28224
  %253 = add nuw nsw i64 %243, 31360
  %254 = add nuw nsw i64 %243, 34496
  %255 = add nuw nsw i64 %243, 37632
  %256 = add nuw nsw i64 %243, 40768
  %257 = add nuw nsw i64 %243, 43904
  %258 = add nuw nsw i64 %243, 47040
  %259 = add nuw nsw i64 %243, 50176
  %260 = add nuw nsw i64 %243, 53312
  %261 = add nuw nsw i64 %243, 56448
  %262 = add nuw nsw i64 %243, 59584
  %263 = add nuw nsw i64 %243, 62720
  %264 = add nuw nsw i64 %243, 65856
  %265 = add nuw nsw i64 %243, 68992
  %266 = add nuw nsw i64 %243, 72128
  %267 = add nuw nsw i64 %243, 75264
  %268 = add nuw nsw i64 %243, 78400
  %269 = add nuw nsw i64 %243, 81536
  %270 = add nuw nsw i64 %243, 84672
  %271 = add nuw nsw i64 %243, 87808
  %272 = add nuw nsw i64 %243, 90944
  %273 = add nuw nsw i64 %243, 94080
  %274 = add nuw nsw i64 %243, 97216
  %275 = shl i64 %indvars.iv24, 5
  %276 = add nuw nsw i64 %275, %241
  %277 = getelementptr inbounds [56 x <32 x float>], [56 x <32 x float>]* %3, i64 0, i64 0, i64 %276
  %278 = bitcast float* %277 to <32 x float>*
  %279 = load <32 x float>, <32 x float>* %278, align 16, !tbaa !1054
  %280 = getelementptr inbounds float, float* %476, i64 %243
  %281 = extractelement <32 x float> %279, i64 0
  store float %281, float* %280, align 4, !tbaa !1060
  %282 = getelementptr inbounds float, float* %476, i64 %244
  %283 = extractelement <32 x float> %279, i64 1
  store float %283, float* %282, align 4, !tbaa !1060
  %284 = getelementptr inbounds float, float* %476, i64 %245
  %285 = extractelement <32 x float> %279, i64 2
  store float %285, float* %284, align 4, !tbaa !1060
  %286 = getelementptr inbounds float, float* %476, i64 %246
  %287 = extractelement <32 x float> %279, i64 3
  store float %287, float* %286, align 4, !tbaa !1060
  %288 = getelementptr inbounds float, float* %476, i64 %247
  %289 = extractelement <32 x float> %279, i64 4
  store float %289, float* %288, align 4, !tbaa !1060
  %290 = getelementptr inbounds float, float* %476, i64 %248
  %291 = extractelement <32 x float> %279, i64 5
  store float %291, float* %290, align 4, !tbaa !1060
  %292 = getelementptr inbounds float, float* %476, i64 %249
  %293 = extractelement <32 x float> %279, i64 6
  store float %293, float* %292, align 4, !tbaa !1060
  %294 = getelementptr inbounds float, float* %476, i64 %250
  %295 = extractelement <32 x float> %279, i64 7
  store float %295, float* %294, align 4, !tbaa !1060
  %296 = getelementptr inbounds float, float* %476, i64 %251
  %297 = extractelement <32 x float> %279, i64 8
  store float %297, float* %296, align 4, !tbaa !1060
  %298 = getelementptr inbounds float, float* %476, i64 %252
  %299 = extractelement <32 x float> %279, i64 9
  store float %299, float* %298, align 4, !tbaa !1060
  %300 = getelementptr inbounds float, float* %476, i64 %253
  %301 = extractelement <32 x float> %279, i64 10
  store float %301, float* %300, align 4, !tbaa !1060
  %302 = getelementptr inbounds float, float* %476, i64 %254
  %303 = extractelement <32 x float> %279, i64 11
  store float %303, float* %302, align 4, !tbaa !1060
  %304 = getelementptr inbounds float, float* %476, i64 %255
  %305 = extractelement <32 x float> %279, i64 12
  store float %305, float* %304, align 4, !tbaa !1060
  %306 = getelementptr inbounds float, float* %476, i64 %256
  %307 = extractelement <32 x float> %279, i64 13
  store float %307, float* %306, align 4, !tbaa !1060
  %308 = getelementptr inbounds float, float* %476, i64 %257
  %309 = extractelement <32 x float> %279, i64 14
  store float %309, float* %308, align 4, !tbaa !1060
  %310 = getelementptr inbounds float, float* %476, i64 %258
  %311 = extractelement <32 x float> %279, i64 15
  store float %311, float* %310, align 4, !tbaa !1060
  %312 = getelementptr inbounds float, float* %476, i64 %259
  %313 = extractelement <32 x float> %279, i64 16
  store float %313, float* %312, align 4, !tbaa !1060
  %314 = getelementptr inbounds float, float* %476, i64 %260
  %315 = extractelement <32 x float> %279, i64 17
  store float %315, float* %314, align 4, !tbaa !1060
  %316 = getelementptr inbounds float, float* %476, i64 %261
  %317 = extractelement <32 x float> %279, i64 18
  store float %317, float* %316, align 4, !tbaa !1060
  %318 = getelementptr inbounds float, float* %476, i64 %262
  %319 = extractelement <32 x float> %279, i64 19
  store float %319, float* %318, align 4, !tbaa !1060
  %320 = getelementptr inbounds float, float* %476, i64 %263
  %321 = extractelement <32 x float> %279, i64 20
  store float %321, float* %320, align 4, !tbaa !1060
  %322 = getelementptr inbounds float, float* %476, i64 %264
  %323 = extractelement <32 x float> %279, i64 21
  store float %323, float* %322, align 4, !tbaa !1060
  %324 = getelementptr inbounds float, float* %476, i64 %265
  %325 = extractelement <32 x float> %279, i64 22
  store float %325, float* %324, align 4, !tbaa !1060
  %326 = getelementptr inbounds float, float* %476, i64 %266
  %327 = extractelement <32 x float> %279, i64 23
  store float %327, float* %326, align 4, !tbaa !1060
  %328 = getelementptr inbounds float, float* %476, i64 %267
  %329 = extractelement <32 x float> %279, i64 24
  store float %329, float* %328, align 4, !tbaa !1060
  %330 = getelementptr inbounds float, float* %476, i64 %268
  %331 = extractelement <32 x float> %279, i64 25
  store float %331, float* %330, align 4, !tbaa !1060
  %332 = getelementptr inbounds float, float* %476, i64 %269
  %333 = extractelement <32 x float> %279, i64 26
  store float %333, float* %332, align 4, !tbaa !1060
  %334 = getelementptr inbounds float, float* %476, i64 %270
  %335 = extractelement <32 x float> %279, i64 27
  store float %335, float* %334, align 4, !tbaa !1060
  %336 = getelementptr inbounds float, float* %476, i64 %271
  %337 = extractelement <32 x float> %279, i64 28
  store float %337, float* %336, align 4, !tbaa !1060
  %338 = getelementptr inbounds float, float* %476, i64 %272
  %339 = extractelement <32 x float> %279, i64 29
  store float %339, float* %338, align 4, !tbaa !1060
  %340 = getelementptr inbounds float, float* %476, i64 %273
  %341 = extractelement <32 x float> %279, i64 30
  store float %341, float* %340, align 4, !tbaa !1060
  %342 = getelementptr inbounds float, float* %476, i64 %274
  %343 = extractelement <32 x float> %279, i64 31
  store float %343, float* %342, align 4, !tbaa !1060
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond26 = icmp eq i64 %indvars.iv.next25, 7
  br i1 %exitcond26, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next28, 8
  br i1 %exitcond29, label %for_end24, label %for_begin25.preheader, !prof !5

for_body11.1:                                     ; preds = %for_body11, %for_body11.1
  %indvars.iv31.1 = phi i64 [ %indvars.iv.next32.1, %for_body11.1 ], [ 0, %for_body11 ]
  %344 = shl i64 %indvars.iv31.1, 5
  %345 = add nuw nsw i64 %344, 8192
  %346 = add nuw nsw i64 %indvars.iv31.1, 8192
  %347 = add nuw nsw i64 %indvars.iv31.1, 8448
  %348 = add nuw nsw i64 %indvars.iv31.1, 8704
  %349 = add nuw nsw i64 %indvars.iv31.1, 8960
  %350 = add nuw nsw i64 %indvars.iv31.1, 9216
  %351 = add nuw nsw i64 %indvars.iv31.1, 9472
  %352 = add nuw nsw i64 %indvars.iv31.1, 9728
  %353 = add nuw nsw i64 %indvars.iv31.1, 9984
  %354 = add nuw nsw i64 %indvars.iv31.1, 10240
  %355 = add nuw nsw i64 %indvars.iv31.1, 10496
  %356 = add nuw nsw i64 %indvars.iv31.1, 10752
  %357 = add nuw nsw i64 %indvars.iv31.1, 11008
  %358 = add nuw nsw i64 %indvars.iv31.1, 11264
  %359 = add nuw nsw i64 %indvars.iv31.1, 11520
  %360 = add nuw nsw i64 %indvars.iv31.1, 11776
  %361 = add nuw nsw i64 %indvars.iv31.1, 12032
  %362 = add nuw nsw i64 %indvars.iv31.1, 12288
  %363 = add nuw nsw i64 %indvars.iv31.1, 12544
  %364 = add nuw nsw i64 %indvars.iv31.1, 12800
  %365 = add nuw nsw i64 %indvars.iv31.1, 13056
  %366 = add nuw nsw i64 %indvars.iv31.1, 13312
  %367 = add nuw nsw i64 %indvars.iv31.1, 13568
  %368 = add nuw nsw i64 %indvars.iv31.1, 13824
  %369 = add nuw nsw i64 %indvars.iv31.1, 14080
  %370 = add nuw nsw i64 %indvars.iv31.1, 14336
  %371 = add nuw nsw i64 %indvars.iv31.1, 14592
  %372 = add nuw nsw i64 %indvars.iv31.1, 14848
  %373 = add nuw nsw i64 %indvars.iv31.1, 15104
  %374 = add nuw nsw i64 %indvars.iv31.1, 15360
  %375 = add nuw nsw i64 %indvars.iv31.1, 15616
  %376 = add nuw nsw i64 %indvars.iv31.1, 15872
  %377 = add nuw nsw i64 %indvars.iv31.1, 16128
  %378 = getelementptr inbounds float, float* %8, i64 %346
  %379 = load float, float* %378, align 4, !tbaa !1048
  %380 = insertelement <32 x float> undef, float %379, i32 0
  %381 = getelementptr inbounds float, float* %8, i64 %347
  %382 = load float, float* %381, align 4, !tbaa !1048
  %383 = insertelement <32 x float> %380, float %382, i32 1
  %384 = getelementptr inbounds float, float* %8, i64 %348
  %385 = load float, float* %384, align 4, !tbaa !1048
  %386 = insertelement <32 x float> %383, float %385, i32 2
  %387 = getelementptr inbounds float, float* %8, i64 %349
  %388 = load float, float* %387, align 4, !tbaa !1048
  %389 = insertelement <32 x float> %386, float %388, i32 3
  %390 = getelementptr inbounds float, float* %8, i64 %350
  %391 = load float, float* %390, align 4, !tbaa !1048
  %392 = insertelement <32 x float> %389, float %391, i32 4
  %393 = getelementptr inbounds float, float* %8, i64 %351
  %394 = load float, float* %393, align 4, !tbaa !1048
  %395 = insertelement <32 x float> %392, float %394, i32 5
  %396 = getelementptr inbounds float, float* %8, i64 %352
  %397 = load float, float* %396, align 4, !tbaa !1048
  %398 = insertelement <32 x float> %395, float %397, i32 6
  %399 = getelementptr inbounds float, float* %8, i64 %353
  %400 = load float, float* %399, align 4, !tbaa !1048
  %401 = insertelement <32 x float> %398, float %400, i32 7
  %402 = getelementptr inbounds float, float* %8, i64 %354
  %403 = load float, float* %402, align 4, !tbaa !1048
  %404 = insertelement <32 x float> %401, float %403, i32 8
  %405 = getelementptr inbounds float, float* %8, i64 %355
  %406 = load float, float* %405, align 4, !tbaa !1048
  %407 = insertelement <32 x float> %404, float %406, i32 9
  %408 = getelementptr inbounds float, float* %8, i64 %356
  %409 = load float, float* %408, align 4, !tbaa !1048
  %410 = insertelement <32 x float> %407, float %409, i32 10
  %411 = getelementptr inbounds float, float* %8, i64 %357
  %412 = load float, float* %411, align 4, !tbaa !1048
  %413 = insertelement <32 x float> %410, float %412, i32 11
  %414 = getelementptr inbounds float, float* %8, i64 %358
  %415 = load float, float* %414, align 4, !tbaa !1048
  %416 = insertelement <32 x float> %413, float %415, i32 12
  %417 = getelementptr inbounds float, float* %8, i64 %359
  %418 = load float, float* %417, align 4, !tbaa !1048
  %419 = insertelement <32 x float> %416, float %418, i32 13
  %420 = getelementptr inbounds float, float* %8, i64 %360
  %421 = load float, float* %420, align 4, !tbaa !1048
  %422 = insertelement <32 x float> %419, float %421, i32 14
  %423 = getelementptr inbounds float, float* %8, i64 %361
  %424 = load float, float* %423, align 4, !tbaa !1048
  %425 = insertelement <32 x float> %422, float %424, i32 15
  %426 = getelementptr inbounds float, float* %8, i64 %362
  %427 = load float, float* %426, align 4, !tbaa !1048
  %428 = insertelement <32 x float> %425, float %427, i32 16
  %429 = getelementptr inbounds float, float* %8, i64 %363
  %430 = load float, float* %429, align 4, !tbaa !1048
  %431 = insertelement <32 x float> %428, float %430, i32 17
  %432 = getelementptr inbounds float, float* %8, i64 %364
  %433 = load float, float* %432, align 4, !tbaa !1048
  %434 = insertelement <32 x float> %431, float %433, i32 18
  %435 = getelementptr inbounds float, float* %8, i64 %365
  %436 = load float, float* %435, align 4, !tbaa !1048
  %437 = insertelement <32 x float> %434, float %436, i32 19
  %438 = getelementptr inbounds float, float* %8, i64 %366
  %439 = load float, float* %438, align 4, !tbaa !1048
  %440 = insertelement <32 x float> %437, float %439, i32 20
  %441 = getelementptr inbounds float, float* %8, i64 %367
  %442 = load float, float* %441, align 4, !tbaa !1048
  %443 = insertelement <32 x float> %440, float %442, i32 21
  %444 = getelementptr inbounds float, float* %8, i64 %368
  %445 = load float, float* %444, align 4, !tbaa !1048
  %446 = insertelement <32 x float> %443, float %445, i32 22
  %447 = getelementptr inbounds float, float* %8, i64 %369
  %448 = load float, float* %447, align 4, !tbaa !1048
  %449 = insertelement <32 x float> %446, float %448, i32 23
  %450 = getelementptr inbounds float, float* %8, i64 %370
  %451 = load float, float* %450, align 4, !tbaa !1048
  %452 = insertelement <32 x float> %449, float %451, i32 24
  %453 = getelementptr inbounds float, float* %8, i64 %371
  %454 = load float, float* %453, align 4, !tbaa !1048
  %455 = insertelement <32 x float> %452, float %454, i32 25
  %456 = getelementptr inbounds float, float* %8, i64 %372
  %457 = load float, float* %456, align 4, !tbaa !1048
  %458 = insertelement <32 x float> %455, float %457, i32 26
  %459 = getelementptr inbounds float, float* %8, i64 %373
  %460 = load float, float* %459, align 4, !tbaa !1048
  %461 = insertelement <32 x float> %458, float %460, i32 27
  %462 = getelementptr inbounds float, float* %8, i64 %374
  %463 = load float, float* %462, align 4, !tbaa !1048
  %464 = insertelement <32 x float> %461, float %463, i32 28
  %465 = getelementptr inbounds float, float* %8, i64 %375
  %466 = load float, float* %465, align 4, !tbaa !1048
  %467 = insertelement <32 x float> %464, float %466, i32 29
  %468 = getelementptr inbounds float, float* %8, i64 %376
  %469 = load float, float* %468, align 4, !tbaa !1048
  %470 = insertelement <32 x float> %467, float %469, i32 30
  %471 = getelementptr inbounds float, float* %8, i64 %377
  %472 = load float, float* %471, align 4, !tbaa !1048
  %473 = insertelement <32 x float> %470, float %472, i32 31
  %474 = getelementptr inbounds [512 x <32 x float>], [512 x <32 x float>]* %4, i64 0, i64 0, i64 %345
  %475 = bitcast float* %474 to <32 x float>*
  store <32 x float> %473, <32 x float>* %475, align 16, !tbaa !1051
  %indvars.iv.next32.1 = add nuw nsw i64 %indvars.iv31.1, 1
  %exitcond33.1 = icmp eq i64 %indvars.iv.next32.1, 256
  br i1 %exitcond33.1, label %for_end12.1, label %for_body11.1, !prof !5

for_end12.1:                                      ; preds = %for_body11.1
  %476 = bitcast i8* %2 to float*
  br label %for_begin16.preheader
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_15(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_15_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_15_compute_(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i8* noalias nocapture) unnamed_addr #1 {
entry:
  %3 = alloca [56 x <16 x float>], align 16
  %4 = alloca [256 x <16 x float>], align 16
  %5 = alloca [200704 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_begin1.preheader ]
  %6 = trunc i64 %indvar to i32
  %7 = mul nuw nsw i64 %indvar, 896
  %8 = trunc i64 %indvar to i32
  %9 = mul i32 %8, 56
  %10 = udiv i32 %6, 56
  %11 = mul i32 %10, 47040
  %12 = add i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %scevgep = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %7
  %scevgep96 = bitcast float* %scevgep to i8*
  %scevgep97 = getelementptr i8, i8* %0, i64 %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96, i8* align 4 %scevgep97, i64 224, i1 false)
  %15 = or i64 %7, 56
  %scevgep.1 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %15
  %scevgep96.1 = bitcast float* %scevgep.1 to i8*
  %16 = add nuw nsw i64 %14, 12544
  %scevgep97.1 = getelementptr i8, i8* %0, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.1, i8* align 4 %scevgep97.1, i64 224, i1 false)
  %17 = or i64 %7, 112
  %scevgep.2 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %17
  %scevgep96.2 = bitcast float* %scevgep.2 to i8*
  %18 = add nuw nsw i64 %14, 25088
  %scevgep97.2 = getelementptr i8, i8* %0, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.2, i8* align 4 %scevgep97.2, i64 224, i1 false)
  %19 = add nuw nsw i64 %7, 168
  %scevgep.3 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %19
  %scevgep96.3 = bitcast float* %scevgep.3 to i8*
  %20 = add nuw nsw i64 %14, 37632
  %scevgep97.3 = getelementptr i8, i8* %0, i64 %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.3, i8* align 4 %scevgep97.3, i64 224, i1 false)
  %21 = add nuw nsw i64 %7, 224
  %scevgep.4 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %21
  %scevgep96.4 = bitcast float* %scevgep.4 to i8*
  %22 = add nuw nsw i64 %14, 50176
  %scevgep97.4 = getelementptr i8, i8* %0, i64 %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.4, i8* align 4 %scevgep97.4, i64 224, i1 false)
  %23 = add nuw nsw i64 %7, 280
  %scevgep.5 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %23
  %scevgep96.5 = bitcast float* %scevgep.5 to i8*
  %24 = add nuw nsw i64 %14, 62720
  %scevgep97.5 = getelementptr i8, i8* %0, i64 %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.5, i8* align 4 %scevgep97.5, i64 224, i1 false)
  %25 = add nuw nsw i64 %7, 336
  %scevgep.6 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %25
  %scevgep96.6 = bitcast float* %scevgep.6 to i8*
  %26 = add nuw nsw i64 %14, 75264
  %scevgep97.6 = getelementptr i8, i8* %0, i64 %26
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.6, i8* align 4 %scevgep97.6, i64 224, i1 false)
  %27 = add nuw nsw i64 %7, 392
  %scevgep.7 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %27
  %scevgep96.7 = bitcast float* %scevgep.7 to i8*
  %28 = add nuw nsw i64 %14, 87808
  %scevgep97.7 = getelementptr i8, i8* %0, i64 %28
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.7, i8* align 4 %scevgep97.7, i64 224, i1 false)
  %29 = add nuw nsw i64 %7, 448
  %scevgep.8 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %29
  %scevgep96.8 = bitcast float* %scevgep.8 to i8*
  %30 = add nuw nsw i64 %14, 100352
  %scevgep97.8 = getelementptr i8, i8* %0, i64 %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.8, i8* align 4 %scevgep97.8, i64 224, i1 false)
  %31 = add nuw nsw i64 %7, 504
  %scevgep.9 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %31
  %scevgep96.9 = bitcast float* %scevgep.9 to i8*
  %32 = add nuw nsw i64 %14, 112896
  %scevgep97.9 = getelementptr i8, i8* %0, i64 %32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.9, i8* align 4 %scevgep97.9, i64 224, i1 false)
  %33 = add nuw nsw i64 %7, 560
  %scevgep.10 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %33
  %scevgep96.10 = bitcast float* %scevgep.10 to i8*
  %34 = add nuw nsw i64 %14, 125440
  %scevgep97.10 = getelementptr i8, i8* %0, i64 %34
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.10, i8* align 4 %scevgep97.10, i64 224, i1 false)
  %35 = add nuw nsw i64 %7, 616
  %scevgep.11 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %35
  %scevgep96.11 = bitcast float* %scevgep.11 to i8*
  %36 = add nuw nsw i64 %14, 137984
  %scevgep97.11 = getelementptr i8, i8* %0, i64 %36
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.11, i8* align 4 %scevgep97.11, i64 224, i1 false)
  %37 = add nuw nsw i64 %7, 672
  %scevgep.12 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %37
  %scevgep96.12 = bitcast float* %scevgep.12 to i8*
  %38 = add nuw nsw i64 %14, 150528
  %scevgep97.12 = getelementptr i8, i8* %0, i64 %38
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.12, i8* align 4 %scevgep97.12, i64 224, i1 false)
  %39 = add nuw nsw i64 %7, 728
  %scevgep.13 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %39
  %scevgep96.13 = bitcast float* %scevgep.13 to i8*
  %40 = add nuw nsw i64 %14, 163072
  %scevgep97.13 = getelementptr i8, i8* %0, i64 %40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.13, i8* align 4 %scevgep97.13, i64 224, i1 false)
  %41 = add nuw nsw i64 %7, 784
  %scevgep.14 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %41
  %scevgep96.14 = bitcast float* %scevgep.14 to i8*
  %42 = add nuw nsw i64 %14, 175616
  %scevgep97.14 = getelementptr i8, i8* %0, i64 %42
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.14, i8* align 4 %scevgep97.14, i64 224, i1 false)
  %43 = add nuw nsw i64 %7, 840
  %scevgep.15 = getelementptr [200704 x float], [200704 x float]* %5, i64 0, i64 %43
  %scevgep96.15 = bitcast float* %scevgep.15 to i8*
  %44 = add nuw nsw i64 %14, 188160
  %scevgep97.15 = getelementptr i8, i8* %0, i64 %44
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %scevgep96.15, i8* align 4 %scevgep97.15, i64 224, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond99 = icmp eq i64 %indvar.next, 224
  br i1 %exitcond99, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin7.preheader:                             ; preds = %for_begin1.preheader
  %45 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end15.3, %for_begin7.preheader
  %indvars.iv88 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next89, %for_end15.3 ]
  %46 = shl nsw i64 %indvars.iv88, 10
  br label %for_body14

for_begin16.preheader:                            ; preds = %for_end15.3
  %47 = bitcast i8* %2 to float*
  br label %for_begin19.preheader

for_body14:                                       ; preds = %for_body14, %for_begin10.preheader
  %indvars.iv82 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next83, %for_body14 ]
  %48 = shl i64 %indvars.iv82, 4
  %49 = add nuw nsw i64 %46, %48
  %50 = add nuw nsw i64 %46, %indvars.iv82
  %51 = add nuw nsw i64 %50, 64
  %52 = add nuw nsw i64 %50, 128
  %53 = add nuw nsw i64 %50, 192
  %54 = add nuw nsw i64 %50, 256
  %55 = add nuw nsw i64 %50, 320
  %56 = add nuw nsw i64 %50, 384
  %57 = add nuw nsw i64 %50, 448
  %58 = add nuw nsw i64 %50, 512
  %59 = add nuw nsw i64 %50, 576
  %60 = add nuw nsw i64 %50, 640
  %61 = add nuw nsw i64 %50, 704
  %62 = add nuw nsw i64 %50, 768
  %63 = add nuw nsw i64 %50, 832
  %64 = add nuw nsw i64 %50, 896
  %65 = add nuw nsw i64 %50, 960
  %66 = getelementptr inbounds float, float* %45, i64 %50
  %67 = load float, float* %66, align 4, !tbaa !1063
  %68 = insertelement <16 x float> undef, float %67, i32 0
  %69 = getelementptr inbounds float, float* %45, i64 %51
  %70 = load float, float* %69, align 4, !tbaa !1063
  %71 = insertelement <16 x float> %68, float %70, i32 1
  %72 = getelementptr inbounds float, float* %45, i64 %52
  %73 = load float, float* %72, align 4, !tbaa !1063
  %74 = insertelement <16 x float> %71, float %73, i32 2
  %75 = getelementptr inbounds float, float* %45, i64 %53
  %76 = load float, float* %75, align 4, !tbaa !1063
  %77 = insertelement <16 x float> %74, float %76, i32 3
  %78 = getelementptr inbounds float, float* %45, i64 %54
  %79 = load float, float* %78, align 4, !tbaa !1063
  %80 = insertelement <16 x float> %77, float %79, i32 4
  %81 = getelementptr inbounds float, float* %45, i64 %55
  %82 = load float, float* %81, align 4, !tbaa !1063
  %83 = insertelement <16 x float> %80, float %82, i32 5
  %84 = getelementptr inbounds float, float* %45, i64 %56
  %85 = load float, float* %84, align 4, !tbaa !1063
  %86 = insertelement <16 x float> %83, float %85, i32 6
  %87 = getelementptr inbounds float, float* %45, i64 %57
  %88 = load float, float* %87, align 4, !tbaa !1063
  %89 = insertelement <16 x float> %86, float %88, i32 7
  %90 = getelementptr inbounds float, float* %45, i64 %58
  %91 = load float, float* %90, align 4, !tbaa !1063
  %92 = insertelement <16 x float> %89, float %91, i32 8
  %93 = getelementptr inbounds float, float* %45, i64 %59
  %94 = load float, float* %93, align 4, !tbaa !1063
  %95 = insertelement <16 x float> %92, float %94, i32 9
  %96 = getelementptr inbounds float, float* %45, i64 %60
  %97 = load float, float* %96, align 4, !tbaa !1063
  %98 = insertelement <16 x float> %95, float %97, i32 10
  %99 = getelementptr inbounds float, float* %45, i64 %61
  %100 = load float, float* %99, align 4, !tbaa !1063
  %101 = insertelement <16 x float> %98, float %100, i32 11
  %102 = getelementptr inbounds float, float* %45, i64 %62
  %103 = load float, float* %102, align 4, !tbaa !1063
  %104 = insertelement <16 x float> %101, float %103, i32 12
  %105 = getelementptr inbounds float, float* %45, i64 %63
  %106 = load float, float* %105, align 4, !tbaa !1063
  %107 = insertelement <16 x float> %104, float %106, i32 13
  %108 = getelementptr inbounds float, float* %45, i64 %64
  %109 = load float, float* %108, align 4, !tbaa !1063
  %110 = insertelement <16 x float> %107, float %109, i32 14
  %111 = getelementptr inbounds float, float* %45, i64 %65
  %112 = load float, float* %111, align 4, !tbaa !1063
  %113 = insertelement <16 x float> %110, float %112, i32 15
  %114 = getelementptr inbounds [256 x <16 x float>], [256 x <16 x float>]* %4, i64 0, i64 0, i64 %49
  %115 = bitcast float* %114 to <16 x float>*
  store <16 x float> %113, <16 x float>* %115, align 16, !tbaa !1066
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond84 = icmp eq i64 %indvars.iv.next83, 16
  br i1 %exitcond84, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %116 = or i64 %46, 256
  %117 = or i64 %46, 16
  br label %for_body14.1

for_begin19.preheader:                            ; preds = %for_end30, %for_begin16.preheader
  %118 = phi i32 [ 0, %for_begin16.preheader ], [ %303, %for_end30 ]
  %119 = urem i32 %118, 56
  %120 = mul nuw nsw i32 %119, 896
  %121 = udiv i32 %118, 56
  %122 = shl i32 %121, 10
  %123 = sext i32 %122 to i64
  %124 = zext i32 %120 to i64
  br label %for_body20

for_end18:                                        ; preds = %for_end30
  ret void

for_begin28.preheader:                            ; preds = %for_end24
  %125 = mul nuw nsw i32 %119, 56
  %126 = mul nsw i32 %121, 50176
  %127 = add nuw nsw i32 %126, %125
  %128 = zext i32 %127 to i64
  br label %for_begin31.preheader

for_body20:                                       ; preds = %for_end24, %for_begin19.preheader
  %indvars.iv72 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next73, %for_end24 ]
  %129 = mul nuw nsw i64 %indvars.iv72, 224
  %130 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %129
  %131 = bitcast float* %130 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %131, align 16, !tbaa !1069
  %132 = or i64 %129, 16
  %133 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %132
  %134 = bitcast float* %133 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %134, align 16, !tbaa !1069
  %135 = add nuw nsw i64 %129, 32
  %136 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %135
  %137 = bitcast float* %136 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %137, align 16, !tbaa !1069
  %138 = add nuw nsw i64 %129, 48
  %139 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %138
  %140 = bitcast float* %139 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %140, align 16, !tbaa !1069
  %141 = add nuw nsw i64 %129, 64
  %142 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %141
  %143 = bitcast float* %142 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %143, align 16, !tbaa !1069
  %144 = add nuw nsw i64 %129, 80
  %145 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %144
  %146 = bitcast float* %145 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %146, align 16, !tbaa !1069
  %147 = add nuw nsw i64 %129, 96
  %148 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %147
  %149 = bitcast float* %148 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %149, align 16, !tbaa !1069
  %150 = add nuw nsw i64 %129, 112
  %151 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %150
  %152 = bitcast float* %151 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %152, align 16, !tbaa !1069
  %153 = add nuw nsw i64 %129, 128
  %154 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %153
  %155 = bitcast float* %154 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %155, align 16, !tbaa !1069
  %156 = add nuw nsw i64 %129, 144
  %157 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %156
  %158 = bitcast float* %157 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %158, align 16, !tbaa !1069
  %159 = add nuw nsw i64 %129, 160
  %160 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %159
  %161 = bitcast float* %160 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %161, align 16, !tbaa !1069
  %162 = add nuw nsw i64 %129, 176
  %163 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %162
  %164 = bitcast float* %163 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %164, align 16, !tbaa !1069
  %165 = add nuw nsw i64 %129, 192
  %166 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %165
  %167 = bitcast float* %166 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %167, align 16, !tbaa !1069
  %168 = add nuw nsw i64 %129, 208
  %169 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %168
  %170 = bitcast float* %169 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %170, align 16, !tbaa !1069
  %171 = mul nuw nsw i64 %indvars.iv72, 14
  %172 = add nuw nsw i64 %171, %124
  br label %for_begin25.preheader

for_begin25.preheader:                            ; preds = %for_end27, %for_body20
  %indvars.iv69 = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next70, %for_end27 ]
  %.lcssa2855 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %298, %for_end27 ]
  %.lcssa2653 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %291, %for_end27 ]
  %.lcssa2451 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %284, %for_end27 ]
  %.lcssa2249 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %277, %for_end27 ]
  %.lcssa2047 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %270, %for_end27 ]
  %.lcssa1845 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %263, %for_end27 ]
  %.lcssa1643 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %256, %for_end27 ]
  %.lcssa1441 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %249, %for_end27 ]
  %.lcssa1239 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %242, %for_end27 ]
  %.lcssa1037 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %235, %for_end27 ]
  %.lcssa835 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %228, %for_end27 ]
  %.lcssa633 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %221, %for_end27 ]
  %.lcssa431 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %214, %for_end27 ]
  %.lcssa30 = phi <16 x float> [ zeroinitializer, %for_body20 ], [ %207, %for_end27 ]
  %173 = mul nuw nsw i64 %indvars.iv69, 50176
  %174 = add nuw nsw i64 %172, %173
  %175 = shl i64 %indvars.iv69, 8
  %176 = add nuw nsw i64 %175, %123
  %177 = trunc i64 %174 to i32
  br label %for_body26

for_end24:                                        ; preds = %for_end27
  store <16 x float> %207, <16 x float>* %131, align 16, !tbaa !1069
  store <16 x float> %214, <16 x float>* %134, align 16, !tbaa !1069
  store <16 x float> %221, <16 x float>* %137, align 16, !tbaa !1069
  store <16 x float> %228, <16 x float>* %140, align 16, !tbaa !1069
  store <16 x float> %235, <16 x float>* %143, align 16, !tbaa !1069
  store <16 x float> %242, <16 x float>* %146, align 16, !tbaa !1069
  store <16 x float> %249, <16 x float>* %149, align 16, !tbaa !1069
  store <16 x float> %256, <16 x float>* %152, align 16, !tbaa !1069
  store <16 x float> %263, <16 x float>* %155, align 16, !tbaa !1069
  store <16 x float> %270, <16 x float>* %158, align 16, !tbaa !1069
  store <16 x float> %277, <16 x float>* %161, align 16, !tbaa !1069
  store <16 x float> %284, <16 x float>* %164, align 16, !tbaa !1069
  store <16 x float> %291, <16 x float>* %167, align 16, !tbaa !1069
  store <16 x float> %298, <16 x float>* %170, align 16, !tbaa !1069
  %indvars.iv.next73 = add nuw nsw i64 %indvars.iv72, 1
  %exitcond74 = icmp eq i64 %indvars.iv.next73, 4
  br i1 %exitcond74, label %for_begin28.preheader, label %for_body20, !prof !5

for_body26:                                       ; preds = %for_body26, %for_begin25.preheader
  %indvars.iv = phi i64 [ 0, %for_begin25.preheader ], [ %indvars.iv.next, %for_body26 ]
  %178 = phi <16 x float> [ %.lcssa2855, %for_begin25.preheader ], [ %298, %for_body26 ]
  %179 = phi <16 x float> [ %.lcssa2653, %for_begin25.preheader ], [ %291, %for_body26 ]
  %180 = phi <16 x float> [ %.lcssa2451, %for_begin25.preheader ], [ %284, %for_body26 ]
  %181 = phi <16 x float> [ %.lcssa2249, %for_begin25.preheader ], [ %277, %for_body26 ]
  %182 = phi <16 x float> [ %.lcssa2047, %for_begin25.preheader ], [ %270, %for_body26 ]
  %183 = phi <16 x float> [ %.lcssa1845, %for_begin25.preheader ], [ %263, %for_body26 ]
  %184 = phi <16 x float> [ %.lcssa1643, %for_begin25.preheader ], [ %256, %for_body26 ]
  %185 = phi <16 x float> [ %.lcssa1441, %for_begin25.preheader ], [ %249, %for_body26 ]
  %186 = phi <16 x float> [ %.lcssa1239, %for_begin25.preheader ], [ %242, %for_body26 ]
  %187 = phi <16 x float> [ %.lcssa1037, %for_begin25.preheader ], [ %235, %for_body26 ]
  %188 = phi <16 x float> [ %.lcssa835, %for_begin25.preheader ], [ %228, %for_body26 ]
  %189 = phi <16 x float> [ %.lcssa633, %for_begin25.preheader ], [ %221, %for_body26 ]
  %190 = phi <16 x float> [ %.lcssa431, %for_begin25.preheader ], [ %214, %for_body26 ]
  %191 = phi <16 x float> [ %.lcssa30, %for_begin25.preheader ], [ %207, %for_body26 ]
  %192 = phi i32 [ 0, %for_begin25.preheader ], [ %299, %for_body26 ]
  %193 = mul nuw nsw i64 %indvars.iv, 56
  %194 = mul nuw nsw i32 %192, 56
  %195 = add nuw nsw i64 %174, %193
  %196 = add nsw i32 %194, %177
  %197 = and i64 %195, 4294967294
  %198 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %197
  %199 = load float, float* %198, align 8, !tbaa !1072
  %200 = insertelement <16 x float> undef, float %199, i32 0
  %201 = shufflevector <16 x float> %200, <16 x float> undef, <16 x i32> zeroinitializer
  %202 = shl i64 %indvars.iv, 4
  %203 = add nuw nsw i64 %176, %202
  %204 = getelementptr inbounds [256 x <16 x float>], [256 x <16 x float>]* %4, i64 0, i64 0, i64 %203
  %205 = bitcast float* %204 to <16 x float>*
  %206 = load <16 x float>, <16 x float>* %205, align 16, !tbaa !1066
  %207 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %201, <16 x float> %206, <16 x float> %191)
  %208 = or i32 %196, 1
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %209
  %211 = load float, float* %210, align 4, !tbaa !1072
  %212 = insertelement <16 x float> undef, float %211, i32 0
  %213 = shufflevector <16 x float> %212, <16 x float> undef, <16 x i32> zeroinitializer
  %214 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %213, <16 x float> %206, <16 x float> %190)
  %215 = add nuw i64 %195, 2
  %216 = and i64 %215, 4294967295
  %217 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %216
  %218 = load float, float* %217, align 8, !tbaa !1072
  %219 = insertelement <16 x float> undef, float %218, i32 0
  %220 = shufflevector <16 x float> %219, <16 x float> undef, <16 x i32> zeroinitializer
  %221 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %220, <16 x float> %206, <16 x float> %189)
  %222 = add nuw i64 %195, 3
  %223 = and i64 %222, 4294967295
  %224 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %223
  %225 = load float, float* %224, align 4, !tbaa !1072
  %226 = insertelement <16 x float> undef, float %225, i32 0
  %227 = shufflevector <16 x float> %226, <16 x float> undef, <16 x i32> zeroinitializer
  %228 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %227, <16 x float> %206, <16 x float> %188)
  %229 = add nuw i64 %195, 4
  %230 = and i64 %229, 4294967295
  %231 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %230
  %232 = load float, float* %231, align 8, !tbaa !1072
  %233 = insertelement <16 x float> undef, float %232, i32 0
  %234 = shufflevector <16 x float> %233, <16 x float> undef, <16 x i32> zeroinitializer
  %235 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %234, <16 x float> %206, <16 x float> %187)
  %236 = add nuw i64 %195, 5
  %237 = and i64 %236, 4294967295
  %238 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %237
  %239 = load float, float* %238, align 4, !tbaa !1072
  %240 = insertelement <16 x float> undef, float %239, i32 0
  %241 = shufflevector <16 x float> %240, <16 x float> undef, <16 x i32> zeroinitializer
  %242 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %241, <16 x float> %206, <16 x float> %186)
  %243 = add nuw i64 %195, 6
  %244 = and i64 %243, 4294967295
  %245 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %244
  %246 = load float, float* %245, align 8, !tbaa !1072
  %247 = insertelement <16 x float> undef, float %246, i32 0
  %248 = shufflevector <16 x float> %247, <16 x float> undef, <16 x i32> zeroinitializer
  %249 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %248, <16 x float> %206, <16 x float> %185)
  %250 = add nuw i64 %195, 7
  %251 = and i64 %250, 4294967295
  %252 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %251
  %253 = load float, float* %252, align 4, !tbaa !1072
  %254 = insertelement <16 x float> undef, float %253, i32 0
  %255 = shufflevector <16 x float> %254, <16 x float> undef, <16 x i32> zeroinitializer
  %256 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %255, <16 x float> %206, <16 x float> %184)
  %257 = add nuw i64 %195, 8
  %258 = and i64 %257, 4294967295
  %259 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %258
  %260 = load float, float* %259, align 8, !tbaa !1072
  %261 = insertelement <16 x float> undef, float %260, i32 0
  %262 = shufflevector <16 x float> %261, <16 x float> undef, <16 x i32> zeroinitializer
  %263 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %262, <16 x float> %206, <16 x float> %183)
  %264 = add nuw i64 %195, 9
  %265 = and i64 %264, 4294967295
  %266 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %265
  %267 = load float, float* %266, align 4, !tbaa !1072
  %268 = insertelement <16 x float> undef, float %267, i32 0
  %269 = shufflevector <16 x float> %268, <16 x float> undef, <16 x i32> zeroinitializer
  %270 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %269, <16 x float> %206, <16 x float> %182)
  %271 = add nuw i64 %195, 10
  %272 = and i64 %271, 4294967295
  %273 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %272
  %274 = load float, float* %273, align 8, !tbaa !1072
  %275 = insertelement <16 x float> undef, float %274, i32 0
  %276 = shufflevector <16 x float> %275, <16 x float> undef, <16 x i32> zeroinitializer
  %277 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %276, <16 x float> %206, <16 x float> %181)
  %278 = add nuw i64 %195, 11
  %279 = and i64 %278, 4294967295
  %280 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %279
  %281 = load float, float* %280, align 4, !tbaa !1072
  %282 = insertelement <16 x float> undef, float %281, i32 0
  %283 = shufflevector <16 x float> %282, <16 x float> undef, <16 x i32> zeroinitializer
  %284 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %283, <16 x float> %206, <16 x float> %180)
  %285 = add nuw i64 %195, 12
  %286 = and i64 %285, 4294967295
  %287 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %286
  %288 = load float, float* %287, align 8, !tbaa !1072
  %289 = insertelement <16 x float> undef, float %288, i32 0
  %290 = shufflevector <16 x float> %289, <16 x float> undef, <16 x i32> zeroinitializer
  %291 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %290, <16 x float> %206, <16 x float> %179)
  %292 = add nuw i64 %195, 13
  %293 = and i64 %292, 4294967295
  %294 = getelementptr inbounds [200704 x float], [200704 x float]* %5, i64 0, i64 %293
  %295 = load float, float* %294, align 4, !tbaa !1072
  %296 = insertelement <16 x float> undef, float %295, i32 0
  %297 = shufflevector <16 x float> %296, <16 x float> undef, <16 x i32> zeroinitializer
  %298 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %297, <16 x float> %206, <16 x float> %178)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %299 = add nuw nsw i32 %192, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %indvars.iv.next70 = add nuw nsw i64 %indvars.iv69, 1
  %exitcond71 = icmp eq i64 %indvars.iv.next70, 4
  br i1 %exitcond71, label %for_end24, label %for_begin25.preheader, !prof !5

for_begin31.preheader:                            ; preds = %for_end33, %for_begin28.preheader
  %indvars.iv78 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next79, %for_end33 ]
  %300 = mul nuw nsw i64 %indvars.iv78, 14
  %301 = add nuw nsw i64 %300, %128
  %302 = mul nuw nsw i64 %indvars.iv78, 224
  br label %for_body32

for_end30:                                        ; preds = %for_end33
  %303 = add nuw nsw i32 %118, 1
  %exitcond81 = icmp eq i32 %303, 224
  br i1 %exitcond81, label %for_end18, label %for_begin19.preheader, !prof !5

for_body32:                                       ; preds = %for_body32, %for_begin31.preheader
  %indvars.iv75 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next76, %for_body32 ]
  %304 = add nuw nsw i64 %301, %indvars.iv75
  %305 = add nuw nsw i64 %304, 3136
  %306 = add nuw nsw i64 %304, 6272
  %307 = add nuw nsw i64 %304, 9408
  %308 = add nuw nsw i64 %304, 12544
  %309 = add nuw nsw i64 %304, 15680
  %310 = add nuw nsw i64 %304, 18816
  %311 = add nuw nsw i64 %304, 21952
  %312 = add nuw nsw i64 %304, 25088
  %313 = add nuw nsw i64 %304, 28224
  %314 = add nuw nsw i64 %304, 31360
  %315 = add nuw nsw i64 %304, 34496
  %316 = add nuw nsw i64 %304, 37632
  %317 = add nuw nsw i64 %304, 40768
  %318 = add nuw nsw i64 %304, 43904
  %319 = add nuw nsw i64 %304, 47040
  %320 = shl i64 %indvars.iv75, 4
  %321 = add nuw nsw i64 %320, %302
  %322 = getelementptr inbounds [56 x <16 x float>], [56 x <16 x float>]* %3, i64 0, i64 0, i64 %321
  %323 = bitcast float* %322 to <16 x float>*
  %324 = load <16 x float>, <16 x float>* %323, align 16, !tbaa !1069
  %325 = getelementptr inbounds float, float* %47, i64 %304
  %326 = extractelement <16 x float> %324, i64 0
  store float %326, float* %325, align 4, !tbaa !1075
  %327 = getelementptr inbounds float, float* %47, i64 %305
  %328 = extractelement <16 x float> %324, i64 1
  store float %328, float* %327, align 4, !tbaa !1075
  %329 = getelementptr inbounds float, float* %47, i64 %306
  %330 = extractelement <16 x float> %324, i64 2
  store float %330, float* %329, align 4, !tbaa !1075
  %331 = getelementptr inbounds float, float* %47, i64 %307
  %332 = extractelement <16 x float> %324, i64 3
  store float %332, float* %331, align 4, !tbaa !1075
  %333 = getelementptr inbounds float, float* %47, i64 %308
  %334 = extractelement <16 x float> %324, i64 4
  store float %334, float* %333, align 4, !tbaa !1075
  %335 = getelementptr inbounds float, float* %47, i64 %309
  %336 = extractelement <16 x float> %324, i64 5
  store float %336, float* %335, align 4, !tbaa !1075
  %337 = getelementptr inbounds float, float* %47, i64 %310
  %338 = extractelement <16 x float> %324, i64 6
  store float %338, float* %337, align 4, !tbaa !1075
  %339 = getelementptr inbounds float, float* %47, i64 %311
  %340 = extractelement <16 x float> %324, i64 7
  store float %340, float* %339, align 4, !tbaa !1075
  %341 = getelementptr inbounds float, float* %47, i64 %312
  %342 = extractelement <16 x float> %324, i64 8
  store float %342, float* %341, align 4, !tbaa !1075
  %343 = getelementptr inbounds float, float* %47, i64 %313
  %344 = extractelement <16 x float> %324, i64 9
  store float %344, float* %343, align 4, !tbaa !1075
  %345 = getelementptr inbounds float, float* %47, i64 %314
  %346 = extractelement <16 x float> %324, i64 10
  store float %346, float* %345, align 4, !tbaa !1075
  %347 = getelementptr inbounds float, float* %47, i64 %315
  %348 = extractelement <16 x float> %324, i64 11
  store float %348, float* %347, align 4, !tbaa !1075
  %349 = getelementptr inbounds float, float* %47, i64 %316
  %350 = extractelement <16 x float> %324, i64 12
  store float %350, float* %349, align 4, !tbaa !1075
  %351 = getelementptr inbounds float, float* %47, i64 %317
  %352 = extractelement <16 x float> %324, i64 13
  store float %352, float* %351, align 4, !tbaa !1075
  %353 = getelementptr inbounds float, float* %47, i64 %318
  %354 = extractelement <16 x float> %324, i64 14
  store float %354, float* %353, align 4, !tbaa !1075
  %355 = getelementptr inbounds float, float* %47, i64 %319
  %356 = extractelement <16 x float> %324, i64 15
  store float %356, float* %355, align 4, !tbaa !1075
  %indvars.iv.next76 = add nuw nsw i64 %indvars.iv75, 1
  %exitcond77 = icmp eq i64 %indvars.iv.next76, 14
  br i1 %exitcond77, label %for_end33, label %for_body32, !prof !5

for_end33:                                        ; preds = %for_body32
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %exitcond80 = icmp eq i64 %indvars.iv.next79, 4
  br i1 %exitcond80, label %for_end30, label %for_begin31.preheader, !prof !5

for_body14.1:                                     ; preds = %for_body14.1, %for_end15
  %indvars.iv82.1 = phi i64 [ 0, %for_end15 ], [ %indvars.iv.next83.1, %for_body14.1 ]
  %357 = shl i64 %indvars.iv82.1, 4
  %358 = add nuw nsw i64 %116, %357
  %359 = add nuw nsw i64 %117, %indvars.iv82.1
  %360 = add nuw nsw i64 %359, 64
  %361 = add nuw nsw i64 %359, 128
  %362 = add nuw nsw i64 %359, 192
  %363 = add nuw nsw i64 %359, 256
  %364 = add nuw nsw i64 %359, 320
  %365 = add nuw nsw i64 %359, 384
  %366 = add nuw nsw i64 %359, 448
  %367 = add nuw nsw i64 %359, 512
  %368 = add nuw nsw i64 %359, 576
  %369 = add nuw nsw i64 %359, 640
  %370 = add nuw nsw i64 %359, 704
  %371 = add nuw nsw i64 %359, 768
  %372 = add nuw nsw i64 %359, 832
  %373 = add nuw nsw i64 %359, 896
  %374 = add nuw nsw i64 %359, 960
  %375 = getelementptr inbounds float, float* %45, i64 %359
  %376 = load float, float* %375, align 4, !tbaa !1063
  %377 = insertelement <16 x float> undef, float %376, i32 0
  %378 = getelementptr inbounds float, float* %45, i64 %360
  %379 = load float, float* %378, align 4, !tbaa !1063
  %380 = insertelement <16 x float> %377, float %379, i32 1
  %381 = getelementptr inbounds float, float* %45, i64 %361
  %382 = load float, float* %381, align 4, !tbaa !1063
  %383 = insertelement <16 x float> %380, float %382, i32 2
  %384 = getelementptr inbounds float, float* %45, i64 %362
  %385 = load float, float* %384, align 4, !tbaa !1063
  %386 = insertelement <16 x float> %383, float %385, i32 3
  %387 = getelementptr inbounds float, float* %45, i64 %363
  %388 = load float, float* %387, align 4, !tbaa !1063
  %389 = insertelement <16 x float> %386, float %388, i32 4
  %390 = getelementptr inbounds float, float* %45, i64 %364
  %391 = load float, float* %390, align 4, !tbaa !1063
  %392 = insertelement <16 x float> %389, float %391, i32 5
  %393 = getelementptr inbounds float, float* %45, i64 %365
  %394 = load float, float* %393, align 4, !tbaa !1063
  %395 = insertelement <16 x float> %392, float %394, i32 6
  %396 = getelementptr inbounds float, float* %45, i64 %366
  %397 = load float, float* %396, align 4, !tbaa !1063
  %398 = insertelement <16 x float> %395, float %397, i32 7
  %399 = getelementptr inbounds float, float* %45, i64 %367
  %400 = load float, float* %399, align 4, !tbaa !1063
  %401 = insertelement <16 x float> %398, float %400, i32 8
  %402 = getelementptr inbounds float, float* %45, i64 %368
  %403 = load float, float* %402, align 4, !tbaa !1063
  %404 = insertelement <16 x float> %401, float %403, i32 9
  %405 = getelementptr inbounds float, float* %45, i64 %369
  %406 = load float, float* %405, align 4, !tbaa !1063
  %407 = insertelement <16 x float> %404, float %406, i32 10
  %408 = getelementptr inbounds float, float* %45, i64 %370
  %409 = load float, float* %408, align 4, !tbaa !1063
  %410 = insertelement <16 x float> %407, float %409, i32 11
  %411 = getelementptr inbounds float, float* %45, i64 %371
  %412 = load float, float* %411, align 4, !tbaa !1063
  %413 = insertelement <16 x float> %410, float %412, i32 12
  %414 = getelementptr inbounds float, float* %45, i64 %372
  %415 = load float, float* %414, align 4, !tbaa !1063
  %416 = insertelement <16 x float> %413, float %415, i32 13
  %417 = getelementptr inbounds float, float* %45, i64 %373
  %418 = load float, float* %417, align 4, !tbaa !1063
  %419 = insertelement <16 x float> %416, float %418, i32 14
  %420 = getelementptr inbounds float, float* %45, i64 %374
  %421 = load float, float* %420, align 4, !tbaa !1063
  %422 = insertelement <16 x float> %419, float %421, i32 15
  %423 = getelementptr inbounds [256 x <16 x float>], [256 x <16 x float>]* %4, i64 0, i64 0, i64 %358
  %424 = bitcast float* %423 to <16 x float>*
  store <16 x float> %422, <16 x float>* %424, align 16, !tbaa !1066
  %indvars.iv.next83.1 = add nuw nsw i64 %indvars.iv82.1, 1
  %exitcond84.1 = icmp eq i64 %indvars.iv.next83.1, 16
  br i1 %exitcond84.1, label %for_end15.1, label %for_body14.1, !prof !5

for_end15.1:                                      ; preds = %for_body14.1
  %425 = or i64 %46, 512
  %426 = or i64 %46, 32
  br label %for_body14.2

for_body14.2:                                     ; preds = %for_body14.2, %for_end15.1
  %indvars.iv82.2 = phi i64 [ 0, %for_end15.1 ], [ %indvars.iv.next83.2, %for_body14.2 ]
  %427 = shl i64 %indvars.iv82.2, 4
  %428 = add nuw nsw i64 %425, %427
  %429 = add nuw nsw i64 %426, %indvars.iv82.2
  %430 = add nuw nsw i64 %429, 64
  %431 = add nuw nsw i64 %429, 128
  %432 = add nuw nsw i64 %429, 192
  %433 = add nuw nsw i64 %429, 256
  %434 = add nuw nsw i64 %429, 320
  %435 = add nuw nsw i64 %429, 384
  %436 = add nuw nsw i64 %429, 448
  %437 = add nuw nsw i64 %429, 512
  %438 = add nuw nsw i64 %429, 576
  %439 = add nuw nsw i64 %429, 640
  %440 = add nuw nsw i64 %429, 704
  %441 = add nuw nsw i64 %429, 768
  %442 = add nuw nsw i64 %429, 832
  %443 = add nuw nsw i64 %429, 896
  %444 = add nuw nsw i64 %429, 960
  %445 = getelementptr inbounds float, float* %45, i64 %429
  %446 = load float, float* %445, align 4, !tbaa !1063
  %447 = insertelement <16 x float> undef, float %446, i32 0
  %448 = getelementptr inbounds float, float* %45, i64 %430
  %449 = load float, float* %448, align 4, !tbaa !1063
  %450 = insertelement <16 x float> %447, float %449, i32 1
  %451 = getelementptr inbounds float, float* %45, i64 %431
  %452 = load float, float* %451, align 4, !tbaa !1063
  %453 = insertelement <16 x float> %450, float %452, i32 2
  %454 = getelementptr inbounds float, float* %45, i64 %432
  %455 = load float, float* %454, align 4, !tbaa !1063
  %456 = insertelement <16 x float> %453, float %455, i32 3
  %457 = getelementptr inbounds float, float* %45, i64 %433
  %458 = load float, float* %457, align 4, !tbaa !1063
  %459 = insertelement <16 x float> %456, float %458, i32 4
  %460 = getelementptr inbounds float, float* %45, i64 %434
  %461 = load float, float* %460, align 4, !tbaa !1063
  %462 = insertelement <16 x float> %459, float %461, i32 5
  %463 = getelementptr inbounds float, float* %45, i64 %435
  %464 = load float, float* %463, align 4, !tbaa !1063
  %465 = insertelement <16 x float> %462, float %464, i32 6
  %466 = getelementptr inbounds float, float* %45, i64 %436
  %467 = load float, float* %466, align 4, !tbaa !1063
  %468 = insertelement <16 x float> %465, float %467, i32 7
  %469 = getelementptr inbounds float, float* %45, i64 %437
  %470 = load float, float* %469, align 4, !tbaa !1063
  %471 = insertelement <16 x float> %468, float %470, i32 8
  %472 = getelementptr inbounds float, float* %45, i64 %438
  %473 = load float, float* %472, align 4, !tbaa !1063
  %474 = insertelement <16 x float> %471, float %473, i32 9
  %475 = getelementptr inbounds float, float* %45, i64 %439
  %476 = load float, float* %475, align 4, !tbaa !1063
  %477 = insertelement <16 x float> %474, float %476, i32 10
  %478 = getelementptr inbounds float, float* %45, i64 %440
  %479 = load float, float* %478, align 4, !tbaa !1063
  %480 = insertelement <16 x float> %477, float %479, i32 11
  %481 = getelementptr inbounds float, float* %45, i64 %441
  %482 = load float, float* %481, align 4, !tbaa !1063
  %483 = insertelement <16 x float> %480, float %482, i32 12
  %484 = getelementptr inbounds float, float* %45, i64 %442
  %485 = load float, float* %484, align 4, !tbaa !1063
  %486 = insertelement <16 x float> %483, float %485, i32 13
  %487 = getelementptr inbounds float, float* %45, i64 %443
  %488 = load float, float* %487, align 4, !tbaa !1063
  %489 = insertelement <16 x float> %486, float %488, i32 14
  %490 = getelementptr inbounds float, float* %45, i64 %444
  %491 = load float, float* %490, align 4, !tbaa !1063
  %492 = insertelement <16 x float> %489, float %491, i32 15
  %493 = getelementptr inbounds [256 x <16 x float>], [256 x <16 x float>]* %4, i64 0, i64 0, i64 %428
  %494 = bitcast float* %493 to <16 x float>*
  store <16 x float> %492, <16 x float>* %494, align 16, !tbaa !1066
  %indvars.iv.next83.2 = add nuw nsw i64 %indvars.iv82.2, 1
  %exitcond84.2 = icmp eq i64 %indvars.iv.next83.2, 16
  br i1 %exitcond84.2, label %for_end15.2, label %for_body14.2, !prof !5

for_end15.2:                                      ; preds = %for_body14.2
  %495 = or i64 %46, 768
  %496 = or i64 %46, 48
  br label %for_body14.3

for_body14.3:                                     ; preds = %for_body14.3, %for_end15.2
  %indvars.iv82.3 = phi i64 [ 0, %for_end15.2 ], [ %indvars.iv.next83.3, %for_body14.3 ]
  %497 = shl i64 %indvars.iv82.3, 4
  %498 = add nuw nsw i64 %495, %497
  %499 = add nuw nsw i64 %496, %indvars.iv82.3
  %500 = add nuw nsw i64 %499, 64
  %501 = add nuw nsw i64 %499, 128
  %502 = add nuw nsw i64 %499, 192
  %503 = add nuw nsw i64 %499, 256
  %504 = add nuw nsw i64 %499, 320
  %505 = add nuw nsw i64 %499, 384
  %506 = add nuw nsw i64 %499, 448
  %507 = add nuw nsw i64 %499, 512
  %508 = add nuw nsw i64 %499, 576
  %509 = add nuw nsw i64 %499, 640
  %510 = add nuw nsw i64 %499, 704
  %511 = add nuw nsw i64 %499, 768
  %512 = add nuw nsw i64 %499, 832
  %513 = add nuw nsw i64 %499, 896
  %514 = add nuw nsw i64 %499, 960
  %515 = getelementptr inbounds float, float* %45, i64 %499
  %516 = load float, float* %515, align 4, !tbaa !1063
  %517 = insertelement <16 x float> undef, float %516, i32 0
  %518 = getelementptr inbounds float, float* %45, i64 %500
  %519 = load float, float* %518, align 4, !tbaa !1063
  %520 = insertelement <16 x float> %517, float %519, i32 1
  %521 = getelementptr inbounds float, float* %45, i64 %501
  %522 = load float, float* %521, align 4, !tbaa !1063
  %523 = insertelement <16 x float> %520, float %522, i32 2
  %524 = getelementptr inbounds float, float* %45, i64 %502
  %525 = load float, float* %524, align 4, !tbaa !1063
  %526 = insertelement <16 x float> %523, float %525, i32 3
  %527 = getelementptr inbounds float, float* %45, i64 %503
  %528 = load float, float* %527, align 4, !tbaa !1063
  %529 = insertelement <16 x float> %526, float %528, i32 4
  %530 = getelementptr inbounds float, float* %45, i64 %504
  %531 = load float, float* %530, align 4, !tbaa !1063
  %532 = insertelement <16 x float> %529, float %531, i32 5
  %533 = getelementptr inbounds float, float* %45, i64 %505
  %534 = load float, float* %533, align 4, !tbaa !1063
  %535 = insertelement <16 x float> %532, float %534, i32 6
  %536 = getelementptr inbounds float, float* %45, i64 %506
  %537 = load float, float* %536, align 4, !tbaa !1063
  %538 = insertelement <16 x float> %535, float %537, i32 7
  %539 = getelementptr inbounds float, float* %45, i64 %507
  %540 = load float, float* %539, align 4, !tbaa !1063
  %541 = insertelement <16 x float> %538, float %540, i32 8
  %542 = getelementptr inbounds float, float* %45, i64 %508
  %543 = load float, float* %542, align 4, !tbaa !1063
  %544 = insertelement <16 x float> %541, float %543, i32 9
  %545 = getelementptr inbounds float, float* %45, i64 %509
  %546 = load float, float* %545, align 4, !tbaa !1063
  %547 = insertelement <16 x float> %544, float %546, i32 10
  %548 = getelementptr inbounds float, float* %45, i64 %510
  %549 = load float, float* %548, align 4, !tbaa !1063
  %550 = insertelement <16 x float> %547, float %549, i32 11
  %551 = getelementptr inbounds float, float* %45, i64 %511
  %552 = load float, float* %551, align 4, !tbaa !1063
  %553 = insertelement <16 x float> %550, float %552, i32 12
  %554 = getelementptr inbounds float, float* %45, i64 %512
  %555 = load float, float* %554, align 4, !tbaa !1063
  %556 = insertelement <16 x float> %553, float %555, i32 13
  %557 = getelementptr inbounds float, float* %45, i64 %513
  %558 = load float, float* %557, align 4, !tbaa !1063
  %559 = insertelement <16 x float> %556, float %558, i32 14
  %560 = getelementptr inbounds float, float* %45, i64 %514
  %561 = load float, float* %560, align 4, !tbaa !1063
  %562 = insertelement <16 x float> %559, float %561, i32 15
  %563 = getelementptr inbounds [256 x <16 x float>], [256 x <16 x float>]* %4, i64 0, i64 0, i64 %498
  %564 = bitcast float* %563 to <16 x float>*
  store <16 x float> %562, <16 x float>* %564, align 16, !tbaa !1066
  %indvars.iv.next83.3 = add nuw nsw i64 %indvars.iv82.3, 1
  %exitcond84.3 = icmp eq i64 %indvars.iv.next83.3, 16
  br i1 %exitcond84.3, label %for_end15.3, label %for_body14.3, !prof !5

for_end15.3:                                      ; preds = %for_body14.3
  %indvars.iv.next89 = add nuw nsw i64 %indvars.iv88, 1
  %exitcond90 = icmp eq i64 %indvars.iv.next89, 4
  br i1 %exitcond90, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_10(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_10_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_10_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !1078
  %4 = bitcast i8* %1 to <4 x float>*
  %wide.load1 = load <4 x float>, <4 x float>* %4, align 4, !tbaa !1081
  %5 = fmul <4 x float> %wide.load, %wide.load1
  %6 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %5, <4 x float>* %6, align 4, !tbaa !1084
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !1078
  %9 = getelementptr inbounds i8, i8* %1, i64 16
  %10 = bitcast i8* %9 to <4 x float>*
  %wide.load1.1 = load <4 x float>, <4 x float>* %10, align 4, !tbaa !1081
  %11 = fmul <4 x float> %wide.load.1, %wide.load1.1
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %11, <4 x float>* %13, align 4, !tbaa !1084
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !1078
  %16 = getelementptr inbounds i8, i8* %1, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load1.2 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !1081
  %18 = fmul <4 x float> %wide.load.2, %wide.load1.2
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %18, <4 x float>* %20, align 4, !tbaa !1084
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %22, align 4, !tbaa !1078
  %23 = getelementptr inbounds i8, i8* %1, i64 48
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load1.3 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1081
  %25 = fmul <4 x float> %wide.load.3, %wide.load1.3
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !1084
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !1078
  %30 = getelementptr inbounds i8, i8* %1, i64 64
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load1.4 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !1081
  %32 = fmul <4 x float> %wide.load.4, %wide.load1.4
  %33 = getelementptr inbounds i8, i8* %0, i64 64
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !1084
  %35 = getelementptr inbounds i8, i8* %2, i64 80
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1078
  %37 = getelementptr inbounds i8, i8* %1, i64 80
  %38 = bitcast i8* %37 to <4 x float>*
  %wide.load1.5 = load <4 x float>, <4 x float>* %38, align 4, !tbaa !1081
  %39 = fmul <4 x float> %wide.load.5, %wide.load1.5
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %39, <4 x float>* %41, align 4, !tbaa !1084
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !1078
  %44 = getelementptr inbounds i8, i8* %1, i64 96
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load1.6 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !1081
  %46 = fmul <4 x float> %wide.load.6, %wide.load1.6
  %47 = getelementptr inbounds i8, i8* %0, i64 96
  %48 = bitcast i8* %47 to <4 x float>*
  store <4 x float> %46, <4 x float>* %48, align 4, !tbaa !1084
  %49 = getelementptr inbounds i8, i8* %2, i64 112
  %50 = bitcast i8* %49 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !1078
  %51 = getelementptr inbounds i8, i8* %1, i64 112
  %52 = bitcast i8* %51 to <4 x float>*
  %wide.load1.7 = load <4 x float>, <4 x float>* %52, align 4, !tbaa !1081
  %53 = fmul <4 x float> %wide.load.7, %wide.load1.7
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %53, <4 x float>* %55, align 4, !tbaa !1084
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !1078
  %58 = getelementptr inbounds i8, i8* %1, i64 128
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load1.8 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !1081
  %60 = fmul <4 x float> %wide.load.8, %wide.load1.8
  %61 = getelementptr inbounds i8, i8* %0, i64 128
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %60, <4 x float>* %62, align 4, !tbaa !1084
  %63 = getelementptr inbounds i8, i8* %2, i64 144
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1078
  %65 = getelementptr inbounds i8, i8* %1, i64 144
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load1.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1081
  %67 = fmul <4 x float> %wide.load.9, %wide.load1.9
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !1084
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1078
  %72 = getelementptr inbounds i8, i8* %1, i64 160
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load1.10 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !1081
  %74 = fmul <4 x float> %wide.load.10, %wide.load1.10
  %75 = getelementptr inbounds i8, i8* %0, i64 160
  %76 = bitcast i8* %75 to <4 x float>*
  store <4 x float> %74, <4 x float>* %76, align 4, !tbaa !1084
  %77 = getelementptr inbounds i8, i8* %2, i64 176
  %78 = bitcast i8* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !1078
  %79 = getelementptr inbounds i8, i8* %1, i64 176
  %80 = bitcast i8* %79 to <4 x float>*
  %wide.load1.11 = load <4 x float>, <4 x float>* %80, align 4, !tbaa !1081
  %81 = fmul <4 x float> %wide.load.11, %wide.load1.11
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %81, <4 x float>* %83, align 4, !tbaa !1084
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !1078
  %86 = getelementptr inbounds i8, i8* %1, i64 192
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load1.12 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !1081
  %88 = fmul <4 x float> %wide.load.12, %wide.load1.12
  %89 = getelementptr inbounds i8, i8* %0, i64 192
  %90 = bitcast i8* %89 to <4 x float>*
  store <4 x float> %88, <4 x float>* %90, align 4, !tbaa !1084
  %91 = getelementptr inbounds i8, i8* %2, i64 208
  %92 = bitcast i8* %91 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %92, align 4, !tbaa !1078
  %93 = getelementptr inbounds i8, i8* %1, i64 208
  %94 = bitcast i8* %93 to <4 x float>*
  %wide.load1.13 = load <4 x float>, <4 x float>* %94, align 4, !tbaa !1081
  %95 = fmul <4 x float> %wide.load.13, %wide.load1.13
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %95, <4 x float>* %97, align 4, !tbaa !1084
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !1078
  %100 = getelementptr inbounds i8, i8* %1, i64 224
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load1.14 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !1081
  %102 = fmul <4 x float> %wide.load.14, %wide.load1.14
  %103 = getelementptr inbounds i8, i8* %0, i64 224
  %104 = bitcast i8* %103 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !tbaa !1084
  %105 = getelementptr inbounds i8, i8* %2, i64 240
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !1078
  %107 = getelementptr inbounds i8, i8* %1, i64 240
  %108 = bitcast i8* %107 to <4 x float>*
  %wide.load1.15 = load <4 x float>, <4 x float>* %108, align 4, !tbaa !1081
  %109 = fmul <4 x float> %wide.load.15, %wide.load1.15
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %109, <4 x float>* %111, align 4, !tbaa !1084
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_nn_conv2d_7(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_nn_conv2d_7_compute_(i8* %12, i8* %14, i8* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_nn_conv2d_7_compute_(i8* noalias nocapture readonly, i8* noalias readonly, i8* noalias) unnamed_addr #1 {
entry:
  %3 = alloca [28 x <64 x float>], align 16
  %4 = alloca [2048 x <64 x float>], align 16
  %5 = alloca [373248 x float], align 16
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvar = phi i64 [ 0, %entry ], [ %indvar.next, %for_end3 ]
  %6 = phi i32 [ 0, %entry ], [ %20, %for_end3 ]
  %7 = mul nuw nsw i64 %indvar, 1728
  %8 = urem i32 %6, 27
  %9 = mul nuw nsw i32 %8, 28
  %10 = udiv i32 %6, 27
  %11 = mul nsw i32 %10, 50176
  %12 = or i32 %9, %11
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  br label %for_begin4.preheader

for_begin7.preheader:                             ; preds = %for_end3
  %15 = bitcast i8* %1 to float*
  br label %for_begin10.preheader

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvar48 = phi i64 [ 0, %for_begin1.preheader ], [ %indvar.next49, %for_begin4.preheader ]
  %16 = mul nuw nsw i64 %indvar48, 27
  %17 = add nuw nsw i64 %7, %16
  %scevgep = getelementptr [373248 x float], [373248 x float]* %5, i64 0, i64 %17
  %scevgep50 = bitcast float* %scevgep to i8*
  %18 = mul nuw nsw i64 %indvar48, 3136
  %19 = add nuw nsw i64 %14, %18
  %scevgep51 = getelementptr i8, i8* %0, i64 %19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %scevgep50, i8* align 4 %scevgep51, i64 108, i1 false)
  %indvar.next49 = add nuw nsw i64 %indvar48, 1
  %exitcond52 = icmp eq i64 %indvar.next49, 64
  br i1 %exitcond52, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %20 = add nuw nsw i32 %6, 1
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond53 = icmp eq i64 %indvar.next, 216
  br i1 %exitcond53, label %for_begin7.preheader, label %for_begin1.preheader, !prof !5

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv42 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next43, %for_end12 ]
  %21 = shl nsw i64 %indvars.iv42, 15
  br label %for_begin13.preheader

for_begin16.preheader:                            ; preds = %for_end12
  %22 = bitcast i8* %2 to float*
  br label %for_begin19.preheader

for_begin13.preheader:                            ; preds = %for_end15, %for_begin10.preheader
  %indvars.iv39 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next40, %for_end15 ]
  %23 = shl i64 %indvars.iv39, 12
  %24 = add nuw nsw i64 %23, %21
  %25 = shl i64 %indvars.iv39, 6
  %26 = add nuw nsw i64 %25, %21
  br label %for_body14

for_end12:                                        ; preds = %for_end15
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond44 = icmp eq i64 %indvars.iv.next43, 4
  br i1 %exitcond44, label %for_begin16.preheader, label %for_begin10.preheader, !prof !5

for_body14:                                       ; preds = %for_body14, %for_begin13.preheader
  %indvars.iv36 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next37, %for_body14 ]
  %27 = shl i64 %indvars.iv36, 6
  %28 = add nuw nsw i64 %24, %27
  %29 = add nuw nsw i64 %26, %indvars.iv36
  %30 = add nuw nsw i64 %29, 512
  %31 = add nuw nsw i64 %29, 1024
  %32 = add nuw nsw i64 %29, 1536
  %33 = add nuw nsw i64 %29, 2048
  %34 = add nuw nsw i64 %29, 2560
  %35 = add nuw nsw i64 %29, 3072
  %36 = add nuw nsw i64 %29, 3584
  %37 = add nuw nsw i64 %29, 4096
  %38 = add nuw nsw i64 %29, 4608
  %39 = add nuw nsw i64 %29, 5120
  %40 = add nuw nsw i64 %29, 5632
  %41 = add nuw nsw i64 %29, 6144
  %42 = add nuw nsw i64 %29, 6656
  %43 = add nuw nsw i64 %29, 7168
  %44 = add nuw nsw i64 %29, 7680
  %45 = add nuw nsw i64 %29, 8192
  %46 = add nuw nsw i64 %29, 8704
  %47 = add nuw nsw i64 %29, 9216
  %48 = add nuw nsw i64 %29, 9728
  %49 = add nuw nsw i64 %29, 10240
  %50 = add nuw nsw i64 %29, 10752
  %51 = add nuw nsw i64 %29, 11264
  %52 = add nuw nsw i64 %29, 11776
  %53 = add nuw nsw i64 %29, 12288
  %54 = add nuw nsw i64 %29, 12800
  %55 = add nuw nsw i64 %29, 13312
  %56 = add nuw nsw i64 %29, 13824
  %57 = add nuw nsw i64 %29, 14336
  %58 = add nuw nsw i64 %29, 14848
  %59 = add nuw nsw i64 %29, 15360
  %60 = add nuw nsw i64 %29, 15872
  %61 = add nuw nsw i64 %29, 16384
  %62 = add nuw nsw i64 %29, 16896
  %63 = add nuw nsw i64 %29, 17408
  %64 = add nuw nsw i64 %29, 17920
  %65 = add nuw nsw i64 %29, 18432
  %66 = add nuw nsw i64 %29, 18944
  %67 = add nuw nsw i64 %29, 19456
  %68 = add nuw nsw i64 %29, 19968
  %69 = add nuw nsw i64 %29, 20480
  %70 = add nuw nsw i64 %29, 20992
  %71 = add nuw nsw i64 %29, 21504
  %72 = add nuw nsw i64 %29, 22016
  %73 = add nuw nsw i64 %29, 22528
  %74 = add nuw nsw i64 %29, 23040
  %75 = add nuw nsw i64 %29, 23552
  %76 = add nuw nsw i64 %29, 24064
  %77 = add nuw nsw i64 %29, 24576
  %78 = add nuw nsw i64 %29, 25088
  %79 = add nuw nsw i64 %29, 25600
  %80 = add nuw nsw i64 %29, 26112
  %81 = add nuw nsw i64 %29, 26624
  %82 = add nuw nsw i64 %29, 27136
  %83 = add nuw nsw i64 %29, 27648
  %84 = add nuw nsw i64 %29, 28160
  %85 = add nuw nsw i64 %29, 28672
  %86 = add nuw nsw i64 %29, 29184
  %87 = add nuw nsw i64 %29, 29696
  %88 = add nuw nsw i64 %29, 30208
  %89 = add nuw nsw i64 %29, 30720
  %90 = add nuw nsw i64 %29, 31232
  %91 = add nuw nsw i64 %29, 31744
  %92 = add nuw nsw i64 %29, 32256
  %93 = getelementptr inbounds float, float* %15, i64 %29
  %94 = load float, float* %93, align 4, !tbaa !1087
  %95 = insertelement <64 x float> undef, float %94, i32 0
  %96 = getelementptr inbounds float, float* %15, i64 %30
  %97 = load float, float* %96, align 4, !tbaa !1087
  %98 = insertelement <64 x float> %95, float %97, i32 1
  %99 = getelementptr inbounds float, float* %15, i64 %31
  %100 = load float, float* %99, align 4, !tbaa !1087
  %101 = insertelement <64 x float> %98, float %100, i32 2
  %102 = getelementptr inbounds float, float* %15, i64 %32
  %103 = load float, float* %102, align 4, !tbaa !1087
  %104 = insertelement <64 x float> %101, float %103, i32 3
  %105 = getelementptr inbounds float, float* %15, i64 %33
  %106 = load float, float* %105, align 4, !tbaa !1087
  %107 = insertelement <64 x float> %104, float %106, i32 4
  %108 = getelementptr inbounds float, float* %15, i64 %34
  %109 = load float, float* %108, align 4, !tbaa !1087
  %110 = insertelement <64 x float> %107, float %109, i32 5
  %111 = getelementptr inbounds float, float* %15, i64 %35
  %112 = load float, float* %111, align 4, !tbaa !1087
  %113 = insertelement <64 x float> %110, float %112, i32 6
  %114 = getelementptr inbounds float, float* %15, i64 %36
  %115 = load float, float* %114, align 4, !tbaa !1087
  %116 = insertelement <64 x float> %113, float %115, i32 7
  %117 = getelementptr inbounds float, float* %15, i64 %37
  %118 = load float, float* %117, align 4, !tbaa !1087
  %119 = insertelement <64 x float> %116, float %118, i32 8
  %120 = getelementptr inbounds float, float* %15, i64 %38
  %121 = load float, float* %120, align 4, !tbaa !1087
  %122 = insertelement <64 x float> %119, float %121, i32 9
  %123 = getelementptr inbounds float, float* %15, i64 %39
  %124 = load float, float* %123, align 4, !tbaa !1087
  %125 = insertelement <64 x float> %122, float %124, i32 10
  %126 = getelementptr inbounds float, float* %15, i64 %40
  %127 = load float, float* %126, align 4, !tbaa !1087
  %128 = insertelement <64 x float> %125, float %127, i32 11
  %129 = getelementptr inbounds float, float* %15, i64 %41
  %130 = load float, float* %129, align 4, !tbaa !1087
  %131 = insertelement <64 x float> %128, float %130, i32 12
  %132 = getelementptr inbounds float, float* %15, i64 %42
  %133 = load float, float* %132, align 4, !tbaa !1087
  %134 = insertelement <64 x float> %131, float %133, i32 13
  %135 = getelementptr inbounds float, float* %15, i64 %43
  %136 = load float, float* %135, align 4, !tbaa !1087
  %137 = insertelement <64 x float> %134, float %136, i32 14
  %138 = getelementptr inbounds float, float* %15, i64 %44
  %139 = load float, float* %138, align 4, !tbaa !1087
  %140 = insertelement <64 x float> %137, float %139, i32 15
  %141 = getelementptr inbounds float, float* %15, i64 %45
  %142 = load float, float* %141, align 4, !tbaa !1087
  %143 = insertelement <64 x float> %140, float %142, i32 16
  %144 = getelementptr inbounds float, float* %15, i64 %46
  %145 = load float, float* %144, align 4, !tbaa !1087
  %146 = insertelement <64 x float> %143, float %145, i32 17
  %147 = getelementptr inbounds float, float* %15, i64 %47
  %148 = load float, float* %147, align 4, !tbaa !1087
  %149 = insertelement <64 x float> %146, float %148, i32 18
  %150 = getelementptr inbounds float, float* %15, i64 %48
  %151 = load float, float* %150, align 4, !tbaa !1087
  %152 = insertelement <64 x float> %149, float %151, i32 19
  %153 = getelementptr inbounds float, float* %15, i64 %49
  %154 = load float, float* %153, align 4, !tbaa !1087
  %155 = insertelement <64 x float> %152, float %154, i32 20
  %156 = getelementptr inbounds float, float* %15, i64 %50
  %157 = load float, float* %156, align 4, !tbaa !1087
  %158 = insertelement <64 x float> %155, float %157, i32 21
  %159 = getelementptr inbounds float, float* %15, i64 %51
  %160 = load float, float* %159, align 4, !tbaa !1087
  %161 = insertelement <64 x float> %158, float %160, i32 22
  %162 = getelementptr inbounds float, float* %15, i64 %52
  %163 = load float, float* %162, align 4, !tbaa !1087
  %164 = insertelement <64 x float> %161, float %163, i32 23
  %165 = getelementptr inbounds float, float* %15, i64 %53
  %166 = load float, float* %165, align 4, !tbaa !1087
  %167 = insertelement <64 x float> %164, float %166, i32 24
  %168 = getelementptr inbounds float, float* %15, i64 %54
  %169 = load float, float* %168, align 4, !tbaa !1087
  %170 = insertelement <64 x float> %167, float %169, i32 25
  %171 = getelementptr inbounds float, float* %15, i64 %55
  %172 = load float, float* %171, align 4, !tbaa !1087
  %173 = insertelement <64 x float> %170, float %172, i32 26
  %174 = getelementptr inbounds float, float* %15, i64 %56
  %175 = load float, float* %174, align 4, !tbaa !1087
  %176 = insertelement <64 x float> %173, float %175, i32 27
  %177 = getelementptr inbounds float, float* %15, i64 %57
  %178 = load float, float* %177, align 4, !tbaa !1087
  %179 = insertelement <64 x float> %176, float %178, i32 28
  %180 = getelementptr inbounds float, float* %15, i64 %58
  %181 = load float, float* %180, align 4, !tbaa !1087
  %182 = insertelement <64 x float> %179, float %181, i32 29
  %183 = getelementptr inbounds float, float* %15, i64 %59
  %184 = load float, float* %183, align 4, !tbaa !1087
  %185 = insertelement <64 x float> %182, float %184, i32 30
  %186 = getelementptr inbounds float, float* %15, i64 %60
  %187 = load float, float* %186, align 4, !tbaa !1087
  %188 = insertelement <64 x float> %185, float %187, i32 31
  %189 = getelementptr inbounds float, float* %15, i64 %61
  %190 = load float, float* %189, align 4, !tbaa !1087
  %191 = insertelement <64 x float> %188, float %190, i32 32
  %192 = getelementptr inbounds float, float* %15, i64 %62
  %193 = load float, float* %192, align 4, !tbaa !1087
  %194 = insertelement <64 x float> %191, float %193, i32 33
  %195 = getelementptr inbounds float, float* %15, i64 %63
  %196 = load float, float* %195, align 4, !tbaa !1087
  %197 = insertelement <64 x float> %194, float %196, i32 34
  %198 = getelementptr inbounds float, float* %15, i64 %64
  %199 = load float, float* %198, align 4, !tbaa !1087
  %200 = insertelement <64 x float> %197, float %199, i32 35
  %201 = getelementptr inbounds float, float* %15, i64 %65
  %202 = load float, float* %201, align 4, !tbaa !1087
  %203 = insertelement <64 x float> %200, float %202, i32 36
  %204 = getelementptr inbounds float, float* %15, i64 %66
  %205 = load float, float* %204, align 4, !tbaa !1087
  %206 = insertelement <64 x float> %203, float %205, i32 37
  %207 = getelementptr inbounds float, float* %15, i64 %67
  %208 = load float, float* %207, align 4, !tbaa !1087
  %209 = insertelement <64 x float> %206, float %208, i32 38
  %210 = getelementptr inbounds float, float* %15, i64 %68
  %211 = load float, float* %210, align 4, !tbaa !1087
  %212 = insertelement <64 x float> %209, float %211, i32 39
  %213 = getelementptr inbounds float, float* %15, i64 %69
  %214 = load float, float* %213, align 4, !tbaa !1087
  %215 = insertelement <64 x float> %212, float %214, i32 40
  %216 = getelementptr inbounds float, float* %15, i64 %70
  %217 = load float, float* %216, align 4, !tbaa !1087
  %218 = insertelement <64 x float> %215, float %217, i32 41
  %219 = getelementptr inbounds float, float* %15, i64 %71
  %220 = load float, float* %219, align 4, !tbaa !1087
  %221 = insertelement <64 x float> %218, float %220, i32 42
  %222 = getelementptr inbounds float, float* %15, i64 %72
  %223 = load float, float* %222, align 4, !tbaa !1087
  %224 = insertelement <64 x float> %221, float %223, i32 43
  %225 = getelementptr inbounds float, float* %15, i64 %73
  %226 = load float, float* %225, align 4, !tbaa !1087
  %227 = insertelement <64 x float> %224, float %226, i32 44
  %228 = getelementptr inbounds float, float* %15, i64 %74
  %229 = load float, float* %228, align 4, !tbaa !1087
  %230 = insertelement <64 x float> %227, float %229, i32 45
  %231 = getelementptr inbounds float, float* %15, i64 %75
  %232 = load float, float* %231, align 4, !tbaa !1087
  %233 = insertelement <64 x float> %230, float %232, i32 46
  %234 = getelementptr inbounds float, float* %15, i64 %76
  %235 = load float, float* %234, align 4, !tbaa !1087
  %236 = insertelement <64 x float> %233, float %235, i32 47
  %237 = getelementptr inbounds float, float* %15, i64 %77
  %238 = load float, float* %237, align 4, !tbaa !1087
  %239 = insertelement <64 x float> %236, float %238, i32 48
  %240 = getelementptr inbounds float, float* %15, i64 %78
  %241 = load float, float* %240, align 4, !tbaa !1087
  %242 = insertelement <64 x float> %239, float %241, i32 49
  %243 = getelementptr inbounds float, float* %15, i64 %79
  %244 = load float, float* %243, align 4, !tbaa !1087
  %245 = insertelement <64 x float> %242, float %244, i32 50
  %246 = getelementptr inbounds float, float* %15, i64 %80
  %247 = load float, float* %246, align 4, !tbaa !1087
  %248 = insertelement <64 x float> %245, float %247, i32 51
  %249 = getelementptr inbounds float, float* %15, i64 %81
  %250 = load float, float* %249, align 4, !tbaa !1087
  %251 = insertelement <64 x float> %248, float %250, i32 52
  %252 = getelementptr inbounds float, float* %15, i64 %82
  %253 = load float, float* %252, align 4, !tbaa !1087
  %254 = insertelement <64 x float> %251, float %253, i32 53
  %255 = getelementptr inbounds float, float* %15, i64 %83
  %256 = load float, float* %255, align 4, !tbaa !1087
  %257 = insertelement <64 x float> %254, float %256, i32 54
  %258 = getelementptr inbounds float, float* %15, i64 %84
  %259 = load float, float* %258, align 4, !tbaa !1087
  %260 = insertelement <64 x float> %257, float %259, i32 55
  %261 = getelementptr inbounds float, float* %15, i64 %85
  %262 = load float, float* %261, align 4, !tbaa !1087
  %263 = insertelement <64 x float> %260, float %262, i32 56
  %264 = getelementptr inbounds float, float* %15, i64 %86
  %265 = load float, float* %264, align 4, !tbaa !1087
  %266 = insertelement <64 x float> %263, float %265, i32 57
  %267 = getelementptr inbounds float, float* %15, i64 %87
  %268 = load float, float* %267, align 4, !tbaa !1087
  %269 = insertelement <64 x float> %266, float %268, i32 58
  %270 = getelementptr inbounds float, float* %15, i64 %88
  %271 = load float, float* %270, align 4, !tbaa !1087
  %272 = insertelement <64 x float> %269, float %271, i32 59
  %273 = getelementptr inbounds float, float* %15, i64 %89
  %274 = load float, float* %273, align 4, !tbaa !1087
  %275 = insertelement <64 x float> %272, float %274, i32 60
  %276 = getelementptr inbounds float, float* %15, i64 %90
  %277 = load float, float* %276, align 4, !tbaa !1087
  %278 = insertelement <64 x float> %275, float %277, i32 61
  %279 = getelementptr inbounds float, float* %15, i64 %91
  %280 = load float, float* %279, align 4, !tbaa !1087
  %281 = insertelement <64 x float> %278, float %280, i32 62
  %282 = getelementptr inbounds float, float* %15, i64 %92
  %283 = load float, float* %282, align 4, !tbaa !1087
  %284 = insertelement <64 x float> %281, float %283, i32 63
  %285 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %28
  %286 = bitcast float* %285 to <64 x float>*
  store <64 x float> %284, <64 x float>* %286, align 16, !tbaa !1090
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %exitcond38 = icmp eq i64 %indvars.iv.next37, 64
  br i1 %exitcond38, label %for_end15, label %for_body14, !prof !5

for_end15:                                        ; preds = %for_body14
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %exitcond41 = icmp eq i64 %indvars.iv.next40, 8
  br i1 %exitcond41, label %for_end12, label %for_begin13.preheader, !prof !5

for_begin19.preheader:                            ; preds = %for_end30, %for_begin16.preheader
  %287 = phi i32 [ 0, %for_begin16.preheader ], [ %361, %for_end30 ]
  %288 = urem i32 %287, 7
  %289 = mul nuw nsw i32 %288, 6912
  %290 = udiv i32 %287, 7
  %291 = shl i32 %290, 15
  %292 = sext i32 %291 to i64
  %293 = zext i32 %289 to i64
  %294 = or i64 %292, 4096
  %295 = or i64 %292, 8192
  %296 = or i64 %292, 12288
  %297 = or i64 %292, 16384
  %298 = or i64 %292, 20480
  %299 = or i64 %292, 24576
  %300 = or i64 %292, 28672
  br label %for_body20

for_end18:                                        ; preds = %for_end30
  ret void

for_begin28.preheader:                            ; preds = %for_end27.7
  %301 = mul nuw nsw i32 %288, 28
  %302 = mul nsw i32 %290, 12544
  %303 = or i32 %302, %301
  %304 = zext i32 %303 to i64
  br label %for_begin31.preheader

for_body20:                                       ; preds = %for_end27.7, %for_begin19.preheader
  %indvars.iv22 = phi i64 [ 0, %for_begin19.preheader ], [ %indvars.iv.next23, %for_end27.7 ]
  %305 = shl nsw i64 %indvars.iv22, 7
  %306 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %305
  %307 = bitcast float* %306 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %307, align 16, !tbaa !1093
  %308 = or i64 %305, 64
  %309 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %308
  %310 = bitcast float* %309 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %310, align 16, !tbaa !1093
  %311 = add nuw nsw i64 %305, 896
  %312 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %311
  %313 = bitcast float* %312 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %313, align 16, !tbaa !1093
  %314 = add nuw nsw i64 %305, 960
  %315 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %314
  %316 = bitcast float* %315 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %316, align 16, !tbaa !1093
  %317 = shl nsw i64 %indvars.iv22, 2
  %318 = add nuw nsw i64 %317, %293
  br label %for_body26

for_body26:                                       ; preds = %for_body26, %for_body20
  %indvars.iv = phi i64 [ 0, %for_body20 ], [ %indvars.iv.next, %for_body26 ]
  %319 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %356, %for_body26 ]
  %320 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %349, %for_body26 ]
  %321 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %342, %for_body26 ]
  %322 = phi <64 x float> [ zeroinitializer, %for_body20 ], [ %335, %for_body26 ]
  %323 = mul nuw nsw i64 %indvars.iv, 27
  %324 = add nuw nsw i64 %318, %323
  %325 = and i64 %324, 4294967295
  %326 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !1096
  %328 = insertelement <64 x float> undef, float %327, i32 0
  %329 = shufflevector <64 x float> %328, <64 x float> undef, <64 x i32> zeroinitializer
  %330 = shl i64 %indvars.iv, 6
  %331 = add nuw nsw i64 %330, %292
  %332 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %331
  %333 = bitcast float* %332 to <64 x float>*
  %334 = load <64 x float>, <64 x float>* %333, align 16, !tbaa !1090
  %335 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %329, <64 x float> %334, <64 x float> %322)
  %336 = add nuw i64 %324, 2
  %337 = and i64 %336, 4294967295
  %338 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %337
  %339 = load float, float* %338, align 4, !tbaa !1096
  %340 = insertelement <64 x float> undef, float %339, i32 0
  %341 = shufflevector <64 x float> %340, <64 x float> undef, <64 x i32> zeroinitializer
  %342 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %341, <64 x float> %334, <64 x float> %321)
  %343 = add nuw i64 %324, 3456
  %344 = and i64 %343, 4294967295
  %345 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %344
  %346 = load float, float* %345, align 4, !tbaa !1096
  %347 = insertelement <64 x float> undef, float %346, i32 0
  %348 = shufflevector <64 x float> %347, <64 x float> undef, <64 x i32> zeroinitializer
  %349 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %348, <64 x float> %334, <64 x float> %320)
  %350 = add nuw i64 %324, 3458
  %351 = and i64 %350, 4294967295
  %352 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %351
  %353 = load float, float* %352, align 4, !tbaa !1096
  %354 = insertelement <64 x float> undef, float %353, i32 0
  %355 = shufflevector <64 x float> %354, <64 x float> undef, <64 x i32> zeroinitializer
  %356 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %355, <64 x float> %334, <64 x float> %319)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end27, label %for_body26, !prof !5

for_end27:                                        ; preds = %for_body26
  %357 = add nuw nsw i64 %318, 46656
  br label %for_body26.1

for_begin31.preheader:                            ; preds = %for_end33, %for_begin28.preheader
  %indvars.iv32 = phi i64 [ 0, %for_begin28.preheader ], [ %indvars.iv.next33, %for_end33 ]
  %358 = shl nuw nsw i64 %indvars.iv32, 1
  %359 = add nuw nsw i64 %358, %304
  %360 = shl i64 %indvars.iv32, 7
  br label %for_begin34.preheader

for_end30:                                        ; preds = %for_end33
  %361 = add nuw nsw i32 %287, 1
  %exitcond35 = icmp eq i32 %361, 28
  br i1 %exitcond35, label %for_end18, label %for_begin19.preheader, !prof !5

for_begin34.preheader:                            ; preds = %for_end36, %for_begin31.preheader
  %indvars.iv29 = phi i64 [ 0, %for_begin31.preheader ], [ %indvars.iv.next30, %for_end36 ]
  %362 = mul nuw nsw i64 %indvars.iv29, 14
  %363 = add nuw nsw i64 %359, %362
  %364 = mul nuw nsw i64 %indvars.iv29, 896
  %365 = add nuw nsw i64 %364, %360
  br label %for_body35

for_end33:                                        ; preds = %for_end36
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %exitcond34 = icmp eq i64 %indvars.iv.next33, 7
  br i1 %exitcond34, label %for_end30, label %for_begin31.preheader, !prof !5

for_body35:                                       ; preds = %for_body35, %for_begin34.preheader
  %indvars.iv26 = phi i64 [ 0, %for_begin34.preheader ], [ %indvars.iv.next27, %for_body35 ]
  %366 = add nuw nsw i64 %363, %indvars.iv26
  %367 = shl i64 %indvars.iv26, 6
  %368 = add nuw nsw i64 %365, %367
  %369 = getelementptr inbounds [28 x <64 x float>], [28 x <64 x float>]* %3, i64 0, i64 0, i64 %368
  %370 = bitcast float* %369 to <64 x float>*
  %371 = load <64 x float>, <64 x float>* %370, align 16, !tbaa !1093
  %372 = getelementptr inbounds float, float* %22, i64 %366
  %373 = extractelement <64 x float> %371, i64 0
  store float %373, float* %372, align 4, !tbaa !1099
  %374 = shl i64 %366, 32
  %sext = add i64 %374, 841813590016
  %375 = ashr exact i64 %sext, 32
  %376 = getelementptr inbounds float, float* %22, i64 %375
  %377 = extractelement <64 x float> %371, i64 1
  store float %377, float* %376, align 4, !tbaa !1099
  %378 = shl i64 %366, 32
  %sext54 = add i64 %378, 1683627180032
  %379 = ashr exact i64 %sext54, 32
  %380 = getelementptr inbounds float, float* %22, i64 %379
  %381 = extractelement <64 x float> %371, i64 2
  store float %381, float* %380, align 4, !tbaa !1099
  %382 = shl i64 %366, 32
  %sext55 = add i64 %382, 2525440770048
  %383 = ashr exact i64 %sext55, 32
  %384 = getelementptr inbounds float, float* %22, i64 %383
  %385 = extractelement <64 x float> %371, i64 3
  store float %385, float* %384, align 4, !tbaa !1099
  %386 = shl i64 %366, 32
  %sext56 = add i64 %386, 3367254360064
  %387 = ashr exact i64 %sext56, 32
  %388 = getelementptr inbounds float, float* %22, i64 %387
  %389 = extractelement <64 x float> %371, i64 4
  store float %389, float* %388, align 4, !tbaa !1099
  %390 = shl i64 %366, 32
  %sext57 = add i64 %390, 4209067950080
  %391 = ashr exact i64 %sext57, 32
  %392 = getelementptr inbounds float, float* %22, i64 %391
  %393 = extractelement <64 x float> %371, i64 5
  store float %393, float* %392, align 4, !tbaa !1099
  %394 = shl i64 %366, 32
  %sext58 = add i64 %394, 5050881540096
  %395 = ashr exact i64 %sext58, 32
  %396 = getelementptr inbounds float, float* %22, i64 %395
  %397 = extractelement <64 x float> %371, i64 6
  store float %397, float* %396, align 4, !tbaa !1099
  %398 = shl i64 %366, 32
  %sext59 = add i64 %398, 5892695130112
  %399 = ashr exact i64 %sext59, 32
  %400 = getelementptr inbounds float, float* %22, i64 %399
  %401 = extractelement <64 x float> %371, i64 7
  store float %401, float* %400, align 4, !tbaa !1099
  %402 = shl i64 %366, 32
  %sext60 = add i64 %402, 6734508720128
  %403 = ashr exact i64 %sext60, 32
  %404 = getelementptr inbounds float, float* %22, i64 %403
  %405 = extractelement <64 x float> %371, i64 8
  store float %405, float* %404, align 4, !tbaa !1099
  %406 = shl i64 %366, 32
  %sext61 = add i64 %406, 7576322310144
  %407 = ashr exact i64 %sext61, 32
  %408 = getelementptr inbounds float, float* %22, i64 %407
  %409 = extractelement <64 x float> %371, i64 9
  store float %409, float* %408, align 4, !tbaa !1099
  %410 = shl i64 %366, 32
  %sext62 = add i64 %410, 8418135900160
  %411 = ashr exact i64 %sext62, 32
  %412 = getelementptr inbounds float, float* %22, i64 %411
  %413 = extractelement <64 x float> %371, i64 10
  store float %413, float* %412, align 4, !tbaa !1099
  %414 = shl i64 %366, 32
  %sext63 = add i64 %414, 9259949490176
  %415 = ashr exact i64 %sext63, 32
  %416 = getelementptr inbounds float, float* %22, i64 %415
  %417 = extractelement <64 x float> %371, i64 11
  store float %417, float* %416, align 4, !tbaa !1099
  %418 = shl i64 %366, 32
  %sext64 = add i64 %418, 10101763080192
  %419 = ashr exact i64 %sext64, 32
  %420 = getelementptr inbounds float, float* %22, i64 %419
  %421 = extractelement <64 x float> %371, i64 12
  store float %421, float* %420, align 4, !tbaa !1099
  %422 = shl i64 %366, 32
  %sext65 = add i64 %422, 10943576670208
  %423 = ashr exact i64 %sext65, 32
  %424 = getelementptr inbounds float, float* %22, i64 %423
  %425 = extractelement <64 x float> %371, i64 13
  store float %425, float* %424, align 4, !tbaa !1099
  %426 = shl i64 %366, 32
  %sext66 = add i64 %426, 11785390260224
  %427 = ashr exact i64 %sext66, 32
  %428 = getelementptr inbounds float, float* %22, i64 %427
  %429 = extractelement <64 x float> %371, i64 14
  store float %429, float* %428, align 4, !tbaa !1099
  %430 = shl i64 %366, 32
  %sext67 = add i64 %430, 12627203850240
  %431 = ashr exact i64 %sext67, 32
  %432 = getelementptr inbounds float, float* %22, i64 %431
  %433 = extractelement <64 x float> %371, i64 15
  store float %433, float* %432, align 4, !tbaa !1099
  %434 = shl i64 %366, 32
  %sext68 = add i64 %434, 13469017440256
  %435 = ashr exact i64 %sext68, 32
  %436 = getelementptr inbounds float, float* %22, i64 %435
  %437 = extractelement <64 x float> %371, i64 16
  store float %437, float* %436, align 4, !tbaa !1099
  %438 = shl i64 %366, 32
  %sext69 = add i64 %438, 14310831030272
  %439 = ashr exact i64 %sext69, 32
  %440 = getelementptr inbounds float, float* %22, i64 %439
  %441 = extractelement <64 x float> %371, i64 17
  store float %441, float* %440, align 4, !tbaa !1099
  %442 = shl i64 %366, 32
  %sext70 = add i64 %442, 15152644620288
  %443 = ashr exact i64 %sext70, 32
  %444 = getelementptr inbounds float, float* %22, i64 %443
  %445 = extractelement <64 x float> %371, i64 18
  store float %445, float* %444, align 4, !tbaa !1099
  %446 = shl i64 %366, 32
  %sext71 = add i64 %446, 15994458210304
  %447 = ashr exact i64 %sext71, 32
  %448 = getelementptr inbounds float, float* %22, i64 %447
  %449 = extractelement <64 x float> %371, i64 19
  store float %449, float* %448, align 4, !tbaa !1099
  %450 = shl i64 %366, 32
  %sext72 = add i64 %450, 16836271800320
  %451 = ashr exact i64 %sext72, 32
  %452 = getelementptr inbounds float, float* %22, i64 %451
  %453 = extractelement <64 x float> %371, i64 20
  store float %453, float* %452, align 4, !tbaa !1099
  %454 = shl i64 %366, 32
  %sext73 = add i64 %454, 17678085390336
  %455 = ashr exact i64 %sext73, 32
  %456 = getelementptr inbounds float, float* %22, i64 %455
  %457 = extractelement <64 x float> %371, i64 21
  store float %457, float* %456, align 4, !tbaa !1099
  %458 = shl i64 %366, 32
  %sext74 = add i64 %458, 18519898980352
  %459 = ashr exact i64 %sext74, 32
  %460 = getelementptr inbounds float, float* %22, i64 %459
  %461 = extractelement <64 x float> %371, i64 22
  store float %461, float* %460, align 4, !tbaa !1099
  %462 = shl i64 %366, 32
  %sext75 = add i64 %462, 19361712570368
  %463 = ashr exact i64 %sext75, 32
  %464 = getelementptr inbounds float, float* %22, i64 %463
  %465 = extractelement <64 x float> %371, i64 23
  store float %465, float* %464, align 4, !tbaa !1099
  %466 = shl i64 %366, 32
  %sext76 = add i64 %466, 20203526160384
  %467 = ashr exact i64 %sext76, 32
  %468 = getelementptr inbounds float, float* %22, i64 %467
  %469 = extractelement <64 x float> %371, i64 24
  store float %469, float* %468, align 4, !tbaa !1099
  %470 = shl i64 %366, 32
  %sext77 = add i64 %470, 21045339750400
  %471 = ashr exact i64 %sext77, 32
  %472 = getelementptr inbounds float, float* %22, i64 %471
  %473 = extractelement <64 x float> %371, i64 25
  store float %473, float* %472, align 4, !tbaa !1099
  %474 = shl i64 %366, 32
  %sext78 = add i64 %474, 21887153340416
  %475 = ashr exact i64 %sext78, 32
  %476 = getelementptr inbounds float, float* %22, i64 %475
  %477 = extractelement <64 x float> %371, i64 26
  store float %477, float* %476, align 4, !tbaa !1099
  %478 = shl i64 %366, 32
  %sext79 = add i64 %478, 22728966930432
  %479 = ashr exact i64 %sext79, 32
  %480 = getelementptr inbounds float, float* %22, i64 %479
  %481 = extractelement <64 x float> %371, i64 27
  store float %481, float* %480, align 4, !tbaa !1099
  %482 = shl i64 %366, 32
  %sext80 = add i64 %482, 23570780520448
  %483 = ashr exact i64 %sext80, 32
  %484 = getelementptr inbounds float, float* %22, i64 %483
  %485 = extractelement <64 x float> %371, i64 28
  store float %485, float* %484, align 4, !tbaa !1099
  %486 = shl i64 %366, 32
  %sext81 = add i64 %486, 24412594110464
  %487 = ashr exact i64 %sext81, 32
  %488 = getelementptr inbounds float, float* %22, i64 %487
  %489 = extractelement <64 x float> %371, i64 29
  store float %489, float* %488, align 4, !tbaa !1099
  %490 = shl i64 %366, 32
  %sext82 = add i64 %490, 25254407700480
  %491 = ashr exact i64 %sext82, 32
  %492 = getelementptr inbounds float, float* %22, i64 %491
  %493 = extractelement <64 x float> %371, i64 30
  store float %493, float* %492, align 4, !tbaa !1099
  %494 = shl i64 %366, 32
  %sext83 = add i64 %494, 26096221290496
  %495 = ashr exact i64 %sext83, 32
  %496 = getelementptr inbounds float, float* %22, i64 %495
  %497 = extractelement <64 x float> %371, i64 31
  store float %497, float* %496, align 4, !tbaa !1099
  %498 = shl i64 %366, 32
  %sext84 = add i64 %498, 26938034880512
  %499 = ashr exact i64 %sext84, 32
  %500 = getelementptr inbounds float, float* %22, i64 %499
  %501 = extractelement <64 x float> %371, i64 32
  store float %501, float* %500, align 4, !tbaa !1099
  %502 = shl i64 %366, 32
  %sext85 = add i64 %502, 27779848470528
  %503 = ashr exact i64 %sext85, 32
  %504 = getelementptr inbounds float, float* %22, i64 %503
  %505 = extractelement <64 x float> %371, i64 33
  store float %505, float* %504, align 4, !tbaa !1099
  %506 = shl i64 %366, 32
  %sext86 = add i64 %506, 28621662060544
  %507 = ashr exact i64 %sext86, 32
  %508 = getelementptr inbounds float, float* %22, i64 %507
  %509 = extractelement <64 x float> %371, i64 34
  store float %509, float* %508, align 4, !tbaa !1099
  %510 = shl i64 %366, 32
  %sext87 = add i64 %510, 29463475650560
  %511 = ashr exact i64 %sext87, 32
  %512 = getelementptr inbounds float, float* %22, i64 %511
  %513 = extractelement <64 x float> %371, i64 35
  store float %513, float* %512, align 4, !tbaa !1099
  %514 = shl i64 %366, 32
  %sext88 = add i64 %514, 30305289240576
  %515 = ashr exact i64 %sext88, 32
  %516 = getelementptr inbounds float, float* %22, i64 %515
  %517 = extractelement <64 x float> %371, i64 36
  store float %517, float* %516, align 4, !tbaa !1099
  %518 = shl i64 %366, 32
  %sext89 = add i64 %518, 31147102830592
  %519 = ashr exact i64 %sext89, 32
  %520 = getelementptr inbounds float, float* %22, i64 %519
  %521 = extractelement <64 x float> %371, i64 37
  store float %521, float* %520, align 4, !tbaa !1099
  %522 = shl i64 %366, 32
  %sext90 = add i64 %522, 31988916420608
  %523 = ashr exact i64 %sext90, 32
  %524 = getelementptr inbounds float, float* %22, i64 %523
  %525 = extractelement <64 x float> %371, i64 38
  store float %525, float* %524, align 4, !tbaa !1099
  %526 = shl i64 %366, 32
  %sext91 = add i64 %526, 32830730010624
  %527 = ashr exact i64 %sext91, 32
  %528 = getelementptr inbounds float, float* %22, i64 %527
  %529 = extractelement <64 x float> %371, i64 39
  store float %529, float* %528, align 4, !tbaa !1099
  %530 = shl i64 %366, 32
  %sext92 = add i64 %530, 33672543600640
  %531 = ashr exact i64 %sext92, 32
  %532 = getelementptr inbounds float, float* %22, i64 %531
  %533 = extractelement <64 x float> %371, i64 40
  store float %533, float* %532, align 4, !tbaa !1099
  %534 = shl i64 %366, 32
  %sext93 = add i64 %534, 34514357190656
  %535 = ashr exact i64 %sext93, 32
  %536 = getelementptr inbounds float, float* %22, i64 %535
  %537 = extractelement <64 x float> %371, i64 41
  store float %537, float* %536, align 4, !tbaa !1099
  %538 = shl i64 %366, 32
  %sext94 = add i64 %538, 35356170780672
  %539 = ashr exact i64 %sext94, 32
  %540 = getelementptr inbounds float, float* %22, i64 %539
  %541 = extractelement <64 x float> %371, i64 42
  store float %541, float* %540, align 4, !tbaa !1099
  %542 = shl i64 %366, 32
  %sext95 = add i64 %542, 36197984370688
  %543 = ashr exact i64 %sext95, 32
  %544 = getelementptr inbounds float, float* %22, i64 %543
  %545 = extractelement <64 x float> %371, i64 43
  store float %545, float* %544, align 4, !tbaa !1099
  %546 = shl i64 %366, 32
  %sext96 = add i64 %546, 37039797960704
  %547 = ashr exact i64 %sext96, 32
  %548 = getelementptr inbounds float, float* %22, i64 %547
  %549 = extractelement <64 x float> %371, i64 44
  store float %549, float* %548, align 4, !tbaa !1099
  %550 = shl i64 %366, 32
  %sext97 = add i64 %550, 37881611550720
  %551 = ashr exact i64 %sext97, 32
  %552 = getelementptr inbounds float, float* %22, i64 %551
  %553 = extractelement <64 x float> %371, i64 45
  store float %553, float* %552, align 4, !tbaa !1099
  %554 = shl i64 %366, 32
  %sext98 = add i64 %554, 38723425140736
  %555 = ashr exact i64 %sext98, 32
  %556 = getelementptr inbounds float, float* %22, i64 %555
  %557 = extractelement <64 x float> %371, i64 46
  store float %557, float* %556, align 4, !tbaa !1099
  %558 = shl i64 %366, 32
  %sext99 = add i64 %558, 39565238730752
  %559 = ashr exact i64 %sext99, 32
  %560 = getelementptr inbounds float, float* %22, i64 %559
  %561 = extractelement <64 x float> %371, i64 47
  store float %561, float* %560, align 4, !tbaa !1099
  %562 = shl i64 %366, 32
  %sext100 = add i64 %562, 40407052320768
  %563 = ashr exact i64 %sext100, 32
  %564 = getelementptr inbounds float, float* %22, i64 %563
  %565 = extractelement <64 x float> %371, i64 48
  store float %565, float* %564, align 4, !tbaa !1099
  %566 = shl i64 %366, 32
  %sext101 = add i64 %566, 41248865910784
  %567 = ashr exact i64 %sext101, 32
  %568 = getelementptr inbounds float, float* %22, i64 %567
  %569 = extractelement <64 x float> %371, i64 49
  store float %569, float* %568, align 4, !tbaa !1099
  %570 = shl i64 %366, 32
  %sext102 = add i64 %570, 42090679500800
  %571 = ashr exact i64 %sext102, 32
  %572 = getelementptr inbounds float, float* %22, i64 %571
  %573 = extractelement <64 x float> %371, i64 50
  store float %573, float* %572, align 4, !tbaa !1099
  %574 = shl i64 %366, 32
  %sext103 = add i64 %574, 42932493090816
  %575 = ashr exact i64 %sext103, 32
  %576 = getelementptr inbounds float, float* %22, i64 %575
  %577 = extractelement <64 x float> %371, i64 51
  store float %577, float* %576, align 4, !tbaa !1099
  %578 = shl i64 %366, 32
  %sext104 = add i64 %578, 43774306680832
  %579 = ashr exact i64 %sext104, 32
  %580 = getelementptr inbounds float, float* %22, i64 %579
  %581 = extractelement <64 x float> %371, i64 52
  store float %581, float* %580, align 4, !tbaa !1099
  %582 = shl i64 %366, 32
  %sext105 = add i64 %582, 44616120270848
  %583 = ashr exact i64 %sext105, 32
  %584 = getelementptr inbounds float, float* %22, i64 %583
  %585 = extractelement <64 x float> %371, i64 53
  store float %585, float* %584, align 4, !tbaa !1099
  %586 = shl i64 %366, 32
  %sext106 = add i64 %586, 45457933860864
  %587 = ashr exact i64 %sext106, 32
  %588 = getelementptr inbounds float, float* %22, i64 %587
  %589 = extractelement <64 x float> %371, i64 54
  store float %589, float* %588, align 4, !tbaa !1099
  %590 = shl i64 %366, 32
  %sext107 = add i64 %590, 46299747450880
  %591 = ashr exact i64 %sext107, 32
  %592 = getelementptr inbounds float, float* %22, i64 %591
  %593 = extractelement <64 x float> %371, i64 55
  store float %593, float* %592, align 4, !tbaa !1099
  %594 = shl i64 %366, 32
  %sext108 = add i64 %594, 47141561040896
  %595 = ashr exact i64 %sext108, 32
  %596 = getelementptr inbounds float, float* %22, i64 %595
  %597 = extractelement <64 x float> %371, i64 56
  store float %597, float* %596, align 4, !tbaa !1099
  %598 = shl i64 %366, 32
  %sext109 = add i64 %598, 47983374630912
  %599 = ashr exact i64 %sext109, 32
  %600 = getelementptr inbounds float, float* %22, i64 %599
  %601 = extractelement <64 x float> %371, i64 57
  store float %601, float* %600, align 4, !tbaa !1099
  %602 = shl i64 %366, 32
  %sext110 = add i64 %602, 48825188220928
  %603 = ashr exact i64 %sext110, 32
  %604 = getelementptr inbounds float, float* %22, i64 %603
  %605 = extractelement <64 x float> %371, i64 58
  store float %605, float* %604, align 4, !tbaa !1099
  %606 = shl i64 %366, 32
  %sext111 = add i64 %606, 49667001810944
  %607 = ashr exact i64 %sext111, 32
  %608 = getelementptr inbounds float, float* %22, i64 %607
  %609 = extractelement <64 x float> %371, i64 59
  store float %609, float* %608, align 4, !tbaa !1099
  %610 = shl i64 %366, 32
  %sext112 = add i64 %610, 50508815400960
  %611 = ashr exact i64 %sext112, 32
  %612 = getelementptr inbounds float, float* %22, i64 %611
  %613 = extractelement <64 x float> %371, i64 60
  store float %613, float* %612, align 4, !tbaa !1099
  %614 = shl i64 %366, 32
  %sext113 = add i64 %614, 51350628990976
  %615 = ashr exact i64 %sext113, 32
  %616 = getelementptr inbounds float, float* %22, i64 %615
  %617 = extractelement <64 x float> %371, i64 61
  store float %617, float* %616, align 4, !tbaa !1099
  %618 = shl i64 %366, 32
  %sext114 = add i64 %618, 52192442580992
  %619 = ashr exact i64 %sext114, 32
  %620 = getelementptr inbounds float, float* %22, i64 %619
  %621 = extractelement <64 x float> %371, i64 62
  store float %621, float* %620, align 4, !tbaa !1099
  %622 = shl i64 %366, 32
  %sext115 = add i64 %622, 53034256171008
  %623 = ashr exact i64 %sext115, 32
  %624 = getelementptr inbounds float, float* %22, i64 %623
  %625 = extractelement <64 x float> %371, i64 63
  store float %625, float* %624, align 4, !tbaa !1099
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %exitcond28 = icmp eq i64 %indvars.iv.next27, 2
  br i1 %exitcond28, label %for_end36, label %for_body35, !prof !5

for_end36:                                        ; preds = %for_body35
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp eq i64 %indvars.iv.next30, 2
  br i1 %exitcond31, label %for_end33, label %for_begin34.preheader, !prof !5

for_body26.1:                                     ; preds = %for_body26.1, %for_end27
  %indvars.iv.1 = phi i64 [ 0, %for_end27 ], [ %indvars.iv.next.1, %for_body26.1 ]
  %626 = phi <64 x float> [ %356, %for_end27 ], [ %663, %for_body26.1 ]
  %627 = phi <64 x float> [ %349, %for_end27 ], [ %656, %for_body26.1 ]
  %628 = phi <64 x float> [ %342, %for_end27 ], [ %649, %for_body26.1 ]
  %629 = phi <64 x float> [ %335, %for_end27 ], [ %642, %for_body26.1 ]
  %630 = mul nuw nsw i64 %indvars.iv.1, 27
  %631 = add nuw nsw i64 %357, %630
  %632 = and i64 %631, 4294967295
  %633 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %632
  %634 = load float, float* %633, align 4, !tbaa !1096
  %635 = insertelement <64 x float> undef, float %634, i32 0
  %636 = shufflevector <64 x float> %635, <64 x float> undef, <64 x i32> zeroinitializer
  %637 = shl i64 %indvars.iv.1, 6
  %638 = add nuw nsw i64 %294, %637
  %639 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %638
  %640 = bitcast float* %639 to <64 x float>*
  %641 = load <64 x float>, <64 x float>* %640, align 16, !tbaa !1090
  %642 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %636, <64 x float> %641, <64 x float> %629)
  %643 = add nuw i64 %631, 2
  %644 = and i64 %643, 4294967295
  %645 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %644
  %646 = load float, float* %645, align 4, !tbaa !1096
  %647 = insertelement <64 x float> undef, float %646, i32 0
  %648 = shufflevector <64 x float> %647, <64 x float> undef, <64 x i32> zeroinitializer
  %649 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %648, <64 x float> %641, <64 x float> %628)
  %650 = add nuw i64 %631, 3456
  %651 = and i64 %650, 4294967295
  %652 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %651
  %653 = load float, float* %652, align 4, !tbaa !1096
  %654 = insertelement <64 x float> undef, float %653, i32 0
  %655 = shufflevector <64 x float> %654, <64 x float> undef, <64 x i32> zeroinitializer
  %656 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %655, <64 x float> %641, <64 x float> %627)
  %657 = add nuw i64 %631, 3458
  %658 = and i64 %657, 4294967295
  %659 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %658
  %660 = load float, float* %659, align 4, !tbaa !1096
  %661 = insertelement <64 x float> undef, float %660, i32 0
  %662 = shufflevector <64 x float> %661, <64 x float> undef, <64 x i32> zeroinitializer
  %663 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %662, <64 x float> %641, <64 x float> %626)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end27.1, label %for_body26.1, !prof !5

for_end27.1:                                      ; preds = %for_body26.1
  %664 = add nuw nsw i64 %318, 93312
  br label %for_body26.2

for_body26.2:                                     ; preds = %for_body26.2, %for_end27.1
  %indvars.iv.2 = phi i64 [ 0, %for_end27.1 ], [ %indvars.iv.next.2, %for_body26.2 ]
  %665 = phi <64 x float> [ %663, %for_end27.1 ], [ %702, %for_body26.2 ]
  %666 = phi <64 x float> [ %656, %for_end27.1 ], [ %695, %for_body26.2 ]
  %667 = phi <64 x float> [ %649, %for_end27.1 ], [ %688, %for_body26.2 ]
  %668 = phi <64 x float> [ %642, %for_end27.1 ], [ %681, %for_body26.2 ]
  %669 = mul nuw nsw i64 %indvars.iv.2, 27
  %670 = add nuw nsw i64 %664, %669
  %671 = and i64 %670, 4294967295
  %672 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %671
  %673 = load float, float* %672, align 4, !tbaa !1096
  %674 = insertelement <64 x float> undef, float %673, i32 0
  %675 = shufflevector <64 x float> %674, <64 x float> undef, <64 x i32> zeroinitializer
  %676 = shl i64 %indvars.iv.2, 6
  %677 = add nuw nsw i64 %295, %676
  %678 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %677
  %679 = bitcast float* %678 to <64 x float>*
  %680 = load <64 x float>, <64 x float>* %679, align 16, !tbaa !1090
  %681 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %675, <64 x float> %680, <64 x float> %668)
  %682 = add nuw i64 %670, 2
  %683 = and i64 %682, 4294967295
  %684 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %683
  %685 = load float, float* %684, align 4, !tbaa !1096
  %686 = insertelement <64 x float> undef, float %685, i32 0
  %687 = shufflevector <64 x float> %686, <64 x float> undef, <64 x i32> zeroinitializer
  %688 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %687, <64 x float> %680, <64 x float> %667)
  %689 = add nuw i64 %670, 3456
  %690 = and i64 %689, 4294967295
  %691 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %690
  %692 = load float, float* %691, align 4, !tbaa !1096
  %693 = insertelement <64 x float> undef, float %692, i32 0
  %694 = shufflevector <64 x float> %693, <64 x float> undef, <64 x i32> zeroinitializer
  %695 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %694, <64 x float> %680, <64 x float> %666)
  %696 = add nuw i64 %670, 3458
  %697 = and i64 %696, 4294967295
  %698 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %697
  %699 = load float, float* %698, align 4, !tbaa !1096
  %700 = insertelement <64 x float> undef, float %699, i32 0
  %701 = shufflevector <64 x float> %700, <64 x float> undef, <64 x i32> zeroinitializer
  %702 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %701, <64 x float> %680, <64 x float> %665)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end27.2, label %for_body26.2, !prof !5

for_end27.2:                                      ; preds = %for_body26.2
  %703 = add nuw nsw i64 %318, 139968
  br label %for_body26.3

for_body26.3:                                     ; preds = %for_body26.3, %for_end27.2
  %indvars.iv.3 = phi i64 [ 0, %for_end27.2 ], [ %indvars.iv.next.3, %for_body26.3 ]
  %704 = phi <64 x float> [ %702, %for_end27.2 ], [ %741, %for_body26.3 ]
  %705 = phi <64 x float> [ %695, %for_end27.2 ], [ %734, %for_body26.3 ]
  %706 = phi <64 x float> [ %688, %for_end27.2 ], [ %727, %for_body26.3 ]
  %707 = phi <64 x float> [ %681, %for_end27.2 ], [ %720, %for_body26.3 ]
  %708 = mul nuw nsw i64 %indvars.iv.3, 27
  %709 = add nuw nsw i64 %703, %708
  %710 = and i64 %709, 4294967295
  %711 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %710
  %712 = load float, float* %711, align 4, !tbaa !1096
  %713 = insertelement <64 x float> undef, float %712, i32 0
  %714 = shufflevector <64 x float> %713, <64 x float> undef, <64 x i32> zeroinitializer
  %715 = shl i64 %indvars.iv.3, 6
  %716 = add nuw nsw i64 %296, %715
  %717 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %716
  %718 = bitcast float* %717 to <64 x float>*
  %719 = load <64 x float>, <64 x float>* %718, align 16, !tbaa !1090
  %720 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %714, <64 x float> %719, <64 x float> %707)
  %721 = add nuw i64 %709, 2
  %722 = and i64 %721, 4294967295
  %723 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %722
  %724 = load float, float* %723, align 4, !tbaa !1096
  %725 = insertelement <64 x float> undef, float %724, i32 0
  %726 = shufflevector <64 x float> %725, <64 x float> undef, <64 x i32> zeroinitializer
  %727 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %726, <64 x float> %719, <64 x float> %706)
  %728 = add nuw i64 %709, 3456
  %729 = and i64 %728, 4294967295
  %730 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %729
  %731 = load float, float* %730, align 4, !tbaa !1096
  %732 = insertelement <64 x float> undef, float %731, i32 0
  %733 = shufflevector <64 x float> %732, <64 x float> undef, <64 x i32> zeroinitializer
  %734 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %733, <64 x float> %719, <64 x float> %705)
  %735 = add nuw i64 %709, 3458
  %736 = and i64 %735, 4294967295
  %737 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %736
  %738 = load float, float* %737, align 4, !tbaa !1096
  %739 = insertelement <64 x float> undef, float %738, i32 0
  %740 = shufflevector <64 x float> %739, <64 x float> undef, <64 x i32> zeroinitializer
  %741 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %740, <64 x float> %719, <64 x float> %704)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 64
  br i1 %exitcond.3, label %for_end27.3, label %for_body26.3, !prof !5

for_end27.3:                                      ; preds = %for_body26.3
  %742 = add nuw nsw i64 %318, 186624
  br label %for_body26.4

for_body26.4:                                     ; preds = %for_body26.4, %for_end27.3
  %indvars.iv.4 = phi i64 [ 0, %for_end27.3 ], [ %indvars.iv.next.4, %for_body26.4 ]
  %743 = phi <64 x float> [ %741, %for_end27.3 ], [ %780, %for_body26.4 ]
  %744 = phi <64 x float> [ %734, %for_end27.3 ], [ %773, %for_body26.4 ]
  %745 = phi <64 x float> [ %727, %for_end27.3 ], [ %766, %for_body26.4 ]
  %746 = phi <64 x float> [ %720, %for_end27.3 ], [ %759, %for_body26.4 ]
  %747 = mul nuw nsw i64 %indvars.iv.4, 27
  %748 = add nuw nsw i64 %742, %747
  %749 = and i64 %748, 4294967295
  %750 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %749
  %751 = load float, float* %750, align 4, !tbaa !1096
  %752 = insertelement <64 x float> undef, float %751, i32 0
  %753 = shufflevector <64 x float> %752, <64 x float> undef, <64 x i32> zeroinitializer
  %754 = shl i64 %indvars.iv.4, 6
  %755 = add nuw nsw i64 %297, %754
  %756 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %755
  %757 = bitcast float* %756 to <64 x float>*
  %758 = load <64 x float>, <64 x float>* %757, align 16, !tbaa !1090
  %759 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %753, <64 x float> %758, <64 x float> %746)
  %760 = add nuw i64 %748, 2
  %761 = and i64 %760, 4294967295
  %762 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %761
  %763 = load float, float* %762, align 4, !tbaa !1096
  %764 = insertelement <64 x float> undef, float %763, i32 0
  %765 = shufflevector <64 x float> %764, <64 x float> undef, <64 x i32> zeroinitializer
  %766 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %765, <64 x float> %758, <64 x float> %745)
  %767 = add nuw i64 %748, 3456
  %768 = and i64 %767, 4294967295
  %769 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %768
  %770 = load float, float* %769, align 4, !tbaa !1096
  %771 = insertelement <64 x float> undef, float %770, i32 0
  %772 = shufflevector <64 x float> %771, <64 x float> undef, <64 x i32> zeroinitializer
  %773 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %772, <64 x float> %758, <64 x float> %744)
  %774 = add nuw i64 %748, 3458
  %775 = and i64 %774, 4294967295
  %776 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %775
  %777 = load float, float* %776, align 4, !tbaa !1096
  %778 = insertelement <64 x float> undef, float %777, i32 0
  %779 = shufflevector <64 x float> %778, <64 x float> undef, <64 x i32> zeroinitializer
  %780 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %779, <64 x float> %758, <64 x float> %743)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 64
  br i1 %exitcond.4, label %for_end27.4, label %for_body26.4, !prof !5

for_end27.4:                                      ; preds = %for_body26.4
  %781 = add nuw nsw i64 %318, 233280
  br label %for_body26.5

for_body26.5:                                     ; preds = %for_body26.5, %for_end27.4
  %indvars.iv.5 = phi i64 [ 0, %for_end27.4 ], [ %indvars.iv.next.5, %for_body26.5 ]
  %782 = phi <64 x float> [ %780, %for_end27.4 ], [ %819, %for_body26.5 ]
  %783 = phi <64 x float> [ %773, %for_end27.4 ], [ %812, %for_body26.5 ]
  %784 = phi <64 x float> [ %766, %for_end27.4 ], [ %805, %for_body26.5 ]
  %785 = phi <64 x float> [ %759, %for_end27.4 ], [ %798, %for_body26.5 ]
  %786 = mul nuw nsw i64 %indvars.iv.5, 27
  %787 = add nuw nsw i64 %781, %786
  %788 = and i64 %787, 4294967295
  %789 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %788
  %790 = load float, float* %789, align 4, !tbaa !1096
  %791 = insertelement <64 x float> undef, float %790, i32 0
  %792 = shufflevector <64 x float> %791, <64 x float> undef, <64 x i32> zeroinitializer
  %793 = shl i64 %indvars.iv.5, 6
  %794 = add nuw nsw i64 %298, %793
  %795 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %794
  %796 = bitcast float* %795 to <64 x float>*
  %797 = load <64 x float>, <64 x float>* %796, align 16, !tbaa !1090
  %798 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %792, <64 x float> %797, <64 x float> %785)
  %799 = add nuw i64 %787, 2
  %800 = and i64 %799, 4294967295
  %801 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %800
  %802 = load float, float* %801, align 4, !tbaa !1096
  %803 = insertelement <64 x float> undef, float %802, i32 0
  %804 = shufflevector <64 x float> %803, <64 x float> undef, <64 x i32> zeroinitializer
  %805 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %804, <64 x float> %797, <64 x float> %784)
  %806 = add nuw i64 %787, 3456
  %807 = and i64 %806, 4294967295
  %808 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %807
  %809 = load float, float* %808, align 4, !tbaa !1096
  %810 = insertelement <64 x float> undef, float %809, i32 0
  %811 = shufflevector <64 x float> %810, <64 x float> undef, <64 x i32> zeroinitializer
  %812 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %811, <64 x float> %797, <64 x float> %783)
  %813 = add nuw i64 %787, 3458
  %814 = and i64 %813, 4294967295
  %815 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %814
  %816 = load float, float* %815, align 4, !tbaa !1096
  %817 = insertelement <64 x float> undef, float %816, i32 0
  %818 = shufflevector <64 x float> %817, <64 x float> undef, <64 x i32> zeroinitializer
  %819 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %818, <64 x float> %797, <64 x float> %782)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 64
  br i1 %exitcond.5, label %for_end27.5, label %for_body26.5, !prof !5

for_end27.5:                                      ; preds = %for_body26.5
  %820 = add nuw nsw i64 %318, 279936
  br label %for_body26.6

for_body26.6:                                     ; preds = %for_body26.6, %for_end27.5
  %indvars.iv.6 = phi i64 [ 0, %for_end27.5 ], [ %indvars.iv.next.6, %for_body26.6 ]
  %821 = phi <64 x float> [ %819, %for_end27.5 ], [ %858, %for_body26.6 ]
  %822 = phi <64 x float> [ %812, %for_end27.5 ], [ %851, %for_body26.6 ]
  %823 = phi <64 x float> [ %805, %for_end27.5 ], [ %844, %for_body26.6 ]
  %824 = phi <64 x float> [ %798, %for_end27.5 ], [ %837, %for_body26.6 ]
  %825 = mul nuw nsw i64 %indvars.iv.6, 27
  %826 = add nuw nsw i64 %820, %825
  %827 = and i64 %826, 4294967295
  %828 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %827
  %829 = load float, float* %828, align 4, !tbaa !1096
  %830 = insertelement <64 x float> undef, float %829, i32 0
  %831 = shufflevector <64 x float> %830, <64 x float> undef, <64 x i32> zeroinitializer
  %832 = shl i64 %indvars.iv.6, 6
  %833 = add nuw nsw i64 %299, %832
  %834 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %833
  %835 = bitcast float* %834 to <64 x float>*
  %836 = load <64 x float>, <64 x float>* %835, align 16, !tbaa !1090
  %837 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %831, <64 x float> %836, <64 x float> %824)
  %838 = add nuw i64 %826, 2
  %839 = and i64 %838, 4294967295
  %840 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %839
  %841 = load float, float* %840, align 4, !tbaa !1096
  %842 = insertelement <64 x float> undef, float %841, i32 0
  %843 = shufflevector <64 x float> %842, <64 x float> undef, <64 x i32> zeroinitializer
  %844 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %843, <64 x float> %836, <64 x float> %823)
  %845 = add nuw i64 %826, 3456
  %846 = and i64 %845, 4294967295
  %847 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %846
  %848 = load float, float* %847, align 4, !tbaa !1096
  %849 = insertelement <64 x float> undef, float %848, i32 0
  %850 = shufflevector <64 x float> %849, <64 x float> undef, <64 x i32> zeroinitializer
  %851 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %850, <64 x float> %836, <64 x float> %822)
  %852 = add nuw i64 %826, 3458
  %853 = and i64 %852, 4294967295
  %854 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %853
  %855 = load float, float* %854, align 4, !tbaa !1096
  %856 = insertelement <64 x float> undef, float %855, i32 0
  %857 = shufflevector <64 x float> %856, <64 x float> undef, <64 x i32> zeroinitializer
  %858 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %857, <64 x float> %836, <64 x float> %821)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 64
  br i1 %exitcond.6, label %for_end27.6, label %for_body26.6, !prof !5

for_end27.6:                                      ; preds = %for_body26.6
  %859 = add nuw nsw i64 %318, 326592
  br label %for_body26.7

for_body26.7:                                     ; preds = %for_body26.7, %for_end27.6
  %indvars.iv.7 = phi i64 [ 0, %for_end27.6 ], [ %indvars.iv.next.7, %for_body26.7 ]
  %860 = phi <64 x float> [ %858, %for_end27.6 ], [ %897, %for_body26.7 ]
  %861 = phi <64 x float> [ %851, %for_end27.6 ], [ %890, %for_body26.7 ]
  %862 = phi <64 x float> [ %844, %for_end27.6 ], [ %883, %for_body26.7 ]
  %863 = phi <64 x float> [ %837, %for_end27.6 ], [ %876, %for_body26.7 ]
  %864 = mul nuw nsw i64 %indvars.iv.7, 27
  %865 = add nuw nsw i64 %859, %864
  %866 = and i64 %865, 4294967295
  %867 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %866
  %868 = load float, float* %867, align 4, !tbaa !1096
  %869 = insertelement <64 x float> undef, float %868, i32 0
  %870 = shufflevector <64 x float> %869, <64 x float> undef, <64 x i32> zeroinitializer
  %871 = shl i64 %indvars.iv.7, 6
  %872 = add nuw nsw i64 %300, %871
  %873 = getelementptr inbounds [2048 x <64 x float>], [2048 x <64 x float>]* %4, i64 0, i64 0, i64 %872
  %874 = bitcast float* %873 to <64 x float>*
  %875 = load <64 x float>, <64 x float>* %874, align 16, !tbaa !1090
  %876 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %870, <64 x float> %875, <64 x float> %863)
  %877 = add nuw i64 %865, 2
  %878 = and i64 %877, 4294967295
  %879 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %878
  %880 = load float, float* %879, align 4, !tbaa !1096
  %881 = insertelement <64 x float> undef, float %880, i32 0
  %882 = shufflevector <64 x float> %881, <64 x float> undef, <64 x i32> zeroinitializer
  %883 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %882, <64 x float> %875, <64 x float> %862)
  %884 = add nuw i64 %865, 3456
  %885 = and i64 %884, 4294967295
  %886 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %885
  %887 = load float, float* %886, align 4, !tbaa !1096
  %888 = insertelement <64 x float> undef, float %887, i32 0
  %889 = shufflevector <64 x float> %888, <64 x float> undef, <64 x i32> zeroinitializer
  %890 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %889, <64 x float> %875, <64 x float> %861)
  %891 = add nuw i64 %865, 3458
  %892 = and i64 %891, 4294967295
  %893 = getelementptr inbounds [373248 x float], [373248 x float]* %5, i64 0, i64 %892
  %894 = load float, float* %893, align 4, !tbaa !1096
  %895 = insertelement <64 x float> undef, float %894, i32 0
  %896 = shufflevector <64 x float> %895, <64 x float> undef, <64 x i32> zeroinitializer
  %897 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %896, <64 x float> %875, <64 x float> %860)
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv.7, 1
  %exitcond.7 = icmp eq i64 %indvars.iv.next.7, 64
  br i1 %exitcond.7, label %for_end27.7, label %for_body26.7, !prof !5

for_end27.7:                                      ; preds = %for_body26.7
  store <64 x float> %876, <64 x float>* %307, align 16, !tbaa !1093
  store <64 x float> %883, <64 x float>* %310, align 16, !tbaa !1093
  store <64 x float> %890, <64 x float>* %313, align 16, !tbaa !1093
  store <64 x float> %897, <64 x float>* %316, align 16, !tbaa !1093
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp eq i64 %indvars.iv.next23, 7
  br i1 %exitcond24, label %for_begin28.preheader, label %for_body20, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_divide(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_divide_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_divide_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %1 to float*
  %4 = load float, float* %3, align 64, !tbaa !1102
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  %5 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1116
  %6 = fdiv <4 x float> %broadcast.splat2, %wide.load
  %7 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %6, <4 x float>* %7, align 4, !tbaa !1119
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !1116
  %10 = fdiv <4 x float> %broadcast.splat2, %wide.load.1
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !1119
  %13 = getelementptr inbounds i8, i8* %2, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !1116
  %15 = fdiv <4 x float> %broadcast.splat2, %wide.load.2
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  store <4 x float> %15, <4 x float>* %17, align 4, !tbaa !1119
  %18 = getelementptr inbounds i8, i8* %2, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !1116
  %20 = fdiv <4 x float> %broadcast.splat2, %wide.load.3
  %21 = getelementptr inbounds i8, i8* %0, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %20, <4 x float>* %22, align 4, !tbaa !1119
  %23 = getelementptr inbounds i8, i8* %2, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1116
  %25 = fdiv <4 x float> %broadcast.splat2, %wide.load.4
  %26 = getelementptr inbounds i8, i8* %0, i64 64
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !1119
  %28 = getelementptr inbounds i8, i8* %2, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !1116
  %30 = fdiv <4 x float> %broadcast.splat2, %wide.load.5
  %31 = getelementptr inbounds i8, i8* %0, i64 80
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 4, !tbaa !1119
  %33 = getelementptr inbounds i8, i8* %2, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !1116
  %35 = fdiv <4 x float> %broadcast.splat2, %wide.load.6
  %36 = getelementptr inbounds i8, i8* %0, i64 96
  %37 = bitcast i8* %36 to <4 x float>*
  store <4 x float> %35, <4 x float>* %37, align 4, !tbaa !1119
  %38 = getelementptr inbounds i8, i8* %2, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %39, align 4, !tbaa !1116
  %40 = fdiv <4 x float> %broadcast.splat2, %wide.load.7
  %41 = getelementptr inbounds i8, i8* %0, i64 112
  %42 = bitcast i8* %41 to <4 x float>*
  store <4 x float> %40, <4 x float>* %42, align 4, !tbaa !1119
  %43 = getelementptr inbounds i8, i8* %2, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !1116
  %45 = fdiv <4 x float> %broadcast.splat2, %wide.load.8
  %46 = getelementptr inbounds i8, i8* %0, i64 128
  %47 = bitcast i8* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !1119
  %48 = getelementptr inbounds i8, i8* %2, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !1116
  %50 = fdiv <4 x float> %broadcast.splat2, %wide.load.9
  %51 = getelementptr inbounds i8, i8* %0, i64 144
  %52 = bitcast i8* %51 to <4 x float>*
  store <4 x float> %50, <4 x float>* %52, align 4, !tbaa !1119
  %53 = getelementptr inbounds i8, i8* %2, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1116
  %55 = fdiv <4 x float> %broadcast.splat2, %wide.load.10
  %56 = getelementptr inbounds i8, i8* %0, i64 160
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !1119
  %58 = getelementptr inbounds i8, i8* %2, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !1116
  %60 = fdiv <4 x float> %broadcast.splat2, %wide.load.11
  %61 = getelementptr inbounds i8, i8* %0, i64 176
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %60, <4 x float>* %62, align 4, !tbaa !1119
  %63 = getelementptr inbounds i8, i8* %2, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1116
  %65 = fdiv <4 x float> %broadcast.splat2, %wide.load.12
  %66 = getelementptr inbounds i8, i8* %0, i64 192
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %65, <4 x float>* %67, align 4, !tbaa !1119
  %68 = getelementptr inbounds i8, i8* %2, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !1116
  %70 = fdiv <4 x float> %broadcast.splat2, %wide.load.13
  %71 = getelementptr inbounds i8, i8* %0, i64 208
  %72 = bitcast i8* %71 to <4 x float>*
  store <4 x float> %70, <4 x float>* %72, align 4, !tbaa !1119
  %73 = getelementptr inbounds i8, i8* %2, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !1116
  %75 = fdiv <4 x float> %broadcast.splat2, %wide.load.14
  %76 = getelementptr inbounds i8, i8* %0, i64 224
  %77 = bitcast i8* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 4, !tbaa !1119
  %78 = getelementptr inbounds i8, i8* %2, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %79, align 4, !tbaa !1116
  %80 = fdiv <4 x float> %broadcast.splat2, %wide.load.15
  %81 = getelementptr inbounds i8, i8* %0, i64 240
  %82 = bitcast i8* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !1119
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_3(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_3_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_3_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv1, 196
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv1
  %8 = load float, float* %7, align 4, !tbaa !1122
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %8, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = insertelement <4 x float> undef, float %8, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %15 = mul nuw nsw i64 %indvars.iv, 14
  %16 = add nuw nsw i64 %15, %6
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = bitcast float* %17 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !1125
  %21 = fmul <4 x float> %10, %20
  %22 = bitcast float* %18 to <4 x float>*
  store <4 x float> %21, <4 x float>* %22, align 4, !tbaa !1128
  %23 = add nuw nsw i64 %16, 4
  %24 = getelementptr inbounds float, float* %4, i64 %23
  %25 = getelementptr inbounds float, float* %5, i64 %23
  %26 = bitcast float* %24 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !1125
  %28 = fmul <4 x float> %12, %27
  %29 = bitcast float* %25 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !1128
  %30 = add nuw nsw i64 %16, 8
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = getelementptr inbounds float, float* %5, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !1125
  %35 = fmul <4 x float> %14, %34
  %36 = bitcast float* %32 to <4 x float>*
  store <4 x float> %35, <4 x float>* %36, align 4, !tbaa !1128
  %37 = add nuw nsw i64 %16, 12
  %38 = getelementptr inbounds float, float* %4, i64 %37
  %39 = load float, float* %38, align 4, !tbaa !1125
  %40 = fmul float %8, %39
  %41 = getelementptr inbounds float, float* %5, i64 %37
  store float %40, float* %41, align 4, !tbaa !1128
  %42 = add nuw nsw i64 %16, 13
  %43 = getelementptr inbounds float, float* %4, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !1125
  %45 = fmul float %8, %44
  %46 = getelementptr inbounds float, float* %5, i64 %42
  store float %45, float* %46, align 4, !tbaa !1128
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 1024
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !1131
  %3 = fsub <4 x float> zeroinitializer, %wide.load
  %4 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4, !tbaa !1134
  %5 = getelementptr inbounds i8, i8* %1, i64 16
  %6 = bitcast i8* %5 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !1131
  %7 = fsub <4 x float> zeroinitializer, %wide.load.1
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %7, <4 x float>* %9, align 4, !tbaa !1134
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !1131
  %12 = fsub <4 x float> zeroinitializer, %wide.load.2
  %13 = getelementptr inbounds i8, i8* %0, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  store <4 x float> %12, <4 x float>* %14, align 4, !tbaa !1134
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !1131
  %17 = fsub <4 x float> zeroinitializer, %wide.load.3
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !1134
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !1131
  %22 = fsub <4 x float> zeroinitializer, %wide.load.4
  %23 = getelementptr inbounds i8, i8* %0, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4, !tbaa !1134
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !1131
  %27 = fsub <4 x float> zeroinitializer, %wide.load.5
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4, !tbaa !1134
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !1131
  %32 = fsub <4 x float> zeroinitializer, %wide.load.6
  %33 = getelementptr inbounds i8, i8* %0, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !1134
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1131
  %37 = fsub <4 x float> zeroinitializer, %wide.load.7
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !1134
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !1131
  %42 = fsub <4 x float> zeroinitializer, %wide.load.8
  %43 = getelementptr inbounds i8, i8* %0, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  store <4 x float> %42, <4 x float>* %44, align 4, !tbaa !1134
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !1131
  %47 = fsub <4 x float> zeroinitializer, %wide.load.9
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4, !tbaa !1134
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !1131
  %52 = fsub <4 x float> zeroinitializer, %wide.load.10
  %53 = getelementptr inbounds i8, i8* %0, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !1134
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !1131
  %57 = fsub <4 x float> zeroinitializer, %wide.load.11
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %57, <4 x float>* %59, align 4, !tbaa !1134
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !1131
  %62 = fsub <4 x float> zeroinitializer, %wide.load.12
  %63 = getelementptr inbounds i8, i8* %0, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !tbaa !1134
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1131
  %67 = fsub <4 x float> zeroinitializer, %wide.load.13
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !1134
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1131
  %72 = fsub <4 x float> zeroinitializer, %wide.load.14
  %73 = getelementptr inbounds i8, i8* %0, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4, !tbaa !1134
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !1131
  %77 = fsub <4 x float> zeroinitializer, %wide.load.15
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !tbaa !1134
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_17(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_17_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_17_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !1137
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  %5 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1151
  %6 = getelementptr inbounds i8, i8* %1, i64 16
  %7 = bitcast i8* %6 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !1151
  %8 = fadd <4 x float> %broadcast.splat4, %wide.load
  %9 = fadd <4 x float> %broadcast.splat6, %wide.load2
  %10 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %8, <4 x float>* %10, align 4, !tbaa !1154
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to <4 x float>*
  store <4 x float> %9, <4 x float>* %12, align 4, !tbaa !1154
  %13 = getelementptr inbounds i8, i8* %1, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !1151
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !1151
  %17 = fadd <4 x float> %broadcast.splat4, %wide.load.1
  %18 = fadd <4 x float> %broadcast.splat6, %wide.load2.1
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %17, <4 x float>* %20, align 4, !tbaa !1154
  %21 = getelementptr inbounds i8, i8* %0, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %18, <4 x float>* %22, align 4, !tbaa !1154
  %23 = getelementptr inbounds i8, i8* %1, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1151
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !1151
  %27 = fadd <4 x float> %broadcast.splat4, %wide.load.2
  %28 = fadd <4 x float> %broadcast.splat6, %wide.load2.2
  %29 = getelementptr inbounds i8, i8* %0, i64 64
  %30 = bitcast i8* %29 to <4 x float>*
  store <4 x float> %27, <4 x float>* %30, align 4, !tbaa !1154
  %31 = getelementptr inbounds i8, i8* %0, i64 80
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %28, <4 x float>* %32, align 4, !tbaa !1154
  %33 = getelementptr inbounds i8, i8* %1, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !1151
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1151
  %37 = fadd <4 x float> %broadcast.splat4, %wide.load.3
  %38 = fadd <4 x float> %broadcast.splat6, %wide.load2.3
  %39 = getelementptr inbounds i8, i8* %0, i64 96
  %40 = bitcast i8* %39 to <4 x float>*
  store <4 x float> %37, <4 x float>* %40, align 4, !tbaa !1154
  %41 = getelementptr inbounds i8, i8* %0, i64 112
  %42 = bitcast i8* %41 to <4 x float>*
  store <4 x float> %38, <4 x float>* %42, align 4, !tbaa !1154
  %43 = getelementptr inbounds i8, i8* %1, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !1151
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !1151
  %47 = fadd <4 x float> %broadcast.splat4, %wide.load.4
  %48 = fadd <4 x float> %broadcast.splat6, %wide.load2.4
  %49 = getelementptr inbounds i8, i8* %0, i64 128
  %50 = bitcast i8* %49 to <4 x float>*
  store <4 x float> %47, <4 x float>* %50, align 4, !tbaa !1154
  %51 = getelementptr inbounds i8, i8* %0, i64 144
  %52 = bitcast i8* %51 to <4 x float>*
  store <4 x float> %48, <4 x float>* %52, align 4, !tbaa !1154
  %53 = getelementptr inbounds i8, i8* %1, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1151
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !1151
  %57 = fadd <4 x float> %broadcast.splat4, %wide.load.5
  %58 = fadd <4 x float> %broadcast.splat6, %wide.load2.5
  %59 = getelementptr inbounds i8, i8* %0, i64 160
  %60 = bitcast i8* %59 to <4 x float>*
  store <4 x float> %57, <4 x float>* %60, align 4, !tbaa !1154
  %61 = getelementptr inbounds i8, i8* %0, i64 176
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %58, <4 x float>* %62, align 4, !tbaa !1154
  %63 = getelementptr inbounds i8, i8* %1, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1151
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1151
  %67 = fadd <4 x float> %broadcast.splat4, %wide.load.6
  %68 = fadd <4 x float> %broadcast.splat6, %wide.load2.6
  %69 = getelementptr inbounds i8, i8* %0, i64 192
  %70 = bitcast i8* %69 to <4 x float>*
  store <4 x float> %67, <4 x float>* %70, align 4, !tbaa !1154
  %71 = getelementptr inbounds i8, i8* %0, i64 208
  %72 = bitcast i8* %71 to <4 x float>*
  store <4 x float> %68, <4 x float>* %72, align 4, !tbaa !1154
  %73 = getelementptr inbounds i8, i8* %1, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !1151
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !1151
  %77 = fadd <4 x float> %broadcast.splat4, %wide.load.7
  %78 = fadd <4 x float> %broadcast.splat6, %wide.load2.7
  %79 = getelementptr inbounds i8, i8* %0, i64 224
  %80 = bitcast i8* %79 to <4 x float>*
  store <4 x float> %77, <4 x float>* %80, align 4, !tbaa !1154
  %81 = getelementptr inbounds i8, i8* %0, i64 240
  %82 = bitcast i8* %81 to <4 x float>*
  store <4 x float> %78, <4 x float>* %82, align 4, !tbaa !1154
  %83 = getelementptr inbounds i8, i8* %1, i64 256
  %84 = bitcast i8* %83 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !1151
  %85 = getelementptr inbounds i8, i8* %1, i64 272
  %86 = bitcast i8* %85 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %86, align 4, !tbaa !1151
  %87 = fadd <4 x float> %broadcast.splat4, %wide.load.8
  %88 = fadd <4 x float> %broadcast.splat6, %wide.load2.8
  %89 = getelementptr inbounds i8, i8* %0, i64 256
  %90 = bitcast i8* %89 to <4 x float>*
  store <4 x float> %87, <4 x float>* %90, align 4, !tbaa !1154
  %91 = getelementptr inbounds i8, i8* %0, i64 272
  %92 = bitcast i8* %91 to <4 x float>*
  store <4 x float> %88, <4 x float>* %92, align 4, !tbaa !1154
  %93 = getelementptr inbounds i8, i8* %1, i64 288
  %94 = bitcast i8* %93 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %94, align 4, !tbaa !1151
  %95 = getelementptr inbounds i8, i8* %1, i64 304
  %96 = bitcast i8* %95 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !1151
  %97 = fadd <4 x float> %broadcast.splat4, %wide.load.9
  %98 = fadd <4 x float> %broadcast.splat6, %wide.load2.9
  %99 = getelementptr inbounds i8, i8* %0, i64 288
  %100 = bitcast i8* %99 to <4 x float>*
  store <4 x float> %97, <4 x float>* %100, align 4, !tbaa !1154
  %101 = getelementptr inbounds i8, i8* %0, i64 304
  %102 = bitcast i8* %101 to <4 x float>*
  store <4 x float> %98, <4 x float>* %102, align 4, !tbaa !1154
  %103 = getelementptr inbounds i8, i8* %1, i64 320
  %104 = bitcast i8* %103 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %104, align 4, !tbaa !1151
  %105 = getelementptr inbounds i8, i8* %1, i64 336
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !1151
  %107 = fadd <4 x float> %broadcast.splat4, %wide.load.10
  %108 = fadd <4 x float> %broadcast.splat6, %wide.load2.10
  %109 = getelementptr inbounds i8, i8* %0, i64 320
  %110 = bitcast i8* %109 to <4 x float>*
  store <4 x float> %107, <4 x float>* %110, align 4, !tbaa !1154
  %111 = getelementptr inbounds i8, i8* %0, i64 336
  %112 = bitcast i8* %111 to <4 x float>*
  store <4 x float> %108, <4 x float>* %112, align 4, !tbaa !1154
  %113 = getelementptr inbounds i8, i8* %1, i64 352
  %114 = bitcast i8* %113 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !1151
  %115 = getelementptr inbounds i8, i8* %1, i64 368
  %116 = bitcast i8* %115 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %116, align 4, !tbaa !1151
  %117 = fadd <4 x float> %broadcast.splat4, %wide.load.11
  %118 = fadd <4 x float> %broadcast.splat6, %wide.load2.11
  %119 = getelementptr inbounds i8, i8* %0, i64 352
  %120 = bitcast i8* %119 to <4 x float>*
  store <4 x float> %117, <4 x float>* %120, align 4, !tbaa !1154
  %121 = getelementptr inbounds i8, i8* %0, i64 368
  %122 = bitcast i8* %121 to <4 x float>*
  store <4 x float> %118, <4 x float>* %122, align 4, !tbaa !1154
  %123 = getelementptr inbounds i8, i8* %1, i64 384
  %124 = bitcast i8* %123 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %124, align 4, !tbaa !1151
  %125 = getelementptr inbounds i8, i8* %1, i64 400
  %126 = bitcast i8* %125 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !1151
  %127 = fadd <4 x float> %broadcast.splat4, %wide.load.12
  %128 = fadd <4 x float> %broadcast.splat6, %wide.load2.12
  %129 = getelementptr inbounds i8, i8* %0, i64 384
  %130 = bitcast i8* %129 to <4 x float>*
  store <4 x float> %127, <4 x float>* %130, align 4, !tbaa !1154
  %131 = getelementptr inbounds i8, i8* %0, i64 400
  %132 = bitcast i8* %131 to <4 x float>*
  store <4 x float> %128, <4 x float>* %132, align 4, !tbaa !1154
  %133 = getelementptr inbounds i8, i8* %1, i64 416
  %134 = bitcast i8* %133 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %134, align 4, !tbaa !1151
  %135 = getelementptr inbounds i8, i8* %1, i64 432
  %136 = bitcast i8* %135 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %136, align 4, !tbaa !1151
  %137 = fadd <4 x float> %broadcast.splat4, %wide.load.13
  %138 = fadd <4 x float> %broadcast.splat6, %wide.load2.13
  %139 = getelementptr inbounds i8, i8* %0, i64 416
  %140 = bitcast i8* %139 to <4 x float>*
  store <4 x float> %137, <4 x float>* %140, align 4, !tbaa !1154
  %141 = getelementptr inbounds i8, i8* %0, i64 432
  %142 = bitcast i8* %141 to <4 x float>*
  store <4 x float> %138, <4 x float>* %142, align 4, !tbaa !1154
  %143 = getelementptr inbounds i8, i8* %1, i64 448
  %144 = bitcast i8* %143 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %144, align 4, !tbaa !1151
  %145 = getelementptr inbounds i8, i8* %1, i64 464
  %146 = bitcast i8* %145 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %146, align 4, !tbaa !1151
  %147 = fadd <4 x float> %broadcast.splat4, %wide.load.14
  %148 = fadd <4 x float> %broadcast.splat6, %wide.load2.14
  %149 = getelementptr inbounds i8, i8* %0, i64 448
  %150 = bitcast i8* %149 to <4 x float>*
  store <4 x float> %147, <4 x float>* %150, align 4, !tbaa !1154
  %151 = getelementptr inbounds i8, i8* %0, i64 464
  %152 = bitcast i8* %151 to <4 x float>*
  store <4 x float> %148, <4 x float>* %152, align 4, !tbaa !1154
  %153 = getelementptr inbounds i8, i8* %1, i64 480
  %154 = bitcast i8* %153 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %154, align 4, !tbaa !1151
  %155 = getelementptr inbounds i8, i8* %1, i64 496
  %156 = bitcast i8* %155 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !1151
  %157 = fadd <4 x float> %broadcast.splat4, %wide.load.15
  %158 = fadd <4 x float> %broadcast.splat6, %wide.load2.15
  %159 = getelementptr inbounds i8, i8* %0, i64 480
  %160 = bitcast i8* %159 to <4 x float>*
  store <4 x float> %157, <4 x float>* %160, align 4, !tbaa !1154
  %161 = getelementptr inbounds i8, i8* %0, i64 496
  %162 = bitcast i8* %161 to <4 x float>*
  store <4 x float> %158, <4 x float>* %162, align 4, !tbaa !1154
  ret void
}

; Function Attrs: nounwind
define dllexport i32 @fused_sqrt_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #0 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_sqrt_1_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline nounwind
define private fastcc void @fused_sqrt_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #1 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !1157
  %3 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load)
  %4 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %3, <4 x float>* %4, align 4, !tbaa !1160
  %5 = getelementptr inbounds i8, i8* %1, i64 16
  %6 = bitcast i8* %5 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !1157
  %7 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.1)
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %7, <4 x float>* %9, align 4, !tbaa !1160
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !1157
  %12 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.2)
  %13 = getelementptr inbounds i8, i8* %0, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  store <4 x float> %12, <4 x float>* %14, align 4, !tbaa !1160
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !1157
  %17 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.3)
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 4, !tbaa !1160
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !1157
  %22 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.4)
  %23 = getelementptr inbounds i8, i8* %0, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4, !tbaa !1160
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !1157
  %27 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.5)
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4, !tbaa !1160
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !1157
  %32 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.6)
  %33 = getelementptr inbounds i8, i8* %0, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %32, <4 x float>* %34, align 4, !tbaa !1160
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1157
  %37 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.7)
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !1160
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !1157
  %42 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.8)
  %43 = getelementptr inbounds i8, i8* %0, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  store <4 x float> %42, <4 x float>* %44, align 4, !tbaa !1160
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !1157
  %47 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.9)
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %47, <4 x float>* %49, align 4, !tbaa !1160
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !1157
  %52 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.10)
  %53 = getelementptr inbounds i8, i8* %0, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  store <4 x float> %52, <4 x float>* %54, align 4, !tbaa !1160
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !1157
  %57 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.11)
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %57, <4 x float>* %59, align 4, !tbaa !1160
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !1157
  %62 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.12)
  %63 = getelementptr inbounds i8, i8* %0, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !tbaa !1160
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1157
  %67 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.13)
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !1160
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1157
  %72 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.14)
  %73 = getelementptr inbounds i8, i8* %0, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  store <4 x float> %72, <4 x float>* %74, align 4, !tbaa !1160
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !1157
  %77 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.15)
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !tbaa !1160
  %80 = getelementptr inbounds i8, i8* %1, i64 256
  %81 = bitcast i8* %80 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %81, align 4, !tbaa !1157
  %82 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.16)
  %83 = getelementptr inbounds i8, i8* %0, i64 256
  %84 = bitcast i8* %83 to <4 x float>*
  store <4 x float> %82, <4 x float>* %84, align 4, !tbaa !1160
  %85 = getelementptr inbounds i8, i8* %1, i64 272
  %86 = bitcast i8* %85 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %86, align 4, !tbaa !1157
  %87 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.17)
  %88 = getelementptr inbounds i8, i8* %0, i64 272
  %89 = bitcast i8* %88 to <4 x float>*
  store <4 x float> %87, <4 x float>* %89, align 4, !tbaa !1160
  %90 = getelementptr inbounds i8, i8* %1, i64 288
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !1157
  %92 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.18)
  %93 = getelementptr inbounds i8, i8* %0, i64 288
  %94 = bitcast i8* %93 to <4 x float>*
  store <4 x float> %92, <4 x float>* %94, align 4, !tbaa !1160
  %95 = getelementptr inbounds i8, i8* %1, i64 304
  %96 = bitcast i8* %95 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !1157
  %97 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.19)
  %98 = getelementptr inbounds i8, i8* %0, i64 304
  %99 = bitcast i8* %98 to <4 x float>*
  store <4 x float> %97, <4 x float>* %99, align 4, !tbaa !1160
  %100 = getelementptr inbounds i8, i8* %1, i64 320
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !1157
  %102 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.20)
  %103 = getelementptr inbounds i8, i8* %0, i64 320
  %104 = bitcast i8* %103 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !tbaa !1160
  %105 = getelementptr inbounds i8, i8* %1, i64 336
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !1157
  %107 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.21)
  %108 = getelementptr inbounds i8, i8* %0, i64 336
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %107, <4 x float>* %109, align 4, !tbaa !1160
  %110 = getelementptr inbounds i8, i8* %1, i64 352
  %111 = bitcast i8* %110 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %111, align 4, !tbaa !1157
  %112 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.22)
  %113 = getelementptr inbounds i8, i8* %0, i64 352
  %114 = bitcast i8* %113 to <4 x float>*
  store <4 x float> %112, <4 x float>* %114, align 4, !tbaa !1160
  %115 = getelementptr inbounds i8, i8* %1, i64 368
  %116 = bitcast i8* %115 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %116, align 4, !tbaa !1157
  %117 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.23)
  %118 = getelementptr inbounds i8, i8* %0, i64 368
  %119 = bitcast i8* %118 to <4 x float>*
  store <4 x float> %117, <4 x float>* %119, align 4, !tbaa !1160
  %120 = getelementptr inbounds i8, i8* %1, i64 384
  %121 = bitcast i8* %120 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %121, align 4, !tbaa !1157
  %122 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.24)
  %123 = getelementptr inbounds i8, i8* %0, i64 384
  %124 = bitcast i8* %123 to <4 x float>*
  store <4 x float> %122, <4 x float>* %124, align 4, !tbaa !1160
  %125 = getelementptr inbounds i8, i8* %1, i64 400
  %126 = bitcast i8* %125 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !1157
  %127 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.25)
  %128 = getelementptr inbounds i8, i8* %0, i64 400
  %129 = bitcast i8* %128 to <4 x float>*
  store <4 x float> %127, <4 x float>* %129, align 4, !tbaa !1160
  %130 = getelementptr inbounds i8, i8* %1, i64 416
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !1157
  %132 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.26)
  %133 = getelementptr inbounds i8, i8* %0, i64 416
  %134 = bitcast i8* %133 to <4 x float>*
  store <4 x float> %132, <4 x float>* %134, align 4, !tbaa !1160
  %135 = getelementptr inbounds i8, i8* %1, i64 432
  %136 = bitcast i8* %135 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %136, align 4, !tbaa !1157
  %137 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.27)
  %138 = getelementptr inbounds i8, i8* %0, i64 432
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %137, <4 x float>* %139, align 4, !tbaa !1160
  %140 = getelementptr inbounds i8, i8* %1, i64 448
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !1157
  %142 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.28)
  %143 = getelementptr inbounds i8, i8* %0, i64 448
  %144 = bitcast i8* %143 to <4 x float>*
  store <4 x float> %142, <4 x float>* %144, align 4, !tbaa !1160
  %145 = getelementptr inbounds i8, i8* %1, i64 464
  %146 = bitcast i8* %145 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %146, align 4, !tbaa !1157
  %147 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.29)
  %148 = getelementptr inbounds i8, i8* %0, i64 464
  %149 = bitcast i8* %148 to <4 x float>*
  store <4 x float> %147, <4 x float>* %149, align 4, !tbaa !1160
  %150 = getelementptr inbounds i8, i8* %1, i64 480
  %151 = bitcast i8* %150 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %151, align 4, !tbaa !1157
  %152 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.30)
  %153 = getelementptr inbounds i8, i8* %0, i64 480
  %154 = bitcast i8* %153 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 4, !tbaa !1160
  %155 = getelementptr inbounds i8, i8* %1, i64 496
  %156 = bitcast i8* %155 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !1157
  %157 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.31)
  %158 = getelementptr inbounds i8, i8* %0, i64 496
  %159 = bitcast i8* %158 to <4 x float>*
  store <4 x float> %157, <4 x float>* %159, align 4, !tbaa !1160
  %160 = getelementptr inbounds i8, i8* %1, i64 512
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load.32 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !1157
  %162 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.32)
  %163 = getelementptr inbounds i8, i8* %0, i64 512
  %164 = bitcast i8* %163 to <4 x float>*
  store <4 x float> %162, <4 x float>* %164, align 4, !tbaa !1160
  %165 = getelementptr inbounds i8, i8* %1, i64 528
  %166 = bitcast i8* %165 to <4 x float>*
  %wide.load.33 = load <4 x float>, <4 x float>* %166, align 4, !tbaa !1157
  %167 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.33)
  %168 = getelementptr inbounds i8, i8* %0, i64 528
  %169 = bitcast i8* %168 to <4 x float>*
  store <4 x float> %167, <4 x float>* %169, align 4, !tbaa !1160
  %170 = getelementptr inbounds i8, i8* %1, i64 544
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load.34 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !1157
  %172 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.34)
  %173 = getelementptr inbounds i8, i8* %0, i64 544
  %174 = bitcast i8* %173 to <4 x float>*
  store <4 x float> %172, <4 x float>* %174, align 4, !tbaa !1160
  %175 = getelementptr inbounds i8, i8* %1, i64 560
  %176 = bitcast i8* %175 to <4 x float>*
  %wide.load.35 = load <4 x float>, <4 x float>* %176, align 4, !tbaa !1157
  %177 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.35)
  %178 = getelementptr inbounds i8, i8* %0, i64 560
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %177, <4 x float>* %179, align 4, !tbaa !1160
  %180 = getelementptr inbounds i8, i8* %1, i64 576
  %181 = bitcast i8* %180 to <4 x float>*
  %wide.load.36 = load <4 x float>, <4 x float>* %181, align 4, !tbaa !1157
  %182 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.36)
  %183 = getelementptr inbounds i8, i8* %0, i64 576
  %184 = bitcast i8* %183 to <4 x float>*
  store <4 x float> %182, <4 x float>* %184, align 4, !tbaa !1160
  %185 = getelementptr inbounds i8, i8* %1, i64 592
  %186 = bitcast i8* %185 to <4 x float>*
  %wide.load.37 = load <4 x float>, <4 x float>* %186, align 4, !tbaa !1157
  %187 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.37)
  %188 = getelementptr inbounds i8, i8* %0, i64 592
  %189 = bitcast i8* %188 to <4 x float>*
  store <4 x float> %187, <4 x float>* %189, align 4, !tbaa !1160
  %190 = getelementptr inbounds i8, i8* %1, i64 608
  %191 = bitcast i8* %190 to <4 x float>*
  %wide.load.38 = load <4 x float>, <4 x float>* %191, align 4, !tbaa !1157
  %192 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.38)
  %193 = getelementptr inbounds i8, i8* %0, i64 608
  %194 = bitcast i8* %193 to <4 x float>*
  store <4 x float> %192, <4 x float>* %194, align 4, !tbaa !1160
  %195 = getelementptr inbounds i8, i8* %1, i64 624
  %196 = bitcast i8* %195 to <4 x float>*
  %wide.load.39 = load <4 x float>, <4 x float>* %196, align 4, !tbaa !1157
  %197 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.39)
  %198 = getelementptr inbounds i8, i8* %0, i64 624
  %199 = bitcast i8* %198 to <4 x float>*
  store <4 x float> %197, <4 x float>* %199, align 4, !tbaa !1160
  %200 = getelementptr inbounds i8, i8* %1, i64 640
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load.40 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !1157
  %202 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.40)
  %203 = getelementptr inbounds i8, i8* %0, i64 640
  %204 = bitcast i8* %203 to <4 x float>*
  store <4 x float> %202, <4 x float>* %204, align 4, !tbaa !1160
  %205 = getelementptr inbounds i8, i8* %1, i64 656
  %206 = bitcast i8* %205 to <4 x float>*
  %wide.load.41 = load <4 x float>, <4 x float>* %206, align 4, !tbaa !1157
  %207 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.41)
  %208 = getelementptr inbounds i8, i8* %0, i64 656
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %207, <4 x float>* %209, align 4, !tbaa !1160
  %210 = getelementptr inbounds i8, i8* %1, i64 672
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.42 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !1157
  %212 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.42)
  %213 = getelementptr inbounds i8, i8* %0, i64 672
  %214 = bitcast i8* %213 to <4 x float>*
  store <4 x float> %212, <4 x float>* %214, align 4, !tbaa !1160
  %215 = getelementptr inbounds i8, i8* %1, i64 688
  %216 = bitcast i8* %215 to <4 x float>*
  %wide.load.43 = load <4 x float>, <4 x float>* %216, align 4, !tbaa !1157
  %217 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.43)
  %218 = getelementptr inbounds i8, i8* %0, i64 688
  %219 = bitcast i8* %218 to <4 x float>*
  store <4 x float> %217, <4 x float>* %219, align 4, !tbaa !1160
  %220 = getelementptr inbounds i8, i8* %1, i64 704
  %221 = bitcast i8* %220 to <4 x float>*
  %wide.load.44 = load <4 x float>, <4 x float>* %221, align 4, !tbaa !1157
  %222 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.44)
  %223 = getelementptr inbounds i8, i8* %0, i64 704
  %224 = bitcast i8* %223 to <4 x float>*
  store <4 x float> %222, <4 x float>* %224, align 4, !tbaa !1160
  %225 = getelementptr inbounds i8, i8* %1, i64 720
  %226 = bitcast i8* %225 to <4 x float>*
  %wide.load.45 = load <4 x float>, <4 x float>* %226, align 4, !tbaa !1157
  %227 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.45)
  %228 = getelementptr inbounds i8, i8* %0, i64 720
  %229 = bitcast i8* %228 to <4 x float>*
  store <4 x float> %227, <4 x float>* %229, align 4, !tbaa !1160
  %230 = getelementptr inbounds i8, i8* %1, i64 736
  %231 = bitcast i8* %230 to <4 x float>*
  %wide.load.46 = load <4 x float>, <4 x float>* %231, align 4, !tbaa !1157
  %232 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.46)
  %233 = getelementptr inbounds i8, i8* %0, i64 736
  %234 = bitcast i8* %233 to <4 x float>*
  store <4 x float> %232, <4 x float>* %234, align 4, !tbaa !1160
  %235 = getelementptr inbounds i8, i8* %1, i64 752
  %236 = bitcast i8* %235 to <4 x float>*
  %wide.load.47 = load <4 x float>, <4 x float>* %236, align 4, !tbaa !1157
  %237 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.47)
  %238 = getelementptr inbounds i8, i8* %0, i64 752
  %239 = bitcast i8* %238 to <4 x float>*
  store <4 x float> %237, <4 x float>* %239, align 4, !tbaa !1160
  %240 = getelementptr inbounds i8, i8* %1, i64 768
  %241 = bitcast i8* %240 to <4 x float>*
  %wide.load.48 = load <4 x float>, <4 x float>* %241, align 4, !tbaa !1157
  %242 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.48)
  %243 = getelementptr inbounds i8, i8* %0, i64 768
  %244 = bitcast i8* %243 to <4 x float>*
  store <4 x float> %242, <4 x float>* %244, align 4, !tbaa !1160
  %245 = getelementptr inbounds i8, i8* %1, i64 784
  %246 = bitcast i8* %245 to <4 x float>*
  %wide.load.49 = load <4 x float>, <4 x float>* %246, align 4, !tbaa !1157
  %247 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.49)
  %248 = getelementptr inbounds i8, i8* %0, i64 784
  %249 = bitcast i8* %248 to <4 x float>*
  store <4 x float> %247, <4 x float>* %249, align 4, !tbaa !1160
  %250 = getelementptr inbounds i8, i8* %1, i64 800
  %251 = bitcast i8* %250 to <4 x float>*
  %wide.load.50 = load <4 x float>, <4 x float>* %251, align 4, !tbaa !1157
  %252 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.50)
  %253 = getelementptr inbounds i8, i8* %0, i64 800
  %254 = bitcast i8* %253 to <4 x float>*
  store <4 x float> %252, <4 x float>* %254, align 4, !tbaa !1160
  %255 = getelementptr inbounds i8, i8* %1, i64 816
  %256 = bitcast i8* %255 to <4 x float>*
  %wide.load.51 = load <4 x float>, <4 x float>* %256, align 4, !tbaa !1157
  %257 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.51)
  %258 = getelementptr inbounds i8, i8* %0, i64 816
  %259 = bitcast i8* %258 to <4 x float>*
  store <4 x float> %257, <4 x float>* %259, align 4, !tbaa !1160
  %260 = getelementptr inbounds i8, i8* %1, i64 832
  %261 = bitcast i8* %260 to <4 x float>*
  %wide.load.52 = load <4 x float>, <4 x float>* %261, align 4, !tbaa !1157
  %262 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.52)
  %263 = getelementptr inbounds i8, i8* %0, i64 832
  %264 = bitcast i8* %263 to <4 x float>*
  store <4 x float> %262, <4 x float>* %264, align 4, !tbaa !1160
  %265 = getelementptr inbounds i8, i8* %1, i64 848
  %266 = bitcast i8* %265 to <4 x float>*
  %wide.load.53 = load <4 x float>, <4 x float>* %266, align 4, !tbaa !1157
  %267 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.53)
  %268 = getelementptr inbounds i8, i8* %0, i64 848
  %269 = bitcast i8* %268 to <4 x float>*
  store <4 x float> %267, <4 x float>* %269, align 4, !tbaa !1160
  %270 = getelementptr inbounds i8, i8* %1, i64 864
  %271 = bitcast i8* %270 to <4 x float>*
  %wide.load.54 = load <4 x float>, <4 x float>* %271, align 4, !tbaa !1157
  %272 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.54)
  %273 = getelementptr inbounds i8, i8* %0, i64 864
  %274 = bitcast i8* %273 to <4 x float>*
  store <4 x float> %272, <4 x float>* %274, align 4, !tbaa !1160
  %275 = getelementptr inbounds i8, i8* %1, i64 880
  %276 = bitcast i8* %275 to <4 x float>*
  %wide.load.55 = load <4 x float>, <4 x float>* %276, align 4, !tbaa !1157
  %277 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.55)
  %278 = getelementptr inbounds i8, i8* %0, i64 880
  %279 = bitcast i8* %278 to <4 x float>*
  store <4 x float> %277, <4 x float>* %279, align 4, !tbaa !1160
  %280 = getelementptr inbounds i8, i8* %1, i64 896
  %281 = bitcast i8* %280 to <4 x float>*
  %wide.load.56 = load <4 x float>, <4 x float>* %281, align 4, !tbaa !1157
  %282 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.56)
  %283 = getelementptr inbounds i8, i8* %0, i64 896
  %284 = bitcast i8* %283 to <4 x float>*
  store <4 x float> %282, <4 x float>* %284, align 4, !tbaa !1160
  %285 = getelementptr inbounds i8, i8* %1, i64 912
  %286 = bitcast i8* %285 to <4 x float>*
  %wide.load.57 = load <4 x float>, <4 x float>* %286, align 4, !tbaa !1157
  %287 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.57)
  %288 = getelementptr inbounds i8, i8* %0, i64 912
  %289 = bitcast i8* %288 to <4 x float>*
  store <4 x float> %287, <4 x float>* %289, align 4, !tbaa !1160
  %290 = getelementptr inbounds i8, i8* %1, i64 928
  %291 = bitcast i8* %290 to <4 x float>*
  %wide.load.58 = load <4 x float>, <4 x float>* %291, align 4, !tbaa !1157
  %292 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.58)
  %293 = getelementptr inbounds i8, i8* %0, i64 928
  %294 = bitcast i8* %293 to <4 x float>*
  store <4 x float> %292, <4 x float>* %294, align 4, !tbaa !1160
  %295 = getelementptr inbounds i8, i8* %1, i64 944
  %296 = bitcast i8* %295 to <4 x float>*
  %wide.load.59 = load <4 x float>, <4 x float>* %296, align 4, !tbaa !1157
  %297 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.59)
  %298 = getelementptr inbounds i8, i8* %0, i64 944
  %299 = bitcast i8* %298 to <4 x float>*
  store <4 x float> %297, <4 x float>* %299, align 4, !tbaa !1160
  %300 = getelementptr inbounds i8, i8* %1, i64 960
  %301 = bitcast i8* %300 to <4 x float>*
  %wide.load.60 = load <4 x float>, <4 x float>* %301, align 4, !tbaa !1157
  %302 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.60)
  %303 = getelementptr inbounds i8, i8* %0, i64 960
  %304 = bitcast i8* %303 to <4 x float>*
  store <4 x float> %302, <4 x float>* %304, align 4, !tbaa !1160
  %305 = getelementptr inbounds i8, i8* %1, i64 976
  %306 = bitcast i8* %305 to <4 x float>*
  %wide.load.61 = load <4 x float>, <4 x float>* %306, align 4, !tbaa !1157
  %307 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.61)
  %308 = getelementptr inbounds i8, i8* %0, i64 976
  %309 = bitcast i8* %308 to <4 x float>*
  store <4 x float> %307, <4 x float>* %309, align 4, !tbaa !1160
  %310 = getelementptr inbounds i8, i8* %1, i64 992
  %311 = bitcast i8* %310 to <4 x float>*
  %wide.load.62 = load <4 x float>, <4 x float>* %311, align 4, !tbaa !1157
  %312 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.62)
  %313 = getelementptr inbounds i8, i8* %0, i64 992
  %314 = bitcast i8* %313 to <4 x float>*
  store <4 x float> %312, <4 x float>* %314, align 4, !tbaa !1160
  %315 = getelementptr inbounds i8, i8* %1, i64 1008
  %316 = bitcast i8* %315 to <4 x float>*
  %wide.load.63 = load <4 x float>, <4 x float>* %316, align 4, !tbaa !1157
  %317 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %wide.load.63)
  %318 = getelementptr inbounds i8, i8* %0, i64 1008
  %319 = bitcast i8* %318 to <4 x float>*
  store <4 x float> %317, <4 x float>* %319, align 4, !tbaa !1160
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_nn_relu_4(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_nn_relu_4_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_nn_relu_4_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to float*
  %3 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv1 = phi i64 [ 0, %entry ], [ %indvars.iv.next2, %for_end3 ]
  %4 = mul nuw nsw i64 %indvars.iv1, 784
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %5 = mul nuw nsw i64 %indvars.iv, 28
  %6 = add nuw nsw i64 %5, %4
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = getelementptr inbounds float, float* %3, i64 %6
  %9 = bitcast float* %7 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !1163
  %11 = fcmp ogt <4 x float> %10, zeroinitializer
  %12 = select <4 x i1> %11, <4 x float> %10, <4 x float> zeroinitializer
  %13 = bitcast float* %8 to <4 x float>*
  store <4 x float> %12, <4 x float>* %13, align 4, !tbaa !1166
  %14 = add nuw nsw i64 %6, 4
  %15 = getelementptr inbounds float, float* %2, i64 %14
  %16 = getelementptr inbounds float, float* %3, i64 %14
  %17 = bitcast float* %15 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !1163
  %19 = fcmp ogt <4 x float> %18, zeroinitializer
  %20 = select <4 x i1> %19, <4 x float> %18, <4 x float> zeroinitializer
  %21 = bitcast float* %16 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 4, !tbaa !1166
  %22 = add nuw nsw i64 %6, 8
  %23 = getelementptr inbounds float, float* %2, i64 %22
  %24 = getelementptr inbounds float, float* %3, i64 %22
  %25 = bitcast float* %23 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !1163
  %27 = fcmp ogt <4 x float> %26, zeroinitializer
  %28 = select <4 x i1> %27, <4 x float> %26, <4 x float> zeroinitializer
  %29 = bitcast float* %24 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 4, !tbaa !1166
  %30 = add nuw nsw i64 %6, 12
  %31 = getelementptr inbounds float, float* %2, i64 %30
  %32 = getelementptr inbounds float, float* %3, i64 %30
  %33 = bitcast float* %31 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !1163
  %35 = fcmp ogt <4 x float> %34, zeroinitializer
  %36 = select <4 x i1> %35, <4 x float> %34, <4 x float> zeroinitializer
  %37 = bitcast float* %32 to <4 x float>*
  store <4 x float> %36, <4 x float>* %37, align 4, !tbaa !1166
  %38 = add nuw nsw i64 %6, 16
  %39 = getelementptr inbounds float, float* %2, i64 %38
  %40 = getelementptr inbounds float, float* %3, i64 %38
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !1163
  %43 = fcmp ogt <4 x float> %42, zeroinitializer
  %44 = select <4 x i1> %43, <4 x float> %42, <4 x float> zeroinitializer
  %45 = bitcast float* %40 to <4 x float>*
  store <4 x float> %44, <4 x float>* %45, align 4, !tbaa !1166
  %46 = add nuw nsw i64 %6, 20
  %47 = getelementptr inbounds float, float* %2, i64 %46
  %48 = getelementptr inbounds float, float* %3, i64 %46
  %49 = bitcast float* %47 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !1163
  %51 = fcmp ogt <4 x float> %50, zeroinitializer
  %52 = select <4 x i1> %51, <4 x float> %50, <4 x float> zeroinitializer
  %53 = bitcast float* %48 to <4 x float>*
  store <4 x float> %52, <4 x float>* %53, align 4, !tbaa !1166
  %54 = add nuw nsw i64 %6, 24
  %55 = getelementptr inbounds float, float* %2, i64 %54
  %56 = getelementptr inbounds float, float* %3, i64 %54
  %57 = bitcast float* %55 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !1163
  %59 = fcmp ogt <4 x float> %58, zeroinitializer
  %60 = select <4 x i1> %59, <4 x float> %58, <4 x float> zeroinitializer
  %61 = bitcast float* %56 to <4 x float>*
  store <4 x float> %60, <4 x float>* %61, align 4, !tbaa !1166
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 512
  br i1 %exitcond3, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_13(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_13_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_13_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !1169
  %broadcast.splatinsert1 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat2 = shufflevector <4 x float> %broadcast.splatinsert1, <4 x float> undef, <4 x i32> zeroinitializer
  %5 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1183
  %6 = fadd <4 x float> %broadcast.splat2, %wide.load
  %7 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %6, <4 x float>* %7, align 4, !tbaa !1186
  %8 = getelementptr inbounds i8, i8* %1, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %9, align 4, !tbaa !1183
  %10 = fadd <4 x float> %broadcast.splat2, %wide.load.1
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !1186
  %13 = getelementptr inbounds i8, i8* %1, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !1183
  %15 = fadd <4 x float> %broadcast.splat2, %wide.load.2
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  store <4 x float> %15, <4 x float>* %17, align 4, !tbaa !1186
  %18 = getelementptr inbounds i8, i8* %1, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !1183
  %20 = fadd <4 x float> %broadcast.splat2, %wide.load.3
  %21 = getelementptr inbounds i8, i8* %0, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %20, <4 x float>* %22, align 4, !tbaa !1186
  %23 = getelementptr inbounds i8, i8* %1, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1183
  %25 = fadd <4 x float> %broadcast.splat2, %wide.load.4
  %26 = getelementptr inbounds i8, i8* %0, i64 64
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !1186
  %28 = getelementptr inbounds i8, i8* %1, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !1183
  %30 = fadd <4 x float> %broadcast.splat2, %wide.load.5
  %31 = getelementptr inbounds i8, i8* %0, i64 80
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 4, !tbaa !1186
  %33 = getelementptr inbounds i8, i8* %1, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !1183
  %35 = fadd <4 x float> %broadcast.splat2, %wide.load.6
  %36 = getelementptr inbounds i8, i8* %0, i64 96
  %37 = bitcast i8* %36 to <4 x float>*
  store <4 x float> %35, <4 x float>* %37, align 4, !tbaa !1186
  %38 = getelementptr inbounds i8, i8* %1, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %39, align 4, !tbaa !1183
  %40 = fadd <4 x float> %broadcast.splat2, %wide.load.7
  %41 = getelementptr inbounds i8, i8* %0, i64 112
  %42 = bitcast i8* %41 to <4 x float>*
  store <4 x float> %40, <4 x float>* %42, align 4, !tbaa !1186
  %43 = getelementptr inbounds i8, i8* %1, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !1183
  %45 = fadd <4 x float> %broadcast.splat2, %wide.load.8
  %46 = getelementptr inbounds i8, i8* %0, i64 128
  %47 = bitcast i8* %46 to <4 x float>*
  store <4 x float> %45, <4 x float>* %47, align 4, !tbaa !1186
  %48 = getelementptr inbounds i8, i8* %1, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !1183
  %50 = fadd <4 x float> %broadcast.splat2, %wide.load.9
  %51 = getelementptr inbounds i8, i8* %0, i64 144
  %52 = bitcast i8* %51 to <4 x float>*
  store <4 x float> %50, <4 x float>* %52, align 4, !tbaa !1186
  %53 = getelementptr inbounds i8, i8* %1, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1183
  %55 = fadd <4 x float> %broadcast.splat2, %wide.load.10
  %56 = getelementptr inbounds i8, i8* %0, i64 160
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !1186
  %58 = getelementptr inbounds i8, i8* %1, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !1183
  %60 = fadd <4 x float> %broadcast.splat2, %wide.load.11
  %61 = getelementptr inbounds i8, i8* %0, i64 176
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %60, <4 x float>* %62, align 4, !tbaa !1186
  %63 = getelementptr inbounds i8, i8* %1, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1183
  %65 = fadd <4 x float> %broadcast.splat2, %wide.load.12
  %66 = getelementptr inbounds i8, i8* %0, i64 192
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %65, <4 x float>* %67, align 4, !tbaa !1186
  %68 = getelementptr inbounds i8, i8* %1, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %69, align 4, !tbaa !1183
  %70 = fadd <4 x float> %broadcast.splat2, %wide.load.13
  %71 = getelementptr inbounds i8, i8* %0, i64 208
  %72 = bitcast i8* %71 to <4 x float>*
  store <4 x float> %70, <4 x float>* %72, align 4, !tbaa !1186
  %73 = getelementptr inbounds i8, i8* %1, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !1183
  %75 = fadd <4 x float> %broadcast.splat2, %wide.load.14
  %76 = getelementptr inbounds i8, i8* %0, i64 224
  %77 = bitcast i8* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 4, !tbaa !1186
  %78 = getelementptr inbounds i8, i8* %1, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %79, align 4, !tbaa !1183
  %80 = fadd <4 x float> %broadcast.splat2, %wide.load.15
  %81 = getelementptr inbounds i8, i8* %0, i64 240
  %82 = bitcast i8* %81 to <4 x float>*
  store <4 x float> %80, <4 x float>* %82, align 4, !tbaa !1186
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_15(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_15_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_15_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = load float, float* %3, align 64, !tbaa !1189
  %broadcast.splatinsert3 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat4 = shufflevector <4 x float> %broadcast.splatinsert3, <4 x float> undef, <4 x i32> zeroinitializer
  %broadcast.splatinsert5 = insertelement <4 x float> undef, float %4, i32 0
  %broadcast.splat6 = shufflevector <4 x float> %broadcast.splatinsert5, <4 x float> undef, <4 x i32> zeroinitializer
  %5 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1203
  %6 = getelementptr inbounds i8, i8* %1, i64 16
  %7 = bitcast i8* %6 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %7, align 4, !tbaa !1203
  %8 = fadd <4 x float> %broadcast.splat4, %wide.load
  %9 = fadd <4 x float> %broadcast.splat6, %wide.load2
  %10 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %8, <4 x float>* %10, align 4, !tbaa !1206
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to <4 x float>*
  store <4 x float> %9, <4 x float>* %12, align 4, !tbaa !1206
  %13 = getelementptr inbounds i8, i8* %1, i64 32
  %14 = bitcast i8* %13 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %14, align 4, !tbaa !1203
  %15 = getelementptr inbounds i8, i8* %1, i64 48
  %16 = bitcast i8* %15 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %16, align 4, !tbaa !1203
  %17 = fadd <4 x float> %broadcast.splat4, %wide.load.1
  %18 = fadd <4 x float> %broadcast.splat6, %wide.load2.1
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %17, <4 x float>* %20, align 4, !tbaa !1206
  %21 = getelementptr inbounds i8, i8* %0, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %18, <4 x float>* %22, align 4, !tbaa !1206
  %23 = getelementptr inbounds i8, i8* %1, i64 64
  %24 = bitcast i8* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1203
  %25 = getelementptr inbounds i8, i8* %1, i64 80
  %26 = bitcast i8* %25 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %26, align 4, !tbaa !1203
  %27 = fadd <4 x float> %broadcast.splat4, %wide.load.2
  %28 = fadd <4 x float> %broadcast.splat6, %wide.load2.2
  %29 = getelementptr inbounds i8, i8* %0, i64 64
  %30 = bitcast i8* %29 to <4 x float>*
  store <4 x float> %27, <4 x float>* %30, align 4, !tbaa !1206
  %31 = getelementptr inbounds i8, i8* %0, i64 80
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %28, <4 x float>* %32, align 4, !tbaa !1206
  %33 = getelementptr inbounds i8, i8* %1, i64 96
  %34 = bitcast i8* %33 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %34, align 4, !tbaa !1203
  %35 = getelementptr inbounds i8, i8* %1, i64 112
  %36 = bitcast i8* %35 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1203
  %37 = fadd <4 x float> %broadcast.splat4, %wide.load.3
  %38 = fadd <4 x float> %broadcast.splat6, %wide.load2.3
  %39 = getelementptr inbounds i8, i8* %0, i64 96
  %40 = bitcast i8* %39 to <4 x float>*
  store <4 x float> %37, <4 x float>* %40, align 4, !tbaa !1206
  %41 = getelementptr inbounds i8, i8* %0, i64 112
  %42 = bitcast i8* %41 to <4 x float>*
  store <4 x float> %38, <4 x float>* %42, align 4, !tbaa !1206
  %43 = getelementptr inbounds i8, i8* %1, i64 128
  %44 = bitcast i8* %43 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %44, align 4, !tbaa !1203
  %45 = getelementptr inbounds i8, i8* %1, i64 144
  %46 = bitcast i8* %45 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %46, align 4, !tbaa !1203
  %47 = fadd <4 x float> %broadcast.splat4, %wide.load.4
  %48 = fadd <4 x float> %broadcast.splat6, %wide.load2.4
  %49 = getelementptr inbounds i8, i8* %0, i64 128
  %50 = bitcast i8* %49 to <4 x float>*
  store <4 x float> %47, <4 x float>* %50, align 4, !tbaa !1206
  %51 = getelementptr inbounds i8, i8* %0, i64 144
  %52 = bitcast i8* %51 to <4 x float>*
  store <4 x float> %48, <4 x float>* %52, align 4, !tbaa !1206
  %53 = getelementptr inbounds i8, i8* %1, i64 160
  %54 = bitcast i8* %53 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1203
  %55 = getelementptr inbounds i8, i8* %1, i64 176
  %56 = bitcast i8* %55 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %56, align 4, !tbaa !1203
  %57 = fadd <4 x float> %broadcast.splat4, %wide.load.5
  %58 = fadd <4 x float> %broadcast.splat6, %wide.load2.5
  %59 = getelementptr inbounds i8, i8* %0, i64 160
  %60 = bitcast i8* %59 to <4 x float>*
  store <4 x float> %57, <4 x float>* %60, align 4, !tbaa !1206
  %61 = getelementptr inbounds i8, i8* %0, i64 176
  %62 = bitcast i8* %61 to <4 x float>*
  store <4 x float> %58, <4 x float>* %62, align 4, !tbaa !1206
  %63 = getelementptr inbounds i8, i8* %1, i64 192
  %64 = bitcast i8* %63 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1203
  %65 = getelementptr inbounds i8, i8* %1, i64 208
  %66 = bitcast i8* %65 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1203
  %67 = fadd <4 x float> %broadcast.splat4, %wide.load.6
  %68 = fadd <4 x float> %broadcast.splat6, %wide.load2.6
  %69 = getelementptr inbounds i8, i8* %0, i64 192
  %70 = bitcast i8* %69 to <4 x float>*
  store <4 x float> %67, <4 x float>* %70, align 4, !tbaa !1206
  %71 = getelementptr inbounds i8, i8* %0, i64 208
  %72 = bitcast i8* %71 to <4 x float>*
  store <4 x float> %68, <4 x float>* %72, align 4, !tbaa !1206
  %73 = getelementptr inbounds i8, i8* %1, i64 224
  %74 = bitcast i8* %73 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %74, align 4, !tbaa !1203
  %75 = getelementptr inbounds i8, i8* %1, i64 240
  %76 = bitcast i8* %75 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %76, align 4, !tbaa !1203
  %77 = fadd <4 x float> %broadcast.splat4, %wide.load.7
  %78 = fadd <4 x float> %broadcast.splat6, %wide.load2.7
  %79 = getelementptr inbounds i8, i8* %0, i64 224
  %80 = bitcast i8* %79 to <4 x float>*
  store <4 x float> %77, <4 x float>* %80, align 4, !tbaa !1206
  %81 = getelementptr inbounds i8, i8* %0, i64 240
  %82 = bitcast i8* %81 to <4 x float>*
  store <4 x float> %78, <4 x float>* %82, align 4, !tbaa !1206
  %83 = getelementptr inbounds i8, i8* %1, i64 256
  %84 = bitcast i8* %83 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !1203
  %85 = getelementptr inbounds i8, i8* %1, i64 272
  %86 = bitcast i8* %85 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %86, align 4, !tbaa !1203
  %87 = fadd <4 x float> %broadcast.splat4, %wide.load.8
  %88 = fadd <4 x float> %broadcast.splat6, %wide.load2.8
  %89 = getelementptr inbounds i8, i8* %0, i64 256
  %90 = bitcast i8* %89 to <4 x float>*
  store <4 x float> %87, <4 x float>* %90, align 4, !tbaa !1206
  %91 = getelementptr inbounds i8, i8* %0, i64 272
  %92 = bitcast i8* %91 to <4 x float>*
  store <4 x float> %88, <4 x float>* %92, align 4, !tbaa !1206
  %93 = getelementptr inbounds i8, i8* %1, i64 288
  %94 = bitcast i8* %93 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %94, align 4, !tbaa !1203
  %95 = getelementptr inbounds i8, i8* %1, i64 304
  %96 = bitcast i8* %95 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %96, align 4, !tbaa !1203
  %97 = fadd <4 x float> %broadcast.splat4, %wide.load.9
  %98 = fadd <4 x float> %broadcast.splat6, %wide.load2.9
  %99 = getelementptr inbounds i8, i8* %0, i64 288
  %100 = bitcast i8* %99 to <4 x float>*
  store <4 x float> %97, <4 x float>* %100, align 4, !tbaa !1206
  %101 = getelementptr inbounds i8, i8* %0, i64 304
  %102 = bitcast i8* %101 to <4 x float>*
  store <4 x float> %98, <4 x float>* %102, align 4, !tbaa !1206
  %103 = getelementptr inbounds i8, i8* %1, i64 320
  %104 = bitcast i8* %103 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %104, align 4, !tbaa !1203
  %105 = getelementptr inbounds i8, i8* %1, i64 336
  %106 = bitcast i8* %105 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %106, align 4, !tbaa !1203
  %107 = fadd <4 x float> %broadcast.splat4, %wide.load.10
  %108 = fadd <4 x float> %broadcast.splat6, %wide.load2.10
  %109 = getelementptr inbounds i8, i8* %0, i64 320
  %110 = bitcast i8* %109 to <4 x float>*
  store <4 x float> %107, <4 x float>* %110, align 4, !tbaa !1206
  %111 = getelementptr inbounds i8, i8* %0, i64 336
  %112 = bitcast i8* %111 to <4 x float>*
  store <4 x float> %108, <4 x float>* %112, align 4, !tbaa !1206
  %113 = getelementptr inbounds i8, i8* %1, i64 352
  %114 = bitcast i8* %113 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %114, align 4, !tbaa !1203
  %115 = getelementptr inbounds i8, i8* %1, i64 368
  %116 = bitcast i8* %115 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %116, align 4, !tbaa !1203
  %117 = fadd <4 x float> %broadcast.splat4, %wide.load.11
  %118 = fadd <4 x float> %broadcast.splat6, %wide.load2.11
  %119 = getelementptr inbounds i8, i8* %0, i64 352
  %120 = bitcast i8* %119 to <4 x float>*
  store <4 x float> %117, <4 x float>* %120, align 4, !tbaa !1206
  %121 = getelementptr inbounds i8, i8* %0, i64 368
  %122 = bitcast i8* %121 to <4 x float>*
  store <4 x float> %118, <4 x float>* %122, align 4, !tbaa !1206
  %123 = getelementptr inbounds i8, i8* %1, i64 384
  %124 = bitcast i8* %123 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %124, align 4, !tbaa !1203
  %125 = getelementptr inbounds i8, i8* %1, i64 400
  %126 = bitcast i8* %125 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %126, align 4, !tbaa !1203
  %127 = fadd <4 x float> %broadcast.splat4, %wide.load.12
  %128 = fadd <4 x float> %broadcast.splat6, %wide.load2.12
  %129 = getelementptr inbounds i8, i8* %0, i64 384
  %130 = bitcast i8* %129 to <4 x float>*
  store <4 x float> %127, <4 x float>* %130, align 4, !tbaa !1206
  %131 = getelementptr inbounds i8, i8* %0, i64 400
  %132 = bitcast i8* %131 to <4 x float>*
  store <4 x float> %128, <4 x float>* %132, align 4, !tbaa !1206
  %133 = getelementptr inbounds i8, i8* %1, i64 416
  %134 = bitcast i8* %133 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %134, align 4, !tbaa !1203
  %135 = getelementptr inbounds i8, i8* %1, i64 432
  %136 = bitcast i8* %135 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %136, align 4, !tbaa !1203
  %137 = fadd <4 x float> %broadcast.splat4, %wide.load.13
  %138 = fadd <4 x float> %broadcast.splat6, %wide.load2.13
  %139 = getelementptr inbounds i8, i8* %0, i64 416
  %140 = bitcast i8* %139 to <4 x float>*
  store <4 x float> %137, <4 x float>* %140, align 4, !tbaa !1206
  %141 = getelementptr inbounds i8, i8* %0, i64 432
  %142 = bitcast i8* %141 to <4 x float>*
  store <4 x float> %138, <4 x float>* %142, align 4, !tbaa !1206
  %143 = getelementptr inbounds i8, i8* %1, i64 448
  %144 = bitcast i8* %143 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %144, align 4, !tbaa !1203
  %145 = getelementptr inbounds i8, i8* %1, i64 464
  %146 = bitcast i8* %145 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %146, align 4, !tbaa !1203
  %147 = fadd <4 x float> %broadcast.splat4, %wide.load.14
  %148 = fadd <4 x float> %broadcast.splat6, %wide.load2.14
  %149 = getelementptr inbounds i8, i8* %0, i64 448
  %150 = bitcast i8* %149 to <4 x float>*
  store <4 x float> %147, <4 x float>* %150, align 4, !tbaa !1206
  %151 = getelementptr inbounds i8, i8* %0, i64 464
  %152 = bitcast i8* %151 to <4 x float>*
  store <4 x float> %148, <4 x float>* %152, align 4, !tbaa !1206
  %153 = getelementptr inbounds i8, i8* %1, i64 480
  %154 = bitcast i8* %153 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %154, align 4, !tbaa !1203
  %155 = getelementptr inbounds i8, i8* %1, i64 496
  %156 = bitcast i8* %155 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %156, align 4, !tbaa !1203
  %157 = fadd <4 x float> %broadcast.splat4, %wide.load.15
  %158 = fadd <4 x float> %broadcast.splat6, %wide.load2.15
  %159 = getelementptr inbounds i8, i8* %0, i64 480
  %160 = bitcast i8* %159 to <4 x float>*
  store <4 x float> %157, <4 x float>* %160, align 4, !tbaa !1206
  %161 = getelementptr inbounds i8, i8* %0, i64 496
  %162 = bitcast i8* %161 to <4 x float>*
  store <4 x float> %158, <4 x float>* %162, align 4, !tbaa !1206
  %163 = getelementptr inbounds i8, i8* %1, i64 512
  %164 = bitcast i8* %163 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %164, align 4, !tbaa !1203
  %165 = getelementptr inbounds i8, i8* %1, i64 528
  %166 = bitcast i8* %165 to <4 x float>*
  %wide.load2.16 = load <4 x float>, <4 x float>* %166, align 4, !tbaa !1203
  %167 = fadd <4 x float> %broadcast.splat4, %wide.load.16
  %168 = fadd <4 x float> %broadcast.splat6, %wide.load2.16
  %169 = getelementptr inbounds i8, i8* %0, i64 512
  %170 = bitcast i8* %169 to <4 x float>*
  store <4 x float> %167, <4 x float>* %170, align 4, !tbaa !1206
  %171 = getelementptr inbounds i8, i8* %0, i64 528
  %172 = bitcast i8* %171 to <4 x float>*
  store <4 x float> %168, <4 x float>* %172, align 4, !tbaa !1206
  %173 = getelementptr inbounds i8, i8* %1, i64 544
  %174 = bitcast i8* %173 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %174, align 4, !tbaa !1203
  %175 = getelementptr inbounds i8, i8* %1, i64 560
  %176 = bitcast i8* %175 to <4 x float>*
  %wide.load2.17 = load <4 x float>, <4 x float>* %176, align 4, !tbaa !1203
  %177 = fadd <4 x float> %broadcast.splat4, %wide.load.17
  %178 = fadd <4 x float> %broadcast.splat6, %wide.load2.17
  %179 = getelementptr inbounds i8, i8* %0, i64 544
  %180 = bitcast i8* %179 to <4 x float>*
  store <4 x float> %177, <4 x float>* %180, align 4, !tbaa !1206
  %181 = getelementptr inbounds i8, i8* %0, i64 560
  %182 = bitcast i8* %181 to <4 x float>*
  store <4 x float> %178, <4 x float>* %182, align 4, !tbaa !1206
  %183 = getelementptr inbounds i8, i8* %1, i64 576
  %184 = bitcast i8* %183 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %184, align 4, !tbaa !1203
  %185 = getelementptr inbounds i8, i8* %1, i64 592
  %186 = bitcast i8* %185 to <4 x float>*
  %wide.load2.18 = load <4 x float>, <4 x float>* %186, align 4, !tbaa !1203
  %187 = fadd <4 x float> %broadcast.splat4, %wide.load.18
  %188 = fadd <4 x float> %broadcast.splat6, %wide.load2.18
  %189 = getelementptr inbounds i8, i8* %0, i64 576
  %190 = bitcast i8* %189 to <4 x float>*
  store <4 x float> %187, <4 x float>* %190, align 4, !tbaa !1206
  %191 = getelementptr inbounds i8, i8* %0, i64 592
  %192 = bitcast i8* %191 to <4 x float>*
  store <4 x float> %188, <4 x float>* %192, align 4, !tbaa !1206
  %193 = getelementptr inbounds i8, i8* %1, i64 608
  %194 = bitcast i8* %193 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %194, align 4, !tbaa !1203
  %195 = getelementptr inbounds i8, i8* %1, i64 624
  %196 = bitcast i8* %195 to <4 x float>*
  %wide.load2.19 = load <4 x float>, <4 x float>* %196, align 4, !tbaa !1203
  %197 = fadd <4 x float> %broadcast.splat4, %wide.load.19
  %198 = fadd <4 x float> %broadcast.splat6, %wide.load2.19
  %199 = getelementptr inbounds i8, i8* %0, i64 608
  %200 = bitcast i8* %199 to <4 x float>*
  store <4 x float> %197, <4 x float>* %200, align 4, !tbaa !1206
  %201 = getelementptr inbounds i8, i8* %0, i64 624
  %202 = bitcast i8* %201 to <4 x float>*
  store <4 x float> %198, <4 x float>* %202, align 4, !tbaa !1206
  %203 = getelementptr inbounds i8, i8* %1, i64 640
  %204 = bitcast i8* %203 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %204, align 4, !tbaa !1203
  %205 = getelementptr inbounds i8, i8* %1, i64 656
  %206 = bitcast i8* %205 to <4 x float>*
  %wide.load2.20 = load <4 x float>, <4 x float>* %206, align 4, !tbaa !1203
  %207 = fadd <4 x float> %broadcast.splat4, %wide.load.20
  %208 = fadd <4 x float> %broadcast.splat6, %wide.load2.20
  %209 = getelementptr inbounds i8, i8* %0, i64 640
  %210 = bitcast i8* %209 to <4 x float>*
  store <4 x float> %207, <4 x float>* %210, align 4, !tbaa !1206
  %211 = getelementptr inbounds i8, i8* %0, i64 656
  %212 = bitcast i8* %211 to <4 x float>*
  store <4 x float> %208, <4 x float>* %212, align 4, !tbaa !1206
  %213 = getelementptr inbounds i8, i8* %1, i64 672
  %214 = bitcast i8* %213 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %214, align 4, !tbaa !1203
  %215 = getelementptr inbounds i8, i8* %1, i64 688
  %216 = bitcast i8* %215 to <4 x float>*
  %wide.load2.21 = load <4 x float>, <4 x float>* %216, align 4, !tbaa !1203
  %217 = fadd <4 x float> %broadcast.splat4, %wide.load.21
  %218 = fadd <4 x float> %broadcast.splat6, %wide.load2.21
  %219 = getelementptr inbounds i8, i8* %0, i64 672
  %220 = bitcast i8* %219 to <4 x float>*
  store <4 x float> %217, <4 x float>* %220, align 4, !tbaa !1206
  %221 = getelementptr inbounds i8, i8* %0, i64 688
  %222 = bitcast i8* %221 to <4 x float>*
  store <4 x float> %218, <4 x float>* %222, align 4, !tbaa !1206
  %223 = getelementptr inbounds i8, i8* %1, i64 704
  %224 = bitcast i8* %223 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %224, align 4, !tbaa !1203
  %225 = getelementptr inbounds i8, i8* %1, i64 720
  %226 = bitcast i8* %225 to <4 x float>*
  %wide.load2.22 = load <4 x float>, <4 x float>* %226, align 4, !tbaa !1203
  %227 = fadd <4 x float> %broadcast.splat4, %wide.load.22
  %228 = fadd <4 x float> %broadcast.splat6, %wide.load2.22
  %229 = getelementptr inbounds i8, i8* %0, i64 704
  %230 = bitcast i8* %229 to <4 x float>*
  store <4 x float> %227, <4 x float>* %230, align 4, !tbaa !1206
  %231 = getelementptr inbounds i8, i8* %0, i64 720
  %232 = bitcast i8* %231 to <4 x float>*
  store <4 x float> %228, <4 x float>* %232, align 4, !tbaa !1206
  %233 = getelementptr inbounds i8, i8* %1, i64 736
  %234 = bitcast i8* %233 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %234, align 4, !tbaa !1203
  %235 = getelementptr inbounds i8, i8* %1, i64 752
  %236 = bitcast i8* %235 to <4 x float>*
  %wide.load2.23 = load <4 x float>, <4 x float>* %236, align 4, !tbaa !1203
  %237 = fadd <4 x float> %broadcast.splat4, %wide.load.23
  %238 = fadd <4 x float> %broadcast.splat6, %wide.load2.23
  %239 = getelementptr inbounds i8, i8* %0, i64 736
  %240 = bitcast i8* %239 to <4 x float>*
  store <4 x float> %237, <4 x float>* %240, align 4, !tbaa !1206
  %241 = getelementptr inbounds i8, i8* %0, i64 752
  %242 = bitcast i8* %241 to <4 x float>*
  store <4 x float> %238, <4 x float>* %242, align 4, !tbaa !1206
  %243 = getelementptr inbounds i8, i8* %1, i64 768
  %244 = bitcast i8* %243 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %244, align 4, !tbaa !1203
  %245 = getelementptr inbounds i8, i8* %1, i64 784
  %246 = bitcast i8* %245 to <4 x float>*
  %wide.load2.24 = load <4 x float>, <4 x float>* %246, align 4, !tbaa !1203
  %247 = fadd <4 x float> %broadcast.splat4, %wide.load.24
  %248 = fadd <4 x float> %broadcast.splat6, %wide.load2.24
  %249 = getelementptr inbounds i8, i8* %0, i64 768
  %250 = bitcast i8* %249 to <4 x float>*
  store <4 x float> %247, <4 x float>* %250, align 4, !tbaa !1206
  %251 = getelementptr inbounds i8, i8* %0, i64 784
  %252 = bitcast i8* %251 to <4 x float>*
  store <4 x float> %248, <4 x float>* %252, align 4, !tbaa !1206
  %253 = getelementptr inbounds i8, i8* %1, i64 800
  %254 = bitcast i8* %253 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %254, align 4, !tbaa !1203
  %255 = getelementptr inbounds i8, i8* %1, i64 816
  %256 = bitcast i8* %255 to <4 x float>*
  %wide.load2.25 = load <4 x float>, <4 x float>* %256, align 4, !tbaa !1203
  %257 = fadd <4 x float> %broadcast.splat4, %wide.load.25
  %258 = fadd <4 x float> %broadcast.splat6, %wide.load2.25
  %259 = getelementptr inbounds i8, i8* %0, i64 800
  %260 = bitcast i8* %259 to <4 x float>*
  store <4 x float> %257, <4 x float>* %260, align 4, !tbaa !1206
  %261 = getelementptr inbounds i8, i8* %0, i64 816
  %262 = bitcast i8* %261 to <4 x float>*
  store <4 x float> %258, <4 x float>* %262, align 4, !tbaa !1206
  %263 = getelementptr inbounds i8, i8* %1, i64 832
  %264 = bitcast i8* %263 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %264, align 4, !tbaa !1203
  %265 = getelementptr inbounds i8, i8* %1, i64 848
  %266 = bitcast i8* %265 to <4 x float>*
  %wide.load2.26 = load <4 x float>, <4 x float>* %266, align 4, !tbaa !1203
  %267 = fadd <4 x float> %broadcast.splat4, %wide.load.26
  %268 = fadd <4 x float> %broadcast.splat6, %wide.load2.26
  %269 = getelementptr inbounds i8, i8* %0, i64 832
  %270 = bitcast i8* %269 to <4 x float>*
  store <4 x float> %267, <4 x float>* %270, align 4, !tbaa !1206
  %271 = getelementptr inbounds i8, i8* %0, i64 848
  %272 = bitcast i8* %271 to <4 x float>*
  store <4 x float> %268, <4 x float>* %272, align 4, !tbaa !1206
  %273 = getelementptr inbounds i8, i8* %1, i64 864
  %274 = bitcast i8* %273 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %274, align 4, !tbaa !1203
  %275 = getelementptr inbounds i8, i8* %1, i64 880
  %276 = bitcast i8* %275 to <4 x float>*
  %wide.load2.27 = load <4 x float>, <4 x float>* %276, align 4, !tbaa !1203
  %277 = fadd <4 x float> %broadcast.splat4, %wide.load.27
  %278 = fadd <4 x float> %broadcast.splat6, %wide.load2.27
  %279 = getelementptr inbounds i8, i8* %0, i64 864
  %280 = bitcast i8* %279 to <4 x float>*
  store <4 x float> %277, <4 x float>* %280, align 4, !tbaa !1206
  %281 = getelementptr inbounds i8, i8* %0, i64 880
  %282 = bitcast i8* %281 to <4 x float>*
  store <4 x float> %278, <4 x float>* %282, align 4, !tbaa !1206
  %283 = getelementptr inbounds i8, i8* %1, i64 896
  %284 = bitcast i8* %283 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %284, align 4, !tbaa !1203
  %285 = getelementptr inbounds i8, i8* %1, i64 912
  %286 = bitcast i8* %285 to <4 x float>*
  %wide.load2.28 = load <4 x float>, <4 x float>* %286, align 4, !tbaa !1203
  %287 = fadd <4 x float> %broadcast.splat4, %wide.load.28
  %288 = fadd <4 x float> %broadcast.splat6, %wide.load2.28
  %289 = getelementptr inbounds i8, i8* %0, i64 896
  %290 = bitcast i8* %289 to <4 x float>*
  store <4 x float> %287, <4 x float>* %290, align 4, !tbaa !1206
  %291 = getelementptr inbounds i8, i8* %0, i64 912
  %292 = bitcast i8* %291 to <4 x float>*
  store <4 x float> %288, <4 x float>* %292, align 4, !tbaa !1206
  %293 = getelementptr inbounds i8, i8* %1, i64 928
  %294 = bitcast i8* %293 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %294, align 4, !tbaa !1203
  %295 = getelementptr inbounds i8, i8* %1, i64 944
  %296 = bitcast i8* %295 to <4 x float>*
  %wide.load2.29 = load <4 x float>, <4 x float>* %296, align 4, !tbaa !1203
  %297 = fadd <4 x float> %broadcast.splat4, %wide.load.29
  %298 = fadd <4 x float> %broadcast.splat6, %wide.load2.29
  %299 = getelementptr inbounds i8, i8* %0, i64 928
  %300 = bitcast i8* %299 to <4 x float>*
  store <4 x float> %297, <4 x float>* %300, align 4, !tbaa !1206
  %301 = getelementptr inbounds i8, i8* %0, i64 944
  %302 = bitcast i8* %301 to <4 x float>*
  store <4 x float> %298, <4 x float>* %302, align 4, !tbaa !1206
  %303 = getelementptr inbounds i8, i8* %1, i64 960
  %304 = bitcast i8* %303 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %304, align 4, !tbaa !1203
  %305 = getelementptr inbounds i8, i8* %1, i64 976
  %306 = bitcast i8* %305 to <4 x float>*
  %wide.load2.30 = load <4 x float>, <4 x float>* %306, align 4, !tbaa !1203
  %307 = fadd <4 x float> %broadcast.splat4, %wide.load.30
  %308 = fadd <4 x float> %broadcast.splat6, %wide.load2.30
  %309 = getelementptr inbounds i8, i8* %0, i64 960
  %310 = bitcast i8* %309 to <4 x float>*
  store <4 x float> %307, <4 x float>* %310, align 4, !tbaa !1206
  %311 = getelementptr inbounds i8, i8* %0, i64 976
  %312 = bitcast i8* %311 to <4 x float>*
  store <4 x float> %308, <4 x float>* %312, align 4, !tbaa !1206
  %313 = getelementptr inbounds i8, i8* %1, i64 992
  %314 = bitcast i8* %313 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %314, align 4, !tbaa !1203
  %315 = getelementptr inbounds i8, i8* %1, i64 1008
  %316 = bitcast i8* %315 to <4 x float>*
  %wide.load2.31 = load <4 x float>, <4 x float>* %316, align 4, !tbaa !1203
  %317 = fadd <4 x float> %broadcast.splat4, %wide.load.31
  %318 = fadd <4 x float> %broadcast.splat6, %wide.load2.31
  %319 = getelementptr inbounds i8, i8* %0, i64 992
  %320 = bitcast i8* %319 to <4 x float>*
  store <4 x float> %317, <4 x float>* %320, align 4, !tbaa !1206
  %321 = getelementptr inbounds i8, i8* %0, i64 1008
  %322 = bitcast i8* %321 to <4 x float>*
  store <4 x float> %318, <4 x float>* %322, align 4, !tbaa !1206
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_add_16(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_add_16_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_add_16_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %3, align 4, !tbaa !1209
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %5, align 4, !tbaa !1209
  %6 = bitcast i8* %1 to <4 x float>*
  %wide.load3 = load <4 x float>, <4 x float>* %6, align 4, !tbaa !1212
  %7 = getelementptr inbounds i8, i8* %1, i64 16
  %8 = bitcast i8* %7 to <4 x float>*
  %wide.load4 = load <4 x float>, <4 x float>* %8, align 4, !tbaa !1212
  %9 = fadd <4 x float> %wide.load, %wide.load3
  %10 = fadd <4 x float> %wide.load2, %wide.load4
  %11 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %11, align 4, !tbaa !1215
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <4 x float>*
  store <4 x float> %10, <4 x float>* %13, align 4, !tbaa !1215
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %15, align 4, !tbaa !1209
  %16 = getelementptr inbounds i8, i8* %2, i64 48
  %17 = bitcast i8* %16 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %17, align 4, !tbaa !1209
  %18 = getelementptr inbounds i8, i8* %1, i64 32
  %19 = bitcast i8* %18 to <4 x float>*
  %wide.load3.1 = load <4 x float>, <4 x float>* %19, align 4, !tbaa !1212
  %20 = getelementptr inbounds i8, i8* %1, i64 48
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load4.1 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !1212
  %22 = fadd <4 x float> %wide.load.1, %wide.load3.1
  %23 = fadd <4 x float> %wide.load2.1, %wide.load4.1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <4 x float>*
  store <4 x float> %22, <4 x float>* %25, align 4, !tbaa !1215
  %26 = getelementptr inbounds i8, i8* %0, i64 48
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %23, <4 x float>* %27, align 4, !tbaa !1215
  %28 = getelementptr inbounds i8, i8* %2, i64 64
  %29 = bitcast i8* %28 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !1209
  %30 = getelementptr inbounds i8, i8* %2, i64 80
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !1209
  %32 = getelementptr inbounds i8, i8* %1, i64 64
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load3.2 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !1212
  %34 = getelementptr inbounds i8, i8* %1, i64 80
  %35 = bitcast i8* %34 to <4 x float>*
  %wide.load4.2 = load <4 x float>, <4 x float>* %35, align 4, !tbaa !1212
  %36 = fadd <4 x float> %wide.load.2, %wide.load3.2
  %37 = fadd <4 x float> %wide.load2.2, %wide.load4.2
  %38 = getelementptr inbounds i8, i8* %0, i64 64
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %36, <4 x float>* %39, align 4, !tbaa !1215
  %40 = getelementptr inbounds i8, i8* %0, i64 80
  %41 = bitcast i8* %40 to <4 x float>*
  store <4 x float> %37, <4 x float>* %41, align 4, !tbaa !1215
  %42 = getelementptr inbounds i8, i8* %2, i64 96
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !1209
  %44 = getelementptr inbounds i8, i8* %2, i64 112
  %45 = bitcast i8* %44 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %45, align 4, !tbaa !1209
  %46 = getelementptr inbounds i8, i8* %1, i64 96
  %47 = bitcast i8* %46 to <4 x float>*
  %wide.load3.3 = load <4 x float>, <4 x float>* %47, align 4, !tbaa !1212
  %48 = getelementptr inbounds i8, i8* %1, i64 112
  %49 = bitcast i8* %48 to <4 x float>*
  %wide.load4.3 = load <4 x float>, <4 x float>* %49, align 4, !tbaa !1212
  %50 = fadd <4 x float> %wide.load.3, %wide.load3.3
  %51 = fadd <4 x float> %wide.load2.3, %wide.load4.3
  %52 = getelementptr inbounds i8, i8* %0, i64 96
  %53 = bitcast i8* %52 to <4 x float>*
  store <4 x float> %50, <4 x float>* %53, align 4, !tbaa !1215
  %54 = getelementptr inbounds i8, i8* %0, i64 112
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> %51, <4 x float>* %55, align 4, !tbaa !1215
  %56 = getelementptr inbounds i8, i8* %2, i64 128
  %57 = bitcast i8* %56 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !1209
  %58 = getelementptr inbounds i8, i8* %2, i64 144
  %59 = bitcast i8* %58 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %59, align 4, !tbaa !1209
  %60 = getelementptr inbounds i8, i8* %1, i64 128
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load3.4 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !1212
  %62 = getelementptr inbounds i8, i8* %1, i64 144
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load4.4 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !1212
  %64 = fadd <4 x float> %wide.load.4, %wide.load3.4
  %65 = fadd <4 x float> %wide.load2.4, %wide.load4.4
  %66 = getelementptr inbounds i8, i8* %0, i64 128
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !1215
  %68 = getelementptr inbounds i8, i8* %0, i64 144
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !1215
  %70 = getelementptr inbounds i8, i8* %2, i64 160
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1209
  %72 = getelementptr inbounds i8, i8* %2, i64 176
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !1209
  %74 = getelementptr inbounds i8, i8* %1, i64 160
  %75 = bitcast i8* %74 to <4 x float>*
  %wide.load3.5 = load <4 x float>, <4 x float>* %75, align 4, !tbaa !1212
  %76 = getelementptr inbounds i8, i8* %1, i64 176
  %77 = bitcast i8* %76 to <4 x float>*
  %wide.load4.5 = load <4 x float>, <4 x float>* %77, align 4, !tbaa !1212
  %78 = fadd <4 x float> %wide.load.5, %wide.load3.5
  %79 = fadd <4 x float> %wide.load2.5, %wide.load4.5
  %80 = getelementptr inbounds i8, i8* %0, i64 160
  %81 = bitcast i8* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !tbaa !1215
  %82 = getelementptr inbounds i8, i8* %0, i64 176
  %83 = bitcast i8* %82 to <4 x float>*
  store <4 x float> %79, <4 x float>* %83, align 4, !tbaa !1215
  %84 = getelementptr inbounds i8, i8* %2, i64 192
  %85 = bitcast i8* %84 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %85, align 4, !tbaa !1209
  %86 = getelementptr inbounds i8, i8* %2, i64 208
  %87 = bitcast i8* %86 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %87, align 4, !tbaa !1209
  %88 = getelementptr inbounds i8, i8* %1, i64 192
  %89 = bitcast i8* %88 to <4 x float>*
  %wide.load3.6 = load <4 x float>, <4 x float>* %89, align 4, !tbaa !1212
  %90 = getelementptr inbounds i8, i8* %1, i64 208
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load4.6 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !1212
  %92 = fadd <4 x float> %wide.load.6, %wide.load3.6
  %93 = fadd <4 x float> %wide.load2.6, %wide.load4.6
  %94 = getelementptr inbounds i8, i8* %0, i64 192
  %95 = bitcast i8* %94 to <4 x float>*
  store <4 x float> %92, <4 x float>* %95, align 4, !tbaa !1215
  %96 = getelementptr inbounds i8, i8* %0, i64 208
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %93, <4 x float>* %97, align 4, !tbaa !1215
  %98 = getelementptr inbounds i8, i8* %2, i64 224
  %99 = bitcast i8* %98 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %99, align 4, !tbaa !1209
  %100 = getelementptr inbounds i8, i8* %2, i64 240
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !1209
  %102 = getelementptr inbounds i8, i8* %1, i64 224
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load3.7 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !1212
  %104 = getelementptr inbounds i8, i8* %1, i64 240
  %105 = bitcast i8* %104 to <4 x float>*
  %wide.load4.7 = load <4 x float>, <4 x float>* %105, align 4, !tbaa !1212
  %106 = fadd <4 x float> %wide.load.7, %wide.load3.7
  %107 = fadd <4 x float> %wide.load2.7, %wide.load4.7
  %108 = getelementptr inbounds i8, i8* %0, i64 224
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %106, <4 x float>* %109, align 4, !tbaa !1215
  %110 = getelementptr inbounds i8, i8* %0, i64 240
  %111 = bitcast i8* %110 to <4 x float>*
  store <4 x float> %107, <4 x float>* %111, align 4, !tbaa !1215
  %112 = getelementptr inbounds i8, i8* %2, i64 256
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !1209
  %114 = getelementptr inbounds i8, i8* %2, i64 272
  %115 = bitcast i8* %114 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %115, align 4, !tbaa !1209
  %116 = getelementptr inbounds i8, i8* %1, i64 256
  %117 = bitcast i8* %116 to <4 x float>*
  %wide.load3.8 = load <4 x float>, <4 x float>* %117, align 4, !tbaa !1212
  %118 = getelementptr inbounds i8, i8* %1, i64 272
  %119 = bitcast i8* %118 to <4 x float>*
  %wide.load4.8 = load <4 x float>, <4 x float>* %119, align 4, !tbaa !1212
  %120 = fadd <4 x float> %wide.load.8, %wide.load3.8
  %121 = fadd <4 x float> %wide.load2.8, %wide.load4.8
  %122 = getelementptr inbounds i8, i8* %0, i64 256
  %123 = bitcast i8* %122 to <4 x float>*
  store <4 x float> %120, <4 x float>* %123, align 4, !tbaa !1215
  %124 = getelementptr inbounds i8, i8* %0, i64 272
  %125 = bitcast i8* %124 to <4 x float>*
  store <4 x float> %121, <4 x float>* %125, align 4, !tbaa !1215
  %126 = getelementptr inbounds i8, i8* %2, i64 288
  %127 = bitcast i8* %126 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %127, align 4, !tbaa !1209
  %128 = getelementptr inbounds i8, i8* %2, i64 304
  %129 = bitcast i8* %128 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %129, align 4, !tbaa !1209
  %130 = getelementptr inbounds i8, i8* %1, i64 288
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load3.9 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !1212
  %132 = getelementptr inbounds i8, i8* %1, i64 304
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load4.9 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !1212
  %134 = fadd <4 x float> %wide.load.9, %wide.load3.9
  %135 = fadd <4 x float> %wide.load2.9, %wide.load4.9
  %136 = getelementptr inbounds i8, i8* %0, i64 288
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !1215
  %138 = getelementptr inbounds i8, i8* %0, i64 304
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !1215
  %140 = getelementptr inbounds i8, i8* %2, i64 320
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !1209
  %142 = getelementptr inbounds i8, i8* %2, i64 336
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !1209
  %144 = getelementptr inbounds i8, i8* %1, i64 320
  %145 = bitcast i8* %144 to <4 x float>*
  %wide.load3.10 = load <4 x float>, <4 x float>* %145, align 4, !tbaa !1212
  %146 = getelementptr inbounds i8, i8* %1, i64 336
  %147 = bitcast i8* %146 to <4 x float>*
  %wide.load4.10 = load <4 x float>, <4 x float>* %147, align 4, !tbaa !1212
  %148 = fadd <4 x float> %wide.load.10, %wide.load3.10
  %149 = fadd <4 x float> %wide.load2.10, %wide.load4.10
  %150 = getelementptr inbounds i8, i8* %0, i64 320
  %151 = bitcast i8* %150 to <4 x float>*
  store <4 x float> %148, <4 x float>* %151, align 4, !tbaa !1215
  %152 = getelementptr inbounds i8, i8* %0, i64 336
  %153 = bitcast i8* %152 to <4 x float>*
  store <4 x float> %149, <4 x float>* %153, align 4, !tbaa !1215
  %154 = getelementptr inbounds i8, i8* %2, i64 352
  %155 = bitcast i8* %154 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %155, align 4, !tbaa !1209
  %156 = getelementptr inbounds i8, i8* %2, i64 368
  %157 = bitcast i8* %156 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %157, align 4, !tbaa !1209
  %158 = getelementptr inbounds i8, i8* %1, i64 352
  %159 = bitcast i8* %158 to <4 x float>*
  %wide.load3.11 = load <4 x float>, <4 x float>* %159, align 4, !tbaa !1212
  %160 = getelementptr inbounds i8, i8* %1, i64 368
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load4.11 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !1212
  %162 = fadd <4 x float> %wide.load.11, %wide.load3.11
  %163 = fadd <4 x float> %wide.load2.11, %wide.load4.11
  %164 = getelementptr inbounds i8, i8* %0, i64 352
  %165 = bitcast i8* %164 to <4 x float>*
  store <4 x float> %162, <4 x float>* %165, align 4, !tbaa !1215
  %166 = getelementptr inbounds i8, i8* %0, i64 368
  %167 = bitcast i8* %166 to <4 x float>*
  store <4 x float> %163, <4 x float>* %167, align 4, !tbaa !1215
  %168 = getelementptr inbounds i8, i8* %2, i64 384
  %169 = bitcast i8* %168 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %169, align 4, !tbaa !1209
  %170 = getelementptr inbounds i8, i8* %2, i64 400
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !1209
  %172 = getelementptr inbounds i8, i8* %1, i64 384
  %173 = bitcast i8* %172 to <4 x float>*
  %wide.load3.12 = load <4 x float>, <4 x float>* %173, align 4, !tbaa !1212
  %174 = getelementptr inbounds i8, i8* %1, i64 400
  %175 = bitcast i8* %174 to <4 x float>*
  %wide.load4.12 = load <4 x float>, <4 x float>* %175, align 4, !tbaa !1212
  %176 = fadd <4 x float> %wide.load.12, %wide.load3.12
  %177 = fadd <4 x float> %wide.load2.12, %wide.load4.12
  %178 = getelementptr inbounds i8, i8* %0, i64 384
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !tbaa !1215
  %180 = getelementptr inbounds i8, i8* %0, i64 400
  %181 = bitcast i8* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !tbaa !1215
  %182 = getelementptr inbounds i8, i8* %2, i64 416
  %183 = bitcast i8* %182 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !1209
  %184 = getelementptr inbounds i8, i8* %2, i64 432
  %185 = bitcast i8* %184 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %185, align 4, !tbaa !1209
  %186 = getelementptr inbounds i8, i8* %1, i64 416
  %187 = bitcast i8* %186 to <4 x float>*
  %wide.load3.13 = load <4 x float>, <4 x float>* %187, align 4, !tbaa !1212
  %188 = getelementptr inbounds i8, i8* %1, i64 432
  %189 = bitcast i8* %188 to <4 x float>*
  %wide.load4.13 = load <4 x float>, <4 x float>* %189, align 4, !tbaa !1212
  %190 = fadd <4 x float> %wide.load.13, %wide.load3.13
  %191 = fadd <4 x float> %wide.load2.13, %wide.load4.13
  %192 = getelementptr inbounds i8, i8* %0, i64 416
  %193 = bitcast i8* %192 to <4 x float>*
  store <4 x float> %190, <4 x float>* %193, align 4, !tbaa !1215
  %194 = getelementptr inbounds i8, i8* %0, i64 432
  %195 = bitcast i8* %194 to <4 x float>*
  store <4 x float> %191, <4 x float>* %195, align 4, !tbaa !1215
  %196 = getelementptr inbounds i8, i8* %2, i64 448
  %197 = bitcast i8* %196 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %197, align 4, !tbaa !1209
  %198 = getelementptr inbounds i8, i8* %2, i64 464
  %199 = bitcast i8* %198 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %199, align 4, !tbaa !1209
  %200 = getelementptr inbounds i8, i8* %1, i64 448
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load3.14 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !1212
  %202 = getelementptr inbounds i8, i8* %1, i64 464
  %203 = bitcast i8* %202 to <4 x float>*
  %wide.load4.14 = load <4 x float>, <4 x float>* %203, align 4, !tbaa !1212
  %204 = fadd <4 x float> %wide.load.14, %wide.load3.14
  %205 = fadd <4 x float> %wide.load2.14, %wide.load4.14
  %206 = getelementptr inbounds i8, i8* %0, i64 448
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> %204, <4 x float>* %207, align 4, !tbaa !1215
  %208 = getelementptr inbounds i8, i8* %0, i64 464
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %205, <4 x float>* %209, align 4, !tbaa !1215
  %210 = getelementptr inbounds i8, i8* %2, i64 480
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !1209
  %212 = getelementptr inbounds i8, i8* %2, i64 496
  %213 = bitcast i8* %212 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %213, align 4, !tbaa !1209
  %214 = getelementptr inbounds i8, i8* %1, i64 480
  %215 = bitcast i8* %214 to <4 x float>*
  %wide.load3.15 = load <4 x float>, <4 x float>* %215, align 4, !tbaa !1212
  %216 = getelementptr inbounds i8, i8* %1, i64 496
  %217 = bitcast i8* %216 to <4 x float>*
  %wide.load4.15 = load <4 x float>, <4 x float>* %217, align 4, !tbaa !1212
  %218 = fadd <4 x float> %wide.load.15, %wide.load3.15
  %219 = fadd <4 x float> %wide.load2.15, %wide.load4.15
  %220 = getelementptr inbounds i8, i8* %0, i64 480
  %221 = bitcast i8* %220 to <4 x float>*
  store <4 x float> %218, <4 x float>* %221, align 4, !tbaa !1215
  %222 = getelementptr inbounds i8, i8* %0, i64 496
  %223 = bitcast i8* %222 to <4 x float>*
  store <4 x float> %219, <4 x float>* %223, align 4, !tbaa !1215
  %224 = getelementptr inbounds i8, i8* %2, i64 512
  %225 = bitcast i8* %224 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %225, align 4, !tbaa !1209
  %226 = getelementptr inbounds i8, i8* %2, i64 528
  %227 = bitcast i8* %226 to <4 x float>*
  %wide.load2.16 = load <4 x float>, <4 x float>* %227, align 4, !tbaa !1209
  %228 = getelementptr inbounds i8, i8* %1, i64 512
  %229 = bitcast i8* %228 to <4 x float>*
  %wide.load3.16 = load <4 x float>, <4 x float>* %229, align 4, !tbaa !1212
  %230 = getelementptr inbounds i8, i8* %1, i64 528
  %231 = bitcast i8* %230 to <4 x float>*
  %wide.load4.16 = load <4 x float>, <4 x float>* %231, align 4, !tbaa !1212
  %232 = fadd <4 x float> %wide.load.16, %wide.load3.16
  %233 = fadd <4 x float> %wide.load2.16, %wide.load4.16
  %234 = getelementptr inbounds i8, i8* %0, i64 512
  %235 = bitcast i8* %234 to <4 x float>*
  store <4 x float> %232, <4 x float>* %235, align 4, !tbaa !1215
  %236 = getelementptr inbounds i8, i8* %0, i64 528
  %237 = bitcast i8* %236 to <4 x float>*
  store <4 x float> %233, <4 x float>* %237, align 4, !tbaa !1215
  %238 = getelementptr inbounds i8, i8* %2, i64 544
  %239 = bitcast i8* %238 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %239, align 4, !tbaa !1209
  %240 = getelementptr inbounds i8, i8* %2, i64 560
  %241 = bitcast i8* %240 to <4 x float>*
  %wide.load2.17 = load <4 x float>, <4 x float>* %241, align 4, !tbaa !1209
  %242 = getelementptr inbounds i8, i8* %1, i64 544
  %243 = bitcast i8* %242 to <4 x float>*
  %wide.load3.17 = load <4 x float>, <4 x float>* %243, align 4, !tbaa !1212
  %244 = getelementptr inbounds i8, i8* %1, i64 560
  %245 = bitcast i8* %244 to <4 x float>*
  %wide.load4.17 = load <4 x float>, <4 x float>* %245, align 4, !tbaa !1212
  %246 = fadd <4 x float> %wide.load.17, %wide.load3.17
  %247 = fadd <4 x float> %wide.load2.17, %wide.load4.17
  %248 = getelementptr inbounds i8, i8* %0, i64 544
  %249 = bitcast i8* %248 to <4 x float>*
  store <4 x float> %246, <4 x float>* %249, align 4, !tbaa !1215
  %250 = getelementptr inbounds i8, i8* %0, i64 560
  %251 = bitcast i8* %250 to <4 x float>*
  store <4 x float> %247, <4 x float>* %251, align 4, !tbaa !1215
  %252 = getelementptr inbounds i8, i8* %2, i64 576
  %253 = bitcast i8* %252 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %253, align 4, !tbaa !1209
  %254 = getelementptr inbounds i8, i8* %2, i64 592
  %255 = bitcast i8* %254 to <4 x float>*
  %wide.load2.18 = load <4 x float>, <4 x float>* %255, align 4, !tbaa !1209
  %256 = getelementptr inbounds i8, i8* %1, i64 576
  %257 = bitcast i8* %256 to <4 x float>*
  %wide.load3.18 = load <4 x float>, <4 x float>* %257, align 4, !tbaa !1212
  %258 = getelementptr inbounds i8, i8* %1, i64 592
  %259 = bitcast i8* %258 to <4 x float>*
  %wide.load4.18 = load <4 x float>, <4 x float>* %259, align 4, !tbaa !1212
  %260 = fadd <4 x float> %wide.load.18, %wide.load3.18
  %261 = fadd <4 x float> %wide.load2.18, %wide.load4.18
  %262 = getelementptr inbounds i8, i8* %0, i64 576
  %263 = bitcast i8* %262 to <4 x float>*
  store <4 x float> %260, <4 x float>* %263, align 4, !tbaa !1215
  %264 = getelementptr inbounds i8, i8* %0, i64 592
  %265 = bitcast i8* %264 to <4 x float>*
  store <4 x float> %261, <4 x float>* %265, align 4, !tbaa !1215
  %266 = getelementptr inbounds i8, i8* %2, i64 608
  %267 = bitcast i8* %266 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %267, align 4, !tbaa !1209
  %268 = getelementptr inbounds i8, i8* %2, i64 624
  %269 = bitcast i8* %268 to <4 x float>*
  %wide.load2.19 = load <4 x float>, <4 x float>* %269, align 4, !tbaa !1209
  %270 = getelementptr inbounds i8, i8* %1, i64 608
  %271 = bitcast i8* %270 to <4 x float>*
  %wide.load3.19 = load <4 x float>, <4 x float>* %271, align 4, !tbaa !1212
  %272 = getelementptr inbounds i8, i8* %1, i64 624
  %273 = bitcast i8* %272 to <4 x float>*
  %wide.load4.19 = load <4 x float>, <4 x float>* %273, align 4, !tbaa !1212
  %274 = fadd <4 x float> %wide.load.19, %wide.load3.19
  %275 = fadd <4 x float> %wide.load2.19, %wide.load4.19
  %276 = getelementptr inbounds i8, i8* %0, i64 608
  %277 = bitcast i8* %276 to <4 x float>*
  store <4 x float> %274, <4 x float>* %277, align 4, !tbaa !1215
  %278 = getelementptr inbounds i8, i8* %0, i64 624
  %279 = bitcast i8* %278 to <4 x float>*
  store <4 x float> %275, <4 x float>* %279, align 4, !tbaa !1215
  %280 = getelementptr inbounds i8, i8* %2, i64 640
  %281 = bitcast i8* %280 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %281, align 4, !tbaa !1209
  %282 = getelementptr inbounds i8, i8* %2, i64 656
  %283 = bitcast i8* %282 to <4 x float>*
  %wide.load2.20 = load <4 x float>, <4 x float>* %283, align 4, !tbaa !1209
  %284 = getelementptr inbounds i8, i8* %1, i64 640
  %285 = bitcast i8* %284 to <4 x float>*
  %wide.load3.20 = load <4 x float>, <4 x float>* %285, align 4, !tbaa !1212
  %286 = getelementptr inbounds i8, i8* %1, i64 656
  %287 = bitcast i8* %286 to <4 x float>*
  %wide.load4.20 = load <4 x float>, <4 x float>* %287, align 4, !tbaa !1212
  %288 = fadd <4 x float> %wide.load.20, %wide.load3.20
  %289 = fadd <4 x float> %wide.load2.20, %wide.load4.20
  %290 = getelementptr inbounds i8, i8* %0, i64 640
  %291 = bitcast i8* %290 to <4 x float>*
  store <4 x float> %288, <4 x float>* %291, align 4, !tbaa !1215
  %292 = getelementptr inbounds i8, i8* %0, i64 656
  %293 = bitcast i8* %292 to <4 x float>*
  store <4 x float> %289, <4 x float>* %293, align 4, !tbaa !1215
  %294 = getelementptr inbounds i8, i8* %2, i64 672
  %295 = bitcast i8* %294 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %295, align 4, !tbaa !1209
  %296 = getelementptr inbounds i8, i8* %2, i64 688
  %297 = bitcast i8* %296 to <4 x float>*
  %wide.load2.21 = load <4 x float>, <4 x float>* %297, align 4, !tbaa !1209
  %298 = getelementptr inbounds i8, i8* %1, i64 672
  %299 = bitcast i8* %298 to <4 x float>*
  %wide.load3.21 = load <4 x float>, <4 x float>* %299, align 4, !tbaa !1212
  %300 = getelementptr inbounds i8, i8* %1, i64 688
  %301 = bitcast i8* %300 to <4 x float>*
  %wide.load4.21 = load <4 x float>, <4 x float>* %301, align 4, !tbaa !1212
  %302 = fadd <4 x float> %wide.load.21, %wide.load3.21
  %303 = fadd <4 x float> %wide.load2.21, %wide.load4.21
  %304 = getelementptr inbounds i8, i8* %0, i64 672
  %305 = bitcast i8* %304 to <4 x float>*
  store <4 x float> %302, <4 x float>* %305, align 4, !tbaa !1215
  %306 = getelementptr inbounds i8, i8* %0, i64 688
  %307 = bitcast i8* %306 to <4 x float>*
  store <4 x float> %303, <4 x float>* %307, align 4, !tbaa !1215
  %308 = getelementptr inbounds i8, i8* %2, i64 704
  %309 = bitcast i8* %308 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %309, align 4, !tbaa !1209
  %310 = getelementptr inbounds i8, i8* %2, i64 720
  %311 = bitcast i8* %310 to <4 x float>*
  %wide.load2.22 = load <4 x float>, <4 x float>* %311, align 4, !tbaa !1209
  %312 = getelementptr inbounds i8, i8* %1, i64 704
  %313 = bitcast i8* %312 to <4 x float>*
  %wide.load3.22 = load <4 x float>, <4 x float>* %313, align 4, !tbaa !1212
  %314 = getelementptr inbounds i8, i8* %1, i64 720
  %315 = bitcast i8* %314 to <4 x float>*
  %wide.load4.22 = load <4 x float>, <4 x float>* %315, align 4, !tbaa !1212
  %316 = fadd <4 x float> %wide.load.22, %wide.load3.22
  %317 = fadd <4 x float> %wide.load2.22, %wide.load4.22
  %318 = getelementptr inbounds i8, i8* %0, i64 704
  %319 = bitcast i8* %318 to <4 x float>*
  store <4 x float> %316, <4 x float>* %319, align 4, !tbaa !1215
  %320 = getelementptr inbounds i8, i8* %0, i64 720
  %321 = bitcast i8* %320 to <4 x float>*
  store <4 x float> %317, <4 x float>* %321, align 4, !tbaa !1215
  %322 = getelementptr inbounds i8, i8* %2, i64 736
  %323 = bitcast i8* %322 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %323, align 4, !tbaa !1209
  %324 = getelementptr inbounds i8, i8* %2, i64 752
  %325 = bitcast i8* %324 to <4 x float>*
  %wide.load2.23 = load <4 x float>, <4 x float>* %325, align 4, !tbaa !1209
  %326 = getelementptr inbounds i8, i8* %1, i64 736
  %327 = bitcast i8* %326 to <4 x float>*
  %wide.load3.23 = load <4 x float>, <4 x float>* %327, align 4, !tbaa !1212
  %328 = getelementptr inbounds i8, i8* %1, i64 752
  %329 = bitcast i8* %328 to <4 x float>*
  %wide.load4.23 = load <4 x float>, <4 x float>* %329, align 4, !tbaa !1212
  %330 = fadd <4 x float> %wide.load.23, %wide.load3.23
  %331 = fadd <4 x float> %wide.load2.23, %wide.load4.23
  %332 = getelementptr inbounds i8, i8* %0, i64 736
  %333 = bitcast i8* %332 to <4 x float>*
  store <4 x float> %330, <4 x float>* %333, align 4, !tbaa !1215
  %334 = getelementptr inbounds i8, i8* %0, i64 752
  %335 = bitcast i8* %334 to <4 x float>*
  store <4 x float> %331, <4 x float>* %335, align 4, !tbaa !1215
  %336 = getelementptr inbounds i8, i8* %2, i64 768
  %337 = bitcast i8* %336 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %337, align 4, !tbaa !1209
  %338 = getelementptr inbounds i8, i8* %2, i64 784
  %339 = bitcast i8* %338 to <4 x float>*
  %wide.load2.24 = load <4 x float>, <4 x float>* %339, align 4, !tbaa !1209
  %340 = getelementptr inbounds i8, i8* %1, i64 768
  %341 = bitcast i8* %340 to <4 x float>*
  %wide.load3.24 = load <4 x float>, <4 x float>* %341, align 4, !tbaa !1212
  %342 = getelementptr inbounds i8, i8* %1, i64 784
  %343 = bitcast i8* %342 to <4 x float>*
  %wide.load4.24 = load <4 x float>, <4 x float>* %343, align 4, !tbaa !1212
  %344 = fadd <4 x float> %wide.load.24, %wide.load3.24
  %345 = fadd <4 x float> %wide.load2.24, %wide.load4.24
  %346 = getelementptr inbounds i8, i8* %0, i64 768
  %347 = bitcast i8* %346 to <4 x float>*
  store <4 x float> %344, <4 x float>* %347, align 4, !tbaa !1215
  %348 = getelementptr inbounds i8, i8* %0, i64 784
  %349 = bitcast i8* %348 to <4 x float>*
  store <4 x float> %345, <4 x float>* %349, align 4, !tbaa !1215
  %350 = getelementptr inbounds i8, i8* %2, i64 800
  %351 = bitcast i8* %350 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %351, align 4, !tbaa !1209
  %352 = getelementptr inbounds i8, i8* %2, i64 816
  %353 = bitcast i8* %352 to <4 x float>*
  %wide.load2.25 = load <4 x float>, <4 x float>* %353, align 4, !tbaa !1209
  %354 = getelementptr inbounds i8, i8* %1, i64 800
  %355 = bitcast i8* %354 to <4 x float>*
  %wide.load3.25 = load <4 x float>, <4 x float>* %355, align 4, !tbaa !1212
  %356 = getelementptr inbounds i8, i8* %1, i64 816
  %357 = bitcast i8* %356 to <4 x float>*
  %wide.load4.25 = load <4 x float>, <4 x float>* %357, align 4, !tbaa !1212
  %358 = fadd <4 x float> %wide.load.25, %wide.load3.25
  %359 = fadd <4 x float> %wide.load2.25, %wide.load4.25
  %360 = getelementptr inbounds i8, i8* %0, i64 800
  %361 = bitcast i8* %360 to <4 x float>*
  store <4 x float> %358, <4 x float>* %361, align 4, !tbaa !1215
  %362 = getelementptr inbounds i8, i8* %0, i64 816
  %363 = bitcast i8* %362 to <4 x float>*
  store <4 x float> %359, <4 x float>* %363, align 4, !tbaa !1215
  %364 = getelementptr inbounds i8, i8* %2, i64 832
  %365 = bitcast i8* %364 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %365, align 4, !tbaa !1209
  %366 = getelementptr inbounds i8, i8* %2, i64 848
  %367 = bitcast i8* %366 to <4 x float>*
  %wide.load2.26 = load <4 x float>, <4 x float>* %367, align 4, !tbaa !1209
  %368 = getelementptr inbounds i8, i8* %1, i64 832
  %369 = bitcast i8* %368 to <4 x float>*
  %wide.load3.26 = load <4 x float>, <4 x float>* %369, align 4, !tbaa !1212
  %370 = getelementptr inbounds i8, i8* %1, i64 848
  %371 = bitcast i8* %370 to <4 x float>*
  %wide.load4.26 = load <4 x float>, <4 x float>* %371, align 4, !tbaa !1212
  %372 = fadd <4 x float> %wide.load.26, %wide.load3.26
  %373 = fadd <4 x float> %wide.load2.26, %wide.load4.26
  %374 = getelementptr inbounds i8, i8* %0, i64 832
  %375 = bitcast i8* %374 to <4 x float>*
  store <4 x float> %372, <4 x float>* %375, align 4, !tbaa !1215
  %376 = getelementptr inbounds i8, i8* %0, i64 848
  %377 = bitcast i8* %376 to <4 x float>*
  store <4 x float> %373, <4 x float>* %377, align 4, !tbaa !1215
  %378 = getelementptr inbounds i8, i8* %2, i64 864
  %379 = bitcast i8* %378 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %379, align 4, !tbaa !1209
  %380 = getelementptr inbounds i8, i8* %2, i64 880
  %381 = bitcast i8* %380 to <4 x float>*
  %wide.load2.27 = load <4 x float>, <4 x float>* %381, align 4, !tbaa !1209
  %382 = getelementptr inbounds i8, i8* %1, i64 864
  %383 = bitcast i8* %382 to <4 x float>*
  %wide.load3.27 = load <4 x float>, <4 x float>* %383, align 4, !tbaa !1212
  %384 = getelementptr inbounds i8, i8* %1, i64 880
  %385 = bitcast i8* %384 to <4 x float>*
  %wide.load4.27 = load <4 x float>, <4 x float>* %385, align 4, !tbaa !1212
  %386 = fadd <4 x float> %wide.load.27, %wide.load3.27
  %387 = fadd <4 x float> %wide.load2.27, %wide.load4.27
  %388 = getelementptr inbounds i8, i8* %0, i64 864
  %389 = bitcast i8* %388 to <4 x float>*
  store <4 x float> %386, <4 x float>* %389, align 4, !tbaa !1215
  %390 = getelementptr inbounds i8, i8* %0, i64 880
  %391 = bitcast i8* %390 to <4 x float>*
  store <4 x float> %387, <4 x float>* %391, align 4, !tbaa !1215
  %392 = getelementptr inbounds i8, i8* %2, i64 896
  %393 = bitcast i8* %392 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %393, align 4, !tbaa !1209
  %394 = getelementptr inbounds i8, i8* %2, i64 912
  %395 = bitcast i8* %394 to <4 x float>*
  %wide.load2.28 = load <4 x float>, <4 x float>* %395, align 4, !tbaa !1209
  %396 = getelementptr inbounds i8, i8* %1, i64 896
  %397 = bitcast i8* %396 to <4 x float>*
  %wide.load3.28 = load <4 x float>, <4 x float>* %397, align 4, !tbaa !1212
  %398 = getelementptr inbounds i8, i8* %1, i64 912
  %399 = bitcast i8* %398 to <4 x float>*
  %wide.load4.28 = load <4 x float>, <4 x float>* %399, align 4, !tbaa !1212
  %400 = fadd <4 x float> %wide.load.28, %wide.load3.28
  %401 = fadd <4 x float> %wide.load2.28, %wide.load4.28
  %402 = getelementptr inbounds i8, i8* %0, i64 896
  %403 = bitcast i8* %402 to <4 x float>*
  store <4 x float> %400, <4 x float>* %403, align 4, !tbaa !1215
  %404 = getelementptr inbounds i8, i8* %0, i64 912
  %405 = bitcast i8* %404 to <4 x float>*
  store <4 x float> %401, <4 x float>* %405, align 4, !tbaa !1215
  %406 = getelementptr inbounds i8, i8* %2, i64 928
  %407 = bitcast i8* %406 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %407, align 4, !tbaa !1209
  %408 = getelementptr inbounds i8, i8* %2, i64 944
  %409 = bitcast i8* %408 to <4 x float>*
  %wide.load2.29 = load <4 x float>, <4 x float>* %409, align 4, !tbaa !1209
  %410 = getelementptr inbounds i8, i8* %1, i64 928
  %411 = bitcast i8* %410 to <4 x float>*
  %wide.load3.29 = load <4 x float>, <4 x float>* %411, align 4, !tbaa !1212
  %412 = getelementptr inbounds i8, i8* %1, i64 944
  %413 = bitcast i8* %412 to <4 x float>*
  %wide.load4.29 = load <4 x float>, <4 x float>* %413, align 4, !tbaa !1212
  %414 = fadd <4 x float> %wide.load.29, %wide.load3.29
  %415 = fadd <4 x float> %wide.load2.29, %wide.load4.29
  %416 = getelementptr inbounds i8, i8* %0, i64 928
  %417 = bitcast i8* %416 to <4 x float>*
  store <4 x float> %414, <4 x float>* %417, align 4, !tbaa !1215
  %418 = getelementptr inbounds i8, i8* %0, i64 944
  %419 = bitcast i8* %418 to <4 x float>*
  store <4 x float> %415, <4 x float>* %419, align 4, !tbaa !1215
  %420 = getelementptr inbounds i8, i8* %2, i64 960
  %421 = bitcast i8* %420 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %421, align 4, !tbaa !1209
  %422 = getelementptr inbounds i8, i8* %2, i64 976
  %423 = bitcast i8* %422 to <4 x float>*
  %wide.load2.30 = load <4 x float>, <4 x float>* %423, align 4, !tbaa !1209
  %424 = getelementptr inbounds i8, i8* %1, i64 960
  %425 = bitcast i8* %424 to <4 x float>*
  %wide.load3.30 = load <4 x float>, <4 x float>* %425, align 4, !tbaa !1212
  %426 = getelementptr inbounds i8, i8* %1, i64 976
  %427 = bitcast i8* %426 to <4 x float>*
  %wide.load4.30 = load <4 x float>, <4 x float>* %427, align 4, !tbaa !1212
  %428 = fadd <4 x float> %wide.load.30, %wide.load3.30
  %429 = fadd <4 x float> %wide.load2.30, %wide.load4.30
  %430 = getelementptr inbounds i8, i8* %0, i64 960
  %431 = bitcast i8* %430 to <4 x float>*
  store <4 x float> %428, <4 x float>* %431, align 4, !tbaa !1215
  %432 = getelementptr inbounds i8, i8* %0, i64 976
  %433 = bitcast i8* %432 to <4 x float>*
  store <4 x float> %429, <4 x float>* %433, align 4, !tbaa !1215
  %434 = getelementptr inbounds i8, i8* %2, i64 992
  %435 = bitcast i8* %434 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %435, align 4, !tbaa !1209
  %436 = getelementptr inbounds i8, i8* %2, i64 1008
  %437 = bitcast i8* %436 to <4 x float>*
  %wide.load2.31 = load <4 x float>, <4 x float>* %437, align 4, !tbaa !1209
  %438 = getelementptr inbounds i8, i8* %1, i64 992
  %439 = bitcast i8* %438 to <4 x float>*
  %wide.load3.31 = load <4 x float>, <4 x float>* %439, align 4, !tbaa !1212
  %440 = getelementptr inbounds i8, i8* %1, i64 1008
  %441 = bitcast i8* %440 to <4 x float>*
  %wide.load4.31 = load <4 x float>, <4 x float>* %441, align 4, !tbaa !1212
  %442 = fadd <4 x float> %wide.load.31, %wide.load3.31
  %443 = fadd <4 x float> %wide.load2.31, %wide.load4.31
  %444 = getelementptr inbounds i8, i8* %0, i64 992
  %445 = bitcast i8* %444 to <4 x float>*
  store <4 x float> %442, <4 x float>* %445, align 4, !tbaa !1215
  %446 = getelementptr inbounds i8, i8* %0, i64 1008
  %447 = bitcast i8* %446 to <4 x float>*
  store <4 x float> %443, <4 x float>* %447, align 4, !tbaa !1215
  ret void
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_multiply_7(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to %0**
  %10 = load %0*, %0** %9, align 8
  %11 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %0, %0* %10, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call fastcc void @fused_multiply_7_compute_(i8* %16, i8* %12, i8* %14)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_multiply_7_compute_(i8* noalias nocapture, i8* noalias nocapture readonly, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %3 = bitcast i8* %2 to float*
  %4 = bitcast i8* %1 to float*
  %5 = bitcast i8* %0 to float*
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_end3, %entry
  %indvars.iv4 = phi i64 [ 0, %entry ], [ %indvars.iv.next5, %for_end3 ]
  %6 = mul nuw nsw i64 %indvars.iv4, 3136
  %7 = getelementptr inbounds float, float* %3, i64 %indvars.iv4
  %8 = load float, float* %7, align 4, !tbaa !1218
  %broadcast.splatinsert7 = insertelement <4 x float> undef, float %8, i32 0
  %broadcast.splat8 = shufflevector <4 x float> %broadcast.splatinsert7, <4 x float> undef, <4 x i32> zeroinitializer
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3
  ret void

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv1 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next2, %for_begin4.preheader ]
  %9 = mul nuw nsw i64 %indvars.iv1, 56
  %10 = add nuw nsw i64 %9, %6
  %11 = getelementptr inbounds float, float* %4, i64 %10
  %12 = bitcast float* %11 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %12, align 4, !tbaa !1221
  %13 = fmul <4 x float> %broadcast.splat8, %wide.load
  %14 = getelementptr inbounds float, float* %5, i64 %10
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> %13, <4 x float>* %15, align 4, !tbaa !1224
  %16 = or i64 %10, 4
  %17 = getelementptr inbounds float, float* %4, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %18, align 4, !tbaa !1221
  %19 = fmul <4 x float> %broadcast.splat8, %wide.load.1
  %20 = getelementptr inbounds float, float* %5, i64 %16
  %21 = bitcast float* %20 to <4 x float>*
  store <4 x float> %19, <4 x float>* %21, align 4, !tbaa !1224
  %22 = add nuw nsw i64 %10, 8
  %23 = getelementptr inbounds float, float* %4, i64 %22
  %24 = bitcast float* %23 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %24, align 4, !tbaa !1221
  %25 = fmul <4 x float> %broadcast.splat8, %wide.load.2
  %26 = getelementptr inbounds float, float* %5, i64 %22
  %27 = bitcast float* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4, !tbaa !1224
  %28 = add nuw nsw i64 %10, 12
  %29 = getelementptr inbounds float, float* %4, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %30, align 4, !tbaa !1221
  %31 = fmul <4 x float> %broadcast.splat8, %wide.load.3
  %32 = getelementptr inbounds float, float* %5, i64 %28
  %33 = bitcast float* %32 to <4 x float>*
  store <4 x float> %31, <4 x float>* %33, align 4, !tbaa !1224
  %34 = add nuw nsw i64 %10, 16
  %35 = getelementptr inbounds float, float* %4, i64 %34
  %36 = bitcast float* %35 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1221
  %37 = fmul <4 x float> %broadcast.splat8, %wide.load.4
  %38 = getelementptr inbounds float, float* %5, i64 %34
  %39 = bitcast float* %38 to <4 x float>*
  store <4 x float> %37, <4 x float>* %39, align 4, !tbaa !1224
  %40 = add nuw nsw i64 %10, 20
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %42, align 4, !tbaa !1221
  %43 = fmul <4 x float> %broadcast.splat8, %wide.load.5
  %44 = getelementptr inbounds float, float* %5, i64 %40
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %43, <4 x float>* %45, align 4, !tbaa !1224
  %46 = add nuw nsw i64 %10, 24
  %47 = getelementptr inbounds float, float* %4, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %48, align 4, !tbaa !1221
  %49 = fmul <4 x float> %broadcast.splat8, %wide.load.6
  %50 = getelementptr inbounds float, float* %5, i64 %46
  %51 = bitcast float* %50 to <4 x float>*
  store <4 x float> %49, <4 x float>* %51, align 4, !tbaa !1224
  %52 = add nuw nsw i64 %10, 28
  %53 = getelementptr inbounds float, float* %4, i64 %52
  %54 = bitcast float* %53 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %54, align 4, !tbaa !1221
  %55 = fmul <4 x float> %broadcast.splat8, %wide.load.7
  %56 = getelementptr inbounds float, float* %5, i64 %52
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !tbaa !1224
  %58 = add nuw nsw i64 %10, 32
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %60, align 4, !tbaa !1221
  %61 = fmul <4 x float> %broadcast.splat8, %wide.load.8
  %62 = getelementptr inbounds float, float* %5, i64 %58
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %61, <4 x float>* %63, align 4, !tbaa !1224
  %64 = add nuw nsw i64 %10, 36
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = bitcast float* %65 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %66, align 4, !tbaa !1221
  %67 = fmul <4 x float> %broadcast.splat8, %wide.load.9
  %68 = getelementptr inbounds float, float* %5, i64 %64
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 4, !tbaa !1224
  %70 = add nuw nsw i64 %10, 40
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %72, align 4, !tbaa !1221
  %73 = fmul <4 x float> %broadcast.splat8, %wide.load.10
  %74 = getelementptr inbounds float, float* %5, i64 %70
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> %73, <4 x float>* %75, align 4, !tbaa !1224
  %76 = add nuw nsw i64 %10, 44
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = bitcast float* %77 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !1221
  %79 = fmul <4 x float> %broadcast.splat8, %wide.load.11
  %80 = getelementptr inbounds float, float* %5, i64 %76
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4, !tbaa !1224
  %82 = add nuw nsw i64 %10, 48
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !1221
  %85 = fmul <4 x float> %broadcast.splat8, %wide.load.12
  %86 = getelementptr inbounds float, float* %5, i64 %82
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> %85, <4 x float>* %87, align 4, !tbaa !1224
  %88 = add nuw nsw i64 %10, 52
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = bitcast float* %89 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %90, align 4, !tbaa !1221
  %91 = fmul <4 x float> %broadcast.splat8, %wide.load.13
  %92 = getelementptr inbounds float, float* %5, i64 %88
  %93 = bitcast float* %92 to <4 x float>*
  store <4 x float> %91, <4 x float>* %93, align 4, !tbaa !1224
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond3 = icmp eq i64 %indvars.iv.next2, 56
  br i1 %exitcond3, label %for_end3, label %for_begin4.preheader, !prof !5

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %for_end, label %for_begin1.preheader, !prof !5
}

; Function Attrs: norecurse nounwind
define dllexport i32 @fused_negative_1(i8* noalias nocapture readonly, i8* noalias nocapture readnone, i32) local_unnamed_addr #3 {
entry:
  %3 = bitcast i8* %0 to %0**
  %4 = load %0*, %0** %3, align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %0**
  %7 = load %0*, %0** %6, align 8
  %8 = getelementptr inbounds %0, %0* %4, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %0, %0* %7, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call fastcc void @fused_negative_1_compute_(i8* %11, i8* %9)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_negative_1_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  %2 = bitcast i8* %1 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %2, align 4, !tbaa !1227
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to <4 x float>*
  %wide.load2 = load <4 x float>, <4 x float>* %4, align 4, !tbaa !1227
  %5 = fsub <4 x float> zeroinitializer, %wide.load
  %6 = fsub <4 x float> zeroinitializer, %wide.load2
  %7 = bitcast i8* %0 to <4 x float>*
  store <4 x float> %5, <4 x float>* %7, align 4, !tbaa !1230
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <4 x float>*
  store <4 x float> %6, <4 x float>* %9, align 4, !tbaa !1230
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <4 x float>*
  %wide.load.1 = load <4 x float>, <4 x float>* %11, align 4, !tbaa !1227
  %12 = getelementptr inbounds i8, i8* %1, i64 48
  %13 = bitcast i8* %12 to <4 x float>*
  %wide.load2.1 = load <4 x float>, <4 x float>* %13, align 4, !tbaa !1227
  %14 = fsub <4 x float> zeroinitializer, %wide.load.1
  %15 = fsub <4 x float> zeroinitializer, %wide.load2.1
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to <4 x float>*
  store <4 x float> %14, <4 x float>* %17, align 4, !tbaa !1230
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to <4 x float>*
  store <4 x float> %15, <4 x float>* %19, align 4, !tbaa !1230
  %20 = getelementptr inbounds i8, i8* %1, i64 64
  %21 = bitcast i8* %20 to <4 x float>*
  %wide.load.2 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !1227
  %22 = getelementptr inbounds i8, i8* %1, i64 80
  %23 = bitcast i8* %22 to <4 x float>*
  %wide.load2.2 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !1227
  %24 = fsub <4 x float> zeroinitializer, %wide.load.2
  %25 = fsub <4 x float> zeroinitializer, %wide.load2.2
  %26 = getelementptr inbounds i8, i8* %0, i64 64
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %24, <4 x float>* %27, align 4, !tbaa !1230
  %28 = getelementptr inbounds i8, i8* %0, i64 80
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %25, <4 x float>* %29, align 4, !tbaa !1230
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to <4 x float>*
  %wide.load.3 = load <4 x float>, <4 x float>* %31, align 4, !tbaa !1227
  %32 = getelementptr inbounds i8, i8* %1, i64 112
  %33 = bitcast i8* %32 to <4 x float>*
  %wide.load2.3 = load <4 x float>, <4 x float>* %33, align 4, !tbaa !1227
  %34 = fsub <4 x float> zeroinitializer, %wide.load.3
  %35 = fsub <4 x float> zeroinitializer, %wide.load2.3
  %36 = getelementptr inbounds i8, i8* %0, i64 96
  %37 = bitcast i8* %36 to <4 x float>*
  store <4 x float> %34, <4 x float>* %37, align 4, !tbaa !1230
  %38 = getelementptr inbounds i8, i8* %0, i64 112
  %39 = bitcast i8* %38 to <4 x float>*
  store <4 x float> %35, <4 x float>* %39, align 4, !tbaa !1230
  %40 = getelementptr inbounds i8, i8* %1, i64 128
  %41 = bitcast i8* %40 to <4 x float>*
  %wide.load.4 = load <4 x float>, <4 x float>* %41, align 4, !tbaa !1227
  %42 = getelementptr inbounds i8, i8* %1, i64 144
  %43 = bitcast i8* %42 to <4 x float>*
  %wide.load2.4 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !1227
  %44 = fsub <4 x float> zeroinitializer, %wide.load.4
  %45 = fsub <4 x float> zeroinitializer, %wide.load2.4
  %46 = getelementptr inbounds i8, i8* %0, i64 128
  %47 = bitcast i8* %46 to <4 x float>*
  store <4 x float> %44, <4 x float>* %47, align 4, !tbaa !1230
  %48 = getelementptr inbounds i8, i8* %0, i64 144
  %49 = bitcast i8* %48 to <4 x float>*
  store <4 x float> %45, <4 x float>* %49, align 4, !tbaa !1230
  %50 = getelementptr inbounds i8, i8* %1, i64 160
  %51 = bitcast i8* %50 to <4 x float>*
  %wide.load.5 = load <4 x float>, <4 x float>* %51, align 4, !tbaa !1227
  %52 = getelementptr inbounds i8, i8* %1, i64 176
  %53 = bitcast i8* %52 to <4 x float>*
  %wide.load2.5 = load <4 x float>, <4 x float>* %53, align 4, !tbaa !1227
  %54 = fsub <4 x float> zeroinitializer, %wide.load.5
  %55 = fsub <4 x float> zeroinitializer, %wide.load2.5
  %56 = getelementptr inbounds i8, i8* %0, i64 160
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> %54, <4 x float>* %57, align 4, !tbaa !1230
  %58 = getelementptr inbounds i8, i8* %0, i64 176
  %59 = bitcast i8* %58 to <4 x float>*
  store <4 x float> %55, <4 x float>* %59, align 4, !tbaa !1230
  %60 = getelementptr inbounds i8, i8* %1, i64 192
  %61 = bitcast i8* %60 to <4 x float>*
  %wide.load.6 = load <4 x float>, <4 x float>* %61, align 4, !tbaa !1227
  %62 = getelementptr inbounds i8, i8* %1, i64 208
  %63 = bitcast i8* %62 to <4 x float>*
  %wide.load2.6 = load <4 x float>, <4 x float>* %63, align 4, !tbaa !1227
  %64 = fsub <4 x float> zeroinitializer, %wide.load.6
  %65 = fsub <4 x float> zeroinitializer, %wide.load2.6
  %66 = getelementptr inbounds i8, i8* %0, i64 192
  %67 = bitcast i8* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 4, !tbaa !1230
  %68 = getelementptr inbounds i8, i8* %0, i64 208
  %69 = bitcast i8* %68 to <4 x float>*
  store <4 x float> %65, <4 x float>* %69, align 4, !tbaa !1230
  %70 = getelementptr inbounds i8, i8* %1, i64 224
  %71 = bitcast i8* %70 to <4 x float>*
  %wide.load.7 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1227
  %72 = getelementptr inbounds i8, i8* %1, i64 240
  %73 = bitcast i8* %72 to <4 x float>*
  %wide.load2.7 = load <4 x float>, <4 x float>* %73, align 4, !tbaa !1227
  %74 = fsub <4 x float> zeroinitializer, %wide.load.7
  %75 = fsub <4 x float> zeroinitializer, %wide.load2.7
  %76 = getelementptr inbounds i8, i8* %0, i64 224
  %77 = bitcast i8* %76 to <4 x float>*
  store <4 x float> %74, <4 x float>* %77, align 4, !tbaa !1230
  %78 = getelementptr inbounds i8, i8* %0, i64 240
  %79 = bitcast i8* %78 to <4 x float>*
  store <4 x float> %75, <4 x float>* %79, align 4, !tbaa !1230
  %80 = getelementptr inbounds i8, i8* %1, i64 256
  %81 = bitcast i8* %80 to <4 x float>*
  %wide.load.8 = load <4 x float>, <4 x float>* %81, align 4, !tbaa !1227
  %82 = getelementptr inbounds i8, i8* %1, i64 272
  %83 = bitcast i8* %82 to <4 x float>*
  %wide.load2.8 = load <4 x float>, <4 x float>* %83, align 4, !tbaa !1227
  %84 = fsub <4 x float> zeroinitializer, %wide.load.8
  %85 = fsub <4 x float> zeroinitializer, %wide.load2.8
  %86 = getelementptr inbounds i8, i8* %0, i64 256
  %87 = bitcast i8* %86 to <4 x float>*
  store <4 x float> %84, <4 x float>* %87, align 4, !tbaa !1230
  %88 = getelementptr inbounds i8, i8* %0, i64 272
  %89 = bitcast i8* %88 to <4 x float>*
  store <4 x float> %85, <4 x float>* %89, align 4, !tbaa !1230
  %90 = getelementptr inbounds i8, i8* %1, i64 288
  %91 = bitcast i8* %90 to <4 x float>*
  %wide.load.9 = load <4 x float>, <4 x float>* %91, align 4, !tbaa !1227
  %92 = getelementptr inbounds i8, i8* %1, i64 304
  %93 = bitcast i8* %92 to <4 x float>*
  %wide.load2.9 = load <4 x float>, <4 x float>* %93, align 4, !tbaa !1227
  %94 = fsub <4 x float> zeroinitializer, %wide.load.9
  %95 = fsub <4 x float> zeroinitializer, %wide.load2.9
  %96 = getelementptr inbounds i8, i8* %0, i64 288
  %97 = bitcast i8* %96 to <4 x float>*
  store <4 x float> %94, <4 x float>* %97, align 4, !tbaa !1230
  %98 = getelementptr inbounds i8, i8* %0, i64 304
  %99 = bitcast i8* %98 to <4 x float>*
  store <4 x float> %95, <4 x float>* %99, align 4, !tbaa !1230
  %100 = getelementptr inbounds i8, i8* %1, i64 320
  %101 = bitcast i8* %100 to <4 x float>*
  %wide.load.10 = load <4 x float>, <4 x float>* %101, align 4, !tbaa !1227
  %102 = getelementptr inbounds i8, i8* %1, i64 336
  %103 = bitcast i8* %102 to <4 x float>*
  %wide.load2.10 = load <4 x float>, <4 x float>* %103, align 4, !tbaa !1227
  %104 = fsub <4 x float> zeroinitializer, %wide.load.10
  %105 = fsub <4 x float> zeroinitializer, %wide.load2.10
  %106 = getelementptr inbounds i8, i8* %0, i64 320
  %107 = bitcast i8* %106 to <4 x float>*
  store <4 x float> %104, <4 x float>* %107, align 4, !tbaa !1230
  %108 = getelementptr inbounds i8, i8* %0, i64 336
  %109 = bitcast i8* %108 to <4 x float>*
  store <4 x float> %105, <4 x float>* %109, align 4, !tbaa !1230
  %110 = getelementptr inbounds i8, i8* %1, i64 352
  %111 = bitcast i8* %110 to <4 x float>*
  %wide.load.11 = load <4 x float>, <4 x float>* %111, align 4, !tbaa !1227
  %112 = getelementptr inbounds i8, i8* %1, i64 368
  %113 = bitcast i8* %112 to <4 x float>*
  %wide.load2.11 = load <4 x float>, <4 x float>* %113, align 4, !tbaa !1227
  %114 = fsub <4 x float> zeroinitializer, %wide.load.11
  %115 = fsub <4 x float> zeroinitializer, %wide.load2.11
  %116 = getelementptr inbounds i8, i8* %0, i64 352
  %117 = bitcast i8* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4, !tbaa !1230
  %118 = getelementptr inbounds i8, i8* %0, i64 368
  %119 = bitcast i8* %118 to <4 x float>*
  store <4 x float> %115, <4 x float>* %119, align 4, !tbaa !1230
  %120 = getelementptr inbounds i8, i8* %1, i64 384
  %121 = bitcast i8* %120 to <4 x float>*
  %wide.load.12 = load <4 x float>, <4 x float>* %121, align 4, !tbaa !1227
  %122 = getelementptr inbounds i8, i8* %1, i64 400
  %123 = bitcast i8* %122 to <4 x float>*
  %wide.load2.12 = load <4 x float>, <4 x float>* %123, align 4, !tbaa !1227
  %124 = fsub <4 x float> zeroinitializer, %wide.load.12
  %125 = fsub <4 x float> zeroinitializer, %wide.load2.12
  %126 = getelementptr inbounds i8, i8* %0, i64 384
  %127 = bitcast i8* %126 to <4 x float>*
  store <4 x float> %124, <4 x float>* %127, align 4, !tbaa !1230
  %128 = getelementptr inbounds i8, i8* %0, i64 400
  %129 = bitcast i8* %128 to <4 x float>*
  store <4 x float> %125, <4 x float>* %129, align 4, !tbaa !1230
  %130 = getelementptr inbounds i8, i8* %1, i64 416
  %131 = bitcast i8* %130 to <4 x float>*
  %wide.load.13 = load <4 x float>, <4 x float>* %131, align 4, !tbaa !1227
  %132 = getelementptr inbounds i8, i8* %1, i64 432
  %133 = bitcast i8* %132 to <4 x float>*
  %wide.load2.13 = load <4 x float>, <4 x float>* %133, align 4, !tbaa !1227
  %134 = fsub <4 x float> zeroinitializer, %wide.load.13
  %135 = fsub <4 x float> zeroinitializer, %wide.load2.13
  %136 = getelementptr inbounds i8, i8* %0, i64 416
  %137 = bitcast i8* %136 to <4 x float>*
  store <4 x float> %134, <4 x float>* %137, align 4, !tbaa !1230
  %138 = getelementptr inbounds i8, i8* %0, i64 432
  %139 = bitcast i8* %138 to <4 x float>*
  store <4 x float> %135, <4 x float>* %139, align 4, !tbaa !1230
  %140 = getelementptr inbounds i8, i8* %1, i64 448
  %141 = bitcast i8* %140 to <4 x float>*
  %wide.load.14 = load <4 x float>, <4 x float>* %141, align 4, !tbaa !1227
  %142 = getelementptr inbounds i8, i8* %1, i64 464
  %143 = bitcast i8* %142 to <4 x float>*
  %wide.load2.14 = load <4 x float>, <4 x float>* %143, align 4, !tbaa !1227
  %144 = fsub <4 x float> zeroinitializer, %wide.load.14
  %145 = fsub <4 x float> zeroinitializer, %wide.load2.14
  %146 = getelementptr inbounds i8, i8* %0, i64 448
  %147 = bitcast i8* %146 to <4 x float>*
  store <4 x float> %144, <4 x float>* %147, align 4, !tbaa !1230
  %148 = getelementptr inbounds i8, i8* %0, i64 464
  %149 = bitcast i8* %148 to <4 x float>*
  store <4 x float> %145, <4 x float>* %149, align 4, !tbaa !1230
  %150 = getelementptr inbounds i8, i8* %1, i64 480
  %151 = bitcast i8* %150 to <4 x float>*
  %wide.load.15 = load <4 x float>, <4 x float>* %151, align 4, !tbaa !1227
  %152 = getelementptr inbounds i8, i8* %1, i64 496
  %153 = bitcast i8* %152 to <4 x float>*
  %wide.load2.15 = load <4 x float>, <4 x float>* %153, align 4, !tbaa !1227
  %154 = fsub <4 x float> zeroinitializer, %wide.load.15
  %155 = fsub <4 x float> zeroinitializer, %wide.load2.15
  %156 = getelementptr inbounds i8, i8* %0, i64 480
  %157 = bitcast i8* %156 to <4 x float>*
  store <4 x float> %154, <4 x float>* %157, align 4, !tbaa !1230
  %158 = getelementptr inbounds i8, i8* %0, i64 496
  %159 = bitcast i8* %158 to <4 x float>*
  store <4 x float> %155, <4 x float>* %159, align 4, !tbaa !1230
  %160 = getelementptr inbounds i8, i8* %1, i64 512
  %161 = bitcast i8* %160 to <4 x float>*
  %wide.load.16 = load <4 x float>, <4 x float>* %161, align 4, !tbaa !1227
  %162 = getelementptr inbounds i8, i8* %1, i64 528
  %163 = bitcast i8* %162 to <4 x float>*
  %wide.load2.16 = load <4 x float>, <4 x float>* %163, align 4, !tbaa !1227
  %164 = fsub <4 x float> zeroinitializer, %wide.load.16
  %165 = fsub <4 x float> zeroinitializer, %wide.load2.16
  %166 = getelementptr inbounds i8, i8* %0, i64 512
  %167 = bitcast i8* %166 to <4 x float>*
  store <4 x float> %164, <4 x float>* %167, align 4, !tbaa !1230
  %168 = getelementptr inbounds i8, i8* %0, i64 528
  %169 = bitcast i8* %168 to <4 x float>*
  store <4 x float> %165, <4 x float>* %169, align 4, !tbaa !1230
  %170 = getelementptr inbounds i8, i8* %1, i64 544
  %171 = bitcast i8* %170 to <4 x float>*
  %wide.load.17 = load <4 x float>, <4 x float>* %171, align 4, !tbaa !1227
  %172 = getelementptr inbounds i8, i8* %1, i64 560
  %173 = bitcast i8* %172 to <4 x float>*
  %wide.load2.17 = load <4 x float>, <4 x float>* %173, align 4, !tbaa !1227
  %174 = fsub <4 x float> zeroinitializer, %wide.load.17
  %175 = fsub <4 x float> zeroinitializer, %wide.load2.17
  %176 = getelementptr inbounds i8, i8* %0, i64 544
  %177 = bitcast i8* %176 to <4 x float>*
  store <4 x float> %174, <4 x float>* %177, align 4, !tbaa !1230
  %178 = getelementptr inbounds i8, i8* %0, i64 560
  %179 = bitcast i8* %178 to <4 x float>*
  store <4 x float> %175, <4 x float>* %179, align 4, !tbaa !1230
  %180 = getelementptr inbounds i8, i8* %1, i64 576
  %181 = bitcast i8* %180 to <4 x float>*
  %wide.load.18 = load <4 x float>, <4 x float>* %181, align 4, !tbaa !1227
  %182 = getelementptr inbounds i8, i8* %1, i64 592
  %183 = bitcast i8* %182 to <4 x float>*
  %wide.load2.18 = load <4 x float>, <4 x float>* %183, align 4, !tbaa !1227
  %184 = fsub <4 x float> zeroinitializer, %wide.load.18
  %185 = fsub <4 x float> zeroinitializer, %wide.load2.18
  %186 = getelementptr inbounds i8, i8* %0, i64 576
  %187 = bitcast i8* %186 to <4 x float>*
  store <4 x float> %184, <4 x float>* %187, align 4, !tbaa !1230
  %188 = getelementptr inbounds i8, i8* %0, i64 592
  %189 = bitcast i8* %188 to <4 x float>*
  store <4 x float> %185, <4 x float>* %189, align 4, !tbaa !1230
  %190 = getelementptr inbounds i8, i8* %1, i64 608
  %191 = bitcast i8* %190 to <4 x float>*
  %wide.load.19 = load <4 x float>, <4 x float>* %191, align 4, !tbaa !1227
  %192 = getelementptr inbounds i8, i8* %1, i64 624
  %193 = bitcast i8* %192 to <4 x float>*
  %wide.load2.19 = load <4 x float>, <4 x float>* %193, align 4, !tbaa !1227
  %194 = fsub <4 x float> zeroinitializer, %wide.load.19
  %195 = fsub <4 x float> zeroinitializer, %wide.load2.19
  %196 = getelementptr inbounds i8, i8* %0, i64 608
  %197 = bitcast i8* %196 to <4 x float>*
  store <4 x float> %194, <4 x float>* %197, align 4, !tbaa !1230
  %198 = getelementptr inbounds i8, i8* %0, i64 624
  %199 = bitcast i8* %198 to <4 x float>*
  store <4 x float> %195, <4 x float>* %199, align 4, !tbaa !1230
  %200 = getelementptr inbounds i8, i8* %1, i64 640
  %201 = bitcast i8* %200 to <4 x float>*
  %wide.load.20 = load <4 x float>, <4 x float>* %201, align 4, !tbaa !1227
  %202 = getelementptr inbounds i8, i8* %1, i64 656
  %203 = bitcast i8* %202 to <4 x float>*
  %wide.load2.20 = load <4 x float>, <4 x float>* %203, align 4, !tbaa !1227
  %204 = fsub <4 x float> zeroinitializer, %wide.load.20
  %205 = fsub <4 x float> zeroinitializer, %wide.load2.20
  %206 = getelementptr inbounds i8, i8* %0, i64 640
  %207 = bitcast i8* %206 to <4 x float>*
  store <4 x float> %204, <4 x float>* %207, align 4, !tbaa !1230
  %208 = getelementptr inbounds i8, i8* %0, i64 656
  %209 = bitcast i8* %208 to <4 x float>*
  store <4 x float> %205, <4 x float>* %209, align 4, !tbaa !1230
  %210 = getelementptr inbounds i8, i8* %1, i64 672
  %211 = bitcast i8* %210 to <4 x float>*
  %wide.load.21 = load <4 x float>, <4 x float>* %211, align 4, !tbaa !1227
  %212 = getelementptr inbounds i8, i8* %1, i64 688
  %213 = bitcast i8* %212 to <4 x float>*
  %wide.load2.21 = load <4 x float>, <4 x float>* %213, align 4, !tbaa !1227
  %214 = fsub <4 x float> zeroinitializer, %wide.load.21
  %215 = fsub <4 x float> zeroinitializer, %wide.load2.21
  %216 = getelementptr inbounds i8, i8* %0, i64 672
  %217 = bitcast i8* %216 to <4 x float>*
  store <4 x float> %214, <4 x float>* %217, align 4, !tbaa !1230
  %218 = getelementptr inbounds i8, i8* %0, i64 688
  %219 = bitcast i8* %218 to <4 x float>*
  store <4 x float> %215, <4 x float>* %219, align 4, !tbaa !1230
  %220 = getelementptr inbounds i8, i8* %1, i64 704
  %221 = bitcast i8* %220 to <4 x float>*
  %wide.load.22 = load <4 x float>, <4 x float>* %221, align 4, !tbaa !1227
  %222 = getelementptr inbounds i8, i8* %1, i64 720
  %223 = bitcast i8* %222 to <4 x float>*
  %wide.load2.22 = load <4 x float>, <4 x float>* %223, align 4, !tbaa !1227
  %224 = fsub <4 x float> zeroinitializer, %wide.load.22
  %225 = fsub <4 x float> zeroinitializer, %wide.load2.22
  %226 = getelementptr inbounds i8, i8* %0, i64 704
  %227 = bitcast i8* %226 to <4 x float>*
  store <4 x float> %224, <4 x float>* %227, align 4, !tbaa !1230
  %228 = getelementptr inbounds i8, i8* %0, i64 720
  %229 = bitcast i8* %228 to <4 x float>*
  store <4 x float> %225, <4 x float>* %229, align 4, !tbaa !1230
  %230 = getelementptr inbounds i8, i8* %1, i64 736
  %231 = bitcast i8* %230 to <4 x float>*
  %wide.load.23 = load <4 x float>, <4 x float>* %231, align 4, !tbaa !1227
  %232 = getelementptr inbounds i8, i8* %1, i64 752
  %233 = bitcast i8* %232 to <4 x float>*
  %wide.load2.23 = load <4 x float>, <4 x float>* %233, align 4, !tbaa !1227
  %234 = fsub <4 x float> zeroinitializer, %wide.load.23
  %235 = fsub <4 x float> zeroinitializer, %wide.load2.23
  %236 = getelementptr inbounds i8, i8* %0, i64 736
  %237 = bitcast i8* %236 to <4 x float>*
  store <4 x float> %234, <4 x float>* %237, align 4, !tbaa !1230
  %238 = getelementptr inbounds i8, i8* %0, i64 752
  %239 = bitcast i8* %238 to <4 x float>*
  store <4 x float> %235, <4 x float>* %239, align 4, !tbaa !1230
  %240 = getelementptr inbounds i8, i8* %1, i64 768
  %241 = bitcast i8* %240 to <4 x float>*
  %wide.load.24 = load <4 x float>, <4 x float>* %241, align 4, !tbaa !1227
  %242 = getelementptr inbounds i8, i8* %1, i64 784
  %243 = bitcast i8* %242 to <4 x float>*
  %wide.load2.24 = load <4 x float>, <4 x float>* %243, align 4, !tbaa !1227
  %244 = fsub <4 x float> zeroinitializer, %wide.load.24
  %245 = fsub <4 x float> zeroinitializer, %wide.load2.24
  %246 = getelementptr inbounds i8, i8* %0, i64 768
  %247 = bitcast i8* %246 to <4 x float>*
  store <4 x float> %244, <4 x float>* %247, align 4, !tbaa !1230
  %248 = getelementptr inbounds i8, i8* %0, i64 784
  %249 = bitcast i8* %248 to <4 x float>*
  store <4 x float> %245, <4 x float>* %249, align 4, !tbaa !1230
  %250 = getelementptr inbounds i8, i8* %1, i64 800
  %251 = bitcast i8* %250 to <4 x float>*
  %wide.load.25 = load <4 x float>, <4 x float>* %251, align 4, !tbaa !1227
  %252 = getelementptr inbounds i8, i8* %1, i64 816
  %253 = bitcast i8* %252 to <4 x float>*
  %wide.load2.25 = load <4 x float>, <4 x float>* %253, align 4, !tbaa !1227
  %254 = fsub <4 x float> zeroinitializer, %wide.load.25
  %255 = fsub <4 x float> zeroinitializer, %wide.load2.25
  %256 = getelementptr inbounds i8, i8* %0, i64 800
  %257 = bitcast i8* %256 to <4 x float>*
  store <4 x float> %254, <4 x float>* %257, align 4, !tbaa !1230
  %258 = getelementptr inbounds i8, i8* %0, i64 816
  %259 = bitcast i8* %258 to <4 x float>*
  store <4 x float> %255, <4 x float>* %259, align 4, !tbaa !1230
  %260 = getelementptr inbounds i8, i8* %1, i64 832
  %261 = bitcast i8* %260 to <4 x float>*
  %wide.load.26 = load <4 x float>, <4 x float>* %261, align 4, !tbaa !1227
  %262 = getelementptr inbounds i8, i8* %1, i64 848
  %263 = bitcast i8* %262 to <4 x float>*
  %wide.load2.26 = load <4 x float>, <4 x float>* %263, align 4, !tbaa !1227
  %264 = fsub <4 x float> zeroinitializer, %wide.load.26
  %265 = fsub <4 x float> zeroinitializer, %wide.load2.26
  %266 = getelementptr inbounds i8, i8* %0, i64 832
  %267 = bitcast i8* %266 to <4 x float>*
  store <4 x float> %264, <4 x float>* %267, align 4, !tbaa !1230
  %268 = getelementptr inbounds i8, i8* %0, i64 848
  %269 = bitcast i8* %268 to <4 x float>*
  store <4 x float> %265, <4 x float>* %269, align 4, !tbaa !1230
  %270 = getelementptr inbounds i8, i8* %1, i64 864
  %271 = bitcast i8* %270 to <4 x float>*
  %wide.load.27 = load <4 x float>, <4 x float>* %271, align 4, !tbaa !1227
  %272 = getelementptr inbounds i8, i8* %1, i64 880
  %273 = bitcast i8* %272 to <4 x float>*
  %wide.load2.27 = load <4 x float>, <4 x float>* %273, align 4, !tbaa !1227
  %274 = fsub <4 x float> zeroinitializer, %wide.load.27
  %275 = fsub <4 x float> zeroinitializer, %wide.load2.27
  %276 = getelementptr inbounds i8, i8* %0, i64 864
  %277 = bitcast i8* %276 to <4 x float>*
  store <4 x float> %274, <4 x float>* %277, align 4, !tbaa !1230
  %278 = getelementptr inbounds i8, i8* %0, i64 880
  %279 = bitcast i8* %278 to <4 x float>*
  store <4 x float> %275, <4 x float>* %279, align 4, !tbaa !1230
  %280 = getelementptr inbounds i8, i8* %1, i64 896
  %281 = bitcast i8* %280 to <4 x float>*
  %wide.load.28 = load <4 x float>, <4 x float>* %281, align 4, !tbaa !1227
  %282 = getelementptr inbounds i8, i8* %1, i64 912
  %283 = bitcast i8* %282 to <4 x float>*
  %wide.load2.28 = load <4 x float>, <4 x float>* %283, align 4, !tbaa !1227
  %284 = fsub <4 x float> zeroinitializer, %wide.load.28
  %285 = fsub <4 x float> zeroinitializer, %wide.load2.28
  %286 = getelementptr inbounds i8, i8* %0, i64 896
  %287 = bitcast i8* %286 to <4 x float>*
  store <4 x float> %284, <4 x float>* %287, align 4, !tbaa !1230
  %288 = getelementptr inbounds i8, i8* %0, i64 912
  %289 = bitcast i8* %288 to <4 x float>*
  store <4 x float> %285, <4 x float>* %289, align 4, !tbaa !1230
  %290 = getelementptr inbounds i8, i8* %1, i64 928
  %291 = bitcast i8* %290 to <4 x float>*
  %wide.load.29 = load <4 x float>, <4 x float>* %291, align 4, !tbaa !1227
  %292 = getelementptr inbounds i8, i8* %1, i64 944
  %293 = bitcast i8* %292 to <4 x float>*
  %wide.load2.29 = load <4 x float>, <4 x float>* %293, align 4, !tbaa !1227
  %294 = fsub <4 x float> zeroinitializer, %wide.load.29
  %295 = fsub <4 x float> zeroinitializer, %wide.load2.29
  %296 = getelementptr inbounds i8, i8* %0, i64 928
  %297 = bitcast i8* %296 to <4 x float>*
  store <4 x float> %294, <4 x float>* %297, align 4, !tbaa !1230
  %298 = getelementptr inbounds i8, i8* %0, i64 944
  %299 = bitcast i8* %298 to <4 x float>*
  store <4 x float> %295, <4 x float>* %299, align 4, !tbaa !1230
  %300 = getelementptr inbounds i8, i8* %1, i64 960
  %301 = bitcast i8* %300 to <4 x float>*
  %wide.load.30 = load <4 x float>, <4 x float>* %301, align 4, !tbaa !1227
  %302 = getelementptr inbounds i8, i8* %1, i64 976
  %303 = bitcast i8* %302 to <4 x float>*
  %wide.load2.30 = load <4 x float>, <4 x float>* %303, align 4, !tbaa !1227
  %304 = fsub <4 x float> zeroinitializer, %wide.load.30
  %305 = fsub <4 x float> zeroinitializer, %wide.load2.30
  %306 = getelementptr inbounds i8, i8* %0, i64 960
  %307 = bitcast i8* %306 to <4 x float>*
  store <4 x float> %304, <4 x float>* %307, align 4, !tbaa !1230
  %308 = getelementptr inbounds i8, i8* %0, i64 976
  %309 = bitcast i8* %308 to <4 x float>*
  store <4 x float> %305, <4 x float>* %309, align 4, !tbaa !1230
  %310 = getelementptr inbounds i8, i8* %1, i64 992
  %311 = bitcast i8* %310 to <4 x float>*
  %wide.load.31 = load <4 x float>, <4 x float>* %311, align 4, !tbaa !1227
  %312 = getelementptr inbounds i8, i8* %1, i64 1008
  %313 = bitcast i8* %312 to <4 x float>*
  %wide.load2.31 = load <4 x float>, <4 x float>* %313, align 4, !tbaa !1227
  %314 = fsub <4 x float> zeroinitializer, %wide.load.31
  %315 = fsub <4 x float> zeroinitializer, %wide.load2.31
  %316 = getelementptr inbounds i8, i8* %0, i64 992
  %317 = bitcast i8* %316 to <4 x float>*
  store <4 x float> %314, <4 x float>* %317, align 4, !tbaa !1230
  %318 = getelementptr inbounds i8, i8* %0, i64 1008
  %319 = bitcast i8* %318 to <4 x float>*
  store <4 x float> %315, <4 x float>* %319, align 4, !tbaa !1230
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #5

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #2

attributes #0 = { nounwind }
attributes #1 = { noinline nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { norecurse nounwind }
attributes #4 = { noinline norecurse nounwind }
attributes #5 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = !{!"branch_weights", i32 1, i32 1048576}
!6 = !{!7, !7, i64 0}
!7 = !{!"float32", !8, i64 0}
!8 = !{!"0xdcbcc40", !9, i64 0}
!9 = !{!"tvm-tbaa"}
!10 = !{!11, !11, i64 0}
!11 = !{!"float32", !12, i64 0}
!12 = !{!"0x3bb4da0", !9, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"0x3bb4420.w32.b0", !15, i64 0}
!15 = !{!"0x3bb4420.w64.b0", !16, i64 0}
!16 = !{!"0x3bb4420.w128.b0", !17, i64 0}
!17 = !{!"0x3bb4420.w256.b0", !18, i64 0}
!18 = !{!"0x3bb4420.w512.b0", !19, i64 0}
!19 = !{!"0x3bb4420.w1024.b0", !20, i64 0}
!20 = !{!"float32", !21, i64 0}
!21 = !{!"0x3bb4420", !9, i64 0}
!22 = !{!23, !23, i64 0}
!23 = !{!"float32", !24, i64 0}
!24 = !{!"0xdcbc050", !9, i64 0}
!25 = !{!20, !20, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"float32", !28, i64 0}
!28 = !{!"0xdcbca40", !9, i64 0}
!29 = !{!30, !30, i64 0}
!30 = !{!"float32", !31, i64 0}
!31 = !{!"0x391f060", !9, i64 0}
!32 = !{!33, !33, i64 0}
!33 = !{!"float32", !34, i64 0}
!34 = !{!"0x391f250", !9, i64 0}
!35 = distinct !{!35, !36}
!36 = !{!"llvm.loop.isvectorized", i32 1}
!37 = !{!38, !38, i64 0}
!38 = !{!"0xdc9c160.w1.b0", !39, i64 0}
!39 = !{!"0xdc9c160.w2.b0", !40, i64 0}
!40 = !{!"0xdc9c160.w4.b0", !41, i64 0}
!41 = !{!"0xdc9c160.w8.b0", !42, i64 0}
!42 = !{!"0xdc9c160.w16.b0", !43, i64 0}
!43 = !{!"0xdc9c160.w32.b0", !44, i64 0}
!44 = !{!"0xdc9c160.w64.b0", !45, i64 0}
!45 = !{!"0xdc9c160.w128.b0", !46, i64 0}
!46 = !{!"0xdc9c160.w256.b0", !47, i64 0}
!47 = !{!"0xdc9c160.w512.b0", !48, i64 0}
!48 = !{!"0xdc9c160.w1024.b0", !49, i64 0}
!49 = !{!"float32", !50, i64 0}
!50 = !{!"0xdc9c160", !9, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"float32", !53, i64 0}
!53 = !{!"0xdc9c3b0", !9, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"float32", !56, i64 0}
!56 = !{!"0xdc9c3f0", !9, i64 0}
!57 = distinct !{!57, !36}
!58 = !{!59, !59, i64 0}
!59 = !{!"float32", !60, i64 0}
!60 = !{!"0xdca5c40", !9, i64 0}
!61 = !{!62, !62, i64 0}
!62 = !{!"float32", !63, i64 0}
!63 = !{!"0xf1e5800", !9, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"float32", !66, i64 0}
!66 = !{!"0xdca5c80", !9, i64 0}
!67 = distinct !{!67, !36}
!68 = !{!69, !69, i64 0}
!69 = !{!"float32", !70, i64 0}
!70 = !{!"0x101e2f00", !9, i64 0}
!71 = !{!72, !72, i64 0}
!72 = !{!"float32", !73, i64 0}
!73 = !{!"0x3bc0de0", !9, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"float32", !76, i64 0}
!76 = !{!"0x101e2f40", !9, i64 0}
!77 = distinct !{!77, !36}
!78 = !{!79, !79, i64 0}
!79 = !{!"float32", !80, i64 0}
!80 = !{!"0x431a160", !9, i64 0}
!81 = !{!82, !82, i64 0}
!82 = !{!"float32", !83, i64 0}
!83 = !{!"0xcbdc080", !9, i64 0}
!84 = !{!85, !85, i64 0}
!85 = !{!"float32", !86, i64 0}
!86 = !{!"0x3b6b2f0", !9, i64 0}
!87 = !{!88, !88, i64 0}
!88 = !{!"float32", !89, i64 0}
!89 = !{!"0x3ea6ef0", !9, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"float32", !92, i64 0}
!92 = !{!"0x1160e560", !9, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"float32", !95, i64 0}
!95 = !{!"0x3bebee0", !9, i64 0}
!96 = !{!97, !97, i64 0}
!97 = !{!"float32", !98, i64 0}
!98 = !{!"0x3ea0e20", !9, i64 0}
!99 = distinct !{!99, !36}
!100 = !{!101, !101, i64 0}
!101 = !{!"float32", !102, i64 0}
!102 = !{!"0xf2d5fe0", !9, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"float32", !105, i64 0}
!105 = !{!"0xf2d6180", !9, i64 0}
!106 = distinct !{!106, !36}
!107 = !{!108, !108, i64 0}
!108 = !{!"float32", !109, i64 0}
!109 = !{!"0xa04b490", !9, i64 0}
!110 = !{!111, !111, i64 0}
!111 = !{!"float32", !112, i64 0}
!112 = !{!"0x3c3bf70", !9, i64 0}
!113 = !{!114, !114, i64 0}
!114 = !{!"float32", !115, i64 0}
!115 = !{!"0xa04b4d0", !9, i64 0}
!116 = distinct !{!116, !36}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x6b9e200.w1.b0", !119, i64 0}
!119 = !{!"0x6b9e200.w2.b0", !120, i64 0}
!120 = !{!"0x6b9e200.w4.b0", !121, i64 0}
!121 = !{!"0x6b9e200.w8.b0", !122, i64 0}
!122 = !{!"0x6b9e200.w16.b0", !123, i64 0}
!123 = !{!"0x6b9e200.w32.b0", !124, i64 0}
!124 = !{!"0x6b9e200.w64.b0", !125, i64 0}
!125 = !{!"0x6b9e200.w128.b0", !126, i64 0}
!126 = !{!"0x6b9e200.w256.b0", !127, i64 0}
!127 = !{!"0x6b9e200.w512.b0", !128, i64 0}
!128 = !{!"0x6b9e200.w1024.b0", !129, i64 0}
!129 = !{!"float32", !130, i64 0}
!130 = !{!"0x6b9e200", !9, i64 0}
!131 = !{!132, !132, i64 0}
!132 = !{!"float32", !133, i64 0}
!133 = !{!"0x3ea2d20", !9, i64 0}
!134 = !{!135, !135, i64 0}
!135 = !{!"float32", !136, i64 0}
!136 = !{!"0x3ea2d60", !9, i64 0}
!137 = distinct !{!137, !36}
!138 = !{!139, !139, i64 0}
!139 = !{!"float32", !140, i64 0}
!140 = !{!"0xb1b7700", !9, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"float32", !143, i64 0}
!143 = !{!"0x49a8610", !9, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"float32", !146, i64 0}
!146 = !{!"0x3b02af0", !9, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"float32", !149, i64 0}
!149 = !{!"0x3bc7910", !9, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"float32", !152, i64 0}
!152 = !{!"0xb1b76c0", !9, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"float32", !155, i64 0}
!155 = !{!"0x11639290", !9, i64 0}
!156 = !{!157, !157, i64 0}
!157 = !{!"float32", !158, i64 0}
!158 = !{!"0xa04a240", !9, i64 0}
!159 = distinct !{!159, !36}
!160 = !{!161, !161, i64 0}
!161 = !{!"float32", !162, i64 0}
!162 = !{!"0x3ad5dc0", !9, i64 0}
!163 = !{!164, !164, i64 0}
!164 = !{!"float32", !165, i64 0}
!165 = !{!"0x4285940", !9, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"float32", !168, i64 0}
!168 = !{!"0x3ad5e00", !9, i64 0}
!169 = distinct !{!169, !36}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x3129250.w1.b0", !172, i64 0}
!172 = !{!"0x3129250.w2.b0", !173, i64 0}
!173 = !{!"0x3129250.w4.b0", !174, i64 0}
!174 = !{!"0x3129250.w8.b0", !175, i64 0}
!175 = !{!"0x3129250.w16.b0", !176, i64 0}
!176 = !{!"0x3129250.w32.b0", !177, i64 0}
!177 = !{!"0x3129250.w64.b0", !178, i64 0}
!178 = !{!"0x3129250.w128.b0", !179, i64 0}
!179 = !{!"0x3129250.w256.b0", !180, i64 0}
!180 = !{!"0x3129250.w512.b0", !181, i64 0}
!181 = !{!"0x3129250.w1024.b0", !182, i64 0}
!182 = !{!"float32", !183, i64 0}
!183 = !{!"0x3129250", !9, i64 0}
!184 = !{!185, !185, i64 0}
!185 = !{!"float32", !186, i64 0}
!186 = !{!"0x392c720", !9, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"float32", !189, i64 0}
!189 = !{!"0x3129290", !9, i64 0}
!190 = distinct !{!190, !36}
!191 = !{!192, !192, i64 0}
!192 = !{!"0xdad7640.w1.b0", !193, i64 0}
!193 = !{!"0xdad7640.w2.b0", !194, i64 0}
!194 = !{!"0xdad7640.w4.b0", !195, i64 0}
!195 = !{!"0xdad7640.w8.b0", !196, i64 0}
!196 = !{!"0xdad7640.w16.b0", !197, i64 0}
!197 = !{!"0xdad7640.w32.b0", !198, i64 0}
!198 = !{!"0xdad7640.w64.b0", !199, i64 0}
!199 = !{!"0xdad7640.w128.b0", !200, i64 0}
!200 = !{!"0xdad7640.w256.b0", !201, i64 0}
!201 = !{!"0xdad7640.w512.b0", !202, i64 0}
!202 = !{!"0xdad7640.w1024.b0", !203, i64 0}
!203 = !{!"float32", !204, i64 0}
!204 = !{!"0xdad7640", !9, i64 0}
!205 = !{!206, !206, i64 0}
!206 = !{!"float32", !207, i64 0}
!207 = !{!"0xdad7350", !9, i64 0}
!208 = !{!209, !209, i64 0}
!209 = !{!"float32", !210, i64 0}
!210 = !{!"0xdad7680", !9, i64 0}
!211 = distinct !{!211, !36}
!212 = !{!213, !213, i64 0}
!213 = !{!"float32", !214, i64 0}
!214 = !{!"0x318cae0", !9, i64 0}
!215 = !{!216, !216, i64 0}
!216 = !{!"float32", !217, i64 0}
!217 = !{!"0x318cb60", !9, i64 0}
!218 = distinct !{!218, !36}
!219 = !{!220, !220, i64 0}
!220 = !{!"0xdc1be40.w1.b0", !221, i64 0}
!221 = !{!"0xdc1be40.w2.b0", !222, i64 0}
!222 = !{!"0xdc1be40.w4.b0", !223, i64 0}
!223 = !{!"0xdc1be40.w8.b0", !224, i64 0}
!224 = !{!"0xdc1be40.w16.b0", !225, i64 0}
!225 = !{!"0xdc1be40.w32.b0", !226, i64 0}
!226 = !{!"0xdc1be40.w64.b0", !227, i64 0}
!227 = !{!"0xdc1be40.w128.b0", !228, i64 0}
!228 = !{!"0xdc1be40.w256.b0", !229, i64 0}
!229 = !{!"0xdc1be40.w512.b0", !230, i64 0}
!230 = !{!"0xdc1be40.w1024.b0", !231, i64 0}
!231 = !{!"float32", !232, i64 0}
!232 = !{!"0xdc1be40", !9, i64 0}
!233 = !{!234, !234, i64 0}
!234 = !{!"float32", !235, i64 0}
!235 = !{!"0xdc1c3f0", !9, i64 0}
!236 = !{!237, !237, i64 0}
!237 = !{!"float32", !238, i64 0}
!238 = !{!"0xdc1c430", !9, i64 0}
!239 = distinct !{!239, !36}
!240 = !{!241, !241, i64 0}
!241 = !{!"float32", !242, i64 0}
!242 = !{!"0x3949910", !9, i64 0}
!243 = !{!244, !244, i64 0}
!244 = !{!"float32", !245, i64 0}
!245 = !{!"0x38f28b0", !9, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"float32", !248, i64 0}
!248 = !{!"0x3949950", !9, i64 0}
!249 = distinct !{!249, !36}
!250 = !{!251, !251, i64 0}
!251 = !{!"float32", !252, i64 0}
!252 = !{!"0xf2e5ea0", !9, i64 0}
!253 = !{!254, !254, i64 0}
!254 = !{!"float32", !255, i64 0}
!255 = !{!"0x39705e0", !9, i64 0}
!256 = !{!257, !257, i64 0}
!257 = !{!"float32", !258, i64 0}
!258 = !{!"0xc3295e0", !9, i64 0}
!259 = !{!260, !260, i64 0}
!260 = !{!"float32", !261, i64 0}
!261 = !{!"0x1160b4a0", !9, i64 0}
!262 = !{!263, !263, i64 0}
!263 = !{!"float32", !264, i64 0}
!264 = !{!"0x5a274a0", !9, i64 0}
!265 = !{!266, !266, i64 0}
!266 = !{!"0x397fe90.w1.b0", !267, i64 0}
!267 = !{!"0x397fe90.w2.b0", !268, i64 0}
!268 = !{!"0x397fe90.w4.b0", !269, i64 0}
!269 = !{!"0x397fe90.w8.b0", !270, i64 0}
!270 = !{!"0x397fe90.w16.b0", !271, i64 0}
!271 = !{!"0x397fe90.w32.b0", !272, i64 0}
!272 = !{!"0x397fe90.w64.b0", !273, i64 0}
!273 = !{!"0x397fe90.w128.b0", !274, i64 0}
!274 = !{!"0x397fe90.w256.b0", !275, i64 0}
!275 = !{!"0x397fe90.w512.b0", !276, i64 0}
!276 = !{!"0x397fe90.w1024.b0", !277, i64 0}
!277 = !{!"float32", !278, i64 0}
!278 = !{!"0x397fe90", !9, i64 0}
!279 = !{!280, !280, i64 0}
!280 = !{!"float32", !281, i64 0}
!281 = !{!"0xdaeb350", !9, i64 0}
!282 = !{!283, !283, i64 0}
!283 = !{!"float32", !284, i64 0}
!284 = !{!"0xdaeb3d0", !9, i64 0}
!285 = !{!286, !286, i64 0}
!286 = !{!"0xa908a90.w1.b0", !287, i64 0}
!287 = !{!"0xa908a90.w2.b0", !288, i64 0}
!288 = !{!"0xa908a90.w4.b0", !289, i64 0}
!289 = !{!"0xa908a90.w8.b0", !290, i64 0}
!290 = !{!"0xa908a90.w16.b0", !291, i64 0}
!291 = !{!"0xa908a90.w32.b0", !292, i64 0}
!292 = !{!"0xa908a90.w64.b0", !293, i64 0}
!293 = !{!"0xa908a90.w128.b0", !294, i64 0}
!294 = !{!"0xa908a90.w256.b0", !295, i64 0}
!295 = !{!"0xa908a90.w512.b0", !296, i64 0}
!296 = !{!"0xa908a90.w1024.b0", !297, i64 0}
!297 = !{!"float32", !298, i64 0}
!298 = !{!"0xa908a90", !9, i64 0}
!299 = !{!300, !300, i64 0}
!300 = !{!"float32", !301, i64 0}
!301 = !{!"0x4277960", !9, i64 0}
!302 = !{!303, !303, i64 0}
!303 = !{!"float32", !304, i64 0}
!304 = !{!"0x42779a0", !9, i64 0}
!305 = distinct !{!305, !36}
!306 = !{!307, !307, i64 0}
!307 = !{!"float32", !308, i64 0}
!308 = !{!"0xf2697b0", !9, i64 0}
!309 = !{!310, !310, i64 0}
!310 = !{!"float32", !311, i64 0}
!311 = !{!"0xb1ae940", !9, i64 0}
!312 = !{!313, !313, i64 0}
!313 = !{!"float32", !314, i64 0}
!314 = !{!"0x3909700", !9, i64 0}
!315 = !{!316, !316, i64 0}
!316 = !{!"float32", !317, i64 0}
!317 = !{!"0x49d34a0", !9, i64 0}
!318 = !{!319, !319, i64 0}
!319 = !{!"float32", !320, i64 0}
!320 = !{!"0xc34a310", !9, i64 0}
!321 = !{!322, !322, i64 0}
!322 = !{!"float32", !323, i64 0}
!323 = !{!"0xf2806b0", !9, i64 0}
!324 = !{!325, !325, i64 0}
!325 = !{!"float32", !326, i64 0}
!326 = !{!"0x3c93dd0", !9, i64 0}
!327 = !{!328, !328, i64 0}
!328 = !{!"float32", !329, i64 0}
!329 = !{!"0xda46740", !9, i64 0}
!330 = !{!331, !331, i64 0}
!331 = !{!"float32", !332, i64 0}
!332 = !{!"0x5a4f2d0", !9, i64 0}
!333 = !{!334, !334, i64 0}
!334 = !{!"float32", !335, i64 0}
!335 = !{!"0xd4bcc70", !9, i64 0}
!336 = !{!337, !337, i64 0}
!337 = !{!"float32", !338, i64 0}
!338 = !{!"0xc3542a0", !9, i64 0}
!339 = !{!340, !340, i64 0}
!340 = !{!"float32", !341, i64 0}
!341 = !{!"0xf3b3f20", !9, i64 0}
!342 = !{!343, !343, i64 0}
!343 = !{!"float32", !344, i64 0}
!344 = !{!"0xf339a00", !9, i64 0}
!345 = !{!346, !346, i64 0}
!346 = !{!"float32", !347, i64 0}
!347 = !{!"0xcbdd790", !9, i64 0}
!348 = !{!349, !349, i64 0}
!349 = !{!"float32", !350, i64 0}
!350 = !{!"0xdb4b110", !9, i64 0}
!351 = !{!352, !352, i64 0}
!352 = !{!"float32", !353, i64 0}
!353 = !{!"0x42d4a30", !9, i64 0}
!354 = !{!355, !355, i64 0}
!355 = !{!"float32", !356, i64 0}
!356 = !{!"0x3b889c0", !9, i64 0}
!357 = !{!358, !358, i64 0}
!358 = !{!"float32", !359, i64 0}
!359 = !{!"0xf284bf0", !9, i64 0}
!360 = !{!361, !361, i64 0}
!361 = !{!"float32", !362, i64 0}
!362 = !{!"0xd497680", !9, i64 0}
!363 = !{!364, !364, i64 0}
!364 = !{!"float32", !365, i64 0}
!365 = !{!"0x3934190", !9, i64 0}
!366 = !{!367, !367, i64 0}
!367 = !{!"float32", !368, i64 0}
!368 = !{!"0x3ab7ca0", !9, i64 0}
!369 = !{!370, !370, i64 0}
!370 = !{!"0x3934190.w32.b0", !371, i64 0}
!371 = !{!"0x3934190.w64.b0", !372, i64 0}
!372 = !{!"0x3934190.w128.b0", !373, i64 0}
!373 = !{!"0x3934190.w256.b0", !374, i64 0}
!374 = !{!"0x3934190.w512.b0", !375, i64 0}
!375 = !{!"0x3934190.w1024.b0", !364, i64 0}
!376 = !{!377, !377, i64 0}
!377 = !{!"float32", !378, i64 0}
!378 = !{!"0xf318b70", !9, i64 0}
!379 = !{!380, !380, i64 0}
!380 = !{!"float32", !381, i64 0}
!381 = !{!"0xf2bab20", !9, i64 0}
!382 = !{!383, !383, i64 0}
!383 = !{!"float32", !384, i64 0}
!384 = !{!"0x3968ea0", !9, i64 0}
!385 = !{!386, !386, i64 0}
!386 = !{!"float32", !387, i64 0}
!387 = !{!"0xe9bcc50", !9, i64 0}
!388 = !{!389, !389, i64 0}
!389 = !{!"float32", !390, i64 0}
!390 = !{!"0xc354150", !9, i64 0}
!391 = !{!392, !392, i64 0}
!392 = !{!"float32", !393, i64 0}
!393 = !{!"0xcbeef00", !9, i64 0}
!394 = !{!395, !395, i64 0}
!395 = !{!"0xc354150.w16.b0", !396, i64 0}
!396 = !{!"0xc354150.w32.b0", !397, i64 0}
!397 = !{!"0xc354150.w64.b0", !398, i64 0}
!398 = !{!"0xc354150.w128.b0", !399, i64 0}
!399 = !{!"0xc354150.w256.b0", !400, i64 0}
!400 = !{!"0xc354150.w512.b0", !401, i64 0}
!401 = !{!"0xc354150.w1024.b0", !389, i64 0}
!402 = !{!403, !403, i64 0}
!403 = !{!"float32", !404, i64 0}
!404 = !{!"0xf263d70", !9, i64 0}
!405 = !{!406, !406, i64 0}
!406 = !{!"float32", !407, i64 0}
!407 = !{!"0x1163e720", !9, i64 0}
!408 = !{!409, !409, i64 0}
!409 = !{!"float32", !410, i64 0}
!410 = !{!"0x3c1ab00", !9, i64 0}
!411 = !{!412, !412, i64 0}
!412 = !{!"float32", !413, i64 0}
!413 = !{!"0xdb09a90", !9, i64 0}
!414 = !{!415, !415, i64 0}
!415 = !{!"float32", !416, i64 0}
!416 = !{!"0xdaf4cf0", !9, i64 0}
!417 = !{!418, !418, i64 0}
!418 = !{!"float32", !419, i64 0}
!419 = !{!"0x3c2d3c0", !9, i64 0}
!420 = !{!421, !421, i64 0}
!421 = !{!"float32", !422, i64 0}
!422 = !{!"0x116238e0", !9, i64 0}
!423 = !{!424, !424, i64 0}
!424 = !{!"float32", !425, i64 0}
!425 = !{!"0x3c0ed90", !9, i64 0}
!426 = !{!427, !427, i64 0}
!427 = !{!"float32", !428, i64 0}
!428 = !{!"0x42e9b90", !9, i64 0}
!429 = !{!430, !430, i64 0}
!430 = !{!"float32", !431, i64 0}
!431 = !{!"0xda1fe90", !9, i64 0}
!432 = !{!433, !433, i64 0}
!433 = !{!"float32", !434, i64 0}
!434 = !{!"0xf2ab890", !9, i64 0}
!435 = !{!436, !436, i64 0}
!436 = !{!"float32", !437, i64 0}
!437 = !{!"0xb1c2e60", !9, i64 0}
!438 = !{!439, !439, i64 0}
!439 = !{!"float32", !440, i64 0}
!440 = !{!"0xcbe0960", !9, i64 0}
!441 = !{!442, !442, i64 0}
!442 = !{!"float32", !443, i64 0}
!443 = !{!"0x397e920", !9, i64 0}
!444 = !{!445, !445, i64 0}
!445 = !{!"float32", !446, i64 0}
!446 = !{!"0x4258c80", !9, i64 0}
!447 = !{!448, !448, i64 0}
!448 = !{!"float32", !449, i64 0}
!449 = !{!"0xf27b140", !9, i64 0}
!450 = !{!451, !451, i64 0}
!451 = !{!"float32", !452, i64 0}
!452 = !{!"0x51577c0", !9, i64 0}
!453 = !{!454, !454, i64 0}
!454 = !{!"float32", !455, i64 0}
!455 = !{!"0xf2bda40", !9, i64 0}
!456 = !{!457, !457, i64 0}
!457 = !{!"float32", !458, i64 0}
!458 = !{!"0x5157780", !9, i64 0}
!459 = !{!460, !460, i64 0}
!460 = !{!"float32", !461, i64 0}
!461 = !{!"0xf303a50", !9, i64 0}
!462 = !{!463, !463, i64 0}
!463 = !{!"float32", !464, i64 0}
!464 = !{!"0x11634580", !9, i64 0}
!465 = !{!466, !466, i64 0}
!466 = !{!"float32", !467, i64 0}
!467 = !{!"0xf303a10", !9, i64 0}
!468 = !{!469, !469, i64 0}
!469 = !{!"float32", !470, i64 0}
!470 = !{!"0xb1c7f80", !9, i64 0}
!471 = !{!472, !472, i64 0}
!472 = !{!"float32", !473, i64 0}
!473 = !{!"0xcbd78d0", !9, i64 0}
!474 = !{!475, !475, i64 0}
!475 = !{!"float32", !476, i64 0}
!476 = !{!"0xb199240", !9, i64 0}
!477 = !{!478, !478, i64 0}
!478 = !{!"float32", !479, i64 0}
!479 = !{!"0x4654950", !9, i64 0}
!480 = !{!481, !481, i64 0}
!481 = !{!"float32", !482, i64 0}
!482 = !{!"0x42b14c0", !9, i64 0}
!483 = !{!484, !484, i64 0}
!484 = !{!"float32", !485, i64 0}
!485 = !{!"0xa8edad0", !9, i64 0}
!486 = !{!487, !487, i64 0}
!487 = !{!"float32", !488, i64 0}
!488 = !{!"0x5163f30", !9, i64 0}
!489 = !{!490, !490, i64 0}
!490 = !{!"float32", !491, i64 0}
!491 = !{!"0xc327470", !9, i64 0}
!492 = !{!493, !493, i64 0}
!493 = !{!"float32", !494, i64 0}
!494 = !{!"0x51834d0", !9, i64 0}
!495 = !{!496, !496, i64 0}
!496 = !{!"float32", !497, i64 0}
!497 = !{!"0xf2453e0", !9, i64 0}
!498 = !{!499, !499, i64 0}
!499 = !{!"float32", !500, i64 0}
!500 = !{!"0xf2c6ac0", !9, i64 0}
!501 = !{!502, !502, i64 0}
!502 = !{!"float32", !503, i64 0}
!503 = !{!"0xdb02020", !9, i64 0}
!504 = !{!505, !505, i64 0}
!505 = !{!"float32", !506, i64 0}
!506 = !{!"0xda966f0", !9, i64 0}
!507 = !{!508, !508, i64 0}
!508 = !{!"float32", !509, i64 0}
!509 = !{!"0x3c3e9f0", !9, i64 0}
!510 = !{!511, !511, i64 0}
!511 = !{!"0x3ae4f90.w32.b0", !512, i64 0}
!512 = !{!"0x3ae4f90.w64.b0", !513, i64 0}
!513 = !{!"0x3ae4f90.w128.b0", !514, i64 0}
!514 = !{!"0x3ae4f90.w256.b0", !515, i64 0}
!515 = !{!"0x3ae4f90.w512.b0", !516, i64 0}
!516 = !{!"0x3ae4f90.w1024.b0", !517, i64 0}
!517 = !{!"float32", !518, i64 0}
!518 = !{!"0x3ae4f90", !9, i64 0}
!519 = !{!520, !520, i64 0}
!520 = !{!"float32", !521, i64 0}
!521 = !{!"0xcbddc00", !9, i64 0}
!522 = !{!523, !523, i64 0}
!523 = !{!"float32", !524, i64 0}
!524 = !{!"0x7d4dd10", !9, i64 0}
!525 = !{!526, !526, i64 0}
!526 = !{!"float32", !527, i64 0}
!527 = !{!"0x115eb750", !9, i64 0}
!528 = !{!529, !529, i64 0}
!529 = !{!"float32", !530, i64 0}
!530 = !{!"0x3514d90", !9, i64 0}
!531 = distinct !{!531, !36}
!532 = !{!533, !533, i64 0}
!533 = !{!"float32", !534, i64 0}
!534 = !{!"0xf3bb180", !9, i64 0}
!535 = !{!536, !536, i64 0}
!536 = !{!"float32", !537, i64 0}
!537 = !{!"0xf2d84e0", !9, i64 0}
!538 = !{!539, !539, i64 0}
!539 = !{!"float32", !540, i64 0}
!540 = !{!"0xf1f4a30", !9, i64 0}
!541 = !{!542, !542, i64 0}
!542 = !{!"float32", !543, i64 0}
!543 = !{!"0x3751b80", !9, i64 0}
!544 = !{!545, !545, i64 0}
!545 = !{!"float32", !546, i64 0}
!546 = !{!"0x8eaf740", !9, i64 0}
!547 = distinct !{!547, !36}
!548 = !{!549, !549, i64 0}
!549 = !{!"float32", !550, i64 0}
!550 = !{!"0xba65290", !9, i64 0}
!551 = !{!552, !552, i64 0}
!552 = !{!"float32", !553, i64 0}
!553 = !{!"0x31434a0", !9, i64 0}
!554 = !{!555, !555, i64 0}
!555 = !{!"float32", !556, i64 0}
!556 = !{!"0xf2df630", !9, i64 0}
!557 = !{!558, !558, i64 0}
!558 = !{!"float32", !559, i64 0}
!559 = !{!"0x3b9f330", !9, i64 0}
!560 = !{!561, !561, i64 0}
!561 = !{!"float32", !562, i64 0}
!562 = !{!"0xf3a7a10", !9, i64 0}
!563 = !{!564, !564, i64 0}
!564 = !{!"float32", !565, i64 0}
!565 = !{!"0xf287af0", !9, i64 0}
!566 = !{!567, !567, i64 0}
!567 = !{!"float32", !568, i64 0}
!568 = !{!"0x51824d0", !9, i64 0}
!569 = !{!570, !570, i64 0}
!570 = !{!"float32", !571, i64 0}
!571 = !{!"0x115e39b0", !9, i64 0}
!572 = !{!573, !573, i64 0}
!573 = !{!"float32", !574, i64 0}
!574 = !{!"0x3ad2e90", !9, i64 0}
!575 = !{!576, !576, i64 0}
!576 = !{!"float32", !577, i64 0}
!577 = !{!"0xcc15610", !9, i64 0}
!578 = !{!579, !579, i64 0}
!579 = !{!"float32", !580, i64 0}
!580 = !{!"0xf223c10", !9, i64 0}
!581 = !{!582, !582, i64 0}
!582 = !{!"float32", !583, i64 0}
!583 = !{!"0xcc15650", !9, i64 0}
!584 = distinct !{!584, !36}
!585 = !{!586, !586, i64 0}
!586 = !{!"float32", !587, i64 0}
!587 = !{!"0x8ea2a90", !9, i64 0}
!588 = !{!589, !589, i64 0}
!589 = !{!"float32", !590, i64 0}
!590 = !{!"0x8e98770", !9, i64 0}
!591 = !{!592, !592, i64 0}
!592 = !{!"float32", !593, i64 0}
!593 = !{!"0x517c660", !9, i64 0}
!594 = !{!595, !595, i64 0}
!595 = !{!"float32", !596, i64 0}
!596 = !{!"0xdab58e0", !9, i64 0}
!597 = !{!598, !598, i64 0}
!598 = !{!"float32", !599, i64 0}
!599 = !{!"0x6bb8fb0", !9, i64 0}
!600 = !{!601, !601, i64 0}
!601 = !{!"0xdab58e0.w32.b0", !602, i64 0}
!602 = !{!"0xdab58e0.w64.b0", !603, i64 0}
!603 = !{!"0xdab58e0.w128.b0", !604, i64 0}
!604 = !{!"0xdab58e0.w256.b0", !605, i64 0}
!605 = !{!"0xdab58e0.w512.b0", !606, i64 0}
!606 = !{!"0xdab58e0.w1024.b0", !595, i64 0}
!607 = !{!608, !608, i64 0}
!608 = !{!"float32", !609, i64 0}
!609 = !{!"0x3ec9230", !9, i64 0}
!610 = !{!611, !611, i64 0}
!611 = !{!"float32", !612, i64 0}
!612 = !{!"0xdb02e00", !9, i64 0}
!613 = !{!614, !614, i64 0}
!614 = !{!"float32", !615, i64 0}
!615 = !{!"0x115f9300", !9, i64 0}
!616 = !{!617, !617, i64 0}
!617 = !{!"float32", !618, i64 0}
!618 = !{!"0xf1f0420", !9, i64 0}
!619 = !{!620, !620, i64 0}
!620 = !{!"float32", !621, i64 0}
!621 = !{!"0xf2dd680", !9, i64 0}
!622 = !{!623, !623, i64 0}
!623 = !{!"0x11862f00.w1.b0", !624, i64 0}
!624 = !{!"0x11862f00.w2.b0", !625, i64 0}
!625 = !{!"0x11862f00.w4.b0", !626, i64 0}
!626 = !{!"0x11862f00.w8.b0", !627, i64 0}
!627 = !{!"0x11862f00.w16.b0", !628, i64 0}
!628 = !{!"0x11862f00.w32.b0", !629, i64 0}
!629 = !{!"0x11862f00.w64.b0", !630, i64 0}
!630 = !{!"0x11862f00.w128.b0", !631, i64 0}
!631 = !{!"0x11862f00.w256.b0", !632, i64 0}
!632 = !{!"0x11862f00.w512.b0", !633, i64 0}
!633 = !{!"0x11862f00.w1024.b0", !634, i64 0}
!634 = !{!"float32", !635, i64 0}
!635 = !{!"0x11862f00", !9, i64 0}
!636 = !{!637, !637, i64 0}
!637 = !{!"float32", !638, i64 0}
!638 = !{!"0x2fc1410", !9, i64 0}
!639 = !{!640, !640, i64 0}
!640 = !{!"float32", !641, i64 0}
!641 = !{!"0x4295380", !9, i64 0}
!642 = distinct !{!642, !36}
!643 = !{!644, !644, i64 0}
!644 = !{!"float32", !645, i64 0}
!645 = !{!"0x11635690", !9, i64 0}
!646 = !{!647, !647, i64 0}
!647 = !{!"float32", !648, i64 0}
!648 = !{!"0xdbc3930", !9, i64 0}
!649 = !{!650, !650, i64 0}
!650 = !{!"float32", !651, i64 0}
!651 = !{!"0x3eeafd0", !9, i64 0}
!652 = !{!653, !653, i64 0}
!653 = !{!"float32", !654, i64 0}
!654 = !{!"0x499d880", !9, i64 0}
!655 = !{!656, !656, i64 0}
!656 = !{!"float32", !657, i64 0}
!657 = !{!"0x3e9e480", !9, i64 0}
!658 = !{!659, !659, i64 0}
!659 = !{!"float32", !660, i64 0}
!660 = !{!"0x38b54b0", !9, i64 0}
!661 = !{!662, !662, i64 0}
!662 = !{!"float32", !663, i64 0}
!663 = !{!"0x4345ce0", !9, i64 0}
!664 = !{!665, !665, i64 0}
!665 = !{!"float32", !666, i64 0}
!666 = !{!"0xa8fee60", !9, i64 0}
!667 = !{!668, !668, i64 0}
!668 = !{!"float32", !669, i64 0}
!669 = !{!"0xf291460", !9, i64 0}
!670 = !{!671, !671, i64 0}
!671 = !{!"float32", !672, i64 0}
!672 = !{!"0xf3a7390", !9, i64 0}
!673 = !{!674, !674, i64 0}
!674 = !{!"float32", !675, i64 0}
!675 = !{!"0xf1f1950", !9, i64 0}
!676 = !{!677, !677, i64 0}
!677 = !{!"float32", !678, i64 0}
!678 = !{!"0xcbf5870", !9, i64 0}
!679 = !{!680, !680, i64 0}
!680 = !{!"float32", !681, i64 0}
!681 = !{!"0xf2914a0", !9, i64 0}
!682 = !{!683, !683, i64 0}
!683 = !{!"float32", !684, i64 0}
!684 = !{!"0x431c270", !9, i64 0}
!685 = !{!686, !686, i64 0}
!686 = !{!"float32", !687, i64 0}
!687 = !{!"0xf389870", !9, i64 0}
!688 = !{!689, !689, i64 0}
!689 = !{!"float32", !690, i64 0}
!690 = !{!"0x2f58f80", !9, i64 0}
!691 = !{!692, !692, i64 0}
!692 = !{!"float32", !693, i64 0}
!693 = !{!"0xdaf1570", !9, i64 0}
!694 = !{!695, !695, i64 0}
!695 = !{!"float32", !696, i64 0}
!696 = !{!"0xdaf15b0", !9, i64 0}
!697 = !{!698, !698, i64 0}
!698 = !{!"float32", !699, i64 0}
!699 = !{!"0x4334150", !9, i64 0}
!700 = !{!701, !701, i64 0}
!701 = !{!"float32", !702, i64 0}
!702 = !{!"0x3b08560", !9, i64 0}
!703 = !{!704, !704, i64 0}
!704 = !{!"float32", !705, i64 0}
!705 = !{!"0xdb386c0", !9, i64 0}
!706 = !{!707, !707, i64 0}
!707 = !{!"float32", !708, i64 0}
!708 = !{!"0xb1aec30", !9, i64 0}
!709 = !{!710, !710, i64 0}
!710 = !{!"float32", !711, i64 0}
!711 = !{!"0x3ab3860", !9, i64 0}
!712 = !{!713, !713, i64 0}
!713 = !{!"float32", !714, i64 0}
!714 = !{!"0xf316460", !9, i64 0}
!715 = !{!716, !716, i64 0}
!716 = !{!"float32", !717, i64 0}
!717 = !{!"0x3193230", !9, i64 0}
!718 = !{!719, !719, i64 0}
!719 = !{!"0x115e63a0.w32.b0", !720, i64 0}
!720 = !{!"0x115e63a0.w64.b0", !721, i64 0}
!721 = !{!"0x115e63a0.w128.b0", !722, i64 0}
!722 = !{!"0x115e63a0.w256.b0", !723, i64 0}
!723 = !{!"0x115e63a0.w512.b0", !724, i64 0}
!724 = !{!"0x115e63a0.w1024.b0", !725, i64 0}
!725 = !{!"float32", !726, i64 0}
!726 = !{!"0x115e63a0", !9, i64 0}
!727 = !{!728, !728, i64 0}
!728 = !{!"float32", !729, i64 0}
!729 = !{!"0xf33cd20", !9, i64 0}
!730 = !{!731, !731, i64 0}
!731 = !{!"float32", !732, i64 0}
!732 = !{!"0xf33cd60", !9, i64 0}
!733 = !{!734, !734, i64 0}
!734 = !{!"0xf21ba40.w1.b0", !735, i64 0}
!735 = !{!"0xf21ba40.w2.b0", !736, i64 0}
!736 = !{!"0xf21ba40.w4.b0", !737, i64 0}
!737 = !{!"0xf21ba40.w8.b0", !738, i64 0}
!738 = !{!"0xf21ba40.w16.b0", !739, i64 0}
!739 = !{!"0xf21ba40.w32.b0", !740, i64 0}
!740 = !{!"0xf21ba40.w64.b0", !741, i64 0}
!741 = !{!"0xf21ba40.w128.b0", !742, i64 0}
!742 = !{!"0xf21ba40.w256.b0", !743, i64 0}
!743 = !{!"0xf21ba40.w512.b0", !744, i64 0}
!744 = !{!"0xf21ba40.w1024.b0", !745, i64 0}
!745 = !{!"float32", !746, i64 0}
!746 = !{!"0xf21ba40", !9, i64 0}
!747 = !{!748, !748, i64 0}
!748 = !{!"float32", !749, i64 0}
!749 = !{!"0xf31acb0", !9, i64 0}
!750 = !{!751, !751, i64 0}
!751 = !{!"float32", !752, i64 0}
!752 = !{!"0xf21ba80", !9, i64 0}
!753 = distinct !{!753, !36}
!754 = !{!755, !755, i64 0}
!755 = !{!"float32", !756, i64 0}
!756 = !{!"0x4333aa0", !9, i64 0}
!757 = !{!758, !758, i64 0}
!758 = !{!"float32", !759, i64 0}
!759 = !{!"0x307ec70", !9, i64 0}
!760 = !{!761, !761, i64 0}
!761 = !{!"float32", !762, i64 0}
!762 = !{!"0x116aadd0", !9, i64 0}
!763 = !{!764, !764, i64 0}
!764 = !{!"float32", !765, i64 0}
!765 = !{!"0x8614ff0", !9, i64 0}
!766 = !{!767, !767, i64 0}
!767 = !{!"float32", !768, i64 0}
!768 = !{!"0x8e9d3e0", !9, i64 0}
!769 = !{!770, !770, i64 0}
!770 = !{!"0xf1e3ed0.w32.b0", !771, i64 0}
!771 = !{!"0xf1e3ed0.w64.b0", !772, i64 0}
!772 = !{!"0xf1e3ed0.w128.b0", !773, i64 0}
!773 = !{!"0xf1e3ed0.w256.b0", !774, i64 0}
!774 = !{!"0xf1e3ed0.w512.b0", !775, i64 0}
!775 = !{!"0xf1e3ed0.w1024.b0", !776, i64 0}
!776 = !{!"float32", !777, i64 0}
!777 = !{!"0xf1e3ed0", !9, i64 0}
!778 = !{!779, !779, i64 0}
!779 = !{!"float32", !780, i64 0}
!780 = !{!"0x8e9aa90", !9, i64 0}
!781 = !{!776, !776, i64 0}
!782 = !{!783, !783, i64 0}
!783 = !{!"float32", !784, i64 0}
!784 = !{!"0x42d79c0", !9, i64 0}
!785 = !{!786, !786, i64 0}
!786 = !{!"float32", !787, i64 0}
!787 = !{!"0x43361f0", !9, i64 0}
!788 = !{!789, !789, i64 0}
!789 = !{!"float32", !790, i64 0}
!790 = !{!"0x38c71a0", !9, i64 0}
!791 = !{!792, !792, i64 0}
!792 = !{!"float32", !793, i64 0}
!793 = !{!"0x4336230", !9, i64 0}
!794 = !{!795, !795, i64 0}
!795 = !{!"float32", !796, i64 0}
!796 = !{!"0x3b9e400", !9, i64 0}
!797 = !{!798, !798, i64 0}
!798 = !{!"float32", !799, i64 0}
!799 = !{!"0xdbbfff0", !9, i64 0}
!800 = !{!801, !801, i64 0}
!801 = !{!"float32", !802, i64 0}
!802 = !{!"0x5a1d560", !9, i64 0}
!803 = !{!804, !804, i64 0}
!804 = !{!"float32", !805, i64 0}
!805 = !{!"0x3163fe0", !9, i64 0}
!806 = !{!807, !807, i64 0}
!807 = !{!"float32", !808, i64 0}
!808 = !{!"0x3153cb0", !9, i64 0}
!809 = !{!810, !810, i64 0}
!810 = !{!"float32", !811, i64 0}
!811 = !{!"0x3acc390", !9, i64 0}
!812 = !{!813, !813, i64 0}
!813 = !{!"float32", !814, i64 0}
!814 = !{!"0xd49d430", !9, i64 0}
!815 = !{!816, !816, i64 0}
!816 = !{!"float32", !817, i64 0}
!817 = !{!"0xda60c50", !9, i64 0}
!818 = !{!819, !819, i64 0}
!819 = !{!"float32", !820, i64 0}
!820 = !{!"0x3c30ce0", !9, i64 0}
!821 = !{!822, !822, i64 0}
!822 = !{!"float32", !823, i64 0}
!823 = !{!"0x434ab80", !9, i64 0}
!824 = !{!825, !825, i64 0}
!825 = !{!"float32", !826, i64 0}
!826 = !{!"0xcbe2690", !9, i64 0}
!827 = !{!828, !828, i64 0}
!828 = !{!"0xb1a50a0.w32.b0", !829, i64 0}
!829 = !{!"0xb1a50a0.w64.b0", !830, i64 0}
!830 = !{!"0xb1a50a0.w128.b0", !831, i64 0}
!831 = !{!"0xb1a50a0.w256.b0", !832, i64 0}
!832 = !{!"0xb1a50a0.w512.b0", !833, i64 0}
!833 = !{!"0xb1a50a0.w1024.b0", !834, i64 0}
!834 = !{!"float32", !835, i64 0}
!835 = !{!"0xb1a50a0", !9, i64 0}
!836 = !{!837, !837, i64 0}
!837 = !{!"float32", !838, i64 0}
!838 = !{!"0x3ab7680", !9, i64 0}
!839 = !{!834, !834, i64 0}
!840 = !{!841, !841, i64 0}
!841 = !{!"float32", !842, i64 0}
!842 = !{!"0x6bccdf0", !9, i64 0}
!843 = !{!844, !844, i64 0}
!844 = !{!"float32", !845, i64 0}
!845 = !{!"0x42dcf80", !9, i64 0}
!846 = !{!847, !847, i64 0}
!847 = !{!"float32", !848, i64 0}
!848 = !{!"0x3ef8730", !9, i64 0}
!849 = !{!850, !850, i64 0}
!850 = !{!"float32", !851, i64 0}
!851 = !{!"0xf312f90", !9, i64 0}
!852 = !{!853, !853, i64 0}
!853 = !{!"float32", !854, i64 0}
!854 = !{!"0x429a5f0", !9, i64 0}
!855 = !{!856, !856, i64 0}
!856 = !{!"float32", !857, i64 0}
!857 = !{!"0xf281660", !9, i64 0}
!858 = !{!859, !859, i64 0}
!859 = !{!"float32", !860, i64 0}
!860 = !{!"0x3c1f610", !9, i64 0}
!861 = !{!862, !862, i64 0}
!862 = !{!"float32", !863, i64 0}
!863 = !{!"0xdb2b610", !9, i64 0}
!864 = !{!865, !865, i64 0}
!865 = !{!"float32", !866, i64 0}
!866 = !{!"0xdb5c370", !9, i64 0}
!867 = !{!868, !868, i64 0}
!868 = !{!"float32", !869, i64 0}
!869 = !{!"0xf1f9820", !9, i64 0}
!870 = !{!871, !871, i64 0}
!871 = !{!"float32", !872, i64 0}
!872 = !{!"0x42f3b80", !9, i64 0}
!873 = !{!874, !874, i64 0}
!874 = !{!"float32", !875, i64 0}
!875 = !{!"0x42d06b0", !9, i64 0}
!876 = !{!877, !877, i64 0}
!877 = !{!"float32", !878, i64 0}
!878 = !{!"0xb1b0490", !9, i64 0}
!879 = !{!880, !880, i64 0}
!880 = !{!"float32", !881, i64 0}
!881 = !{!"0x977dc90", !9, i64 0}
!882 = !{!883, !883, i64 0}
!883 = !{!"float32", !884, i64 0}
!884 = !{!"0x318d870", !9, i64 0}
!885 = !{!886, !886, i64 0}
!886 = !{!"float32", !887, i64 0}
!887 = !{!"0x312ced0", !9, i64 0}
!888 = !{!889, !889, i64 0}
!889 = !{!"float32", !890, i64 0}
!890 = !{!"0x42b1d20", !9, i64 0}
!891 = !{!892, !892, i64 0}
!892 = !{!"float32", !893, i64 0}
!893 = !{!"0x5a39e10", !9, i64 0}
!894 = !{!895, !895, i64 0}
!895 = !{!"float32", !896, i64 0}
!896 = !{!"0x42a9160", !9, i64 0}
!897 = !{!898, !898, i64 0}
!898 = !{!"float32", !899, i64 0}
!899 = !{!"0xf321430", !9, i64 0}
!900 = !{!901, !901, i64 0}
!901 = !{!"float32", !902, i64 0}
!902 = !{!"0xc33fa50", !9, i64 0}
!903 = !{!904, !904, i64 0}
!904 = !{!"float32", !905, i64 0}
!905 = !{!"0x3c5fec0", !9, i64 0}
!906 = !{!907, !907, i64 0}
!907 = !{!"float32", !908, i64 0}
!908 = !{!"0x3c5de80", !9, i64 0}
!909 = !{!910, !910, i64 0}
!910 = !{!"float32", !911, i64 0}
!911 = !{!"0xdb03f50", !9, i64 0}
!912 = !{!913, !913, i64 0}
!913 = !{!"float32", !914, i64 0}
!914 = !{!"0x42e7d50", !9, i64 0}
!915 = !{!916, !916, i64 0}
!916 = !{!"float32", !917, i64 0}
!917 = !{!"0x3a99560", !9, i64 0}
!918 = !{!919, !919, i64 0}
!919 = !{!"float32", !920, i64 0}
!920 = !{!"0xf364090", !9, i64 0}
!921 = !{!922, !922, i64 0}
!922 = !{!"float32", !923, i64 0}
!923 = !{!"0xf30de40", !9, i64 0}
!924 = !{!925, !925, i64 0}
!925 = !{!"float32", !926, i64 0}
!926 = !{!"0x3eeaa50", !9, i64 0}
!927 = !{!928, !928, i64 0}
!928 = !{!"float32", !929, i64 0}
!929 = !{!"0xd4b6460", !9, i64 0}
!930 = !{!931, !931, i64 0}
!931 = !{!"0xf367c70.w1.b0", !932, i64 0}
!932 = !{!"0xf367c70.w2.b0", !933, i64 0}
!933 = !{!"0xf367c70.w4.b0", !934, i64 0}
!934 = !{!"0xf367c70.w8.b0", !935, i64 0}
!935 = !{!"0xf367c70.w16.b0", !936, i64 0}
!936 = !{!"0xf367c70.w32.b0", !937, i64 0}
!937 = !{!"0xf367c70.w64.b0", !938, i64 0}
!938 = !{!"0xf367c70.w128.b0", !939, i64 0}
!939 = !{!"0xf367c70.w256.b0", !940, i64 0}
!940 = !{!"0xf367c70.w512.b0", !941, i64 0}
!941 = !{!"0xf367c70.w1024.b0", !942, i64 0}
!942 = !{!"float32", !943, i64 0}
!943 = !{!"0xf367c70", !9, i64 0}
!944 = !{!945, !945, i64 0}
!945 = !{!"float32", !946, i64 0}
!946 = !{!"0x3b5ae70", !9, i64 0}
!947 = !{!948, !948, i64 0}
!948 = !{!"float32", !949, i64 0}
!949 = !{!"0x3b5aeb0", !9, i64 0}
!950 = distinct !{!950, !36}
!951 = !{!952, !952, i64 0}
!952 = !{!"float32", !953, i64 0}
!953 = !{!"0xb19be30", !9, i64 0}
!954 = !{!955, !955, i64 0}
!955 = !{!"float32", !956, i64 0}
!956 = !{!"0x1163ea70", !9, i64 0}
!957 = !{!958, !958, i64 0}
!958 = !{!"float32", !959, i64 0}
!959 = !{!"0xf233e40", !9, i64 0}
!960 = !{!961, !961, i64 0}
!961 = !{!"float32", !962, i64 0}
!962 = !{!"0xf37aca0", !9, i64 0}
!963 = !{!964, !964, i64 0}
!964 = !{!"float32", !965, i64 0}
!965 = !{!"0x4326720", !9, i64 0}
!966 = !{!967, !967, i64 0}
!967 = !{!"float32", !968, i64 0}
!968 = !{!"0x38d3620", !9, i64 0}
!969 = !{!970, !970, i64 0}
!970 = !{!"float32", !971, i64 0}
!971 = !{!"0x3179680", !9, i64 0}
!972 = !{!973, !973, i64 0}
!973 = !{!"float32", !974, i64 0}
!974 = !{!"0xf27bef0", !9, i64 0}
!975 = !{!976, !976, i64 0}
!976 = !{!"float32", !977, i64 0}
!977 = !{!"0xda492f0", !9, i64 0}
!978 = !{!979, !979, i64 0}
!979 = !{!"float32", !980, i64 0}
!980 = !{!"0x3c5e060", !9, i64 0}
!981 = !{!982, !982, i64 0}
!982 = !{!"float32", !983, i64 0}
!983 = !{!"0xdac7940", !9, i64 0}
!984 = !{!985, !985, i64 0}
!985 = !{!"float32", !986, i64 0}
!986 = !{!"0x3c35db0", !9, i64 0}
!987 = !{!988, !988, i64 0}
!988 = !{!"float32", !989, i64 0}
!989 = !{!"0x3126b50", !9, i64 0}
!990 = !{!991, !991, i64 0}
!991 = !{!"float32", !992, i64 0}
!992 = !{!"0x62f11d0", !9, i64 0}
!993 = !{!994, !994, i64 0}
!994 = !{!"float32", !995, i64 0}
!995 = !{!"0xe9ce590", !9, i64 0}
!996 = !{!997, !997, i64 0}
!997 = !{!"float32", !998, i64 0}
!998 = !{!"0xf2fdef0", !9, i64 0}
!999 = !{!1000, !1000, i64 0}
!1000 = !{!"float32", !1001, i64 0}
!1001 = !{!"0xf2417d0", !9, i64 0}
!1002 = !{!1003, !1003, i64 0}
!1003 = !{!"float32", !1004, i64 0}
!1004 = !{!"0xf2e6cc0", !9, i64 0}
!1005 = !{!1006, !1006, i64 0}
!1006 = !{!"float32", !1007, i64 0}
!1007 = !{!"0x43246c0", !9, i64 0}
!1008 = !{!1009, !1009, i64 0}
!1009 = !{!"float32", !1010, i64 0}
!1010 = !{!"0xc327de0", !9, i64 0}
!1011 = !{!1012, !1012, i64 0}
!1012 = !{!"float32", !1013, i64 0}
!1013 = !{!"0x6bacc30", !9, i64 0}
!1014 = !{!1015, !1015, i64 0}
!1015 = !{!"float32", !1016, i64 0}
!1016 = !{!"0x101309d0", !9, i64 0}
!1017 = !{!1018, !1018, i64 0}
!1018 = !{!"float32", !1019, i64 0}
!1019 = !{!"0x10130b70", !9, i64 0}
!1020 = distinct !{!1020, !36}
!1021 = !{!1022, !1022, i64 0}
!1022 = !{!"float32", !1023, i64 0}
!1023 = !{!"0xe9a8d10", !9, i64 0}
!1024 = !{!1025, !1025, i64 0}
!1025 = !{!"float32", !1026, i64 0}
!1026 = !{!"0x4265560", !9, i64 0}
!1027 = !{!1028, !1028, i64 0}
!1028 = !{!"float32", !1029, i64 0}
!1029 = !{!"0x115d9700", !9, i64 0}
!1030 = !{!1031, !1031, i64 0}
!1031 = !{!"float32", !1032, i64 0}
!1032 = !{!"0xf351f40", !9, i64 0}
!1033 = !{!1034, !1034, i64 0}
!1034 = !{!"float32", !1035, i64 0}
!1035 = !{!"0x4265460", !9, i64 0}
!1036 = !{!1037, !1037, i64 0}
!1037 = !{!"float32", !1038, i64 0}
!1038 = !{!"0xf3022b0", !9, i64 0}
!1039 = !{!1040, !1040, i64 0}
!1040 = !{!"0x515db20.w32.b0", !1041, i64 0}
!1041 = !{!"0x515db20.w64.b0", !1042, i64 0}
!1042 = !{!"0x515db20.w128.b0", !1043, i64 0}
!1043 = !{!"0x515db20.w256.b0", !1044, i64 0}
!1044 = !{!"0x515db20.w512.b0", !1045, i64 0}
!1045 = !{!"0x515db20.w1024.b0", !1046, i64 0}
!1046 = !{!"float32", !1047, i64 0}
!1047 = !{!"0x515db20", !9, i64 0}
!1048 = !{!1049, !1049, i64 0}
!1049 = !{!"float32", !1050, i64 0}
!1050 = !{!"0xdbbcd80", !9, i64 0}
!1051 = !{!1052, !1052, i64 0}
!1052 = !{!"float32", !1053, i64 0}
!1053 = !{!"0x38f1db0", !9, i64 0}
!1054 = !{!1055, !1055, i64 0}
!1055 = !{!"float32", !1056, i64 0}
!1056 = !{!"0x427f940", !9, i64 0}
!1057 = !{!1058, !1058, i64 0}
!1058 = !{!"float32", !1059, i64 0}
!1059 = !{!"0x43176f0", !9, i64 0}
!1060 = !{!1061, !1061, i64 0}
!1061 = !{!"float32", !1062, i64 0}
!1062 = !{!"0xf336a90", !9, i64 0}
!1063 = !{!1064, !1064, i64 0}
!1064 = !{!"float32", !1065, i64 0}
!1065 = !{!"0xf264a00", !9, i64 0}
!1066 = !{!1067, !1067, i64 0}
!1067 = !{!"float32", !1068, i64 0}
!1068 = !{!"0x3b632f0", !9, i64 0}
!1069 = !{!1070, !1070, i64 0}
!1070 = !{!"float32", !1071, i64 0}
!1071 = !{!"0xf224b70", !9, i64 0}
!1072 = !{!1073, !1073, i64 0}
!1073 = !{!"float32", !1074, i64 0}
!1074 = !{!"0x3b059a0", !9, i64 0}
!1075 = !{!1076, !1076, i64 0}
!1076 = !{!"float32", !1077, i64 0}
!1077 = !{!"0xd4c7810", !9, i64 0}
!1078 = !{!1079, !1079, i64 0}
!1079 = !{!"float32", !1080, i64 0}
!1080 = !{!"0x3c701f0", !9, i64 0}
!1081 = !{!1082, !1082, i64 0}
!1082 = !{!"float32", !1083, i64 0}
!1083 = !{!"0x7d31490", !9, i64 0}
!1084 = !{!1085, !1085, i64 0}
!1085 = !{!"float32", !1086, i64 0}
!1086 = !{!"0x3c70230", !9, i64 0}
!1087 = !{!1088, !1088, i64 0}
!1088 = !{!"float32", !1089, i64 0}
!1089 = !{!"0xcbf3d20", !9, i64 0}
!1090 = !{!1091, !1091, i64 0}
!1091 = !{!"float32", !1092, i64 0}
!1092 = !{!"0xda58410", !9, i64 0}
!1093 = !{!1094, !1094, i64 0}
!1094 = !{!"float32", !1095, i64 0}
!1095 = !{!"0x97780f0", !9, i64 0}
!1096 = !{!1097, !1097, i64 0}
!1097 = !{!"float32", !1098, i64 0}
!1098 = !{!"0x4999d10", !9, i64 0}
!1099 = !{!1100, !1100, i64 0}
!1100 = !{!"float32", !1101, i64 0}
!1101 = !{!"0x38c8d70", !9, i64 0}
!1102 = !{!1103, !1103, i64 0}
!1103 = !{!"0x3948130.w1.b0", !1104, i64 0}
!1104 = !{!"0x3948130.w2.b0", !1105, i64 0}
!1105 = !{!"0x3948130.w4.b0", !1106, i64 0}
!1106 = !{!"0x3948130.w8.b0", !1107, i64 0}
!1107 = !{!"0x3948130.w16.b0", !1108, i64 0}
!1108 = !{!"0x3948130.w32.b0", !1109, i64 0}
!1109 = !{!"0x3948130.w64.b0", !1110, i64 0}
!1110 = !{!"0x3948130.w128.b0", !1111, i64 0}
!1111 = !{!"0x3948130.w256.b0", !1112, i64 0}
!1112 = !{!"0x3948130.w512.b0", !1113, i64 0}
!1113 = !{!"0x3948130.w1024.b0", !1114, i64 0}
!1114 = !{!"float32", !1115, i64 0}
!1115 = !{!"0x3948130", !9, i64 0}
!1116 = !{!1117, !1117, i64 0}
!1117 = !{!"float32", !1118, i64 0}
!1118 = !{!"0xf373070", !9, i64 0}
!1119 = !{!1120, !1120, i64 0}
!1120 = !{!"float32", !1121, i64 0}
!1121 = !{!"0xf3730b0", !9, i64 0}
!1122 = !{!1123, !1123, i64 0}
!1123 = !{!"float32", !1124, i64 0}
!1124 = !{!"0x390af30", !9, i64 0}
!1125 = !{!1126, !1126, i64 0}
!1126 = !{!"float32", !1127, i64 0}
!1127 = !{!"0x374a220", !9, i64 0}
!1128 = !{!1129, !1129, i64 0}
!1129 = !{!"float32", !1130, i64 0}
!1130 = !{!"0x3164800", !9, i64 0}
!1131 = !{!1132, !1132, i64 0}
!1132 = !{!"float32", !1133, i64 0}
!1133 = !{!"0x3effb10", !9, i64 0}
!1134 = !{!1135, !1135, i64 0}
!1135 = !{!"float32", !1136, i64 0}
!1136 = !{!"0xf2c6400", !9, i64 0}
!1137 = !{!1138, !1138, i64 0}
!1138 = !{!"0xf3ced60.w1.b0", !1139, i64 0}
!1139 = !{!"0xf3ced60.w2.b0", !1140, i64 0}
!1140 = !{!"0xf3ced60.w4.b0", !1141, i64 0}
!1141 = !{!"0xf3ced60.w8.b0", !1142, i64 0}
!1142 = !{!"0xf3ced60.w16.b0", !1143, i64 0}
!1143 = !{!"0xf3ced60.w32.b0", !1144, i64 0}
!1144 = !{!"0xf3ced60.w64.b0", !1145, i64 0}
!1145 = !{!"0xf3ced60.w128.b0", !1146, i64 0}
!1146 = !{!"0xf3ced60.w256.b0", !1147, i64 0}
!1147 = !{!"0xf3ced60.w512.b0", !1148, i64 0}
!1148 = !{!"0xf3ced60.w1024.b0", !1149, i64 0}
!1149 = !{!"float32", !1150, i64 0}
!1150 = !{!"0xf3ced60", !9, i64 0}
!1151 = !{!1152, !1152, i64 0}
!1152 = !{!"float32", !1153, i64 0}
!1153 = !{!"0x9795070", !9, i64 0}
!1154 = !{!1155, !1155, i64 0}
!1155 = !{!"float32", !1156, i64 0}
!1156 = !{!"0xf3ceda0", !9, i64 0}
!1157 = !{!1158, !1158, i64 0}
!1158 = !{!"float32", !1159, i64 0}
!1159 = !{!"0x5a4ad90", !9, i64 0}
!1160 = !{!1161, !1161, i64 0}
!1161 = !{!"float32", !1162, i64 0}
!1162 = !{!"0x5a4ae70", !9, i64 0}
!1163 = !{!1164, !1164, i64 0}
!1164 = !{!"float32", !1165, i64 0}
!1165 = !{!"0x3b2b3d0", !9, i64 0}
!1166 = !{!1167, !1167, i64 0}
!1167 = !{!"float32", !1168, i64 0}
!1168 = !{!"0xf2bc5b0", !9, i64 0}
!1169 = !{!1170, !1170, i64 0}
!1170 = !{!"0xe9b76f0.w1.b0", !1171, i64 0}
!1171 = !{!"0xe9b76f0.w2.b0", !1172, i64 0}
!1172 = !{!"0xe9b76f0.w4.b0", !1173, i64 0}
!1173 = !{!"0xe9b76f0.w8.b0", !1174, i64 0}
!1174 = !{!"0xe9b76f0.w16.b0", !1175, i64 0}
!1175 = !{!"0xe9b76f0.w32.b0", !1176, i64 0}
!1176 = !{!"0xe9b76f0.w64.b0", !1177, i64 0}
!1177 = !{!"0xe9b76f0.w128.b0", !1178, i64 0}
!1178 = !{!"0xe9b76f0.w256.b0", !1179, i64 0}
!1179 = !{!"0xe9b76f0.w512.b0", !1180, i64 0}
!1180 = !{!"0xe9b76f0.w1024.b0", !1181, i64 0}
!1181 = !{!"float32", !1182, i64 0}
!1182 = !{!"0xe9b76f0", !9, i64 0}
!1183 = !{!1184, !1184, i64 0}
!1184 = !{!"float32", !1185, i64 0}
!1185 = !{!"0x9786d80", !9, i64 0}
!1186 = !{!1187, !1187, i64 0}
!1187 = !{!"float32", !1188, i64 0}
!1188 = !{!"0xe9bd140", !9, i64 0}
!1189 = !{!1190, !1190, i64 0}
!1190 = !{!"0x42c4a40.w1.b0", !1191, i64 0}
!1191 = !{!"0x42c4a40.w2.b0", !1192, i64 0}
!1192 = !{!"0x42c4a40.w4.b0", !1193, i64 0}
!1193 = !{!"0x42c4a40.w8.b0", !1194, i64 0}
!1194 = !{!"0x42c4a40.w16.b0", !1195, i64 0}
!1195 = !{!"0x42c4a40.w32.b0", !1196, i64 0}
!1196 = !{!"0x42c4a40.w64.b0", !1197, i64 0}
!1197 = !{!"0x42c4a40.w128.b0", !1198, i64 0}
!1198 = !{!"0x42c4a40.w256.b0", !1199, i64 0}
!1199 = !{!"0x42c4a40.w512.b0", !1200, i64 0}
!1200 = !{!"0x42c4a40.w1024.b0", !1201, i64 0}
!1201 = !{!"float32", !1202, i64 0}
!1202 = !{!"0x42c4a40", !9, i64 0}
!1203 = !{!1204, !1204, i64 0}
!1204 = !{!"float32", !1205, i64 0}
!1205 = !{!"0x42cb7f0", !9, i64 0}
!1206 = !{!1207, !1207, i64 0}
!1207 = !{!"float32", !1208, i64 0}
!1208 = !{!"0x43018f0", !9, i64 0}
!1209 = !{!1210, !1210, i64 0}
!1210 = !{!"float32", !1211, i64 0}
!1211 = !{!"0x3bd3ff0", !9, i64 0}
!1212 = !{!1213, !1213, i64 0}
!1213 = !{!"float32", !1214, i64 0}
!1214 = !{!"0x6b9ede0", !9, i64 0}
!1215 = !{!1216, !1216, i64 0}
!1216 = !{!"float32", !1217, i64 0}
!1217 = !{!"0xf3aea00", !9, i64 0}
!1218 = !{!1219, !1219, i64 0}
!1219 = !{!"float32", !1220, i64 0}
!1220 = !{!"0xd49beb0", !9, i64 0}
!1221 = !{!1222, !1222, i64 0}
!1222 = !{!"float32", !1223, i64 0}
!1223 = !{!"0x115dac80", !9, i64 0}
!1224 = !{!1225, !1225, i64 0}
!1225 = !{!"float32", !1226, i64 0}
!1226 = !{!"0xf267710", !9, i64 0}
!1227 = !{!1228, !1228, i64 0}
!1228 = !{!"float32", !1229, i64 0}
!1229 = !{!"0xdb276c0", !9, i64 0}
!1230 = !{!1231, !1231, i64 0}
!1231 = !{!"float32", !1232, i64 0}
!1232 = !{!"0xdb35e50", !9, i64 0}
